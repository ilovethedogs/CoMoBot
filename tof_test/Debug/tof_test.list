
tof_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000074  08006628  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006628  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed35  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  0002edd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ffd  00000000  00000000  000328d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105dc  00000000  00000000  000558d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce5d4  00000000  00000000  00065eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  001344d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006470 	.word	0x08006470

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006470 	.word	0x08006470

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f004 f9b6 	bl	800493a <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000e4 	.word	0x200000e4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb49 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f869 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f931 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f905 	bl	80007fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f8d5 	bl	80007a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t bootState = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
	uint8_t boot[8] = {66, 79, 79, 84, 48, 13, 10, 0};
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <main+0xcc>)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
	while(bootState==0){
 8000606:	e010      	b.n	800062a <main+0x4e>
		VL53L1X_BootState(dev, &bootState);
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0xd0>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f107 020f 	add.w	r2, r7, #15
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fe53 	bl	80052be <VL53L1X_BootState>
		HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	230a      	movs	r3, #10
 800061c:	2208      	movs	r2, #8
 800061e:	4824      	ldr	r0, [pc, #144]	; (80006b0 <main+0xd4>)
 8000620:	f004 f98b 	bl	800493a <HAL_UART_Transmit>
		HAL_Delay(2);
 8000624:	2002      	movs	r0, #2
 8000626:	f000 fb99 	bl	8000d5c <HAL_Delay>
	while(bootState==0){
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0eb      	beq.n	8000608 <main+0x2c>
	}
	HAL_Delay(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fb93 	bl	8000d5c <HAL_Delay>
	VL53L1X_SensorInit(dev);
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0xd0>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fcf2 	bl	8005024 <VL53L1X_SensorInit>
	VL53L1X_SetInterruptPolarity(dev, 0);
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0xd0>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fd70 	bl	800512c <VL53L1X_SetInterruptPolarity>
	VL53L1X_StartRanging(dev);
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0xd0>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fdcd 	bl	80051f0 <VL53L1X_StartRanging>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t dataReady = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
	  while (dataReady == 0){
 800065a:	e009      	b.n	8000670 <main+0x94>
	  		  VL53L1X_CheckForDataReady(dev, &dataReady);
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0xd0>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	1cfa      	adds	r2, r7, #3
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fdf3 	bl	8005250 <VL53L1X_CheckForDataReady>
	  		  //HAL_UART_Transmit(&huart2, getting, 6, 10);
	  		  HAL_Delay(2);
 800066a:	2002      	movs	r0, #2
 800066c:	f000 fb76 	bl	8000d5c <HAL_Delay>
	  while (dataReady == 0){
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f2      	beq.n	800065c <main+0x80>
	  	  }
	  	  VL53L1X_GetDistance(dev, &dis);
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0xd0>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	490e      	ldr	r1, [pc, #56]	; (80006b4 <main+0xd8>)
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fe3d 	bl	80052fc <VL53L1X_GetDistance>
	  	  	  VL53L1X_ClearInterrupt(dev);
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <main+0xd0>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fd38 	bl	80050fc <VL53L1X_ClearInterrupt>
	  	  	printf("%d\r\n", dis);
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <main+0xd8>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0xdc>)
 8000696:	f004 ff5d 	bl	8005554 <iprintf>
	  	  		  dataReady = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	70fb      	strb	r3, [r7, #3]
	  	  		  HAL_Delay(50);
 800069e:	2032      	movs	r0, #50	; 0x32
 80006a0:	f000 fb5c 	bl	8000d5c <HAL_Delay>
	  while (dataReady == 0){
 80006a4:	e7e4      	b.n	8000670 <main+0x94>
 80006a6:	bf00      	nop
 80006a8:	08006490 	.word	0x08006490
 80006ac:	20000000 	.word	0x20000000
 80006b0:	200000e4 	.word	0x200000e4
 80006b4:	20000128 	.word	0x20000128
 80006b8:	08006488 	.word	0x08006488

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 ff3a 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemClock_Config+0xdc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xdc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xe0>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000730:	23b4      	movs	r3, #180	; 0xb4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fe0d 	bl	8004364 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 f8c2 	bl	80008d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f003 fa6c 	bl	8003c30 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 f8bb 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f003 faa5 	bl	8003cd0 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800078c:	f000 f8a4 	bl	80008d8 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f000 fdb7 	bl	8001350 <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 f876 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000090 	.word	0x20000090
 80007f4:	40005400 	.word	0x40005400
 80007f8:	00061a80 	.word	0x00061a80

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f004 f834 	bl	80048a0 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f84b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000e4 	.word	0x200000e4
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_GPIO_Init+0x84>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <MX_GPIO_Init+0x84>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <MX_GPIO_Init+0x84>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_GPIO_Init+0x84>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <MX_GPIO_Init+0x84>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fb0e 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <HAL_I2C_MspInit+0xa4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d13b      	bne.n	80009ce <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000982:	2304      	movs	r3, #4
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <HAL_I2C_MspInit+0xac>)
 800098e:	f000 fb4b 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_I2C_MspInit+0xa8>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	201f      	movs	r0, #31
 80009b4:	f000 fad1 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009b8:	201f      	movs	r0, #31
 80009ba:	f000 faea 	bl	8000f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2020      	movs	r0, #32
 80009c4:	f000 fac9 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009c8:	2020      	movs	r0, #32
 80009ca:	f000 fae2 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12b      	bne.n	8000a5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5a:	f000 fae5 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f92c 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <I2C1_EV_IRQHandler+0x10>)
 8000ace:	f001 f8a7 	bl	8001c20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000090 	.word	0x20000090

08000adc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <I2C1_ER_IRQHandler+0x10>)
 8000ae2:	f001 fa0e 	bl	8001f02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000090 	.word	0x20000090

08000af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f004 fc94 	bl	80054f0 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20020000 	.word	0x20020000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	2000012c 	.word	0x2000012c
 8000bfc:	20000248 	.word	0x20000248

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f004 fc53 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fcc1 	bl	80005dc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c68:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8000c6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c70:	20000244 	.word	0x20000244

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f94f 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe1a 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f967 	bl	8000fae <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f92f 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000004 	.word	0x20000004
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000008 	.word	0x20000008

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	20000130 	.word	0x20000130

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000130 	.word	0x20000130

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000000c 	.word	0x2000000c

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	; (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d004      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e00c      	b.n	8000ffe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0201 	bic.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e165      	b.n	8001310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8154 	bne.w	800130a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80ae 	beq.w	800130a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a58      	ldr	r2, [pc, #352]	; (800132c <HAL_GPIO_Init+0x304>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4e      	ldr	r2, [pc, #312]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x216>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <HAL_GPIO_Init+0x310>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x212>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_GPIO_Init+0x314>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4b      	ldr	r2, [pc, #300]	; (8001340 <HAL_GPIO_Init+0x318>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x20a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <HAL_GPIO_Init+0x31c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x206>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <HAL_GPIO_Init+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x202>
 8001226:	2306      	movs	r3, #6
 8001228:	e00c      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 800122a:	2307      	movs	r3, #7
 800122c:	e00a      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 800122e:	2305      	movs	r3, #5
 8001230:	e008      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 8001232:	2304      	movs	r3, #4
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 8001236:	2303      	movs	r3, #3
 8001238:	e004      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 800123a:	2302      	movs	r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x21c>
 8001242:	2300      	movs	r3, #0
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	f002 0203 	and.w	r2, r2, #3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4093      	lsls	r3, r2
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001254:	4935      	ldr	r1, [pc, #212]	; (800132c <HAL_GPIO_Init+0x304>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_GPIO_Init+0x324>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_GPIO_Init+0x324>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <HAL_GPIO_Init+0x324>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_GPIO_Init+0x324>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_GPIO_Init+0x324>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_GPIO_Init+0x324>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_GPIO_Init+0x324>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	f67f ae96 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40013800 	.word	0x40013800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40021400 	.word	0x40021400
 8001348:	40021800 	.word	0x40021800
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e12b      	b.n	80015ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fadc 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013b4:	f002 fd7e 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 80013b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <HAL_I2C_Init+0x274>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d807      	bhi.n	80013d4 <HAL_I2C_Init+0x84>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a80      	ldr	r2, [pc, #512]	; (80015c8 <HAL_I2C_Init+0x278>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf94      	ite	ls
 80013cc:	2301      	movls	r3, #1
 80013ce:	2300      	movhi	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	e006      	b.n	80013e2 <HAL_I2C_Init+0x92>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a7d      	ldr	r2, [pc, #500]	; (80015cc <HAL_I2C_Init+0x27c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	bf94      	ite	ls
 80013dc:	2301      	movls	r3, #1
 80013de:	2300      	movhi	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0e7      	b.n	80015ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4a78      	ldr	r2, [pc, #480]	; (80015d0 <HAL_I2C_Init+0x280>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9b      	lsrs	r3, r3, #18
 80013f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	430a      	orrs	r2, r1
 8001408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a6a      	ldr	r2, [pc, #424]	; (80015c4 <HAL_I2C_Init+0x274>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d802      	bhi.n	8001424 <HAL_I2C_Init+0xd4>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	e009      	b.n	8001438 <HAL_I2C_Init+0xe8>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_I2C_Init+0x284>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	3301      	adds	r3, #1
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	430b      	orrs	r3, r1
 800143e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800144a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	495c      	ldr	r1, [pc, #368]	; (80015c4 <HAL_I2C_Init+0x274>)
 8001454:	428b      	cmp	r3, r1
 8001456:	d819      	bhi.n	800148c <HAL_I2C_Init+0x13c>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e59      	subs	r1, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fbb1 f3f3 	udiv	r3, r1, r3
 8001466:	1c59      	adds	r1, r3, #1
 8001468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800146c:	400b      	ands	r3, r1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00a      	beq.n	8001488 <HAL_I2C_Init+0x138>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1e59      	subs	r1, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001480:	3301      	adds	r3, #1
 8001482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001486:	e051      	b.n	800152c <HAL_I2C_Init+0x1dc>
 8001488:	2304      	movs	r3, #4
 800148a:	e04f      	b.n	800152c <HAL_I2C_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <HAL_I2C_Init+0x168>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e58      	subs	r0, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	440b      	add	r3, r1
 80014a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e012      	b.n	80014de <HAL_I2C_Init+0x18e>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e58      	subs	r0, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	0099      	lsls	r1, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Init+0x196>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e022      	b.n	800152c <HAL_I2C_Init+0x1dc>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <HAL_I2C_Init+0x1bc>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e58      	subs	r0, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6859      	ldr	r1, [r3, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001500:	3301      	adds	r3, #1
 8001502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150a:	e00f      	b.n	800152c <HAL_I2C_Init+0x1dc>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	0099      	lsls	r1, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	6809      	ldr	r1, [r1, #0]
 8001530:	4313      	orrs	r3, r2
 8001532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800155a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6911      	ldr	r1, [r2, #16]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68d2      	ldr	r2, [r2, #12]
 8001566:	4311      	orrs	r1, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	000186a0 	.word	0x000186a0
 80015c8:	001e847f 	.word	0x001e847f
 80015cc:	003d08ff 	.word	0x003d08ff
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	10624dd3 	.word	0x10624dd3

080015d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	461a      	mov	r2, r3
 80015e4:	460b      	mov	r3, r1
 80015e6:	817b      	strh	r3, [r7, #10]
 80015e8:	4613      	mov	r3, r2
 80015ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff fbaa 	bl	8000d44 <HAL_GetTick>
 80015f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	f040 80e0 	bne.w	80017c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2319      	movs	r3, #25
 8001606:	2201      	movs	r2, #1
 8001608:	4970      	ldr	r1, [pc, #448]	; (80017cc <HAL_I2C_Master_Transmit+0x1f4>)
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f002 f8e6 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
 8001618:	e0d3      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_I2C_Master_Transmit+0x50>
 8001624:	2302      	movs	r3, #2
 8001626:	e0cc      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d007      	beq.n	800164e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2221      	movs	r2, #33	; 0x21
 8001662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2210      	movs	r2, #16
 800166a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	893a      	ldrh	r2, [r7, #8]
 800167e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001690:	8979      	ldrh	r1, [r7, #10]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f001 fea8 	bl	80033ec <I2C_MasterRequestWrite>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e08d      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016bc:	e066      	b.n	800178c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f002 f960 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d107      	bne.n	80016e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e06b      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b04      	cmp	r3, #4
 8001726:	d11b      	bne.n	8001760 <HAL_I2C_Master_Transmit+0x188>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d017      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	6a39      	ldr	r1, [r7, #32]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f002 f950 	bl	8003a0a <I2C_WaitOnBTFFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00d      	beq.n	800178c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2b04      	cmp	r3, #4
 8001776:	d107      	bne.n	8001788 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001786:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01a      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	d194      	bne.n	80016be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	00100002 	.word	0x00100002
 80017d0:	ffff0000 	.word	0xffff0000

080017d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	461a      	mov	r2, r3
 80017e0:	460b      	mov	r3, r1
 80017e2:	817b      	strh	r3, [r7, #10]
 80017e4:	4613      	mov	r3, r2
 80017e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff faac 	bl	8000d44 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b20      	cmp	r3, #32
 80017f8:	f040 820b 	bne.w	8001c12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2319      	movs	r3, #25
 8001802:	2201      	movs	r2, #1
 8001804:	497c      	ldr	r1, [pc, #496]	; (80019f8 <HAL_I2C_Master_Receive+0x224>)
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f001 ffe8 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
 8001814:	e1fe      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_I2C_Master_Receive+0x50>
 8001820:	2302      	movs	r3, #2
 8001822:	e1f7      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d007      	beq.n	800184a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001858:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2222      	movs	r2, #34	; 0x22
 800185e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2210      	movs	r2, #16
 8001866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	893a      	ldrh	r2, [r7, #8]
 800187a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a5c      	ldr	r2, [pc, #368]	; (80019fc <HAL_I2C_Master_Receive+0x228>)
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800188c:	8979      	ldrh	r1, [r7, #10]
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f001 fe2c 	bl	80034f0 <I2C_MasterRequestRead>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1b8      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e18c      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d11b      	bne.n	8001912 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e16c      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b02      	cmp	r3, #2
 8001918:	d11b      	bne.n	8001952 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	e14c      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001978:	e138      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	2b03      	cmp	r3, #3
 8001980:	f200 80f1 	bhi.w	8001b66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	2b01      	cmp	r3, #1
 800198a:	d123      	bne.n	80019d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f002 f8ad 	bl	8003af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e139      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019d2:	e10b      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d14e      	bne.n	8001a7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <HAL_I2C_Master_Receive+0x22c>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f001 fef8 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e10e      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
 80019f6:	bf00      	nop
 80019f8:	00100002 	.word	0x00100002
 80019fc:	ffff0000 	.word	0xffff0000
 8001a00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a78:	e0b8      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	2200      	movs	r2, #0
 8001a82:	4966      	ldr	r1, [pc, #408]	; (8001c1c <HAL_I2C_Master_Receive+0x448>)
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f001 fea9 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0bf      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	2200      	movs	r2, #0
 8001ade:	494f      	ldr	r1, [pc, #316]	; (8001c1c <HAL_I2C_Master_Receive+0x448>)
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f001 fe7b 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e091      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b64:	e042      	b.n	8001bec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 ffc0 	bl	8003af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e04c      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d118      	bne.n	8001bec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f aec2 	bne.w	800197a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	00010004 	.word	0x00010004

08001c20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d003      	beq.n	8001c58 <HAL_I2C_EV_IRQHandler+0x38>
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b40      	cmp	r3, #64	; 0x40
 8001c54:	f040 80c1 	bne.w	8001dda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_I2C_EV_IRQHandler+0x6e>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c78:	d003      	beq.n	8001c82 <HAL_I2C_EV_IRQHandler+0x62>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_EV_IRQHandler+0x66>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_I2C_EV_IRQHandler+0x68>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f000 8132 	beq.w	8001ef2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x92>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 ffa8 	bl	8003bfa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fd83 	bl	80027b6 <I2C_Master_SB>
 8001cb0:	e092      	b.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	0a5b      	lsrs	r3, r3, #9
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fdf9 	bl	80028c2 <I2C_Master_ADD10>
 8001cd0:	e082      	b.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0xd2>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	0a5b      	lsrs	r3, r3, #9
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fe13 	bl	8002916 <I2C_Master_ADDR>
 8001cf0:	e072      	b.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03b      	beq.n	8001d76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d0c:	f000 80f3 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	09db      	lsrs	r3, r3, #7
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00f      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f9f3 	bl	8002120 <I2C_MasterTransmit_TXE>
 8001d3a:	e04d      	b.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80d6 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	0a5b      	lsrs	r3, r3, #9
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80cf 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b21      	cmp	r3, #33	; 0x21
 8001d5c:	d103      	bne.n	8001d66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fa7a 	bl	8002258 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d64:	e0c7      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	f040 80c4 	bne.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fae8 	bl	8002344 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d74:	e0bf      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d84:	f000 80b7 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00f      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x194>
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	0a9b      	lsrs	r3, r3, #10
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x194>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fb5d 	bl	800246c <I2C_MasterReceive_RXNE>
 8001db2:	e011      	b.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 809a 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	0a5b      	lsrs	r3, r3, #9
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8093 	beq.w	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fc06 	bl	80025e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd6:	e08e      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dd8:	e08d      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e007      	b.n	8001dfc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d012      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0x20e>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	0a5b      	lsrs	r3, r3, #9
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e24:	69b9      	ldr	r1, [r7, #24]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 ffc4 	bl	8002db4 <I2C_Slave_ADDR>
 8001e2c:	e066      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0x22e>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	0a5b      	lsrs	r3, r3, #9
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fffe 	bl	8002e48 <I2C_Slave_STOPF>
 8001e4c:	e056      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	2b21      	cmp	r3, #33	; 0x21
 8001e52:	d002      	beq.n	8001e5a <HAL_I2C_EV_IRQHandler+0x23a>
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	2b29      	cmp	r3, #41	; 0x29
 8001e58:	d125      	bne.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	09db      	lsrs	r3, r3, #7
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00f      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x266>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a9b      	lsrs	r3, r3, #10
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x266>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 feda 	bl	8002c38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e84:	e039      	b.n	8001efa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d033      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x2da>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	0a5b      	lsrs	r3, r3, #9
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d02d      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 ff07 	bl	8002cb2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ea4:	e029      	b.n	8001efa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	0a9b      	lsrs	r3, r3, #10
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 ff12 	bl	8002cf4 <I2C_SlaveReceive_RXNE>
 8001ed0:	e014      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	0a5b      	lsrs	r3, r3, #9
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 ff40 	bl	8002d70 <I2C_SlaveReceive_BTF>
 8001ef0:	e004      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001ef2:	bf00      	nop
 8001ef4:	e002      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef6:	bf00      	nop
 8001ef8:	e000      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001efa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08a      	sub	sp, #40	; 0x28
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <HAL_I2C_ER_IRQHandler+0x4e>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	0a5b      	lsrs	r3, r3, #9
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_I2C_ER_IRQHandler+0x78>
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	0a9b      	lsrs	r3, r3, #10
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03f      	beq.n	8002006 <HAL_I2C_ER_IRQHandler+0x104>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d039      	beq.n	8002006 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f92:	7efb      	ldrb	r3, [r7, #27]
 8001f94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fac:	7ebb      	ldrb	r3, [r7, #26]
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d112      	bne.n	8001fd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b21      	cmp	r3, #33	; 0x21
 8001fbc:	d008      	beq.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b29      	cmp	r3, #41	; 0x29
 8001fc2:	d005      	beq.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xce>
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b28      	cmp	r3, #40	; 0x28
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b21      	cmp	r3, #33	; 0x21
 8001fce:	d103      	bne.n	8001fd8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f001 f869 	bl	80030a8 <I2C_Slave_AF>
 8001fd6:	e016      	b.n	8002006 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fea:	7efb      	ldrb	r3, [r7, #27]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d002      	beq.n	8001ff6 <HAL_I2C_ER_IRQHandler+0xf4>
 8001ff0:	7efb      	ldrb	r3, [r7, #27]
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d107      	bne.n	8002006 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002004:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	0adb      	lsrs	r3, r3, #11
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x12e>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800202e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f001 f8a0 	bl	8003188 <I2C_ITError>
  }
}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002136:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d150      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0xc8>
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b21      	cmp	r3, #33	; 0x21
 800214a:	d14d      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b08      	cmp	r3, #8
 8002150:	d01d      	beq.n	800218e <I2C_MasterTransmit_TXE+0x6e>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b20      	cmp	r3, #32
 8002156:	d01a      	beq.n	800218e <I2C_MasterTransmit_TXE+0x6e>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800215e:	d016      	beq.n	800218e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800216e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2211      	movs	r2, #17
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff62 	bl	8002050 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218c:	e060      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800219c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d107      	bne.n	80021d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff7d 	bl	80020d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d6:	e03b      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff35 	bl	8002050 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e6:	e033      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b21      	cmp	r3, #33	; 0x21
 80021ec:	d005      	beq.n	80021fa <I2C_MasterTransmit_TXE+0xda>
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d12d      	bne.n	8002250 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b22      	cmp	r3, #34	; 0x22
 80021f8:	d12a      	bne.n	8002250 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002214:	e01c      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d103      	bne.n	800222a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f88e 	bl	8002344 <I2C_MemoryTransmit_TXE_BTF>
}
 8002228:	e012      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800224e:	e7ff      	b.n	8002250 <I2C_MasterTransmit_TXE+0x130>
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b21      	cmp	r3, #33	; 0x21
 8002270:	d164      	bne.n	800233c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022a0:	e04c      	b.n	800233c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d01d      	beq.n	80022e4 <I2C_MasterTransmit_BTF+0x8c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d01a      	beq.n	80022e4 <I2C_MasterTransmit_BTF+0x8c>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022b4:	d016      	beq.n	80022e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2211      	movs	r2, #17
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff feb7 	bl	8002050 <HAL_I2C_MasterTxCpltCallback>
}
 80022e2:	e02b      	b.n	800233c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d107      	bne.n	800232e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fed2 	bl	80020d0 <HAL_I2C_MemTxCpltCallback>
}
 800232c:	e006      	b.n	800233c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fe8a 	bl	8002050 <HAL_I2C_MasterTxCpltCallback>
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11d      	bne.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10b      	bne.n	800237c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800237a:	e073      	b.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002380:	b29b      	uxth	r3, r3
 8002382:	121b      	asrs	r3, r3, #8
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002396:	e065      	b.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10b      	bne.n	80023b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023b6:	e055      	b.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d151      	bne.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b22      	cmp	r3, #34	; 0x22
 80023c4:	d10d      	bne.n	80023e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023e0:	e040      	b.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b21      	cmp	r3, #33	; 0x21
 80023f0:	d112      	bne.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002416:	e025      	b.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d120      	bne.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b21      	cmp	r3, #33	; 0x21
 8002426:	d11d      	bne.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002436:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fe36 	bl	80020d0 <HAL_I2C_MemTxCpltCallback>
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b22      	cmp	r3, #34	; 0x22
 800247e:	f040 80ac 	bne.w	80025da <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d921      	bls.n	80024d4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b03      	cmp	r3, #3
 80024be:	f040 808c 	bne.w	80025da <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80024d2:	e082      	b.n	80025da <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d075      	beq.n	80025c8 <I2C_MasterReceive_RXNE+0x15c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <I2C_MasterReceive_RXNE+0x7c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d16f      	bne.n	80025c8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 facf 	bl	8003a8c <I2C_WaitOnSTOPRequestThroughIT>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d142      	bne.n	800257a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002502:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002512:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d10a      	bne.n	8002564 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff fdc1 	bl	80020e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002562:	e03a      	b.n	80025da <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2212      	movs	r2, #18
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fd76 	bl	8002064 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002578:	e02f      	b.n	80025da <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002588:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fd99 	bl	80020f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025c6:	e008      	b.n	80025da <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d6:	605a      	str	r2, [r3, #4]
}
 80025d8:	e7ff      	b.n	80025da <I2C_MasterReceive_RXNE+0x16e>
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d11b      	bne.n	8002632 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002608:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002630:	e0bd      	b.n	80027ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d129      	bne.n	8002690 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00a      	beq.n	8002668 <I2C_MasterReceive_BTF+0x86>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d007      	beq.n	8002668 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800268e:	e08e      	b.n	80027ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d176      	bne.n	8002788 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d002      	beq.n	80026a6 <I2C_MasterReceive_BTF+0xc4>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e019      	b.n	80026ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d002      	beq.n	80026c4 <I2C_MasterReceive_BTF+0xe2>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d108      	bne.n	80026d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e00a      	b.n	80026ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d007      	beq.n	80026ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002746:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d10a      	bne.n	8002772 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fcba 	bl	80020e4 <HAL_I2C_MemRxCpltCallback>
}
 8002770:	e01d      	b.n	80027ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2212      	movs	r2, #18
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fc6f 	bl	8002064 <HAL_I2C_MasterRxCpltCallback>
}
 8002786:	e012      	b.n	80027ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d117      	bne.n	80027fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027e4:	e067      	b.n	80028b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
}
 80027f8:	e05d      	b.n	80028b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002802:	d133      	bne.n	800286c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b21      	cmp	r3, #33	; 0x21
 800280e:	d109      	bne.n	8002824 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e008      	b.n	8002836 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <I2C_Master_SB+0x92>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <I2C_Master_SB+0x100>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02d      	beq.n	80028b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002868:	605a      	str	r2, [r3, #4]
}
 800286a:	e024      	b.n	80028b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10e      	bne.n	8002892 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	b29b      	uxth	r3, r3
 800287a:	11db      	asrs	r3, r3, #7
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0306 	and.w	r3, r3, #6
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f063 030f 	orn	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]
}
 8002890:	e011      	b.n	80028b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10d      	bne.n	80028b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	b29b      	uxth	r3, r3
 80028a0:	11db      	asrs	r3, r3, #7
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 0306 	and.w	r3, r3, #6
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f063 030e 	orn	r3, r3, #14
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <I2C_Master_ADD10+0x26>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d108      	bne.n	80028fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <I2C_Master_ADD10+0x48>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002908:	605a      	str	r2, [r3, #4]
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002916:	b480      	push	{r7}
 8002918:	b091      	sub	sp, #68	; 0x44
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b22      	cmp	r3, #34	; 0x22
 800293e:	f040 8169 	bne.w	8002c14 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <I2C_Master_ADDR+0x54>
 800294a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d10b      	bne.n	800296a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	e160      	b.n	8002c2c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <I2C_Master_ADDR+0x98>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800297a:	d118      	bne.n	80029ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
 80029ac:	e13e      	b.n	8002c2c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e115      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	f040 808a 	bne.w	8002b00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029f2:	d137      	bne.n	8002a64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a12:	d113      	bne.n	8002a3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	e0e7      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e0d3      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d02e      	beq.n	8002ac8 <I2C_Master_ADDR+0x1b2>
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d02b      	beq.n	8002ac8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	2b12      	cmp	r3, #18
 8002a74:	d102      	bne.n	8002a7c <I2C_Master_ADDR+0x166>
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d125      	bne.n	8002ac8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d00e      	beq.n	8002aa0 <I2C_Master_ADDR+0x18a>
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d00b      	beq.n	8002aa0 <I2C_Master_ADDR+0x18a>
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d008      	beq.n	8002aa0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	e0a1      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e085      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d14d      	bne.n	8002ba6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d016      	beq.n	8002b3e <I2C_Master_ADDR+0x228>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d013      	beq.n	8002b3e <I2C_Master_ADDR+0x228>
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d010      	beq.n	8002b3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e007      	b.n	8002b4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d117      	bne.n	8002b8e <I2C_Master_ADDR+0x278>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b64:	d00b      	beq.n	8002b7e <I2C_Master_ADDR+0x268>
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d008      	beq.n	8002b7e <I2C_Master_ADDR+0x268>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d005      	beq.n	8002b7e <I2C_Master_ADDR+0x268>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d002      	beq.n	8002b7e <I2C_Master_ADDR+0x268>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d107      	bne.n	8002b8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	e032      	b.n	8002c0c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc4:	d117      	bne.n	8002bf6 <I2C_Master_ADDR+0x2e0>
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bcc:	d00b      	beq.n	8002be6 <I2C_Master_ADDR+0x2d0>
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d008      	beq.n	8002be6 <I2C_Master_ADDR+0x2d0>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d005      	beq.n	8002be6 <I2C_Master_ADDR+0x2d0>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d002      	beq.n	8002be6 <I2C_Master_ADDR+0x2d0>
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d107      	bne.n	8002bf6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bf4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c12:	e00b      	b.n	8002c2c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
}
 8002c2a:	e7ff      	b.n	8002c2c <I2C_Master_ADDR+0x316>
 8002c2c:	bf00      	nop
 8002c2e:	3744      	adds	r7, #68	; 0x44
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d02b      	beq.n	8002caa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d114      	bne.n	8002caa <I2C_SlaveTransmit_TXE+0x72>
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b29      	cmp	r3, #41	; 0x29
 8002c84:	d111      	bne.n	8002caa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2228      	movs	r2, #40	; 0x28
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff f9e7 	bl	8002078 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d011      	beq.n	8002ce8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02c      	beq.n	8002d68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d114      	bne.n	8002d68 <I2C_SlaveReceive_RXNE+0x74>
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b2a      	cmp	r3, #42	; 0x2a
 8002d42:	d111      	bne.n	8002d68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2222      	movs	r2, #34	; 0x22
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2228      	movs	r2, #40	; 0x28
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff f992 	bl	800208c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dce:	2b28      	cmp	r3, #40	; 0x28
 8002dd0:	d127      	bne.n	8002e22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	09db      	lsrs	r3, r3, #7
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	81bb      	strh	r3, [r7, #12]
 8002e04:	e002      	b.n	8002e0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e14:	89ba      	ldrh	r2, [r7, #12]
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff f940 	bl	80020a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e20:	e00e      	b.n	8002e40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea4:	d172      	bne.n	8002f8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b22      	cmp	r3, #34	; 0x22
 8002eaa:	d002      	beq.n	8002eb2 <I2C_Slave_STOPF+0x6a>
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb0:	d135      	bne.n	8002f1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe f88d 	bl	800100a <HAL_DMA_GetState>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d049      	beq.n	8002f8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <I2C_Slave_STOPF+0x258>)
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f85f 	bl	8000fc6 <HAL_DMA_Abort_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03d      	beq.n	8002f8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f1c:	e035      	b.n	8002f8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe f857 	bl	800100a <HAL_DMA_GetState>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d014      	beq.n	8002f8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <I2C_Slave_STOPF+0x258>)
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe f829 	bl	8000fc6 <HAL_DMA_Abort_IT>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f84:	4610      	mov	r0, r2
 8002f86:	4798      	blx	r3
 8002f88:	e000      	b.n	8002f8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03e      	beq.n	8003014 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d112      	bne.n	8002fca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d112      	bne.n	8002ffe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8b3 	bl	8003188 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003022:	e039      	b.n	8003098 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b2a      	cmp	r3, #42	; 0x2a
 8003028:	d109      	bne.n	800303e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2228      	movs	r2, #40	; 0x28
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff f827 	bl	800208c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b28      	cmp	r3, #40	; 0x28
 8003048:	d111      	bne.n	800306e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <I2C_Slave_STOPF+0x25c>)
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff f828 	bl	80020bc <HAL_I2C_ListenCpltCallback>
}
 800306c:	e014      	b.n	8003098 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b22      	cmp	r3, #34	; 0x22
 8003074:	d002      	beq.n	800307c <I2C_Slave_STOPF+0x234>
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b22      	cmp	r3, #34	; 0x22
 800307a:	d10d      	bne.n	8003098 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fffa 	bl	800208c <HAL_I2C_SlaveRxCpltCallback>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	0800368d 	.word	0x0800368d
 80030a4:	ffff0000 	.word	0xffff0000

080030a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d002      	beq.n	80030ca <I2C_Slave_AF+0x22>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d129      	bne.n	800311e <I2C_Slave_AF+0x76>
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b28      	cmp	r3, #40	; 0x28
 80030ce:	d126      	bne.n	800311e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <I2C_Slave_AF+0xdc>)
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe ffd0 	bl	80020bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800311c:	e02e      	b.n	800317c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b21      	cmp	r3, #33	; 0x21
 8003122:	d126      	bne.n	8003172 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <I2C_Slave_AF+0xdc>)
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2221      	movs	r2, #33	; 0x21
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800314e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003158:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe ff84 	bl	8002078 <HAL_I2C_SlaveTxCpltCallback>
}
 8003170:	e004      	b.n	800317c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	ffff0000 	.word	0xffff0000

08003188 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d002      	beq.n	80031ac <I2C_ITError+0x24>
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d10a      	bne.n	80031c2 <I2C_ITError+0x3a>
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b22      	cmp	r3, #34	; 0x22
 80031b0:	d107      	bne.n	80031c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031c8:	2b28      	cmp	r3, #40	; 0x28
 80031ca:	d107      	bne.n	80031dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2228      	movs	r2, #40	; 0x28
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031da:	e015      	b.n	8003208 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d00a      	beq.n	8003202 <I2C_ITError+0x7a>
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b60      	cmp	r3, #96	; 0x60
 80031f0:	d007      	beq.n	8003202 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003216:	d162      	bne.n	80032de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d020      	beq.n	8003278 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <I2C_ITError+0x25c>)
 800323c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd febf 	bl	8000fc6 <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8089 	beq.w	8003362 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003272:	4610      	mov	r0, r2
 8003274:	4798      	blx	r3
 8003276:	e074      	b.n	8003362 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	4a59      	ldr	r2, [pc, #356]	; (80033e4 <I2C_ITError+0x25c>)
 800327e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fe9e 	bl	8000fc6 <HAL_DMA_Abort_IT>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d068      	beq.n	8003362 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d10b      	bne.n	80032b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
 80032dc:	e041      	b.n	8003362 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b60      	cmp	r3, #96	; 0x60
 80032e8:	d125      	bne.n	8003336 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d10b      	bne.n	800331e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe feec 	bl	800210c <HAL_I2C_AbortCpltCallback>
 8003334:	e015      	b.n	8003362 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d10b      	bne.n	800335c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe fecb 	bl	80020f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10e      	bne.n	8003390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d113      	bne.n	80033dc <I2C_ITError+0x254>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b28      	cmp	r3, #40	; 0x28
 80033b8:	d110      	bne.n	80033dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <I2C_ITError+0x260>)
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fe fe70 	bl	80020bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	0800368d 	.word	0x0800368d
 80033e8:	ffff0000 	.word	0xffff0000

080033ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d006      	beq.n	8003416 <I2C_MasterRequestWrite+0x2a>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d003      	beq.n	8003416 <I2C_MasterRequestWrite+0x2a>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e00b      	b.n	8003440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	2b12      	cmp	r3, #18
 800342e:	d107      	bne.n	8003440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f9c5 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003466:	d103      	bne.n	8003470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e035      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347c:	d108      	bne.n	8003490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e01b      	b.n	80034c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003490:	897b      	ldrh	r3, [r7, #10]
 8003492:	11db      	asrs	r3, r3, #7
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0306 	and.w	r3, r3, #6
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f063 030f 	orn	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <I2C_MasterRequestWrite+0xfc>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f9eb 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e010      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <I2C_MasterRequestWrite+0x100>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f9db 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	00010008 	.word	0x00010008
 80034ec:	00010002 	.word	0x00010002

080034f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003514:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d006      	beq.n	800352a <I2C_MasterRequestRead+0x3a>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d003      	beq.n	800352a <I2C_MasterRequestRead+0x3a>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003528:	d108      	bne.n	800353c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e00b      	b.n	8003554 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	2b11      	cmp	r3, #17
 8003542:	d107      	bne.n	8003554 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f93b 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d103      	bne.n	8003584 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e079      	b.n	800367c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d108      	bne.n	80035a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e05f      	b.n	8003664 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	11db      	asrs	r3, r3, #7
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0306 	and.w	r3, r3, #6
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f063 030f 	orn	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4930      	ldr	r1, [pc, #192]	; (8003684 <I2C_MasterRequestRead+0x194>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f961 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e054      	b.n	800367c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d2:	897b      	ldrh	r3, [r7, #10]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4929      	ldr	r1, [pc, #164]	; (8003688 <I2C_MasterRequestRead+0x198>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f951 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e044      	b.n	800367c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f8d9 	bl	80037dc <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363e:	d103      	bne.n	8003648 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e017      	b.n	800367c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800364c:	897b      	ldrh	r3, [r7, #10]
 800364e:	11db      	asrs	r3, r3, #7
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0306 	and.w	r3, r3, #6
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f063 030e 	orn	r3, r3, #14
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4907      	ldr	r1, [pc, #28]	; (8003688 <I2C_MasterRequestRead+0x198>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f90d 	bl	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010008 	.word	0x00010008
 8003688:	00010002 	.word	0x00010002

0800368c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <I2C_DMAAbort+0x148>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	08db      	lsrs	r3, r3, #3
 80036ac:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <I2C_DMAAbort+0x14c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a1a      	lsrs	r2, r3, #8
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00da      	lsls	r2, r3, #3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80036d2:	e00a      	b.n	80036ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e8:	d0ea      	beq.n	80036c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	2200      	movs	r2, #0
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	2200      	movs	r2, #0
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	2200      	movs	r2, #0
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d10e      	bne.n	800377a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7fe fcca 	bl	800210c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003778:	e027      	b.n	80037ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003780:	2b28      	cmp	r3, #40	; 0x28
 8003782:	d117      	bne.n	80037b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2228      	movs	r2, #40	; 0x28
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037b2:	e007      	b.n	80037c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037c4:	6978      	ldr	r0, [r7, #20]
 80037c6:	f7fe fc97 	bl	80020f8 <HAL_I2C_ErrorCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000004 	.word	0x20000004
 80037d8:	14f8b589 	.word	0x14f8b589

080037dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ec:	e025      	b.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d021      	beq.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fd faa5 	bl	8000d44 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e023      	b.n	8003882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10d      	bne.n	8003860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	e00c      	b.n	800387a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d0b6      	beq.n	80037ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003898:	e051      	b.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d123      	bne.n	80038f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e046      	b.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d021      	beq.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fd fa23 	bl	8000d44 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e020      	b.n	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10c      	bne.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e00b      	b.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d18d      	bne.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003994:	e02d      	b.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f900 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e02d      	b.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d021      	beq.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fd f9c9 	bl	8000d44 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d1ca      	bne.n	8003996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a16:	e02d      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f8bf 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e02d      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d021      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fd f988 	bl	8000d44 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d1ca      	bne.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	4a13      	ldr	r2, [pc, #76]	; (8003aec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	0a1a      	lsrs	r2, r3, #8
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e008      	b.n	8003adc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d0e9      	beq.n	8003aae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	14f8b589 	.word	0x14f8b589

08003af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003afc:	e042      	b.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d119      	bne.n	8003b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0210 	mvn.w	r2, #16
 8003b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e029      	b.n	8003b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b40:	f7fd f900 	bl	8000d44 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e007      	b.n	8003b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d1b5      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d11b      	bne.n	8003bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c0a:	d103      	bne.n	8003c14 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c12:	e007      	b.n	8003c24 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c1c:	d102      	bne.n	8003c24 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2208      	movs	r2, #8
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7fd f872 	bl	8000d44 <HAL_GetTick>
 8003c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c62:	e009      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c64:	f7fd f86e 	bl	8000d44 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c72:	d901      	bls.n	8003c78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e01f      	b.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d1ee      	bne.n	8003c64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c8c:	f7fd f85a 	bl	8000d44 <HAL_GetTick>
 8003c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c92:	e009      	b.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c94:	f7fd f856 	bl	8000d44 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca2:	d901      	bls.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e007      	b.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	420e0040 	.word	0x420e0040
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	420e0044 	.word	0x420e0044

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cc      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d90c      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a52      	ldr	r2, [pc, #328]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d044      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d119      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e06f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e067      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4934      	ldr	r1, [pc, #208]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fc ffc0 	bl	8000d44 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fc ffbc 	bl	8000d44 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d20c      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f855 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc ff20 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	08006498 	.word	0x08006498
 8003e94:	20000004 	.word	0x20000004
 8003e98:	20000008 	.word	0x20000008

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080064a8 	.word	0x080064a8

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	080064a8 	.word	0x080064a8

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b0ae      	sub	sp, #184	; 0xb8
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2a:	4bcb      	ldr	r3, [pc, #812]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	f200 8206 	bhi.w	8004344 <HAL_RCC_GetSysClockFreq+0x440>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004345 	.word	0x08004345
 8003f48:	08004345 	.word	0x08004345
 8003f4c:	08004345 	.word	0x08004345
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08004345 	.word	0x08004345
 8003f58:	08004345 	.word	0x08004345
 8003f5c:	08004345 	.word	0x08004345
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08004345 	.word	0x08004345
 8003f68:	08004345 	.word	0x08004345
 8003f6c:	08004345 	.word	0x08004345
 8003f70:	08004175 	.word	0x08004175
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4bb9      	ldr	r3, [pc, #740]	; (800425c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f7a:	e1e7      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7c:	4bb8      	ldr	r3, [pc, #736]	; (8004260 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f82:	e1e3      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4bb4      	ldr	r3, [pc, #720]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f90:	4bb1      	ldr	r3, [pc, #708]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d071      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4bae      	ldr	r3, [pc, #696]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fa8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	0159      	lsls	r1, r3, #5
 8003fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd4:	0150      	lsls	r0, r2, #5
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4621      	mov	r1, r4
 8003fdc:	1a51      	subs	r1, r2, r1
 8003fde:	6439      	str	r1, [r7, #64]	; 0x40
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	018b      	lsls	r3, r1, #6
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffe:	4641      	mov	r1, r8
 8004000:	018a      	lsls	r2, r1, #6
 8004002:	4641      	mov	r1, r8
 8004004:	1a51      	subs	r1, r2, r1
 8004006:	63b9      	str	r1, [r7, #56]	; 0x38
 8004008:	4649      	mov	r1, r9
 800400a:	eb63 0301 	sbc.w	r3, r3, r1
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800401c:	4649      	mov	r1, r9
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4641      	mov	r1, r8
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4641      	mov	r1, r8
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4622      	mov	r2, r4
 8004032:	189b      	adds	r3, r3, r2
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
 8004036:	462b      	mov	r3, r5
 8004038:	460a      	mov	r2, r1
 800403a:	eb42 0303 	adc.w	r3, r2, r3
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800404c:	4629      	mov	r1, r5
 800404e:	024b      	lsls	r3, r1, #9
 8004050:	4621      	mov	r1, r4
 8004052:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004056:	4621      	mov	r1, r4
 8004058:	024a      	lsls	r2, r1, #9
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800406c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004070:	f7fc f91e 	bl	80002b0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800407e:	e067      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	67bb      	str	r3, [r7, #120]	; 0x78
 800409a:	2300      	movs	r3, #0
 800409c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800409e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4621      	mov	r1, r4
 80040bc:	1a51      	subs	r1, r2, r1
 80040be:	62b9      	str	r1, [r7, #40]	; 0x28
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb63 0301 	sbc.w	r3, r3, r1
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80040d4:	4649      	mov	r1, r9
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040de:	4641      	mov	r1, r8
 80040e0:	018a      	lsls	r2, r1, #6
 80040e2:	4641      	mov	r1, r8
 80040e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e8:	4649      	mov	r1, r9
 80040ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004102:	4692      	mov	sl, r2
 8004104:	469b      	mov	fp, r3
 8004106:	4623      	mov	r3, r4
 8004108:	eb1a 0303 	adds.w	r3, sl, r3
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	462b      	mov	r3, r5
 8004110:	eb4b 0303 	adc.w	r3, fp, r3
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004122:	4629      	mov	r1, r5
 8004124:	028b      	lsls	r3, r1, #10
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800412c:	4621      	mov	r1, r4
 800412e:	028a      	lsls	r2, r1, #10
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004138:	2200      	movs	r2, #0
 800413a:	673b      	str	r3, [r7, #112]	; 0x70
 800413c:	677a      	str	r2, [r7, #116]	; 0x74
 800413e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004142:	f7fc f8b5 	bl	80002b0 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4613      	mov	r3, r2
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004172:	e0eb      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004174:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d06b      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	2200      	movs	r2, #0
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
 8004196:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	663b      	str	r3, [r7, #96]	; 0x60
 80041a0:	2300      	movs	r3, #0
 80041a2:	667b      	str	r3, [r7, #100]	; 0x64
 80041a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ba:	0150      	lsls	r0, r2, #5
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4621      	mov	r1, r4
 80041c2:	1a51      	subs	r1, r2, r1
 80041c4:	61b9      	str	r1, [r7, #24]
 80041c6:	4629      	mov	r1, r5
 80041c8:	eb63 0301 	sbc.w	r3, r3, r1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041da:	4659      	mov	r1, fp
 80041dc:	018b      	lsls	r3, r1, #6
 80041de:	4651      	mov	r1, sl
 80041e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e4:	4651      	mov	r1, sl
 80041e6:	018a      	lsls	r2, r1, #6
 80041e8:	4651      	mov	r1, sl
 80041ea:	ebb2 0801 	subs.w	r8, r2, r1
 80041ee:	4659      	mov	r1, fp
 80041f0:	eb63 0901 	sbc.w	r9, r3, r1
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004204:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004208:	4690      	mov	r8, r2
 800420a:	4699      	mov	r9, r3
 800420c:	4623      	mov	r3, r4
 800420e:	eb18 0303 	adds.w	r3, r8, r3
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	462b      	mov	r3, r5
 8004216:	eb49 0303 	adc.w	r3, r9, r3
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004228:	4629      	mov	r1, r5
 800422a:	024b      	lsls	r3, r1, #9
 800422c:	4621      	mov	r1, r4
 800422e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004232:	4621      	mov	r1, r4
 8004234:	024a      	lsls	r2, r1, #9
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800423e:	2200      	movs	r2, #0
 8004240:	65bb      	str	r3, [r7, #88]	; 0x58
 8004242:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004248:	f7fc f832 	bl	80002b0 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4613      	mov	r3, r2
 8004252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004256:	e065      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x420>
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <HAL_RCC_GetSysClockFreq+0x458>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	4618      	mov	r0, r3
 800426e:	4611      	mov	r1, r2
 8004270:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
 8004276:	2300      	movs	r3, #0
 8004278:	657b      	str	r3, [r7, #84]	; 0x54
 800427a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004290:	0150      	lsls	r0, r2, #5
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4641      	mov	r1, r8
 8004298:	1a51      	subs	r1, r2, r1
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	4649      	mov	r1, r9
 800429e:	eb63 0301 	sbc.w	r3, r3, r1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042b0:	4659      	mov	r1, fp
 80042b2:	018b      	lsls	r3, r1, #6
 80042b4:	4651      	mov	r1, sl
 80042b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ba:	4651      	mov	r1, sl
 80042bc:	018a      	lsls	r2, r1, #6
 80042be:	4651      	mov	r1, sl
 80042c0:	1a54      	subs	r4, r2, r1
 80042c2:	4659      	mov	r1, fp
 80042c4:	eb63 0501 	sbc.w	r5, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	464b      	mov	r3, r9
 80042e4:	eb45 0303 	adc.w	r3, r5, r3
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f6:	4629      	mov	r1, r5
 80042f8:	028b      	lsls	r3, r1, #10
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004300:	4621      	mov	r1, r4
 8004302:	028a      	lsls	r2, r1, #10
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800430c:	2200      	movs	r2, #0
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004310:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004312:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004316:	f7fb ffcb 	bl	80002b0 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4613      	mov	r3, r2
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_GetSysClockFreq+0x458>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0f1b      	lsrs	r3, r3, #28
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004342:	e003      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800434a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004350:	4618      	mov	r0, r3
 8004352:	37b8      	adds	r7, #184	; 0xb8
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400

08004364 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e28d      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8083 	beq.w	800448a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b04      	cmp	r3, #4
 800438e:	d019      	beq.n	80043c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004390:	4b91      	ldr	r3, [pc, #580]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004398:	2b08      	cmp	r3, #8
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800439c:	4b8e      	ldr	r3, [pc, #568]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a8:	d00c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d112      	bne.n	80043dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c2:	d10b      	bne.n	80043dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	4b84      	ldr	r3, [pc, #528]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05b      	beq.n	8004488 <HAL_RCC_OscConfig+0x124>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d157      	bne.n	8004488 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e25a      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x90>
 80043e6:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7b      	ldr	r2, [pc, #492]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e01d      	b.n	8004430 <HAL_RCC_OscConfig+0xcc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0xb4>
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0xcc>
 8004418:	4b6f      	ldr	r3, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6e      	ldr	r2, [pc, #440]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6b      	ldr	r2, [pc, #428]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc fc84 	bl	8000d44 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fc fc80 	bl	8000d44 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e21f      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0xdc>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fc fc70 	bl	8000d44 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fc fc6c 	bl	8000d44 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e20b      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x104>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d06f      	beq.n	8004576 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004496:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d017      	beq.n	80044d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d105      	bne.n	80044ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x186>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1d3      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4937      	ldr	r1, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x278>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fc fc19 	bl	8000d44 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fc fc15 	bl	8000d44 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1b4      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4925      	ldr	r1, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x278>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fbf8 	bl	8000d44 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fc fbf4 	bl	8000d44 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e193      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d036      	beq.n	80045f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCC_OscConfig+0x27c>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fc fbd8 	bl	8000d44 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fc fbd4 	bl	8000d44 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e173      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x234>
 80045b6:	e01b      	b.n	80045f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fc fbc1 	bl	8000d44 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fc fbbd 	bl	8000d44 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e15c      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b8a      	ldr	r3, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b7f      	ldr	r3, [pc, #508]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b7c      	ldr	r3, [pc, #496]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fc fb7d 	bl	8000d44 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fc fb79 	bl	8000d44 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e118      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x31e>
 8004674:	4b66      	ldr	r3, [pc, #408]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a65      	ldr	r2, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x358>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x340>
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5d      	ldr	r2, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x358>
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fc fb3e 	bl	8000d44 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fc fb3a 	bl	8000d44 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0d7      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x368>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fc fb28 	bl	8000d44 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fc fb24 	bl	8000d44 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0c1      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b40      	ldr	r3, [pc, #256]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80ad 	beq.w	8004890 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d060      	beq.n	8004804 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d145      	bne.n	80047d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fc faf8 	bl	8000d44 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fc faf4 	bl	8000d44 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e093      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	491b      	ldr	r1, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc fac9 	bl	8000d44 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fc fac5 	bl	8000d44 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e064      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x452>
 80047d4:	e05c      	b.n	8004890 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fc fab2 	bl	8000d44 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fc faae 	bl	8000d44 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e04d      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x480>
 8004802:	e045      	b.n	8004890 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e040      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
 8004818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_RCC_OscConfig+0x538>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d030      	beq.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d129      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d122      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004854:	4293      	cmp	r3, r2
 8004856:	d119      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	3b01      	subs	r3, #1
 8004866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d10f      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e03f      	b.n	8004932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc f88c 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f929 	bl	8004b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b08a      	sub	sp, #40	; 0x28
 800493e:	af02      	add	r7, sp, #8
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	d17c      	bne.n	8004a54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit+0x2c>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e075      	b.n	8004a56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x3e>
 8004974:	2302      	movs	r3, #2
 8004976:	e06e      	b.n	8004a56 <HAL_UART_Transmit+0x11c>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2221      	movs	r2, #33	; 0x21
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498e:	f7fc f9d9 	bl	8000d44 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d108      	bne.n	80049bc <HAL_UART_Transmit+0x82>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e003      	b.n	80049c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049cc:	e02a      	b.n	8004a24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f840 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e036      	b.n	8004a56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3302      	adds	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e007      	b.n	8004a16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3301      	adds	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1cf      	bne.n	80049ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2140      	movs	r1, #64	; 0x40
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f810 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b090      	sub	sp, #64	; 0x40
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	e050      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d04c      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7e:	f7fc f961 	bl	8000d44 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d241      	bcs.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aae:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae2:	623a      	str	r2, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d09f      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3740      	adds	r7, #64	; 0x40
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b0c0      	sub	sp, #256	; 0x100
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	68d9      	ldr	r1, [r3, #12]
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	ea40 0301 	orr.w	r3, r0, r1
 8004b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b94:	f021 010c 	bic.w	r1, r1, #12
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	6999      	ldr	r1, [r3, #24]
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	ea40 0301 	orr.w	r3, r0, r1
 8004bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b8f      	ldr	r3, [pc, #572]	; (8004e08 <UART_SetConfig+0x2cc>)
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0xa0>
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b8d      	ldr	r3, [pc, #564]	; (8004e0c <UART_SetConfig+0x2d0>)
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d104      	bne.n	8004be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7ff f97e 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8004be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004be4:	e003      	b.n	8004bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004be6:	f7ff f965 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8004bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	f040 810c 	bne.w	8004e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c0e:	4622      	mov	r2, r4
 8004c10:	462b      	mov	r3, r5
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c16:	415b      	adcs	r3, r3
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c1e:	4621      	mov	r1, r4
 8004c20:	eb12 0801 	adds.w	r8, r2, r1
 8004c24:	4629      	mov	r1, r5
 8004c26:	eb43 0901 	adc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	eb49 0303 	adc.w	r3, r9, r3
 8004c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	18db      	adds	r3, r3, r3
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c70:	4613      	mov	r3, r2
 8004c72:	eb42 0303 	adc.w	r3, r2, r3
 8004c76:	657b      	str	r3, [r7, #84]	; 0x54
 8004c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c80:	f7fb fb16 	bl	80002b0 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	011c      	lsls	r4, r3, #4
 8004c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cac:	415b      	adcs	r3, r3
 8004cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd4:	4692      	mov	sl, r2
 8004cd6:	469b      	mov	fp, r3
 8004cd8:	4643      	mov	r3, r8
 8004cda:	eb1a 0303 	adds.w	r3, sl, r3
 8004cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d00:	460b      	mov	r3, r1
 8004d02:	18db      	adds	r3, r3, r3
 8004d04:	643b      	str	r3, [r7, #64]	; 0x40
 8004d06:	4613      	mov	r3, r2
 8004d08:	eb42 0303 	adc.w	r3, r2, r3
 8004d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d16:	f7fb facb 	bl	80002b0 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004d22:	fba3 2301 	umull	r2, r3, r3, r1
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2264      	movs	r2, #100	; 0x64
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	1acb      	subs	r3, r1, r3
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d36:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004d38:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d44:	441c      	add	r4, r3
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d60:	415b      	adcs	r3, r3
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d68:	4641      	mov	r1, r8
 8004d6a:	1851      	adds	r1, r2, r1
 8004d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d6e:	4649      	mov	r1, r9
 8004d70:	414b      	adcs	r3, r1
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d80:	4659      	mov	r1, fp
 8004d82:	00cb      	lsls	r3, r1, #3
 8004d84:	4651      	mov	r1, sl
 8004d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	00ca      	lsls	r2, r1, #3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	4642      	mov	r2, r8
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	460a      	mov	r2, r1
 8004da0:	eb42 0303 	adc.w	r3, r2, r3
 8004da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	18db      	adds	r3, r3, r3
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dd2:	f7fb fa6d 	bl	80002b0 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	2164      	movs	r1, #100	; 0x64
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	3332      	adds	r3, #50	; 0x32
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <UART_SetConfig+0x2d4>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	f003 0207 	and.w	r2, r3, #7
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4422      	add	r2, r4
 8004e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e04:	e105      	b.n	8005012 <UART_SetConfig+0x4d6>
 8004e06:	bf00      	nop
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40011400 	.word	0x40011400
 8004e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	1891      	adds	r1, r2, r2
 8004e2c:	6239      	str	r1, [r7, #32]
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
 8004e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e36:	4641      	mov	r1, r8
 8004e38:	1854      	adds	r4, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb43 0501 	adc.w	r5, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	00eb      	lsls	r3, r5, #3
 8004e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	18e3      	adds	r3, r4, r3
 8004e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	eb45 0303 	adc.w	r3, r5, r3
 8004e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e82:	4629      	mov	r1, r5
 8004e84:	008b      	lsls	r3, r1, #2
 8004e86:	4621      	mov	r1, r4
 8004e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	008a      	lsls	r2, r1, #2
 8004e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e94:	f7fb fa0c 	bl	80002b0 <__aeabi_uldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4b60      	ldr	r3, [pc, #384]	; (8005020 <UART_SetConfig+0x4e4>)
 8004e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	011c      	lsls	r4, r3, #4
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	1891      	adds	r1, r2, r2
 8004ebe:	61b9      	str	r1, [r7, #24]
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec8:	4641      	mov	r1, r8
 8004eca:	1851      	adds	r1, r2, r1
 8004ecc:	6139      	str	r1, [r7, #16]
 8004ece:	4649      	mov	r1, r9
 8004ed0:	414b      	adcs	r3, r1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	00cb      	lsls	r3, r1, #3
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eea:	4651      	mov	r1, sl
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004efc:	464b      	mov	r3, r9
 8004efe:	460a      	mov	r2, r1
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f20:	4649      	mov	r1, r9
 8004f22:	008b      	lsls	r3, r1, #2
 8004f24:	4641      	mov	r1, r8
 8004f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	008a      	lsls	r2, r1, #2
 8004f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f32:	f7fb f9bd 	bl	80002b0 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b39      	ldr	r3, [pc, #228]	; (8005020 <UART_SetConfig+0x4e4>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <UART_SetConfig+0x4e4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f5a:	441c      	add	r4, r3
 8004f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f60:	2200      	movs	r2, #0
 8004f62:	673b      	str	r3, [r7, #112]	; 0x70
 8004f64:	677a      	str	r2, [r7, #116]	; 0x74
 8004f66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	415b      	adcs	r3, r3
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	1851      	adds	r1, r2, r1
 8004f7e:	6039      	str	r1, [r7, #0]
 8004f80:	4649      	mov	r1, r9
 8004f82:	414b      	adcs	r3, r1
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f92:	4659      	mov	r1, fp
 8004f94:	00cb      	lsls	r3, r1, #3
 8004f96:	4651      	mov	r1, sl
 8004f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	00ca      	lsls	r2, r1, #3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	189b      	adds	r3, r3, r2
 8004faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fac:	464b      	mov	r3, r9
 8004fae:	460a      	mov	r2, r1
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc0:	667a      	str	r2, [r7, #100]	; 0x64
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fce:	4649      	mov	r1, r9
 8004fd0:	008b      	lsls	r3, r1, #2
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd8:	4641      	mov	r1, r8
 8004fda:	008a      	lsls	r2, r1, #2
 8004fdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fe0:	f7fb f966 	bl	80002b0 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <UART_SetConfig+0x4e4>)
 8004fea:	fba3 1302 	umull	r1, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2164      	movs	r1, #100	; 0x64
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	3332      	adds	r3, #50	; 0x32
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <UART_SetConfig+0x4e4>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4422      	add	r2, r4
 8005010:	609a      	str	r2, [r3, #8]
}
 8005012:	bf00      	nop
 8005014:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	51eb851f 	.word	0x51eb851f

08005024 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8005032:	2300      	movs	r3, #0
 8005034:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8005036:	232d      	movs	r3, #45	; 0x2d
 8005038:	73bb      	strb	r3, [r7, #14]
 800503a:	e011      	b.n	8005060 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	b299      	uxth	r1, r3
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	3b2d      	subs	r3, #45	; 0x2d
 8005044:	4a2c      	ldr	r2, [pc, #176]	; (80050f8 <VL53L1X_SensorInit+0xd4>)
 8005046:	5cd2      	ldrb	r2, [r2, r3]
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9aa 	bl	80053a4 <VL53L1_WrByte>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	4313      	orrs	r3, r2
 8005058:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800505a:	7bbb      	ldrb	r3, [r7, #14]
 800505c:	3301      	adds	r3, #1
 800505e:	73bb      	strb	r3, [r7, #14]
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	2b87      	cmp	r3, #135	; 0x87
 8005064:	d9ea      	bls.n	800503c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 f8c1 	bl	80051f0 <VL53L1X_StartRanging>
 800506e:	4603      	mov	r3, r0
 8005070:	461a      	mov	r2, r3
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	4313      	orrs	r3, r2
 8005076:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800507c:	e00b      	b.n	8005096 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800507e:	f107 020d 	add.w	r2, r7, #13
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f8e2 	bl	8005250 <VL53L1X_CheckForDataReady>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4313      	orrs	r3, r2
 8005094:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f82c 	bl	80050fc <VL53L1X_ClearInterrupt>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f8b5 	bl	8005220 <VL53L1X_StopRanging>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	4313      	orrs	r3, r2
 80050be:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2209      	movs	r2, #9
 80050c4:	2108      	movs	r1, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f96c 	bl	80053a4 <VL53L1_WrByte>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	2200      	movs	r2, #0
 80050da:	210b      	movs	r1, #11
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f961 	bl	80053a4 <VL53L1_WrByte>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	73fb      	strb	r3, [r7, #15]
	return status;
 80050ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	080064b0 	.word	0x080064b0

080050fc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2201      	movs	r2, #1
 800510e:	2186      	movs	r1, #134	; 0x86
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f947 	bl	80053a4 <VL53L1_WrByte>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	4313      	orrs	r3, r2
 800511e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <VL53L1X_SetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_SetInterruptPolarity(uint16_t dev, uint8_t NewPolarity)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	460a      	mov	r2, r1
 8005136:	80fb      	strh	r3, [r7, #6]
 8005138:	4613      	mov	r3, r2
 800513a:	717b      	strb	r3, [r7, #5]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8005140:	f107 020e 	add.w	r2, r7, #14
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	2130      	movs	r1, #48	; 0x30
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f957 	bl	80053fc <VL53L1_RdByte>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	4313      	orrs	r3, r2
 8005156:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0xEF;
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	b2db      	uxtb	r3, r3
 8005160:	73bb      	strb	r3, [r7, #14]
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
 8005162:	797b      	ldrb	r3, [r7, #5]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <VL53L1X_SetInterruptPolarity+0x44>
 800516c:	2210      	movs	r2, #16
 800516e:	e000      	b.n	8005172 <VL53L1X_SetInterruptPolarity+0x46>
 8005170:	2200      	movs	r2, #0
 8005172:	7bbb      	ldrb	r3, [r7, #14]
 8005174:	b25b      	sxtb	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b25b      	sxtb	r3, r3
 800517a:	b2da      	uxtb	r2, r3
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	2130      	movs	r1, #48	; 0x30
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f90f 	bl	80053a4 <VL53L1_WrByte>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	4313      	orrs	r3, r2
 800518e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <VL53L1X_GetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80051ac:	f107 020e 	add.w	r2, r7, #14
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	2130      	movs	r1, #48	; 0x30
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f921 	bl	80053fc <VL53L1_RdByte>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80051c4:	7bbb      	ldrb	r3, [r7, #14]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	701a      	strb	r2, [r3, #0]
	return status;
 80051e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	2187      	movs	r1, #135	; 0x87
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f8cd 	bl	80053a4 <VL53L1_WrByte>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	4313      	orrs	r3, r2
 8005212:	73fb      	strb	r3, [r7, #15]
	return status;
 8005214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2200      	movs	r2, #0
 8005232:	2187      	movs	r1, #135	; 0x87
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f8b5 	bl	80053a4 <VL53L1_WrByte>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	4313      	orrs	r3, r2
 8005242:	73fb      	strb	r3, [r7, #15]
	return status;
 8005244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8005260:	f107 020d 	add.w	r2, r7, #13
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff97 	bl	800519c <VL53L1X_GetInterruptPolarity>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	4313      	orrs	r3, r2
 8005276:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8005278:	f107 020e 	add.w	r2, r7, #14
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	2131      	movs	r1, #49	; 0x31
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f8bb 	bl	80053fc <VL53L1_RdByte>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	4313      	orrs	r3, r2
 800528e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8005290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	7b7a      	ldrb	r2, [r7, #13]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80052b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	6039      	str	r1, [r7, #0]
 80052c8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80052d2:	f107 020e 	add.w	r2, r7, #14
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	21e5      	movs	r1, #229	; 0xe5
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f88e 	bl	80053fc <VL53L1_RdByte>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80052ea:	7bba      	ldrb	r2, [r7, #14]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	701a      	strb	r2, [r3, #0]
	return status;
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800530c:	f107 020c 	add.w	r2, r7, #12
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2196      	movs	r1, #150	; 0x96
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f8a9 	bl	800546c <VL53L1_RdWord>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	4313      	orrs	r3, r2
 8005322:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8005324:	89ba      	ldrh	r2, [r7, #12]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	801a      	strh	r2, [r3, #0]
	return status;
 800532a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	4603      	mov	r3, r0
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	b29b      	uxth	r3, r3
 800534a:	89f9      	ldrh	r1, [r7, #14]
 800534c:	220a      	movs	r2, #10
 800534e:	9200      	str	r2, [sp, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	4805      	ldr	r0, [pc, #20]	; (8005368 <_I2CWrite+0x30>)
 8005354:	f7fc f940 	bl	80015d8 <HAL_I2C_Master_Transmit>
 8005358:	4603      	mov	r3, r0
 800535a:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800535c:	697b      	ldr	r3, [r7, #20]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000090 	.word	0x20000090

0800536c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	4603      	mov	r3, r0
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b299      	uxth	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b29b      	uxth	r3, r3
 8005386:	220a      	movs	r2, #10
 8005388:	9200      	str	r2, [sp, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4804      	ldr	r0, [pc, #16]	; (80053a0 <_I2CRead+0x34>)
 800538e:	f7fc fa21 	bl	80017d4 <HAL_I2C_Master_Receive>
 8005392:	4603      	mov	r3, r0
 8005394:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005396:	697b      	ldr	r3, [r7, #20]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000090 	.word	0x20000090

080053a4 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
 80053ae:	460b      	mov	r3, r1
 80053b0:	80bb      	strh	r3, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80053ba:	88bb      	ldrh	r3, [r7, #4]
 80053bc:	0a1b      	lsrs	r3, r3, #8
 80053be:	b29b      	uxth	r3, r3
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <VL53L1_WrByte+0x54>)
 80053c4:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80053c6:	88bb      	ldrh	r3, [r7, #4]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <VL53L1_WrByte+0x54>)
 80053cc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <VL53L1_WrByte+0x54>)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2203      	movs	r2, #3
 80053d8:	4907      	ldr	r1, [pc, #28]	; (80053f8 <VL53L1_WrByte+0x54>)
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ffac 	bl	8005338 <_I2CWrite>
 80053e0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80053e8:	23f3      	movs	r3, #243	; 0xf3
 80053ea:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 80053ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000134 	.word	0x20000134

080053fc <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	603a      	str	r2, [r7, #0]
 8005406:	80fb      	strh	r3, [r7, #6]
 8005408:	460b      	mov	r3, r1
 800540a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005410:	88bb      	ldrh	r3, [r7, #4]
 8005412:	0a1b      	lsrs	r3, r3, #8
 8005414:	b29b      	uxth	r3, r3
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <VL53L1_RdByte+0x6c>)
 800541a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800541c:	88bb      	ldrh	r3, [r7, #4]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <VL53L1_RdByte+0x6c>)
 8005422:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2202      	movs	r2, #2
 8005428:	490f      	ldr	r1, [pc, #60]	; (8005468 <VL53L1_RdByte+0x6c>)
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff ff84 	bl	8005338 <_I2CWrite>
 8005430:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005438:	23f3      	movs	r3, #243	; 0xf3
 800543a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800543c:	e00d      	b.n	800545a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2201      	movs	r2, #1
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff ff91 	bl	800536c <_I2CRead>
 800544a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005452:	23f3      	movs	r3, #243	; 0xf3
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	e000      	b.n	800545a <VL53L1_RdByte+0x5e>
    }
done:
 8005458:	bf00      	nop
    return Status;
 800545a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000134 	.word	0x20000134

0800546c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	603a      	str	r2, [r7, #0]
 8005476:	80fb      	strh	r3, [r7, #6]
 8005478:	460b      	mov	r3, r1
 800547a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005480:	88bb      	ldrh	r3, [r7, #4]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	b29b      	uxth	r3, r3
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <VL53L1_RdWord+0x80>)
 800548a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800548c:	88bb      	ldrh	r3, [r7, #4]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	4b16      	ldr	r3, [pc, #88]	; (80054ec <VL53L1_RdWord+0x80>)
 8005492:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2202      	movs	r2, #2
 8005498:	4914      	ldr	r1, [pc, #80]	; (80054ec <VL53L1_RdWord+0x80>)
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ff4c 	bl	8005338 <_I2CWrite>
 80054a0:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80054a8:	23f3      	movs	r3, #243	; 0xf3
 80054aa:	73fb      	strb	r3, [r7, #15]
        goto done;
 80054ac:	e018      	b.n	80054e0 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2202      	movs	r2, #2
 80054b2:	490e      	ldr	r1, [pc, #56]	; (80054ec <VL53L1_RdWord+0x80>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ff59 	bl	800536c <_I2CRead>
 80054ba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80054c2:	23f3      	movs	r3, #243	; 0xf3
 80054c4:	73fb      	strb	r3, [r7, #15]
        goto done;
 80054c6:	e00b      	b.n	80054e0 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <VL53L1_RdWord+0x80>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <VL53L1_RdWord+0x80>)
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4413      	add	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 80054e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000134 	.word	0x20000134

080054f0 <__errno>:
 80054f0:	4b01      	ldr	r3, [pc, #4]	; (80054f8 <__errno+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000010 	.word	0x20000010

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 ffae 	bl	8006470 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	080065ac 	.word	0x080065ac
 8005538:	080065ac 	.word	0x080065ac
 800553c:	080065ac 	.word	0x080065ac
 8005540:	080065b0 	.word	0x080065b0

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <iprintf>:
 8005554:	b40f      	push	{r0, r1, r2, r3}
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <iprintf+0x2c>)
 8005558:	b513      	push	{r0, r1, r4, lr}
 800555a:	681c      	ldr	r4, [r3, #0]
 800555c:	b124      	cbz	r4, 8005568 <iprintf+0x14>
 800555e:	69a3      	ldr	r3, [r4, #24]
 8005560:	b913      	cbnz	r3, 8005568 <iprintf+0x14>
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f866 	bl	8005634 <__sinit>
 8005568:	ab05      	add	r3, sp, #20
 800556a:	9a04      	ldr	r2, [sp, #16]
 800556c:	68a1      	ldr	r1, [r4, #8]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f9bd 	bl	80058f0 <_vfiprintf_r>
 8005576:	b002      	add	sp, #8
 8005578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557c:	b004      	add	sp, #16
 800557e:	4770      	bx	lr
 8005580:	20000010 	.word	0x20000010

08005584 <std>:
 8005584:	2300      	movs	r3, #0
 8005586:	b510      	push	{r4, lr}
 8005588:	4604      	mov	r4, r0
 800558a:	e9c0 3300 	strd	r3, r3, [r0]
 800558e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005592:	6083      	str	r3, [r0, #8]
 8005594:	8181      	strh	r1, [r0, #12]
 8005596:	6643      	str	r3, [r0, #100]	; 0x64
 8005598:	81c2      	strh	r2, [r0, #14]
 800559a:	6183      	str	r3, [r0, #24]
 800559c:	4619      	mov	r1, r3
 800559e:	2208      	movs	r2, #8
 80055a0:	305c      	adds	r0, #92	; 0x5c
 80055a2:	f7ff ffcf 	bl	8005544 <memset>
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <std+0x38>)
 80055a8:	6263      	str	r3, [r4, #36]	; 0x24
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <std+0x3c>)
 80055ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <std+0x40>)
 80055b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <std+0x44>)
 80055b4:	6224      	str	r4, [r4, #32]
 80055b6:	6323      	str	r3, [r4, #48]	; 0x30
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	08005e99 	.word	0x08005e99
 80055c0:	08005ebb 	.word	0x08005ebb
 80055c4:	08005ef3 	.word	0x08005ef3
 80055c8:	08005f17 	.word	0x08005f17

080055cc <_cleanup_r>:
 80055cc:	4901      	ldr	r1, [pc, #4]	; (80055d4 <_cleanup_r+0x8>)
 80055ce:	f000 b8af 	b.w	8005730 <_fwalk_reent>
 80055d2:	bf00      	nop
 80055d4:	080061f1 	.word	0x080061f1

080055d8 <__sfmoreglue>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	2268      	movs	r2, #104	; 0x68
 80055dc:	1e4d      	subs	r5, r1, #1
 80055de:	4355      	muls	r5, r2
 80055e0:	460e      	mov	r6, r1
 80055e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055e6:	f000 f8e5 	bl	80057b4 <_malloc_r>
 80055ea:	4604      	mov	r4, r0
 80055ec:	b140      	cbz	r0, 8005600 <__sfmoreglue+0x28>
 80055ee:	2100      	movs	r1, #0
 80055f0:	e9c0 1600 	strd	r1, r6, [r0]
 80055f4:	300c      	adds	r0, #12
 80055f6:	60a0      	str	r0, [r4, #8]
 80055f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055fc:	f7ff ffa2 	bl	8005544 <memset>
 8005600:	4620      	mov	r0, r4
 8005602:	bd70      	pop	{r4, r5, r6, pc}

08005604 <__sfp_lock_acquire>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__sfp_lock_acquire+0x8>)
 8005606:	f000 b8b3 	b.w	8005770 <__retarget_lock_acquire_recursive>
 800560a:	bf00      	nop
 800560c:	20000235 	.word	0x20000235

08005610 <__sfp_lock_release>:
 8005610:	4801      	ldr	r0, [pc, #4]	; (8005618 <__sfp_lock_release+0x8>)
 8005612:	f000 b8ae 	b.w	8005772 <__retarget_lock_release_recursive>
 8005616:	bf00      	nop
 8005618:	20000235 	.word	0x20000235

0800561c <__sinit_lock_acquire>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__sinit_lock_acquire+0x8>)
 800561e:	f000 b8a7 	b.w	8005770 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	20000236 	.word	0x20000236

08005628 <__sinit_lock_release>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__sinit_lock_release+0x8>)
 800562a:	f000 b8a2 	b.w	8005772 <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	20000236 	.word	0x20000236

08005634 <__sinit>:
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	f7ff fff0 	bl	800561c <__sinit_lock_acquire>
 800563c:	69a3      	ldr	r3, [r4, #24]
 800563e:	b11b      	cbz	r3, 8005648 <__sinit+0x14>
 8005640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005644:	f7ff bff0 	b.w	8005628 <__sinit_lock_release>
 8005648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800564c:	6523      	str	r3, [r4, #80]	; 0x50
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <__sinit+0x68>)
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <__sinit+0x6c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	62a2      	str	r2, [r4, #40]	; 0x28
 8005656:	42a3      	cmp	r3, r4
 8005658:	bf04      	itt	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	61a3      	streq	r3, [r4, #24]
 800565e:	4620      	mov	r0, r4
 8005660:	f000 f820 	bl	80056a4 <__sfp>
 8005664:	6060      	str	r0, [r4, #4]
 8005666:	4620      	mov	r0, r4
 8005668:	f000 f81c 	bl	80056a4 <__sfp>
 800566c:	60a0      	str	r0, [r4, #8]
 800566e:	4620      	mov	r0, r4
 8005670:	f000 f818 	bl	80056a4 <__sfp>
 8005674:	2200      	movs	r2, #0
 8005676:	60e0      	str	r0, [r4, #12]
 8005678:	2104      	movs	r1, #4
 800567a:	6860      	ldr	r0, [r4, #4]
 800567c:	f7ff ff82 	bl	8005584 <std>
 8005680:	68a0      	ldr	r0, [r4, #8]
 8005682:	2201      	movs	r2, #1
 8005684:	2109      	movs	r1, #9
 8005686:	f7ff ff7d 	bl	8005584 <std>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	2202      	movs	r2, #2
 800568e:	2112      	movs	r1, #18
 8005690:	f7ff ff78 	bl	8005584 <std>
 8005694:	2301      	movs	r3, #1
 8005696:	61a3      	str	r3, [r4, #24]
 8005698:	e7d2      	b.n	8005640 <__sinit+0xc>
 800569a:	bf00      	nop
 800569c:	0800650c 	.word	0x0800650c
 80056a0:	080055cd 	.word	0x080055cd

080056a4 <__sfp>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	4607      	mov	r7, r0
 80056a8:	f7ff ffac 	bl	8005604 <__sfp_lock_acquire>
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <__sfp+0x84>)
 80056ae:	681e      	ldr	r6, [r3, #0]
 80056b0:	69b3      	ldr	r3, [r6, #24]
 80056b2:	b913      	cbnz	r3, 80056ba <__sfp+0x16>
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff ffbd 	bl	8005634 <__sinit>
 80056ba:	3648      	adds	r6, #72	; 0x48
 80056bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	d503      	bpl.n	80056cc <__sfp+0x28>
 80056c4:	6833      	ldr	r3, [r6, #0]
 80056c6:	b30b      	cbz	r3, 800570c <__sfp+0x68>
 80056c8:	6836      	ldr	r6, [r6, #0]
 80056ca:	e7f7      	b.n	80056bc <__sfp+0x18>
 80056cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056d0:	b9d5      	cbnz	r5, 8005708 <__sfp+0x64>
 80056d2:	4b16      	ldr	r3, [pc, #88]	; (800572c <__sfp+0x88>)
 80056d4:	60e3      	str	r3, [r4, #12]
 80056d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056da:	6665      	str	r5, [r4, #100]	; 0x64
 80056dc:	f000 f847 	bl	800576e <__retarget_lock_init_recursive>
 80056e0:	f7ff ff96 	bl	8005610 <__sfp_lock_release>
 80056e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056ec:	6025      	str	r5, [r4, #0]
 80056ee:	61a5      	str	r5, [r4, #24]
 80056f0:	2208      	movs	r2, #8
 80056f2:	4629      	mov	r1, r5
 80056f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056f8:	f7ff ff24 	bl	8005544 <memset>
 80056fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005704:	4620      	mov	r0, r4
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005708:	3468      	adds	r4, #104	; 0x68
 800570a:	e7d9      	b.n	80056c0 <__sfp+0x1c>
 800570c:	2104      	movs	r1, #4
 800570e:	4638      	mov	r0, r7
 8005710:	f7ff ff62 	bl	80055d8 <__sfmoreglue>
 8005714:	4604      	mov	r4, r0
 8005716:	6030      	str	r0, [r6, #0]
 8005718:	2800      	cmp	r0, #0
 800571a:	d1d5      	bne.n	80056c8 <__sfp+0x24>
 800571c:	f7ff ff78 	bl	8005610 <__sfp_lock_release>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	e7ee      	b.n	8005704 <__sfp+0x60>
 8005726:	bf00      	nop
 8005728:	0800650c 	.word	0x0800650c
 800572c:	ffff0001 	.word	0xffff0001

08005730 <_fwalk_reent>:
 8005730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005734:	4606      	mov	r6, r0
 8005736:	4688      	mov	r8, r1
 8005738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800573c:	2700      	movs	r7, #0
 800573e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005742:	f1b9 0901 	subs.w	r9, r9, #1
 8005746:	d505      	bpl.n	8005754 <_fwalk_reent+0x24>
 8005748:	6824      	ldr	r4, [r4, #0]
 800574a:	2c00      	cmp	r4, #0
 800574c:	d1f7      	bne.n	800573e <_fwalk_reent+0xe>
 800574e:	4638      	mov	r0, r7
 8005750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005754:	89ab      	ldrh	r3, [r5, #12]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d907      	bls.n	800576a <_fwalk_reent+0x3a>
 800575a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800575e:	3301      	adds	r3, #1
 8005760:	d003      	beq.n	800576a <_fwalk_reent+0x3a>
 8005762:	4629      	mov	r1, r5
 8005764:	4630      	mov	r0, r6
 8005766:	47c0      	blx	r8
 8005768:	4307      	orrs	r7, r0
 800576a:	3568      	adds	r5, #104	; 0x68
 800576c:	e7e9      	b.n	8005742 <_fwalk_reent+0x12>

0800576e <__retarget_lock_init_recursive>:
 800576e:	4770      	bx	lr

08005770 <__retarget_lock_acquire_recursive>:
 8005770:	4770      	bx	lr

08005772 <__retarget_lock_release_recursive>:
 8005772:	4770      	bx	lr

08005774 <sbrk_aligned>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0e      	ldr	r6, [pc, #56]	; (80057b0 <sbrk_aligned+0x3c>)
 8005778:	460c      	mov	r4, r1
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	4605      	mov	r5, r0
 800577e:	b911      	cbnz	r1, 8005786 <sbrk_aligned+0x12>
 8005780:	f000 fb7a 	bl	8005e78 <_sbrk_r>
 8005784:	6030      	str	r0, [r6, #0]
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fb75 	bl	8005e78 <_sbrk_r>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d00a      	beq.n	80057a8 <sbrk_aligned+0x34>
 8005792:	1cc4      	adds	r4, r0, #3
 8005794:	f024 0403 	bic.w	r4, r4, #3
 8005798:	42a0      	cmp	r0, r4
 800579a:	d007      	beq.n	80057ac <sbrk_aligned+0x38>
 800579c:	1a21      	subs	r1, r4, r0
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fb6a 	bl	8005e78 <_sbrk_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d101      	bne.n	80057ac <sbrk_aligned+0x38>
 80057a8:	f04f 34ff 	mov.w	r4, #4294967295
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	2000023c 	.word	0x2000023c

080057b4 <_malloc_r>:
 80057b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4607      	mov	r7, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d905      	bls.n	80057dc <_malloc_r+0x28>
 80057d0:	230c      	movs	r3, #12
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	2600      	movs	r6, #0
 80057d6:	4630      	mov	r0, r6
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	4e2e      	ldr	r6, [pc, #184]	; (8005898 <_malloc_r+0xe4>)
 80057de:	f000 fdbb 	bl	8006358 <__malloc_lock>
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	461c      	mov	r4, r3
 80057e6:	bb34      	cbnz	r4, 8005836 <_malloc_r+0x82>
 80057e8:	4629      	mov	r1, r5
 80057ea:	4638      	mov	r0, r7
 80057ec:	f7ff ffc2 	bl	8005774 <sbrk_aligned>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	4604      	mov	r4, r0
 80057f4:	d14d      	bne.n	8005892 <_malloc_r+0xde>
 80057f6:	6834      	ldr	r4, [r6, #0]
 80057f8:	4626      	mov	r6, r4
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	d140      	bne.n	8005880 <_malloc_r+0xcc>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	4631      	mov	r1, r6
 8005802:	4638      	mov	r0, r7
 8005804:	eb04 0803 	add.w	r8, r4, r3
 8005808:	f000 fb36 	bl	8005e78 <_sbrk_r>
 800580c:	4580      	cmp	r8, r0
 800580e:	d13a      	bne.n	8005886 <_malloc_r+0xd2>
 8005810:	6821      	ldr	r1, [r4, #0]
 8005812:	3503      	adds	r5, #3
 8005814:	1a6d      	subs	r5, r5, r1
 8005816:	f025 0503 	bic.w	r5, r5, #3
 800581a:	3508      	adds	r5, #8
 800581c:	2d0c      	cmp	r5, #12
 800581e:	bf38      	it	cc
 8005820:	250c      	movcc	r5, #12
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ffa5 	bl	8005774 <sbrk_aligned>
 800582a:	3001      	adds	r0, #1
 800582c:	d02b      	beq.n	8005886 <_malloc_r+0xd2>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	442b      	add	r3, r5
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	e00e      	b.n	8005854 <_malloc_r+0xa0>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	1b52      	subs	r2, r2, r5
 800583a:	d41e      	bmi.n	800587a <_malloc_r+0xc6>
 800583c:	2a0b      	cmp	r2, #11
 800583e:	d916      	bls.n	800586e <_malloc_r+0xba>
 8005840:	1961      	adds	r1, r4, r5
 8005842:	42a3      	cmp	r3, r4
 8005844:	6025      	str	r5, [r4, #0]
 8005846:	bf18      	it	ne
 8005848:	6059      	strne	r1, [r3, #4]
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	bf08      	it	eq
 800584e:	6031      	streq	r1, [r6, #0]
 8005850:	5162      	str	r2, [r4, r5]
 8005852:	604b      	str	r3, [r1, #4]
 8005854:	4638      	mov	r0, r7
 8005856:	f104 060b 	add.w	r6, r4, #11
 800585a:	f000 fd83 	bl	8006364 <__malloc_unlock>
 800585e:	f026 0607 	bic.w	r6, r6, #7
 8005862:	1d23      	adds	r3, r4, #4
 8005864:	1af2      	subs	r2, r6, r3
 8005866:	d0b6      	beq.n	80057d6 <_malloc_r+0x22>
 8005868:	1b9b      	subs	r3, r3, r6
 800586a:	50a3      	str	r3, [r4, r2]
 800586c:	e7b3      	b.n	80057d6 <_malloc_r+0x22>
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	42a3      	cmp	r3, r4
 8005872:	bf0c      	ite	eq
 8005874:	6032      	streq	r2, [r6, #0]
 8005876:	605a      	strne	r2, [r3, #4]
 8005878:	e7ec      	b.n	8005854 <_malloc_r+0xa0>
 800587a:	4623      	mov	r3, r4
 800587c:	6864      	ldr	r4, [r4, #4]
 800587e:	e7b2      	b.n	80057e6 <_malloc_r+0x32>
 8005880:	4634      	mov	r4, r6
 8005882:	6876      	ldr	r6, [r6, #4]
 8005884:	e7b9      	b.n	80057fa <_malloc_r+0x46>
 8005886:	230c      	movs	r3, #12
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4638      	mov	r0, r7
 800588c:	f000 fd6a 	bl	8006364 <__malloc_unlock>
 8005890:	e7a1      	b.n	80057d6 <_malloc_r+0x22>
 8005892:	6025      	str	r5, [r4, #0]
 8005894:	e7de      	b.n	8005854 <_malloc_r+0xa0>
 8005896:	bf00      	nop
 8005898:	20000238 	.word	0x20000238

0800589c <__sfputc_r>:
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	b410      	push	{r4}
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	da08      	bge.n	80058ba <__sfputc_r+0x1e>
 80058a8:	6994      	ldr	r4, [r2, #24]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	db01      	blt.n	80058b2 <__sfputc_r+0x16>
 80058ae:	290a      	cmp	r1, #10
 80058b0:	d103      	bne.n	80058ba <__sfputc_r+0x1e>
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	f000 bb33 	b.w	8005f20 <__swbuf_r>
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	1c58      	adds	r0, r3, #1
 80058be:	6010      	str	r0, [r2, #0]
 80058c0:	7019      	strb	r1, [r3, #0]
 80058c2:	4608      	mov	r0, r1
 80058c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <__sfputs_r>:
 80058ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	18d5      	adds	r5, r2, r3
 80058d4:	42ac      	cmp	r4, r5
 80058d6:	d101      	bne.n	80058dc <__sfputs_r+0x12>
 80058d8:	2000      	movs	r0, #0
 80058da:	e007      	b.n	80058ec <__sfputs_r+0x22>
 80058dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e0:	463a      	mov	r2, r7
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffda 	bl	800589c <__sfputc_r>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d1f3      	bne.n	80058d4 <__sfputs_r+0xa>
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f0 <_vfiprintf_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	460d      	mov	r5, r1
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	4614      	mov	r4, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	4606      	mov	r6, r0
 80058fe:	b118      	cbz	r0, 8005908 <_vfiprintf_r+0x18>
 8005900:	6983      	ldr	r3, [r0, #24]
 8005902:	b90b      	cbnz	r3, 8005908 <_vfiprintf_r+0x18>
 8005904:	f7ff fe96 	bl	8005634 <__sinit>
 8005908:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <_vfiprintf_r+0x240>)
 800590a:	429d      	cmp	r5, r3
 800590c:	d11b      	bne.n	8005946 <_vfiprintf_r+0x56>
 800590e:	6875      	ldr	r5, [r6, #4]
 8005910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005912:	07d9      	lsls	r1, r3, #31
 8005914:	d405      	bmi.n	8005922 <_vfiprintf_r+0x32>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	059a      	lsls	r2, r3, #22
 800591a:	d402      	bmi.n	8005922 <_vfiprintf_r+0x32>
 800591c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800591e:	f7ff ff27 	bl	8005770 <__retarget_lock_acquire_recursive>
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	071b      	lsls	r3, r3, #28
 8005926:	d501      	bpl.n	800592c <_vfiprintf_r+0x3c>
 8005928:	692b      	ldr	r3, [r5, #16]
 800592a:	b9eb      	cbnz	r3, 8005968 <_vfiprintf_r+0x78>
 800592c:	4629      	mov	r1, r5
 800592e:	4630      	mov	r0, r6
 8005930:	f000 fb5a 	bl	8005fe8 <__swsetup_r>
 8005934:	b1c0      	cbz	r0, 8005968 <_vfiprintf_r+0x78>
 8005936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005938:	07dc      	lsls	r4, r3, #31
 800593a:	d50e      	bpl.n	800595a <_vfiprintf_r+0x6a>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b01d      	add	sp, #116	; 0x74
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	4b7b      	ldr	r3, [pc, #492]	; (8005b34 <_vfiprintf_r+0x244>)
 8005948:	429d      	cmp	r5, r3
 800594a:	d101      	bne.n	8005950 <_vfiprintf_r+0x60>
 800594c:	68b5      	ldr	r5, [r6, #8]
 800594e:	e7df      	b.n	8005910 <_vfiprintf_r+0x20>
 8005950:	4b79      	ldr	r3, [pc, #484]	; (8005b38 <_vfiprintf_r+0x248>)
 8005952:	429d      	cmp	r5, r3
 8005954:	bf08      	it	eq
 8005956:	68f5      	ldreq	r5, [r6, #12]
 8005958:	e7da      	b.n	8005910 <_vfiprintf_r+0x20>
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	0598      	lsls	r0, r3, #22
 800595e:	d4ed      	bmi.n	800593c <_vfiprintf_r+0x4c>
 8005960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005962:	f7ff ff06 	bl	8005772 <__retarget_lock_release_recursive>
 8005966:	e7e9      	b.n	800593c <_vfiprintf_r+0x4c>
 8005968:	2300      	movs	r3, #0
 800596a:	9309      	str	r3, [sp, #36]	; 0x24
 800596c:	2320      	movs	r3, #32
 800596e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005972:	f8cd 800c 	str.w	r8, [sp, #12]
 8005976:	2330      	movs	r3, #48	; 0x30
 8005978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b3c <_vfiprintf_r+0x24c>
 800597c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005980:	f04f 0901 	mov.w	r9, #1
 8005984:	4623      	mov	r3, r4
 8005986:	469a      	mov	sl, r3
 8005988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598c:	b10a      	cbz	r2, 8005992 <_vfiprintf_r+0xa2>
 800598e:	2a25      	cmp	r2, #37	; 0x25
 8005990:	d1f9      	bne.n	8005986 <_vfiprintf_r+0x96>
 8005992:	ebba 0b04 	subs.w	fp, sl, r4
 8005996:	d00b      	beq.n	80059b0 <_vfiprintf_r+0xc0>
 8005998:	465b      	mov	r3, fp
 800599a:	4622      	mov	r2, r4
 800599c:	4629      	mov	r1, r5
 800599e:	4630      	mov	r0, r6
 80059a0:	f7ff ff93 	bl	80058ca <__sfputs_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	f000 80aa 	beq.w	8005afe <_vfiprintf_r+0x20e>
 80059aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ac:	445a      	add	r2, fp
 80059ae:	9209      	str	r2, [sp, #36]	; 0x24
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a2 	beq.w	8005afe <_vfiprintf_r+0x20e>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c4:	f10a 0a01 	add.w	sl, sl, #1
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d0:	931a      	str	r3, [sp, #104]	; 0x68
 80059d2:	4654      	mov	r4, sl
 80059d4:	2205      	movs	r2, #5
 80059d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059da:	4858      	ldr	r0, [pc, #352]	; (8005b3c <_vfiprintf_r+0x24c>)
 80059dc:	f7fa fc18 	bl	8000210 <memchr>
 80059e0:	9a04      	ldr	r2, [sp, #16]
 80059e2:	b9d8      	cbnz	r0, 8005a1c <_vfiprintf_r+0x12c>
 80059e4:	06d1      	lsls	r1, r2, #27
 80059e6:	bf44      	itt	mi
 80059e8:	2320      	movmi	r3, #32
 80059ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ee:	0713      	lsls	r3, r2, #28
 80059f0:	bf44      	itt	mi
 80059f2:	232b      	movmi	r3, #43	; 0x2b
 80059f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f8:	f89a 3000 	ldrb.w	r3, [sl]
 80059fc:	2b2a      	cmp	r3, #42	; 0x2a
 80059fe:	d015      	beq.n	8005a2c <_vfiprintf_r+0x13c>
 8005a00:	9a07      	ldr	r2, [sp, #28]
 8005a02:	4654      	mov	r4, sl
 8005a04:	2000      	movs	r0, #0
 8005a06:	f04f 0c0a 	mov.w	ip, #10
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a10:	3b30      	subs	r3, #48	; 0x30
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d94e      	bls.n	8005ab4 <_vfiprintf_r+0x1c4>
 8005a16:	b1b0      	cbz	r0, 8005a46 <_vfiprintf_r+0x156>
 8005a18:	9207      	str	r2, [sp, #28]
 8005a1a:	e014      	b.n	8005a46 <_vfiprintf_r+0x156>
 8005a1c:	eba0 0308 	sub.w	r3, r0, r8
 8005a20:	fa09 f303 	lsl.w	r3, r9, r3
 8005a24:	4313      	orrs	r3, r2
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	46a2      	mov	sl, r4
 8005a2a:	e7d2      	b.n	80059d2 <_vfiprintf_r+0xe2>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	1d19      	adds	r1, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	9103      	str	r1, [sp, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfbb      	ittet	lt
 8005a38:	425b      	neglt	r3, r3
 8005a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3e:	9307      	strge	r3, [sp, #28]
 8005a40:	9307      	strlt	r3, [sp, #28]
 8005a42:	bfb8      	it	lt
 8005a44:	9204      	strlt	r2, [sp, #16]
 8005a46:	7823      	ldrb	r3, [r4, #0]
 8005a48:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4a:	d10c      	bne.n	8005a66 <_vfiprintf_r+0x176>
 8005a4c:	7863      	ldrb	r3, [r4, #1]
 8005a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a50:	d135      	bne.n	8005abe <_vfiprintf_r+0x1ce>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfb8      	it	lt
 8005a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a62:	3402      	adds	r4, #2
 8005a64:	9305      	str	r3, [sp, #20]
 8005a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b4c <_vfiprintf_r+0x25c>
 8005a6a:	7821      	ldrb	r1, [r4, #0]
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7fa fbce 	bl	8000210 <memchr>
 8005a74:	b140      	cbz	r0, 8005a88 <_vfiprintf_r+0x198>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	eba0 000a 	sub.w	r0, r0, sl
 8005a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	4303      	orrs	r3, r0
 8005a84:	3401      	adds	r4, #1
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8c:	482c      	ldr	r0, [pc, #176]	; (8005b40 <_vfiprintf_r+0x250>)
 8005a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a92:	2206      	movs	r2, #6
 8005a94:	f7fa fbbc 	bl	8000210 <memchr>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d03f      	beq.n	8005b1c <_vfiprintf_r+0x22c>
 8005a9c:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <_vfiprintf_r+0x254>)
 8005a9e:	bb1b      	cbnz	r3, 8005ae8 <_vfiprintf_r+0x1f8>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	3307      	adds	r3, #7
 8005aa4:	f023 0307 	bic.w	r3, r3, #7
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aae:	443b      	add	r3, r7
 8005ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab2:	e767      	b.n	8005984 <_vfiprintf_r+0x94>
 8005ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab8:	460c      	mov	r4, r1
 8005aba:	2001      	movs	r0, #1
 8005abc:	e7a5      	b.n	8005a0a <_vfiprintf_r+0x11a>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	3401      	adds	r4, #1
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0c0a 	mov.w	ip, #10
 8005aca:	4620      	mov	r0, r4
 8005acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad0:	3a30      	subs	r2, #48	; 0x30
 8005ad2:	2a09      	cmp	r2, #9
 8005ad4:	d903      	bls.n	8005ade <_vfiprintf_r+0x1ee>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0c5      	beq.n	8005a66 <_vfiprintf_r+0x176>
 8005ada:	9105      	str	r1, [sp, #20]
 8005adc:	e7c3      	b.n	8005a66 <_vfiprintf_r+0x176>
 8005ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e7f0      	b.n	8005aca <_vfiprintf_r+0x1da>
 8005ae8:	ab03      	add	r3, sp, #12
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	462a      	mov	r2, r5
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <_vfiprintf_r+0x258>)
 8005af0:	a904      	add	r1, sp, #16
 8005af2:	4630      	mov	r0, r6
 8005af4:	f3af 8000 	nop.w
 8005af8:	4607      	mov	r7, r0
 8005afa:	1c78      	adds	r0, r7, #1
 8005afc:	d1d6      	bne.n	8005aac <_vfiprintf_r+0x1bc>
 8005afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b00:	07d9      	lsls	r1, r3, #31
 8005b02:	d405      	bmi.n	8005b10 <_vfiprintf_r+0x220>
 8005b04:	89ab      	ldrh	r3, [r5, #12]
 8005b06:	059a      	lsls	r2, r3, #22
 8005b08:	d402      	bmi.n	8005b10 <_vfiprintf_r+0x220>
 8005b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b0c:	f7ff fe31 	bl	8005772 <__retarget_lock_release_recursive>
 8005b10:	89ab      	ldrh	r3, [r5, #12]
 8005b12:	065b      	lsls	r3, r3, #25
 8005b14:	f53f af12 	bmi.w	800593c <_vfiprintf_r+0x4c>
 8005b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1a:	e711      	b.n	8005940 <_vfiprintf_r+0x50>
 8005b1c:	ab03      	add	r3, sp, #12
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	462a      	mov	r2, r5
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <_vfiprintf_r+0x258>)
 8005b24:	a904      	add	r1, sp, #16
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 f880 	bl	8005c2c <_printf_i>
 8005b2c:	e7e4      	b.n	8005af8 <_vfiprintf_r+0x208>
 8005b2e:	bf00      	nop
 8005b30:	08006530 	.word	0x08006530
 8005b34:	08006550 	.word	0x08006550
 8005b38:	08006510 	.word	0x08006510
 8005b3c:	08006570 	.word	0x08006570
 8005b40:	0800657a 	.word	0x0800657a
 8005b44:	00000000 	.word	0x00000000
 8005b48:	080058cb 	.word	0x080058cb
 8005b4c:	08006576 	.word	0x08006576

08005b50 <_printf_common>:
 8005b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	4616      	mov	r6, r2
 8005b56:	4699      	mov	r9, r3
 8005b58:	688a      	ldr	r2, [r1, #8]
 8005b5a:	690b      	ldr	r3, [r1, #16]
 8005b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bfb8      	it	lt
 8005b64:	4613      	movlt	r3, r2
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b10a      	cbz	r2, 8005b76 <_printf_common+0x26>
 8005b72:	3301      	adds	r3, #1
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	0699      	lsls	r1, r3, #26
 8005b7a:	bf42      	ittt	mi
 8005b7c:	6833      	ldrmi	r3, [r6, #0]
 8005b7e:	3302      	addmi	r3, #2
 8005b80:	6033      	strmi	r3, [r6, #0]
 8005b82:	6825      	ldr	r5, [r4, #0]
 8005b84:	f015 0506 	ands.w	r5, r5, #6
 8005b88:	d106      	bne.n	8005b98 <_printf_common+0x48>
 8005b8a:	f104 0a19 	add.w	sl, r4, #25
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	6832      	ldr	r2, [r6, #0]
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc26      	bgt.n	8005be6 <_printf_common+0x96>
 8005b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b9c:	1e13      	subs	r3, r2, #0
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	0692      	lsls	r2, r2, #26
 8005ba6:	d42b      	bmi.n	8005c00 <_printf_common+0xb0>
 8005ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bac:	4649      	mov	r1, r9
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d01e      	beq.n	8005bf4 <_printf_common+0xa4>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	68e5      	ldr	r5, [r4, #12]
 8005bba:	6832      	ldr	r2, [r6, #0]
 8005bbc:	f003 0306 	and.w	r3, r3, #6
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	bf08      	it	eq
 8005bc4:	1aad      	subeq	r5, r5, r2
 8005bc6:	68a3      	ldr	r3, [r4, #8]
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	bf0c      	ite	eq
 8005bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd0:	2500      	movne	r5, #0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bfc4      	itt	gt
 8005bd6:	1a9b      	subgt	r3, r3, r2
 8005bd8:	18ed      	addgt	r5, r5, r3
 8005bda:	2600      	movs	r6, #0
 8005bdc:	341a      	adds	r4, #26
 8005bde:	42b5      	cmp	r5, r6
 8005be0:	d11a      	bne.n	8005c18 <_printf_common+0xc8>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e008      	b.n	8005bf8 <_printf_common+0xa8>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4652      	mov	r2, sl
 8005bea:	4649      	mov	r1, r9
 8005bec:	4638      	mov	r0, r7
 8005bee:	47c0      	blx	r8
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d103      	bne.n	8005bfc <_printf_common+0xac>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	e7c6      	b.n	8005b8e <_printf_common+0x3e>
 8005c00:	18e1      	adds	r1, r4, r3
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	2030      	movs	r0, #48	; 0x30
 8005c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0a:	4422      	add	r2, r4
 8005c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c14:	3302      	adds	r3, #2
 8005c16:	e7c7      	b.n	8005ba8 <_printf_common+0x58>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	4638      	mov	r0, r7
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d0e6      	beq.n	8005bf4 <_printf_common+0xa4>
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7d9      	b.n	8005bde <_printf_common+0x8e>
	...

08005c2c <_printf_i>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	7e0f      	ldrb	r7, [r1, #24]
 8005c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c34:	2f78      	cmp	r7, #120	; 0x78
 8005c36:	4691      	mov	r9, r2
 8005c38:	4680      	mov	r8, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	469a      	mov	sl, r3
 8005c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c42:	d807      	bhi.n	8005c54 <_printf_i+0x28>
 8005c44:	2f62      	cmp	r7, #98	; 0x62
 8005c46:	d80a      	bhi.n	8005c5e <_printf_i+0x32>
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	f000 80d8 	beq.w	8005dfe <_printf_i+0x1d2>
 8005c4e:	2f58      	cmp	r7, #88	; 0x58
 8005c50:	f000 80a3 	beq.w	8005d9a <_printf_i+0x16e>
 8005c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c5c:	e03a      	b.n	8005cd4 <_printf_i+0xa8>
 8005c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c62:	2b15      	cmp	r3, #21
 8005c64:	d8f6      	bhi.n	8005c54 <_printf_i+0x28>
 8005c66:	a101      	add	r1, pc, #4	; (adr r1, 8005c6c <_printf_i+0x40>)
 8005c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005c55 	.word	0x08005c55
 8005c78:	08005c55 	.word	0x08005c55
 8005c7c:	08005c55 	.word	0x08005c55
 8005c80:	08005c55 	.word	0x08005c55
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c55 	.word	0x08005c55
 8005c8c:	08005c55 	.word	0x08005c55
 8005c90:	08005c55 	.word	0x08005c55
 8005c94:	08005c55 	.word	0x08005c55
 8005c98:	08005de5 	.word	0x08005de5
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005dc7 	.word	0x08005dc7
 8005ca4:	08005c55 	.word	0x08005c55
 8005ca8:	08005c55 	.word	0x08005c55
 8005cac:	08005e07 	.word	0x08005e07
 8005cb0:	08005c55 	.word	0x08005c55
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c55 	.word	0x08005c55
 8005cbc:	08005c55 	.word	0x08005c55
 8005cc0:	08005dcf 	.word	0x08005dcf
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0a3      	b.n	8005e20 <_printf_i+0x1f4>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	6829      	ldr	r1, [r5, #0]
 8005cdc:	0606      	lsls	r6, r0, #24
 8005cde:	f101 0304 	add.w	r3, r1, #4
 8005ce2:	d50a      	bpl.n	8005cfa <_printf_i+0xce>
 8005ce4:	680e      	ldr	r6, [r1, #0]
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	da03      	bge.n	8005cf4 <_printf_i+0xc8>
 8005cec:	232d      	movs	r3, #45	; 0x2d
 8005cee:	4276      	negs	r6, r6
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	485e      	ldr	r0, [pc, #376]	; (8005e70 <_printf_i+0x244>)
 8005cf6:	230a      	movs	r3, #10
 8005cf8:	e019      	b.n	8005d2e <_printf_i+0x102>
 8005cfa:	680e      	ldr	r6, [r1, #0]
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d02:	bf18      	it	ne
 8005d04:	b236      	sxthne	r6, r6
 8005d06:	e7ef      	b.n	8005ce8 <_printf_i+0xbc>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	6820      	ldr	r0, [r4, #0]
 8005d0c:	1d19      	adds	r1, r3, #4
 8005d0e:	6029      	str	r1, [r5, #0]
 8005d10:	0601      	lsls	r1, r0, #24
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0xec>
 8005d14:	681e      	ldr	r6, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0xf2>
 8005d18:	0646      	lsls	r6, r0, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0xe8>
 8005d1c:	881e      	ldrh	r6, [r3, #0]
 8005d1e:	4854      	ldr	r0, [pc, #336]	; (8005e70 <_printf_i+0x244>)
 8005d20:	2f6f      	cmp	r7, #111	; 0x6f
 8005d22:	bf0c      	ite	eq
 8005d24:	2308      	moveq	r3, #8
 8005d26:	230a      	movne	r3, #10
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d2e:	6865      	ldr	r5, [r4, #4]
 8005d30:	60a5      	str	r5, [r4, #8]
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	bfa2      	ittt	ge
 8005d36:	6821      	ldrge	r1, [r4, #0]
 8005d38:	f021 0104 	bicge.w	r1, r1, #4
 8005d3c:	6021      	strge	r1, [r4, #0]
 8005d3e:	b90e      	cbnz	r6, 8005d44 <_printf_i+0x118>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d04d      	beq.n	8005de0 <_printf_i+0x1b4>
 8005d44:	4615      	mov	r5, r2
 8005d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d4e:	5dc7      	ldrb	r7, [r0, r7]
 8005d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d54:	4637      	mov	r7, r6
 8005d56:	42bb      	cmp	r3, r7
 8005d58:	460e      	mov	r6, r1
 8005d5a:	d9f4      	bls.n	8005d46 <_printf_i+0x11a>
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d10b      	bne.n	8005d78 <_printf_i+0x14c>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07de      	lsls	r6, r3, #31
 8005d64:	d508      	bpl.n	8005d78 <_printf_i+0x14c>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6861      	ldr	r1, [r4, #4]
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	bfde      	ittt	le
 8005d6e:	2330      	movle	r3, #48	; 0x30
 8005d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d78:	1b52      	subs	r2, r2, r5
 8005d7a:	6122      	str	r2, [r4, #16]
 8005d7c:	f8cd a000 	str.w	sl, [sp]
 8005d80:	464b      	mov	r3, r9
 8005d82:	aa03      	add	r2, sp, #12
 8005d84:	4621      	mov	r1, r4
 8005d86:	4640      	mov	r0, r8
 8005d88:	f7ff fee2 	bl	8005b50 <_printf_common>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d14c      	bne.n	8005e2a <_printf_i+0x1fe>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	b004      	add	sp, #16
 8005d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9a:	4835      	ldr	r0, [pc, #212]	; (8005e70 <_printf_i+0x244>)
 8005d9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005da0:	6829      	ldr	r1, [r5, #0]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da8:	6029      	str	r1, [r5, #0]
 8005daa:	061d      	lsls	r5, r3, #24
 8005dac:	d514      	bpl.n	8005dd8 <_printf_i+0x1ac>
 8005dae:	07df      	lsls	r7, r3, #31
 8005db0:	bf44      	itt	mi
 8005db2:	f043 0320 	orrmi.w	r3, r3, #32
 8005db6:	6023      	strmi	r3, [r4, #0]
 8005db8:	b91e      	cbnz	r6, 8005dc2 <_printf_i+0x196>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	f023 0320 	bic.w	r3, r3, #32
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	e7b0      	b.n	8005d28 <_printf_i+0xfc>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	2378      	movs	r3, #120	; 0x78
 8005dd0:	4828      	ldr	r0, [pc, #160]	; (8005e74 <_printf_i+0x248>)
 8005dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dd6:	e7e3      	b.n	8005da0 <_printf_i+0x174>
 8005dd8:	0659      	lsls	r1, r3, #25
 8005dda:	bf48      	it	mi
 8005ddc:	b2b6      	uxthmi	r6, r6
 8005dde:	e7e6      	b.n	8005dae <_printf_i+0x182>
 8005de0:	4615      	mov	r5, r2
 8005de2:	e7bb      	b.n	8005d5c <_printf_i+0x130>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	6826      	ldr	r6, [r4, #0]
 8005de8:	6961      	ldr	r1, [r4, #20]
 8005dea:	1d18      	adds	r0, r3, #4
 8005dec:	6028      	str	r0, [r5, #0]
 8005dee:	0635      	lsls	r5, r6, #24
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0x1cc>
 8005df4:	6019      	str	r1, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <_printf_i+0x1d2>
 8005df8:	0670      	lsls	r0, r6, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0x1c8>
 8005dfc:	8019      	strh	r1, [r3, #0]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	4615      	mov	r5, r2
 8005e04:	e7ba      	b.n	8005d7c <_printf_i+0x150>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	1d1a      	adds	r2, r3, #4
 8005e0a:	602a      	str	r2, [r5, #0]
 8005e0c:	681d      	ldr	r5, [r3, #0]
 8005e0e:	6862      	ldr	r2, [r4, #4]
 8005e10:	2100      	movs	r1, #0
 8005e12:	4628      	mov	r0, r5
 8005e14:	f7fa f9fc 	bl	8000210 <memchr>
 8005e18:	b108      	cbz	r0, 8005e1e <_printf_i+0x1f2>
 8005e1a:	1b40      	subs	r0, r0, r5
 8005e1c:	6060      	str	r0, [r4, #4]
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	2300      	movs	r3, #0
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e28:	e7a8      	b.n	8005d7c <_printf_i+0x150>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	47d0      	blx	sl
 8005e34:	3001      	adds	r0, #1
 8005e36:	d0ab      	beq.n	8005d90 <_printf_i+0x164>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	079b      	lsls	r3, r3, #30
 8005e3c:	d413      	bmi.n	8005e66 <_printf_i+0x23a>
 8005e3e:	68e0      	ldr	r0, [r4, #12]
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	4298      	cmp	r0, r3
 8005e44:	bfb8      	it	lt
 8005e46:	4618      	movlt	r0, r3
 8005e48:	e7a4      	b.n	8005d94 <_printf_i+0x168>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4640      	mov	r0, r8
 8005e52:	47d0      	blx	sl
 8005e54:	3001      	adds	r0, #1
 8005e56:	d09b      	beq.n	8005d90 <_printf_i+0x164>
 8005e58:	3501      	adds	r5, #1
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	9903      	ldr	r1, [sp, #12]
 8005e5e:	1a5b      	subs	r3, r3, r1
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dcf2      	bgt.n	8005e4a <_printf_i+0x21e>
 8005e64:	e7eb      	b.n	8005e3e <_printf_i+0x212>
 8005e66:	2500      	movs	r5, #0
 8005e68:	f104 0619 	add.w	r6, r4, #25
 8005e6c:	e7f5      	b.n	8005e5a <_printf_i+0x22e>
 8005e6e:	bf00      	nop
 8005e70:	08006581 	.word	0x08006581
 8005e74:	08006592 	.word	0x08006592

08005e78 <_sbrk_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d06      	ldr	r5, [pc, #24]	; (8005e94 <_sbrk_r+0x1c>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	f7fa fe86 	bl	8000b94 <_sbrk>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_sbrk_r+0x1a>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_sbrk_r+0x1a>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20000240 	.word	0x20000240

08005e98 <__sread>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	f000 fab2 	bl	8006408 <_read_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	bfab      	itete	ge
 8005ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8005eac:	181b      	addge	r3, r3, r0
 8005eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eb2:	bfac      	ite	ge
 8005eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eb6:	81a3      	strhlt	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__swrite>:
 8005eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebe:	461f      	mov	r7, r3
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	05db      	lsls	r3, r3, #23
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	4616      	mov	r6, r2
 8005eca:	d505      	bpl.n	8005ed8 <__swrite+0x1e>
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f000 f9c8 	bl	8006268 <_lseek_r>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	4628      	mov	r0, r5
 8005eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	f000 b869 	b.w	8005fc4 <_write_r>

08005ef2 <__sseek>:
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efa:	f000 f9b5 	bl	8006268 <_lseek_r>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	bf15      	itete	ne
 8005f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f0e:	81a3      	strheq	r3, [r4, #12]
 8005f10:	bf18      	it	ne
 8005f12:	81a3      	strhne	r3, [r4, #12]
 8005f14:	bd10      	pop	{r4, pc}

08005f16 <__sclose>:
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 b8d3 	b.w	80060c4 <_close_r>
	...

08005f20 <__swbuf_r>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	460e      	mov	r6, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	4605      	mov	r5, r0
 8005f28:	b118      	cbz	r0, 8005f32 <__swbuf_r+0x12>
 8005f2a:	6983      	ldr	r3, [r0, #24]
 8005f2c:	b90b      	cbnz	r3, 8005f32 <__swbuf_r+0x12>
 8005f2e:	f7ff fb81 	bl	8005634 <__sinit>
 8005f32:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <__swbuf_r+0x98>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d12b      	bne.n	8005f90 <__swbuf_r+0x70>
 8005f38:	686c      	ldr	r4, [r5, #4]
 8005f3a:	69a3      	ldr	r3, [r4, #24]
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	071a      	lsls	r2, r3, #28
 8005f42:	d52f      	bpl.n	8005fa4 <__swbuf_r+0x84>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	b36b      	cbz	r3, 8005fa4 <__swbuf_r+0x84>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1ac0      	subs	r0, r0, r3
 8005f4e:	6963      	ldr	r3, [r4, #20]
 8005f50:	b2f6      	uxtb	r6, r6
 8005f52:	4283      	cmp	r3, r0
 8005f54:	4637      	mov	r7, r6
 8005f56:	dc04      	bgt.n	8005f62 <__swbuf_r+0x42>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 f948 	bl	80061f0 <_fflush_r>
 8005f60:	bb30      	cbnz	r0, 8005fb0 <__swbuf_r+0x90>
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	60a3      	str	r3, [r4, #8]
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	701e      	strb	r6, [r3, #0]
 8005f70:	6963      	ldr	r3, [r4, #20]
 8005f72:	3001      	adds	r0, #1
 8005f74:	4283      	cmp	r3, r0
 8005f76:	d004      	beq.n	8005f82 <__swbuf_r+0x62>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	07db      	lsls	r3, r3, #31
 8005f7c:	d506      	bpl.n	8005f8c <__swbuf_r+0x6c>
 8005f7e:	2e0a      	cmp	r6, #10
 8005f80:	d104      	bne.n	8005f8c <__swbuf_r+0x6c>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f933 	bl	80061f0 <_fflush_r>
 8005f8a:	b988      	cbnz	r0, 8005fb0 <__swbuf_r+0x90>
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <__swbuf_r+0x9c>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swbuf_r+0x7a>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7cf      	b.n	8005f3a <__swbuf_r+0x1a>
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <__swbuf_r+0xa0>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7ca      	b.n	8005f3a <__swbuf_r+0x1a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 f81e 	bl	8005fe8 <__swsetup_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0cb      	beq.n	8005f48 <__swbuf_r+0x28>
 8005fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fb4:	e7ea      	b.n	8005f8c <__swbuf_r+0x6c>
 8005fb6:	bf00      	nop
 8005fb8:	08006530 	.word	0x08006530
 8005fbc:	08006550 	.word	0x08006550
 8005fc0:	08006510 	.word	0x08006510

08005fc4 <_write_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_write_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fa faee 	bl	80005b4 <_write>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_write_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_write_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000240 	.word	0x20000240

08005fe8 <__swsetup_r>:
 8005fe8:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <__swsetup_r+0xcc>)
 8005fea:	b570      	push	{r4, r5, r6, lr}
 8005fec:	681d      	ldr	r5, [r3, #0]
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	b125      	cbz	r5, 8005ffe <__swsetup_r+0x16>
 8005ff4:	69ab      	ldr	r3, [r5, #24]
 8005ff6:	b913      	cbnz	r3, 8005ffe <__swsetup_r+0x16>
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f7ff fb1b 	bl	8005634 <__sinit>
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <__swsetup_r+0xd0>)
 8006000:	429c      	cmp	r4, r3
 8006002:	d10f      	bne.n	8006024 <__swsetup_r+0x3c>
 8006004:	686c      	ldr	r4, [r5, #4]
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800600c:	0719      	lsls	r1, r3, #28
 800600e:	d42c      	bmi.n	800606a <__swsetup_r+0x82>
 8006010:	06dd      	lsls	r5, r3, #27
 8006012:	d411      	bmi.n	8006038 <__swsetup_r+0x50>
 8006014:	2309      	movs	r3, #9
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	e03e      	b.n	80060a2 <__swsetup_r+0xba>
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <__swsetup_r+0xd4>)
 8006026:	429c      	cmp	r4, r3
 8006028:	d101      	bne.n	800602e <__swsetup_r+0x46>
 800602a:	68ac      	ldr	r4, [r5, #8]
 800602c:	e7eb      	b.n	8006006 <__swsetup_r+0x1e>
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <__swsetup_r+0xd8>)
 8006030:	429c      	cmp	r4, r3
 8006032:	bf08      	it	eq
 8006034:	68ec      	ldreq	r4, [r5, #12]
 8006036:	e7e6      	b.n	8006006 <__swsetup_r+0x1e>
 8006038:	0758      	lsls	r0, r3, #29
 800603a:	d512      	bpl.n	8006062 <__swsetup_r+0x7a>
 800603c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603e:	b141      	cbz	r1, 8006052 <__swsetup_r+0x6a>
 8006040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006044:	4299      	cmp	r1, r3
 8006046:	d002      	beq.n	800604e <__swsetup_r+0x66>
 8006048:	4630      	mov	r0, r6
 800604a:	f000 f991 	bl	8006370 <_free_r>
 800604e:	2300      	movs	r3, #0
 8006050:	6363      	str	r3, [r4, #52]	; 0x34
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	6063      	str	r3, [r4, #4]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	b94b      	cbnz	r3, 8006082 <__swsetup_r+0x9a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006078:	d003      	beq.n	8006082 <__swsetup_r+0x9a>
 800607a:	4621      	mov	r1, r4
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f92b 	bl	80062d8 <__smakebuf_r>
 8006082:	89a0      	ldrh	r0, [r4, #12]
 8006084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006088:	f010 0301 	ands.w	r3, r0, #1
 800608c:	d00a      	beq.n	80060a4 <__swsetup_r+0xbc>
 800608e:	2300      	movs	r3, #0
 8006090:	60a3      	str	r3, [r4, #8]
 8006092:	6963      	ldr	r3, [r4, #20]
 8006094:	425b      	negs	r3, r3
 8006096:	61a3      	str	r3, [r4, #24]
 8006098:	6923      	ldr	r3, [r4, #16]
 800609a:	b943      	cbnz	r3, 80060ae <__swsetup_r+0xc6>
 800609c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060a0:	d1ba      	bne.n	8006018 <__swsetup_r+0x30>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	0781      	lsls	r1, r0, #30
 80060a6:	bf58      	it	pl
 80060a8:	6963      	ldrpl	r3, [r4, #20]
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	e7f4      	b.n	8006098 <__swsetup_r+0xb0>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e7f7      	b.n	80060a2 <__swsetup_r+0xba>
 80060b2:	bf00      	nop
 80060b4:	20000010 	.word	0x20000010
 80060b8:	08006530 	.word	0x08006530
 80060bc:	08006550 	.word	0x08006550
 80060c0:	08006510 	.word	0x08006510

080060c4 <_close_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_close_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fa fd2b 	bl	8000b2a <_close>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_close_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_close_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000240 	.word	0x20000240

080060e4 <__sflush_r>:
 80060e4:	898a      	ldrh	r2, [r1, #12]
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	4605      	mov	r5, r0
 80060ec:	0710      	lsls	r0, r2, #28
 80060ee:	460c      	mov	r4, r1
 80060f0:	d458      	bmi.n	80061a4 <__sflush_r+0xc0>
 80060f2:	684b      	ldr	r3, [r1, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dc05      	bgt.n	8006104 <__sflush_r+0x20>
 80060f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dc02      	bgt.n	8006104 <__sflush_r+0x20>
 80060fe:	2000      	movs	r0, #0
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006106:	2e00      	cmp	r6, #0
 8006108:	d0f9      	beq.n	80060fe <__sflush_r+0x1a>
 800610a:	2300      	movs	r3, #0
 800610c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006110:	682f      	ldr	r7, [r5, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	d032      	beq.n	800617c <__sflush_r+0x98>
 8006116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	075a      	lsls	r2, r3, #29
 800611c:	d505      	bpl.n	800612a <__sflush_r+0x46>
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006124:	b10b      	cbz	r3, 800612a <__sflush_r+0x46>
 8006126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006128:	1ac0      	subs	r0, r0, r3
 800612a:	2300      	movs	r3, #0
 800612c:	4602      	mov	r2, r0
 800612e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006130:	6a21      	ldr	r1, [r4, #32]
 8006132:	4628      	mov	r0, r5
 8006134:	47b0      	blx	r6
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	d106      	bne.n	800614a <__sflush_r+0x66>
 800613c:	6829      	ldr	r1, [r5, #0]
 800613e:	291d      	cmp	r1, #29
 8006140:	d82c      	bhi.n	800619c <__sflush_r+0xb8>
 8006142:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <__sflush_r+0x108>)
 8006144:	40ca      	lsrs	r2, r1
 8006146:	07d6      	lsls	r6, r2, #31
 8006148:	d528      	bpl.n	800619c <__sflush_r+0xb8>
 800614a:	2200      	movs	r2, #0
 800614c:	6062      	str	r2, [r4, #4]
 800614e:	04d9      	lsls	r1, r3, #19
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	d504      	bpl.n	8006160 <__sflush_r+0x7c>
 8006156:	1c42      	adds	r2, r0, #1
 8006158:	d101      	bne.n	800615e <__sflush_r+0x7a>
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	b903      	cbnz	r3, 8006160 <__sflush_r+0x7c>
 800615e:	6560      	str	r0, [r4, #84]	; 0x54
 8006160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006162:	602f      	str	r7, [r5, #0]
 8006164:	2900      	cmp	r1, #0
 8006166:	d0ca      	beq.n	80060fe <__sflush_r+0x1a>
 8006168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <__sflush_r+0x92>
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f8fd 	bl	8006370 <_free_r>
 8006176:	2000      	movs	r0, #0
 8006178:	6360      	str	r0, [r4, #52]	; 0x34
 800617a:	e7c1      	b.n	8006100 <__sflush_r+0x1c>
 800617c:	6a21      	ldr	r1, [r4, #32]
 800617e:	2301      	movs	r3, #1
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	1c41      	adds	r1, r0, #1
 8006186:	d1c7      	bne.n	8006118 <__sflush_r+0x34>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0c4      	beq.n	8006118 <__sflush_r+0x34>
 800618e:	2b1d      	cmp	r3, #29
 8006190:	d001      	beq.n	8006196 <__sflush_r+0xb2>
 8006192:	2b16      	cmp	r3, #22
 8006194:	d101      	bne.n	800619a <__sflush_r+0xb6>
 8006196:	602f      	str	r7, [r5, #0]
 8006198:	e7b1      	b.n	80060fe <__sflush_r+0x1a>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	e7ad      	b.n	8006100 <__sflush_r+0x1c>
 80061a4:	690f      	ldr	r7, [r1, #16]
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	d0a9      	beq.n	80060fe <__sflush_r+0x1a>
 80061aa:	0793      	lsls	r3, r2, #30
 80061ac:	680e      	ldr	r6, [r1, #0]
 80061ae:	bf08      	it	eq
 80061b0:	694b      	ldreq	r3, [r1, #20]
 80061b2:	600f      	str	r7, [r1, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2300      	movne	r3, #0
 80061b8:	eba6 0807 	sub.w	r8, r6, r7
 80061bc:	608b      	str	r3, [r1, #8]
 80061be:	f1b8 0f00 	cmp.w	r8, #0
 80061c2:	dd9c      	ble.n	80060fe <__sflush_r+0x1a>
 80061c4:	6a21      	ldr	r1, [r4, #32]
 80061c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061c8:	4643      	mov	r3, r8
 80061ca:	463a      	mov	r2, r7
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b0      	blx	r6
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dc06      	bgt.n	80061e2 <__sflush_r+0xfe>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e78e      	b.n	8006100 <__sflush_r+0x1c>
 80061e2:	4407      	add	r7, r0
 80061e4:	eba8 0800 	sub.w	r8, r8, r0
 80061e8:	e7e9      	b.n	80061be <__sflush_r+0xda>
 80061ea:	bf00      	nop
 80061ec:	20400001 	.word	0x20400001

080061f0 <_fflush_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	690b      	ldr	r3, [r1, #16]
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b913      	cbnz	r3, 8006200 <_fflush_r+0x10>
 80061fa:	2500      	movs	r5, #0
 80061fc:	4628      	mov	r0, r5
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	b118      	cbz	r0, 800620a <_fflush_r+0x1a>
 8006202:	6983      	ldr	r3, [r0, #24]
 8006204:	b90b      	cbnz	r3, 800620a <_fflush_r+0x1a>
 8006206:	f7ff fa15 	bl	8005634 <__sinit>
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <_fflush_r+0x6c>)
 800620c:	429c      	cmp	r4, r3
 800620e:	d11b      	bne.n	8006248 <_fflush_r+0x58>
 8006210:	686c      	ldr	r4, [r5, #4]
 8006212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <_fflush_r+0xa>
 800621a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800621c:	07d0      	lsls	r0, r2, #31
 800621e:	d404      	bmi.n	800622a <_fflush_r+0x3a>
 8006220:	0599      	lsls	r1, r3, #22
 8006222:	d402      	bmi.n	800622a <_fflush_r+0x3a>
 8006224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006226:	f7ff faa3 	bl	8005770 <__retarget_lock_acquire_recursive>
 800622a:	4628      	mov	r0, r5
 800622c:	4621      	mov	r1, r4
 800622e:	f7ff ff59 	bl	80060e4 <__sflush_r>
 8006232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006234:	07da      	lsls	r2, r3, #31
 8006236:	4605      	mov	r5, r0
 8006238:	d4e0      	bmi.n	80061fc <_fflush_r+0xc>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	059b      	lsls	r3, r3, #22
 800623e:	d4dd      	bmi.n	80061fc <_fflush_r+0xc>
 8006240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006242:	f7ff fa96 	bl	8005772 <__retarget_lock_release_recursive>
 8006246:	e7d9      	b.n	80061fc <_fflush_r+0xc>
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <_fflush_r+0x70>)
 800624a:	429c      	cmp	r4, r3
 800624c:	d101      	bne.n	8006252 <_fflush_r+0x62>
 800624e:	68ac      	ldr	r4, [r5, #8]
 8006250:	e7df      	b.n	8006212 <_fflush_r+0x22>
 8006252:	4b04      	ldr	r3, [pc, #16]	; (8006264 <_fflush_r+0x74>)
 8006254:	429c      	cmp	r4, r3
 8006256:	bf08      	it	eq
 8006258:	68ec      	ldreq	r4, [r5, #12]
 800625a:	e7da      	b.n	8006212 <_fflush_r+0x22>
 800625c:	08006530 	.word	0x08006530
 8006260:	08006550 	.word	0x08006550
 8006264:	08006510 	.word	0x08006510

08006268 <_lseek_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d07      	ldr	r5, [pc, #28]	; (8006288 <_lseek_r+0x20>)
 800626c:	4604      	mov	r4, r0
 800626e:	4608      	mov	r0, r1
 8006270:	4611      	mov	r1, r2
 8006272:	2200      	movs	r2, #0
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7fa fc7e 	bl	8000b78 <_lseek>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_lseek_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_lseek_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000240 	.word	0x20000240

0800628c <__swhatbuf_r>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006294:	2900      	cmp	r1, #0
 8006296:	b096      	sub	sp, #88	; 0x58
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	da08      	bge.n	80062b0 <__swhatbuf_r+0x24>
 800629e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	061a      	lsls	r2, r3, #24
 80062a8:	d410      	bmi.n	80062cc <__swhatbuf_r+0x40>
 80062aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ae:	e00e      	b.n	80062ce <__swhatbuf_r+0x42>
 80062b0:	466a      	mov	r2, sp
 80062b2:	f000 f8bb 	bl	800642c <_fstat_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	dbf1      	blt.n	800629e <__swhatbuf_r+0x12>
 80062ba:	9a01      	ldr	r2, [sp, #4]
 80062bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062c4:	425a      	negs	r2, r3
 80062c6:	415a      	adcs	r2, r3
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	e7ee      	b.n	80062aa <__swhatbuf_r+0x1e>
 80062cc:	2340      	movs	r3, #64	; 0x40
 80062ce:	2000      	movs	r0, #0
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	b016      	add	sp, #88	; 0x58
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080062d8 <__smakebuf_r>:
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062dc:	079d      	lsls	r5, r3, #30
 80062de:	4606      	mov	r6, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	d507      	bpl.n	80062f4 <__smakebuf_r+0x1c>
 80062e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	2301      	movs	r3, #1
 80062ee:	6163      	str	r3, [r4, #20]
 80062f0:	b002      	add	sp, #8
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	ab01      	add	r3, sp, #4
 80062f6:	466a      	mov	r2, sp
 80062f8:	f7ff ffc8 	bl	800628c <__swhatbuf_r>
 80062fc:	9900      	ldr	r1, [sp, #0]
 80062fe:	4605      	mov	r5, r0
 8006300:	4630      	mov	r0, r6
 8006302:	f7ff fa57 	bl	80057b4 <_malloc_r>
 8006306:	b948      	cbnz	r0, 800631c <__smakebuf_r+0x44>
 8006308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630c:	059a      	lsls	r2, r3, #22
 800630e:	d4ef      	bmi.n	80062f0 <__smakebuf_r+0x18>
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	e7e3      	b.n	80062e4 <__smakebuf_r+0xc>
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <__smakebuf_r+0x7c>)
 800631e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	9b00      	ldr	r3, [sp, #0]
 800632c:	6163      	str	r3, [r4, #20]
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	6120      	str	r0, [r4, #16]
 8006332:	b15b      	cbz	r3, 800634c <__smakebuf_r+0x74>
 8006334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f889 	bl	8006450 <_isatty_r>
 800633e:	b128      	cbz	r0, 800634c <__smakebuf_r+0x74>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	89a0      	ldrh	r0, [r4, #12]
 800634e:	4305      	orrs	r5, r0
 8006350:	81a5      	strh	r5, [r4, #12]
 8006352:	e7cd      	b.n	80062f0 <__smakebuf_r+0x18>
 8006354:	080055cd 	.word	0x080055cd

08006358 <__malloc_lock>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__malloc_lock+0x8>)
 800635a:	f7ff ba09 	b.w	8005770 <__retarget_lock_acquire_recursive>
 800635e:	bf00      	nop
 8006360:	20000234 	.word	0x20000234

08006364 <__malloc_unlock>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__malloc_unlock+0x8>)
 8006366:	f7ff ba04 	b.w	8005772 <__retarget_lock_release_recursive>
 800636a:	bf00      	nop
 800636c:	20000234 	.word	0x20000234

08006370 <_free_r>:
 8006370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006372:	2900      	cmp	r1, #0
 8006374:	d044      	beq.n	8006400 <_free_r+0x90>
 8006376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800637a:	9001      	str	r0, [sp, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f1a1 0404 	sub.w	r4, r1, #4
 8006382:	bfb8      	it	lt
 8006384:	18e4      	addlt	r4, r4, r3
 8006386:	f7ff ffe7 	bl	8006358 <__malloc_lock>
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <_free_r+0x94>)
 800638c:	9801      	ldr	r0, [sp, #4]
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	b933      	cbnz	r3, 80063a0 <_free_r+0x30>
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	6014      	str	r4, [r2, #0]
 8006396:	b003      	add	sp, #12
 8006398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800639c:	f7ff bfe2 	b.w	8006364 <__malloc_unlock>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d908      	bls.n	80063b6 <_free_r+0x46>
 80063a4:	6825      	ldr	r5, [r4, #0]
 80063a6:	1961      	adds	r1, r4, r5
 80063a8:	428b      	cmp	r3, r1
 80063aa:	bf01      	itttt	eq
 80063ac:	6819      	ldreq	r1, [r3, #0]
 80063ae:	685b      	ldreq	r3, [r3, #4]
 80063b0:	1949      	addeq	r1, r1, r5
 80063b2:	6021      	streq	r1, [r4, #0]
 80063b4:	e7ed      	b.n	8006392 <_free_r+0x22>
 80063b6:	461a      	mov	r2, r3
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	b10b      	cbz	r3, 80063c0 <_free_r+0x50>
 80063bc:	42a3      	cmp	r3, r4
 80063be:	d9fa      	bls.n	80063b6 <_free_r+0x46>
 80063c0:	6811      	ldr	r1, [r2, #0]
 80063c2:	1855      	adds	r5, r2, r1
 80063c4:	42a5      	cmp	r5, r4
 80063c6:	d10b      	bne.n	80063e0 <_free_r+0x70>
 80063c8:	6824      	ldr	r4, [r4, #0]
 80063ca:	4421      	add	r1, r4
 80063cc:	1854      	adds	r4, r2, r1
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	d1e0      	bne.n	8006396 <_free_r+0x26>
 80063d4:	681c      	ldr	r4, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	6053      	str	r3, [r2, #4]
 80063da:	4421      	add	r1, r4
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	e7da      	b.n	8006396 <_free_r+0x26>
 80063e0:	d902      	bls.n	80063e8 <_free_r+0x78>
 80063e2:	230c      	movs	r3, #12
 80063e4:	6003      	str	r3, [r0, #0]
 80063e6:	e7d6      	b.n	8006396 <_free_r+0x26>
 80063e8:	6825      	ldr	r5, [r4, #0]
 80063ea:	1961      	adds	r1, r4, r5
 80063ec:	428b      	cmp	r3, r1
 80063ee:	bf04      	itt	eq
 80063f0:	6819      	ldreq	r1, [r3, #0]
 80063f2:	685b      	ldreq	r3, [r3, #4]
 80063f4:	6063      	str	r3, [r4, #4]
 80063f6:	bf04      	itt	eq
 80063f8:	1949      	addeq	r1, r1, r5
 80063fa:	6021      	streq	r1, [r4, #0]
 80063fc:	6054      	str	r4, [r2, #4]
 80063fe:	e7ca      	b.n	8006396 <_free_r+0x26>
 8006400:	b003      	add	sp, #12
 8006402:	bd30      	pop	{r4, r5, pc}
 8006404:	20000238 	.word	0x20000238

08006408 <_read_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	; (8006428 <_read_r+0x20>)
 800640c:	4604      	mov	r4, r0
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	2200      	movs	r2, #0
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f7fa fb6a 	bl	8000af0 <_read>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_read_r+0x1e>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_read_r+0x1e>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20000240 	.word	0x20000240

0800642c <_fstat_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_fstat_r+0x20>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fa fb82 	bl	8000b42 <_fstat>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_fstat_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_fstat_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	20000240 	.word	0x20000240

08006450 <_isatty_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_isatty_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fb81 	bl	8000b62 <_isatty>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_isatty_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_isatty_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000240 	.word	0x20000240

08006470 <_init>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr

0800647c <_fini>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr
