
can_echo_cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800343c  0800343c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003444  08003444  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800344c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000014  08003460  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003460  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  0002a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020706  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b6b  00000000  00000000  0004d276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b8f  00000000  00000000  00056de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002040  00000000  00000000  0011d9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033c0 	.word	0x080033c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080033c0 	.word	0x080033c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fba9 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f815 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_GPIO_Init>
  MX_CAN1_Init();
 800051a:	f000 f87d 	bl	8000618 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8ed 	bl	80006fc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  CanSendMssg(8, hello);
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <main+0x30>)
 8000524:	2008      	movs	r0, #8
 8000526:	f000 f957 	bl	80007d8 <CanSendMssg>
  uint8_t nomssg[8] = {78, 79, 77, 83, 83, 13, 10, 0};
 800052a:	4a04      	ldr	r2, [pc, #16]	; (800053c <main+0x34>)
 800052c:	463b      	mov	r3, r7
 800052e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000532:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x2e>
 8000538:	20000000 	.word	0x20000000
 800053c:	080033d8 	.word	0x080033d8

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ff2e 	bl	80033b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a28      	ldr	r2, [pc, #160]	; (8000610 <SystemClock_Config+0xd0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xd4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b4:	23a8      	movs	r3, #168	; 0xa8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f86d 	bl	80026a8 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d4:	f000 f9fe 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2105      	movs	r1, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd0c 	bl	8002014 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 f9e7 	bl	80009d4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_CAN1_Init+0xd8>)
 800061e:	4a35      	ldr	r2, [pc, #212]	; (80006f4 <MX_CAN1_Init+0xdc>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 420;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000624:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000628:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_CAN1_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000638:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800063c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000640:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000644:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000648:	2200      	movs	r2, #0
 800064a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_CAN1_Init+0xd8>)
 800064e:	2201      	movs	r2, #1
 8000650:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000654:	2200      	movs	r2, #0
 8000656:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_CAN1_Init+0xd8>)
 800065a:	2200      	movs	r2, #0
 800065c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_CAN1_Init+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_CAN1_Init+0xd8>)
 800066c:	f000 fb6c 	bl	8000d48 <HAL_CAN_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000676:	f000 f9ad 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	sFilterConfig.FilterBank = 0;
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_CAN1_Init+0xe0>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_CAN1_Init+0xe0>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_CAN1_Init+0xe0>)
 8000688:	2201      	movs	r2, #1
 800068a:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_CAN1_Init+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_CAN1_Init+0xe0>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_CAN1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_CAN1_Init+0xe0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_CAN1_Init+0xe0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_CAN1_Init+0xe0>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_CAN1_Init+0xe0>)
 80006b2:	220e      	movs	r2, #14
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <MX_CAN1_Init+0xe0>)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_CAN1_Init+0xd8>)
 80006ba:	f000 fc41 	bl	8000f40 <HAL_CAN_ConfigFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_CAN1_Init+0xb0>
    {
      /* Filter configuration Error */
      Error_Handler();
 80006c4:	f000 f986 	bl	80009d4 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_CAN1_Init+0xd8>)
 80006ca:	f000 fd19 	bl	8001100 <HAL_CAN_Start>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CAN1_Init+0xc0>
    {
      /* Start Error */
      Error_Handler();
 80006d4:	f000 f97e 	bl	80009d4 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80006d8:	2102      	movs	r1, #2
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_CAN1_Init+0xd8>)
 80006dc:	f000 ff9e 	bl	800161c <HAL_CAN_ActivateNotification>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_CAN1_Init+0xd2>
    {
      /* Notification Error */
      Error_Handler();
 80006e6:	f000 f975 	bl	80009d4 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40006400 	.word	0x40006400
 80006f8:	200000e4 	.word	0x200000e4

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f002 fa56 	bl	8002be4 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f949 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000058 	.word	0x20000058
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x84>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <MX_GPIO_Init+0x84>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <CanSendMssg>:

/* USER CODE BEGIN 4 */
void CanSendMssg(uint8_t len, uint8_t data[len]) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
	  TxHeader.StdId = 0x17;
 80007e4:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <CanSendMssg+0xec>)
 80007e6:	2217      	movs	r2, #23
 80007e8:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 80007ea:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <CanSendMssg+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <CanSendMssg+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 2;
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <CanSendMssg+0xec>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <CanSendMssg+0xec>)
 80007fe:	2200      	movs	r2, #0
 8000800:	751a      	strb	r2, [r3, #20]
	  TxData[0] = 0xCA;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <CanSendMssg+0xf0>)
 8000804:	22ca      	movs	r2, #202	; 0xca
 8000806:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0xFE;
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <CanSendMssg+0xf0>)
 800080a:	22fe      	movs	r2, #254	; 0xfe
 800080c:	705a      	strb	r2, [r3, #1]

	  uint8_t trysend[10] = {84, 82, 89, 83, 69, 78, 68, 13, 10, 0};
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <CanSendMssg+0xf4>)
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	ca07      	ldmia	r2, {r0, r1, r2}
 8000816:	c303      	stmia	r3!, {r0, r1}
 8000818:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, trysend, 10, 10);
 800081a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800081e:	230a      	movs	r3, #10
 8000820:	220a      	movs	r2, #10
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <CanSendMssg+0xf8>)
 8000824:	f002 fa2b 	bl	8002c7e <HAL_UART_Transmit>

	  uint8_t txbox[7] = {84, 88, 66, 88, 13, 10, 0};
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <CanSendMssg+0xfc>)
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000832:	6018      	str	r0, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	8019      	strh	r1, [r3, #0]
 8000838:	3302      	adds	r3, #2
 800083a:	0c0a      	lsrs	r2, r1, #16
 800083c:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 800083e:	4826      	ldr	r0, [pc, #152]	; (80008d8 <CanSendMssg+0x100>)
 8000840:	f000 fd7d 	bl	800133e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d107      	bne.n	800085a <CanSendMssg+0x82>
		  HAL_UART_Transmit(&huart2, txbox, 7, 10);
 800084a:	f107 011c 	add.w	r1, r7, #28
 800084e:	230a      	movs	r3, #10
 8000850:	2207      	movs	r2, #7
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <CanSendMssg+0xf8>)
 8000854:	f002 fa13 	bl	8002c7e <HAL_UART_Transmit>
 8000858:	e031      	b.n	80008be <CanSendMssg+0xe6>
		  return;
	  }

	  uint8_t sendfail[11] = {83, 69, 78, 68, 70, 65, 73, 76, 13, 10, 0};
 800085a:	4a20      	ldr	r2, [pc, #128]	; (80008dc <CanSendMssg+0x104>)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	ca07      	ldmia	r2, {r0, r1, r2}
 8000862:	c303      	stmia	r3!, {r0, r1}
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	3302      	adds	r3, #2
 8000868:	0c12      	lsrs	r2, r2, #16
 800086a:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <CanSendMssg+0x108>)
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <CanSendMssg+0xf0>)
 8000870:	4914      	ldr	r1, [pc, #80]	; (80008c4 <CanSendMssg+0xec>)
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <CanSendMssg+0x100>)
 8000874:	f000 fc88 	bl	8001188 <HAL_CAN_AddTxMessage>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d006      	beq.n	800088c <CanSendMssg+0xb4>
	  {
	    /* Transmission request Error */
		HAL_UART_Transmit(&huart2, sendfail, 11, 10);
 800087e:	f107 0110 	add.w	r1, r7, #16
 8000882:	230a      	movs	r3, #10
 8000884:	220b      	movs	r2, #11
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <CanSendMssg+0xf8>)
 8000888:	f002 f9f9 	bl	8002c7e <HAL_UART_Transmit>
	  }

	  uint8_t pend[7] = {80, 69, 78, 68, 13, 10, 0};
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <CanSendMssg+0x10c>)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000896:	6018      	str	r0, [r3, #0]
 8000898:	3304      	adds	r3, #4
 800089a:	8019      	strh	r1, [r3, #0]
 800089c:	3302      	adds	r3, #2
 800089e:	0c0a      	lsrs	r2, r1, #16
 80008a0:	701a      	strb	r2, [r3, #0]
	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 80008a2:	e006      	b.n	80008b2 <CanSendMssg+0xda>
	  		  HAL_UART_Transmit(&huart2, pend, 7, 10);
 80008a4:	f107 0108 	add.w	r1, r7, #8
 80008a8:	230a      	movs	r3, #10
 80008aa:	2207      	movs	r2, #7
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <CanSendMssg+0xf8>)
 80008ae:	f002 f9e6 	bl	8002c7e <HAL_UART_Transmit>
	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <CanSendMssg+0x100>)
 80008b4:	f000 fd43 	bl	800133e <HAL_CAN_GetTxMailboxesFreeLevel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d1f2      	bne.n	80008a4 <CanSendMssg+0xcc>
	  	  }

	  //return HAL_OK; /* Test Passed */
}
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000009c 	.word	0x2000009c
 80008c8:	200000d0 	.word	0x200000d0
 80008cc:	080033e0 	.word	0x080033e0
 80008d0:	20000058 	.word	0x20000058
 80008d4:	080033ec 	.word	0x080033ec
 80008d8:	20000030 	.word	0x20000030
 80008dc:	080033f4 	.word	0x080033f4
 80008e0:	200000e0 	.word	0x200000e0
 80008e4:	08003400 	.word	0x08003400

080008e8 <CanRecvMssg>:

void CanRecvMssg(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
	uint8_t aa[7] = {70, 70, 70, 70, 13, 10, 0};
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <CanRecvMssg+0x90>)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f8:	6018      	str	r0, [r3, #0]
 80008fa:	3304      	adds	r3, #4
 80008fc:	8019      	strh	r1, [r3, #0]
 80008fe:	3302      	adds	r3, #2
 8000900:	0c0a      	lsrs	r2, r1, #16
 8000902:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0)
 8000904:	2100      	movs	r1, #0
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <CanRecvMssg+0x94>)
 8000908:	f000 fe60 	bl	80015cc <HAL_CAN_GetRxFifoFillLevel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d106      	bne.n	8000920 <CanRecvMssg+0x38>
	{
		HAL_UART_Transmit(&huart2, aa, 7, 10);
 8000912:	f107 0110 	add.w	r1, r7, #16
 8000916:	230a      	movs	r3, #10
 8000918:	2207      	movs	r2, #7
 800091a:	4819      	ldr	r0, [pc, #100]	; (8000980 <CanRecvMssg+0x98>)
 800091c:	f002 f9af 	bl	8002c7e <HAL_UART_Transmit>
	}

	uint8_t recvfail[11] = {82, 69, 67, 86, 70, 65, 73, 76, 13, 10, 0};
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <CanRecvMssg+0x9c>)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	ca07      	ldmia	r2, {r0, r1, r2}
 8000926:	c303      	stmia	r3!, {r0, r1}
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	3302      	adds	r3, #2
 800092c:	0c12      	lsrs	r2, r2, #16
 800092e:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <CanRecvMssg+0xa0>)
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <CanRecvMssg+0xa4>)
 8000934:	2100      	movs	r1, #0
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <CanRecvMssg+0x94>)
 8000938:	f000 fd36 	bl	80013a8 <HAL_CAN_GetRxMessage>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d005      	beq.n	800094e <CanRecvMssg+0x66>
	{
	    /* Reception Error */
		HAL_UART_Transmit(&huart2, recvfail, 11, 10);
 8000942:	1d39      	adds	r1, r7, #4
 8000944:	230a      	movs	r3, #10
 8000946:	220b      	movs	r2, #11
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <CanRecvMssg+0x98>)
 800094a:	f002 f998 	bl	8002c7e <HAL_UART_Transmit>
	}

	if((RxHeader.StdId != 0x11)                     ||
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <CanRecvMssg+0xa4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b11      	cmp	r3, #17
 8000954:	d106      	bne.n	8000964 <CanRecvMssg+0x7c>
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <CanRecvMssg+0xa4>)
 8000958:	68db      	ldr	r3, [r3, #12]
	if((RxHeader.StdId != 0x11)                     ||
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <CanRecvMssg+0x7c>
	   (RxHeader.IDE != CAN_ID_STD)                 ||
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <CanRecvMssg+0xa4>)
 8000960:	689b      	ldr	r3, [r3, #8]
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 8000962:	2b00      	cmp	r3, #0
	{
	    /* Rx message Error */
		//return HAL_ERROR;
	}

	HAL_UART_Transmit(&huart2, RxData, 8, 10);
 8000964:	230a      	movs	r3, #10
 8000966:	2208      	movs	r2, #8
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <CanRecvMssg+0xa0>)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <CanRecvMssg+0x98>)
 800096c:	f002 f987 	bl	8002c7e <HAL_UART_Transmit>

	//return HAL_OK; /* Test Passed */
}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08003408 	.word	0x08003408
 800097c:	20000030 	.word	0x20000030
 8000980:	20000058 	.word	0x20000058
 8000984:	08003410 	.word	0x08003410
 8000988:	200000d8 	.word	0x200000d8
 800098c:	200000b4 	.word	0x200000b4

08000990 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint8_t gotit[8] = {71, 79, 84, 73, 84, 13, 10, 0};
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a2:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart2, gotit, 8, 10);
 80009a6:	f107 0108 	add.w	r1, r7, #8
 80009aa:	230a      	movs	r3, #10
 80009ac:	2208      	movs	r2, #8
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80009b0:	f002 f965 	bl	8002c7e <HAL_UART_Transmit>
	CanRecvMssg();
 80009b4:	f7ff ff98 	bl	80008e8 <CanRecvMssg>
	CanSendMssg(8, hello);
 80009b8:	4905      	ldr	r1, [pc, #20]	; (80009d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80009ba:	2008      	movs	r0, #8
 80009bc:	f7ff ff0c 	bl	80007d8 <CanSendMssg>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	0800341c 	.word	0x0800341c
 80009cc:	20000058 	.word	0x20000058
 80009d0:	20000000 	.word	0x20000000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <HAL_CAN_MspInit+0xa4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d13c      	bne.n	8000acc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_CAN_MspInit+0xa8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <HAL_CAN_MspInit+0xac>)
 8000aa8:	f001 f920 	bl	8001cec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2013      	movs	r0, #19
 8000ab2:	f001 f8e4 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ab6:	2013      	movs	r0, #19
 8000ab8:	f001 f8fd 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2014      	movs	r0, #20
 8000ac2:	f001 f8dc 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ac6:	2014      	movs	r0, #20
 8000ac8:	f001 f8f5 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40006400 	.word	0x40006400
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f001 f8c9 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8a4 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <CAN1_TX_IRQHandler+0x10>)
 8000bca:	f000 fd4d 	bl	8001668 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000030 	.word	0x20000030

08000bd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <CAN1_RX0_IRQHandler+0x10>)
 8000bde:	f000 fd43 	bl	8001668 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000030 	.word	0x20000030

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fb93 	bl	8003368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc61 	bl	8000508 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c54:	0800344c 	.word	0x0800344c
  ldr r2, =_sbss
 8000c58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c5c:	20000110 	.word	0x20000110

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 ffeb 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fea2 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 f803 	bl	8001cd2 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 ffcb 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000010 	.word	0x20000010
 8000d04:	2000000c 	.word	0x2000000c

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	2000010c 	.word	0x2000010c

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000010c 	.word	0x2000010c

08000d48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0ed      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe62 	bl	8000a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7c:	f7ff ffd8 	bl	8000d30 <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d82:	e012      	b.n	8000daa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d84:	f7ff ffd4 	bl	8000d30 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d90b      	bls.n	8000daa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2205      	movs	r2, #5
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0c5      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0e5      	beq.n	8000d84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0202 	bic.w	r2, r2, #2
 8000dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc8:	f7ff ffb2 	bl	8000d30 <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dce:	e012      	b.n	8000df6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd0:	f7ff ffae 	bl	8000d30 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d90b      	bls.n	8000df6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2205      	movs	r2, #5
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e09f      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e5      	bne.n	8000dd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e1b      	ldrb	r3, [r3, #24]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d108      	bne.n	8000e1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e007      	b.n	8000e2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7e5b      	ldrb	r3, [r3, #25]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7e9b      	ldrb	r3, [r3, #26]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0220 	bic.w	r2, r2, #32
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7edb      	ldrb	r3, [r3, #27]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d108      	bne.n	8000e9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0210 	bic.w	r2, r2, #16
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e007      	b.n	8000eac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0210 	orr.w	r2, r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0208 	orr.w	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0208 	bic.w	r2, r2, #8
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7f5b      	ldrb	r3, [r3, #29]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d108      	bne.n	8000ef0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0204 	orr.w	r2, r2, #4
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e007      	b.n	8000f00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0204 	bic.w	r2, r2, #4
 8000efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	ea42 0103 	orr.w	r1, r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f58:	7cfb      	ldrb	r3, [r7, #19]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d003      	beq.n	8000f66 <HAL_CAN_ConfigFilter+0x26>
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	f040 80be 	bne.w	80010e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <HAL_CAN_ConfigFilter+0x1bc>)
 8000f68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	431a      	orrs	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d123      	bne.n	8001010 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3248      	adds	r2, #72	; 0x48
 8000ff0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001004:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001006:	6979      	ldr	r1, [r7, #20]
 8001008:	3348      	adds	r3, #72	; 0x48
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d122      	bne.n	800105e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001038:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3248      	adds	r2, #72	; 0x48
 800103e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001052:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001054:	6979      	ldr	r1, [r7, #20]
 8001056:	3348      	adds	r3, #72	; 0x48
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	401a      	ands	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001078:	e007      	b.n	800108a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	431a      	orrs	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	401a      	ands	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d4:	f023 0201 	bic.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e006      	b.n	80010f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
  }
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40006400 	.word	0x40006400

08001100 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d12e      	bne.n	8001172 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800112c:	f7ff fe00 	bl	8000d30 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001132:	e012      	b.n	800115a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff fdfc 	bl	8000d30 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d90b      	bls.n	800115a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2205      	movs	r2, #5
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e012      	b.n	8001180 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e5      	bne.n	8001134 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e006      	b.n	8001180 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d003      	beq.n	80011b4 <HAL_CAN_AddTxMessage+0x2c>
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	f040 80b8 	bne.w	8001324 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10a      	bne.n	80011d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a0 	beq.w	8001314 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	0e1b      	lsrs	r3, r3, #24
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d907      	bls.n	80011f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e09e      	b.n	8001332 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011f4:	2201      	movs	r2, #1
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	409a      	lsls	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001210:	68f9      	ldr	r1, [r7, #12]
 8001212:	6809      	ldr	r1, [r1, #0]
 8001214:	431a      	orrs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3318      	adds	r3, #24
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e00f      	b.n	8001242 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800122c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001232:	68f9      	ldr	r1, [r7, #12]
 8001234:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001236:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3318      	adds	r3, #24
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	440b      	add	r3, r1
 8001240:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3318      	adds	r3, #24
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	3304      	adds	r3, #4
 8001254:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	7d1b      	ldrb	r3, [r3, #20]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d111      	bne.n	8001282 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3318      	adds	r3, #24
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	3304      	adds	r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6811      	ldr	r1, [r2, #0]
 8001272:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3318      	adds	r3, #24
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	440b      	add	r3, r1
 800127e:	3304      	adds	r3, #4
 8001280:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3307      	adds	r3, #7
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	061a      	lsls	r2, r3, #24
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3306      	adds	r3, #6
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3305      	adds	r3, #5
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	4313      	orrs	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3204      	adds	r2, #4
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4610      	mov	r0, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	6811      	ldr	r1, [r2, #0]
 80012aa:	ea43 0200 	orr.w	r2, r3, r0
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3303      	adds	r3, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	061a      	lsls	r2, r3, #24
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3302      	adds	r3, #2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	041b      	lsls	r3, r3, #16
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	4313      	orrs	r3, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	4610      	mov	r0, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6811      	ldr	r1, [r2, #0]
 80012e0:	ea43 0200 	orr.w	r2, r3, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3318      	adds	r3, #24
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3318      	adds	r3, #24
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	440b      	add	r3, r1
 800130e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	e00e      	b.n	8001332 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e006      	b.n	8001332 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001350:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d002      	beq.n	800135e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d11d      	bne.n	800139a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d003      	beq.n	80013cc <HAL_CAN_GetRxMessage+0x24>
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	f040 80f3 	bne.w	80015b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10e      	bne.n	80013f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d116      	bne.n	800140e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0e7      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d107      	bne.n	800140e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0d8      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	331b      	adds	r3, #27
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0204 	and.w	r2, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10c      	bne.n	8001446 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e00b      	b.n	800145e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	331b      	adds	r3, #27
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	331b      	adds	r3, #27
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0202 	and.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	331b      	adds	r3, #27
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 020f 	and.w	r2, r3, #15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0a1a      	lsrs	r2, r3, #8
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0c1a      	lsrs	r2, r3, #16
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3302      	adds	r3, #2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0e1a      	lsrs	r2, r3, #24
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3303      	adds	r3, #3
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3304      	adds	r3, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0a1a      	lsrs	r2, r3, #8
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3305      	adds	r3, #5
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0c1a      	lsrs	r2, r3, #16
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3306      	adds	r3, #6
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0e1a      	lsrs	r2, r3, #24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3307      	adds	r3, #7
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d108      	bne.n	800159e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0220 	orr.w	r2, r2, #32
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	e007      	b.n	80015ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0220 	orr.w	r2, r2, #32
 80015ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d002      	beq.n	80015ee <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d10f      	bne.n	800160e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e005      	b.n	800160e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d002      	beq.n	800163a <HAL_CAN_ActivateNotification+0x1e>
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d109      	bne.n	800164e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6959      	ldr	r1, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e006      	b.n	800165c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07c      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f983 	bl	80019d6 <HAL_CAN_TxMailbox0CompleteCallback>
 80016d0:	e016      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	e00c      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e002      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f989 	bl	8001a12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f963 	bl	80019ea <HAL_CAN_TxMailbox1CompleteCallback>
 8001724:	e016      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	e00c      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	e002      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f969 	bl	8001a26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001766:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f943 	bl	80019fe <HAL_CAN_TxMailbox2CompleteCallback>
 8001778:	e016      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
 800178c:	e00c      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	e002      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f949 	bl	8001a3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f93a 	bl	8001a62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f921 	bl	8001a4e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00c      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2210      	movs	r2, #16
 800182e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2208      	movs	r2, #8
 800184a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f912 	bl	8001a76 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff f890 	bl	8000990 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8fc 	bl	8001a8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00b      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2208      	movs	r2, #8
 80018ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8f5 	bl	8001a9e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d07b      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d072      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001922:	2b00      	cmp	r3, #0
 8001924:	d043      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03e      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001936:	2b60      	cmp	r3, #96	; 0x60
 8001938:	d02b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x32a>
 800193a:	2b60      	cmp	r3, #96	; 0x60
 800193c:	d82e      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 800193e:	2b50      	cmp	r3, #80	; 0x50
 8001940:	d022      	beq.n	8001988 <HAL_CAN_IRQHandler+0x320>
 8001942:	2b50      	cmp	r3, #80	; 0x50
 8001944:	d82a      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d019      	beq.n	800197e <HAL_CAN_IRQHandler+0x316>
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d826      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 800194e:	2b30      	cmp	r3, #48	; 0x30
 8001950:	d010      	beq.n	8001974 <HAL_CAN_IRQHandler+0x30c>
 8001952:	2b30      	cmp	r3, #48	; 0x30
 8001954:	d822      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 8001956:	2b10      	cmp	r3, #16
 8001958:	d002      	beq.n	8001960 <HAL_CAN_IRQHandler+0x2f8>
 800195a:	2b20      	cmp	r3, #32
 800195c:	d005      	beq.n	800196a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800195e:	e01d      	b.n	800199c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001968:	e019      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001972:	e014      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197c:	e00f      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001986:	e00a      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001990:	e005      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800199a:	e000      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            break;
 800199c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2204      	movs	r2, #4
 80019b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f872 	bl	8001ab2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff3e 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff31 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e165      	b.n	8001fd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8154 	bne.w	8001fce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80ae 	beq.w	8001fce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_GPIO_Init+0x300>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_GPIO_Init+0x300>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <HAL_GPIO_Init+0x300>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x308>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d025      	beq.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01f      	beq.n	8001f02 <HAL_GPIO_Init+0x216>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x310>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x212>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x314>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x20e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_GPIO_Init+0x318>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x20a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_GPIO_Init+0x31c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x206>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_GPIO_Init+0x320>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x202>
 8001eea:	2306      	movs	r3, #6
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x21c>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae96 	bls.w	8001d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40013c00 	.word	0x40013c00

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0cc      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e067      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4934      	ldr	r1, [pc, #208]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe fe14 	bl	8000d30 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fe10 	bl	8000d30 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f855 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fd74 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	08003424 	.word	0x08003424
 80021d8:	20000008 	.word	0x20000008
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a9b      	lsrs	r3, r3, #10
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	08003434 	.word	0x08003434

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002224:	f7ff ffdc 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0b5b      	lsrs	r3, r3, #13
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	08003434 	.word	0x08003434

08002248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	b0ae      	sub	sp, #184	; 0xb8
 800224e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226e:	4bcb      	ldr	r3, [pc, #812]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b0c      	cmp	r3, #12
 8002278:	f200 8206 	bhi.w	8002688 <HAL_RCC_GetSysClockFreq+0x440>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	080022b9 	.word	0x080022b9
 8002288:	08002689 	.word	0x08002689
 800228c:	08002689 	.word	0x08002689
 8002290:	08002689 	.word	0x08002689
 8002294:	080022c1 	.word	0x080022c1
 8002298:	08002689 	.word	0x08002689
 800229c:	08002689 	.word	0x08002689
 80022a0:	08002689 	.word	0x08002689
 80022a4:	080022c9 	.word	0x080022c9
 80022a8:	08002689 	.word	0x08002689
 80022ac:	08002689 	.word	0x08002689
 80022b0:	08002689 	.word	0x08002689
 80022b4:	080024b9 	.word	0x080024b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4bb9      	ldr	r3, [pc, #740]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80022be:	e1e7      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4bb8      	ldr	r3, [pc, #736]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022c6:	e1e3      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4bb4      	ldr	r3, [pc, #720]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d4:	4bb1      	ldr	r3, [pc, #708]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d071      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e0:	4bae      	ldr	r3, [pc, #696]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002306:	4622      	mov	r2, r4
 8002308:	462b      	mov	r3, r5
 800230a:	f04f 0000 	mov.w	r0, #0
 800230e:	f04f 0100 	mov.w	r1, #0
 8002312:	0159      	lsls	r1, r3, #5
 8002314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002318:	0150      	lsls	r0, r2, #5
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4621      	mov	r1, r4
 8002320:	1a51      	subs	r1, r2, r1
 8002322:	6439      	str	r1, [r7, #64]	; 0x40
 8002324:	4629      	mov	r1, r5
 8002326:	eb63 0301 	sbc.w	r3, r3, r1
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002338:	4649      	mov	r1, r9
 800233a:	018b      	lsls	r3, r1, #6
 800233c:	4641      	mov	r1, r8
 800233e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002342:	4641      	mov	r1, r8
 8002344:	018a      	lsls	r2, r1, #6
 8002346:	4641      	mov	r1, r8
 8002348:	1a51      	subs	r1, r2, r1
 800234a:	63b9      	str	r1, [r7, #56]	; 0x38
 800234c:	4649      	mov	r1, r9
 800234e:	eb63 0301 	sbc.w	r3, r3, r1
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002360:	4649      	mov	r1, r9
 8002362:	00cb      	lsls	r3, r1, #3
 8002364:	4641      	mov	r1, r8
 8002366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236a:	4641      	mov	r1, r8
 800236c:	00ca      	lsls	r2, r1, #3
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	4603      	mov	r3, r0
 8002374:	4622      	mov	r2, r4
 8002376:	189b      	adds	r3, r3, r2
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 800237a:	462b      	mov	r3, r5
 800237c:	460a      	mov	r2, r1
 800237e:	eb42 0303 	adc.w	r3, r2, r3
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002390:	4629      	mov	r1, r5
 8002392:	024b      	lsls	r3, r1, #9
 8002394:	4621      	mov	r1, r4
 8002396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800239a:	4621      	mov	r1, r4
 800239c:	024a      	lsls	r2, r1, #9
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023b4:	f7fd ff26 	bl	8000204 <__aeabi_uldivmod>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4613      	mov	r3, r2
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023c2:	e067      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80023d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023de:	2300      	movs	r3, #0
 80023e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	0159      	lsls	r1, r3, #5
 80023f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f8:	0150      	lsls	r0, r2, #5
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4621      	mov	r1, r4
 8002400:	1a51      	subs	r1, r2, r1
 8002402:	62b9      	str	r1, [r7, #40]	; 0x28
 8002404:	4629      	mov	r1, r5
 8002406:	eb63 0301 	sbc.w	r3, r3, r1
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002418:	4649      	mov	r1, r9
 800241a:	018b      	lsls	r3, r1, #6
 800241c:	4641      	mov	r1, r8
 800241e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002422:	4641      	mov	r1, r8
 8002424:	018a      	lsls	r2, r1, #6
 8002426:	4641      	mov	r1, r8
 8002428:	ebb2 0a01 	subs.w	sl, r2, r1
 800242c:	4649      	mov	r1, r9
 800242e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800243e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002446:	4692      	mov	sl, r2
 8002448:	469b      	mov	fp, r3
 800244a:	4623      	mov	r3, r4
 800244c:	eb1a 0303 	adds.w	r3, sl, r3
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	462b      	mov	r3, r5
 8002454:	eb4b 0303 	adc.w	r3, fp, r3
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800247c:	2200      	movs	r2, #0
 800247e:	673b      	str	r3, [r7, #112]	; 0x70
 8002480:	677a      	str	r2, [r7, #116]	; 0x74
 8002482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002486:	f7fd febd 	bl	8000204 <__aeabi_uldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4613      	mov	r3, r2
 8002490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80024a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024b6:	e0eb      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d06b      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_GetSysClockFreq+0x354>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
 80024e4:	2300      	movs	r3, #0
 80024e6:	667b      	str	r3, [r7, #100]	; 0x64
 80024e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024ec:	4622      	mov	r2, r4
 80024ee:	462b      	mov	r3, r5
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fe:	0150      	lsls	r0, r2, #5
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4621      	mov	r1, r4
 8002506:	1a51      	subs	r1, r2, r1
 8002508:	61b9      	str	r1, [r7, #24]
 800250a:	4629      	mov	r1, r5
 800250c:	eb63 0301 	sbc.w	r3, r3, r1
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800251e:	4659      	mov	r1, fp
 8002520:	018b      	lsls	r3, r1, #6
 8002522:	4651      	mov	r1, sl
 8002524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002528:	4651      	mov	r1, sl
 800252a:	018a      	lsls	r2, r1, #6
 800252c:	4651      	mov	r1, sl
 800252e:	ebb2 0801 	subs.w	r8, r2, r1
 8002532:	4659      	mov	r1, fp
 8002534:	eb63 0901 	sbc.w	r9, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800254c:	4690      	mov	r8, r2
 800254e:	4699      	mov	r9, r3
 8002550:	4623      	mov	r3, r4
 8002552:	eb18 0303 	adds.w	r3, r8, r3
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	462b      	mov	r3, r5
 800255a:	eb49 0303 	adc.w	r3, r9, r3
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800256c:	4629      	mov	r1, r5
 800256e:	024b      	lsls	r3, r1, #9
 8002570:	4621      	mov	r1, r4
 8002572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002576:	4621      	mov	r1, r4
 8002578:	024a      	lsls	r2, r1, #9
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002582:	2200      	movs	r2, #0
 8002584:	65bb      	str	r3, [r7, #88]	; 0x58
 8002586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800258c:	f7fd fe3a 	bl	8000204 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4613      	mov	r3, r2
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800259a:	e065      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x420>
 800259c:	40023800 	.word	0x40023800
 80025a0:	00f42400 	.word	0x00f42400
 80025a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a8:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	2200      	movs	r2, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	4611      	mov	r1, r2
 80025b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b8:	653b      	str	r3, [r7, #80]	; 0x50
 80025ba:	2300      	movs	r3, #0
 80025bc:	657b      	str	r3, [r7, #84]	; 0x54
 80025be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025c2:	4642      	mov	r2, r8
 80025c4:	464b      	mov	r3, r9
 80025c6:	f04f 0000 	mov.w	r0, #0
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	0159      	lsls	r1, r3, #5
 80025d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d4:	0150      	lsls	r0, r2, #5
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4641      	mov	r1, r8
 80025dc:	1a51      	subs	r1, r2, r1
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	4649      	mov	r1, r9
 80025e2:	eb63 0301 	sbc.w	r3, r3, r1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025f4:	4659      	mov	r1, fp
 80025f6:	018b      	lsls	r3, r1, #6
 80025f8:	4651      	mov	r1, sl
 80025fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fe:	4651      	mov	r1, sl
 8002600:	018a      	lsls	r2, r1, #6
 8002602:	4651      	mov	r1, sl
 8002604:	1a54      	subs	r4, r2, r1
 8002606:	4659      	mov	r1, fp
 8002608:	eb63 0501 	sbc.w	r5, r3, r1
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	464b      	mov	r3, r9
 8002628:	eb45 0303 	adc.w	r3, r5, r3
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002650:	2200      	movs	r2, #0
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
 8002654:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800265a:	f7fd fdd3 	bl	8000204 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4613      	mov	r3, r2
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0f1b      	lsrs	r3, r3, #28
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002686:	e003      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800268a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800268e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002694:	4618      	mov	r0, r3
 8002696:	37b8      	adds	r7, #184	; 0xb8
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400

080026a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e28d      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8083 	beq.w	80027ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026c8:	4b94      	ldr	r3, [pc, #592]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d019      	beq.n	8002708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026d4:	4b91      	ldr	r3, [pc, #580]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026e0:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d00c      	beq.n	8002708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d112      	bne.n	8002720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002706:	d10b      	bne.n	8002720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4b84      	ldr	r3, [pc, #528]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05b      	beq.n	80027cc <HAL_RCC_OscConfig+0x124>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d157      	bne.n	80027cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e25a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x90>
 800272a:	4b7c      	ldr	r3, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7b      	ldr	r2, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xcc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xb4>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xcc>
 800275c:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6b      	ldr	r2, [pc, #428]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fad8 	bl	8000d30 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fad4 	bl	8000d30 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e21f      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xdc>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fac4 	bl	8000d30 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fac0 	bl	8000d30 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e20b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x104>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06f      	beq.n	80028ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d017      	beq.n	8002816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d105      	bne.n	80027fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x186>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1d3      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCC_OscConfig+0x278>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fa6d 	bl	8000d30 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fa69 	bl	8000d30 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1b4      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x274>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4925      	ldr	r1, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x274>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x278>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fa4c 	bl	8000d30 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fa48 	bl	8000d30 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e193      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x27c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fa2c 	bl	8000d30 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fa28 	bl	8000d30 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e173      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x274>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x234>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe fa15 	bl	8000d30 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe fa11 	bl	8000d30 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e15c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b8a      	ldr	r3, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b83      	ldr	r3, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a7e      	ldr	r2, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <HAL_RCC_OscConfig+0x4b0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCC_OscConfig+0x4b0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4b0>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe f9d1 	bl	8000d30 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe f9cd 	bl	8000d30 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e118      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <HAL_RCC_OscConfig+0x4b0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x31e>
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x358>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x340>
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a60      	ldr	r2, [pc, #384]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x358>
 80029e8:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a56      	ldr	r2, [pc, #344]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe f992 	bl	8000d30 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe f98e 	bl	8000d30 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0d7      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x368>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe f97c 	bl	8000d30 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe f978 	bl	8000d30 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0c1      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a3a      	ldr	r2, [pc, #232]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80ad 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d060      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d145      	bne.n	8002b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x4b4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe f94c 	bl	8000d30 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe f948 	bl	8000d30 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e093      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	071b      	lsls	r3, r3, #28
 8002ae6:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x4b4>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe f91d 	bl	8000d30 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe f919 	bl	8000d30 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e064      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x452>
 8002b18:	e05c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x4b4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f906 	bl	8000d30 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe f902 	bl	8000d30 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e04d      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x4ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x480>
 8002b46:	e045      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e040      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_RCC_OscConfig+0x538>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d030      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d129      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d122      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d119      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d10f      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e03f      	b.n	8002c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd ff68 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f929 	bl	8002e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08a      	sub	sp, #40	; 0x28
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d17c      	bne.n	8002d98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Transmit+0x2c>
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e075      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x3e>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e06e      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd2:	f7fe f82d 	bl	8000d30 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d108      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	e003      	b.n	8002d08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d10:	e02a      	b.n	8002d68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f840 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e036      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3302      	adds	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1cf      	bne.n	8002d12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f810 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e006      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b090      	sub	sp, #64	; 0x40
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	e050      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d04c      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dc2:	f7fd ffb5 	bl	8000d30 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d241      	bcs.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df2:	637a      	str	r2, [r7, #52]	; 0x34
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	613b      	str	r3, [r7, #16]
   return(result);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e26:	623a      	str	r2, [r7, #32]
 8002e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d09f      	beq.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3740      	adds	r7, #64	; 0x40
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0c0      	sub	sp, #256	; 0x100
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	ea40 0301 	orr.w	r3, r0, r1
 8002ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ed8:	f021 010c 	bic.w	r1, r1, #12
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	6999      	ldr	r1, [r3, #24]
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	ea40 0301 	orr.w	r3, r0, r1
 8002f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b8f      	ldr	r3, [pc, #572]	; (800314c <UART_SetConfig+0x2cc>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d005      	beq.n	8002f20 <UART_SetConfig+0xa0>
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <UART_SetConfig+0x2d0>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d104      	bne.n	8002f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7ff f97e 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 8002f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f28:	e003      	b.n	8002f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2a:	f7ff f965 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8002f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3c:	f040 810c 	bne.w	8003158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f62:	4621      	mov	r1, r4
 8002f64:	eb12 0801 	adds.w	r8, r2, r1
 8002f68:	4629      	mov	r1, r5
 8002f6a:	eb43 0901 	adc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb49 0303 	adc.w	r3, r9, r3
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fae:	460b      	mov	r3, r1
 8002fb0:	18db      	adds	r3, r3, r3
 8002fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	eb42 0303 	adc.w	r3, r2, r3
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
 8002fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fc4:	f7fd f91e 	bl	8000204 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <UART_SetConfig+0x2d4>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011c      	lsls	r4, r3, #4
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb43 0b01 	adc.w	fp, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003018:	4692      	mov	sl, r2
 800301a:	469b      	mov	fp, r3
 800301c:	4643      	mov	r3, r8
 800301e:	eb1a 0303 	adds.w	r3, sl, r3
 8003022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003026:	464b      	mov	r3, r9
 8003028:	eb4b 0303 	adc.w	r3, fp, r3
 800302c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800303c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003044:	460b      	mov	r3, r1
 8003046:	18db      	adds	r3, r3, r3
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
 800304a:	4613      	mov	r3, r2
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800305a:	f7fd f8d3 	bl	8000204 <__aeabi_uldivmod>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4611      	mov	r1, r2
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <UART_SetConfig+0x2d4>)
 8003066:	fba3 2301 	umull	r2, r3, r3, r1
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2264      	movs	r2, #100	; 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <UART_SetConfig+0x2d4>)
 800307c:	fba3 2302 	umull	r2, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003088:	441c      	add	r4, r3
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003094:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030a4:	415b      	adcs	r3, r3
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6339      	str	r1, [r7, #48]	; 0x30
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003100:	460b      	mov	r3, r1
 8003102:	18db      	adds	r3, r3, r3
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 8003106:	4613      	mov	r3, r2
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003116:	f7fd f875 	bl	8000204 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <UART_SetConfig+0x2d4>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2164      	movs	r1, #100	; 0x64
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	3332      	adds	r3, #50	; 0x32
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <UART_SetConfig+0x2d4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4422      	add	r2, r4
 8003146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003148:	e105      	b.n	8003356 <UART_SetConfig+0x4d6>
 800314a:	bf00      	nop
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800316a:	4642      	mov	r2, r8
 800316c:	464b      	mov	r3, r9
 800316e:	1891      	adds	r1, r2, r2
 8003170:	6239      	str	r1, [r7, #32]
 8003172:	415b      	adcs	r3, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317a:	4641      	mov	r1, r8
 800317c:	1854      	adds	r4, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb43 0501 	adc.w	r5, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	00eb      	lsls	r3, r5, #3
 800318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003192:	00e2      	lsls	r2, r4, #3
 8003194:	4614      	mov	r4, r2
 8003196:	461d      	mov	r5, r3
 8003198:	4643      	mov	r3, r8
 800319a:	18e3      	adds	r3, r4, r3
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a0:	464b      	mov	r3, r9
 80031a2:	eb45 0303 	adc.w	r3, r5, r3
 80031a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031c6:	4629      	mov	r1, r5
 80031c8:	008b      	lsls	r3, r1, #2
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d0:	4621      	mov	r1, r4
 80031d2:	008a      	lsls	r2, r1, #2
 80031d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031d8:	f7fd f814 	bl	8000204 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b60      	ldr	r3, [pc, #384]	; (8003364 <UART_SetConfig+0x4e4>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011c      	lsls	r4, r3, #4
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	1891      	adds	r1, r2, r2
 8003202:	61b9      	str	r1, [r7, #24]
 8003204:	415b      	adcs	r3, r3
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320c:	4641      	mov	r1, r8
 800320e:	1851      	adds	r1, r2, r1
 8003210:	6139      	str	r1, [r7, #16]
 8003212:	4649      	mov	r1, r9
 8003214:	414b      	adcs	r3, r1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003224:	4659      	mov	r1, fp
 8003226:	00cb      	lsls	r3, r1, #3
 8003228:	4651      	mov	r1, sl
 800322a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322e:	4651      	mov	r1, sl
 8003230:	00ca      	lsls	r2, r1, #3
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	4603      	mov	r3, r0
 8003238:	4642      	mov	r2, r8
 800323a:	189b      	adds	r3, r3, r2
 800323c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003240:	464b      	mov	r3, r9
 8003242:	460a      	mov	r2, r1
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	67bb      	str	r3, [r7, #120]	; 0x78
 8003256:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003264:	4649      	mov	r1, r9
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	4641      	mov	r1, r8
 800326a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326e:	4641      	mov	r1, r8
 8003270:	008a      	lsls	r2, r1, #2
 8003272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003276:	f7fc ffc5 	bl	8000204 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <UART_SetConfig+0x4e4>)
 8003280:	fba3 1302 	umull	r1, r3, r3, r2
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	2164      	movs	r1, #100	; 0x64
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	3332      	adds	r3, #50	; 0x32
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <UART_SetConfig+0x4e4>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329e:	441c      	add	r4, r3
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a4:	2200      	movs	r2, #0
 80032a6:	673b      	str	r3, [r7, #112]	; 0x70
 80032a8:	677a      	str	r2, [r7, #116]	; 0x74
 80032aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ae:	4642      	mov	r2, r8
 80032b0:	464b      	mov	r3, r9
 80032b2:	1891      	adds	r1, r2, r2
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	415b      	adcs	r3, r3
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032be:	4641      	mov	r1, r8
 80032c0:	1851      	adds	r1, r2, r1
 80032c2:	6039      	str	r1, [r7, #0]
 80032c4:	4649      	mov	r1, r9
 80032c6:	414b      	adcs	r3, r1
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d6:	4659      	mov	r1, fp
 80032d8:	00cb      	lsls	r3, r1, #3
 80032da:	4651      	mov	r1, sl
 80032dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e0:	4651      	mov	r1, sl
 80032e2:	00ca      	lsls	r2, r1, #3
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	4642      	mov	r2, r8
 80032ec:	189b      	adds	r3, r3, r2
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80032f0:	464b      	mov	r3, r9
 80032f2:	460a      	mov	r2, r1
 80032f4:	eb42 0303 	adc.w	r3, r2, r3
 80032f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
 8003304:	667a      	str	r2, [r7, #100]	; 0x64
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003312:	4649      	mov	r1, r9
 8003314:	008b      	lsls	r3, r1, #2
 8003316:	4641      	mov	r1, r8
 8003318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331c:	4641      	mov	r1, r8
 800331e:	008a      	lsls	r2, r1, #2
 8003320:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003324:	f7fc ff6e 	bl	8000204 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <UART_SetConfig+0x4e4>)
 800332e:	fba3 1302 	umull	r1, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	3332      	adds	r3, #50	; 0x32
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <UART_SetConfig+0x4e4>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4422      	add	r2, r4
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	bf00      	nop
 8003358:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	51eb851f 	.word	0x51eb851f

08003368 <__libc_init_array>:
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	4d0d      	ldr	r5, [pc, #52]	; (80033a0 <__libc_init_array+0x38>)
 800336c:	4c0d      	ldr	r4, [pc, #52]	; (80033a4 <__libc_init_array+0x3c>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	2600      	movs	r6, #0
 8003374:	42a6      	cmp	r6, r4
 8003376:	d109      	bne.n	800338c <__libc_init_array+0x24>
 8003378:	4d0b      	ldr	r5, [pc, #44]	; (80033a8 <__libc_init_array+0x40>)
 800337a:	4c0c      	ldr	r4, [pc, #48]	; (80033ac <__libc_init_array+0x44>)
 800337c:	f000 f820 	bl	80033c0 <_init>
 8003380:	1b64      	subs	r4, r4, r5
 8003382:	10a4      	asrs	r4, r4, #2
 8003384:	2600      	movs	r6, #0
 8003386:	42a6      	cmp	r6, r4
 8003388:	d105      	bne.n	8003396 <__libc_init_array+0x2e>
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003390:	4798      	blx	r3
 8003392:	3601      	adds	r6, #1
 8003394:	e7ee      	b.n	8003374 <__libc_init_array+0xc>
 8003396:	f855 3b04 	ldr.w	r3, [r5], #4
 800339a:	4798      	blx	r3
 800339c:	3601      	adds	r6, #1
 800339e:	e7f2      	b.n	8003386 <__libc_init_array+0x1e>
 80033a0:	08003444 	.word	0x08003444
 80033a4:	08003444 	.word	0x08003444
 80033a8:	08003444 	.word	0x08003444
 80033ac:	08003448 	.word	0x08003448

080033b0 <memset>:
 80033b0:	4402      	add	r2, r0
 80033b2:	4603      	mov	r3, r0
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d100      	bne.n	80033ba <memset+0xa>
 80033b8:	4770      	bx	lr
 80033ba:	f803 1b01 	strb.w	r1, [r3], #1
 80033be:	e7f9      	b.n	80033b4 <memset+0x4>

080033c0 <_init>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr

080033cc <_fini>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr
