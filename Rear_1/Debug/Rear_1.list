
Rear_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec8  08009ec8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed0  08009ed0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000080  08009f58  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08009f58  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001646c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5c  00000000  00000000  0003651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244d7  00000000  00000000  0003b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017567  00000000  00000000  0005fcff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9811  00000000  00000000  00077266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150a77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  00150ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d58 	.word	0x08009d58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009d58 	.word	0x08009d58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <_write>:
};

union Speedtype speed0;
union Speedtype speed1;

int _write(int file, char* p, int len) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	2310      	movs	r3, #16
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <_write+0x24>)
 8000e06:	f007 f992 	bl	800812e <HAL_UART_Transmit>
	return len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200002c8 	.word	0x200002c8

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 fd84 	bl	8002928 <HAL_Init>

  /* USER CODE BEGIN Init */
  dis = calloc(nof, 16 * nof);
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x68>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <main+0x68>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4610      	mov	r0, r2
 8000e30:	f007 ff3e 	bl	8008cb0 <calloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <main+0x6c>)
 8000e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f82a 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 fb34 	bl	80014ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 fb08 	bl	8001458 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e48:	f000 f8ce 	bl	8000fe8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e4c:	f000 f9de 	bl	800120c <MX_TIM3_Init>
  MX_CAN1_Init();
 8000e50:	f000 f892 	bl	8000f78 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000e54:	f000 fa28 	bl	80012a8 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000e58:	f000 fac8 	bl	80013ec <MX_TIM7_Init>
  MX_TIM1_Init();
 8000e5c:	f000 f8f2 	bl	8001044 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e60:	f000 f980 	bl	8001164 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e64:	f000 fa6e 	bl	8001344 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //setLeftMotorCCR(0, DIR_FORWARD);
  //setRightMotorCCR(0, DIR_FORWARD);

  if (!(ChangeAddresses())) {
 8000e68:	f000 fe36 	bl	8001ad8 <ChangeAddresses>
  }
  else {
	  //HAL_UART_Transmit(&huart2, succ, 6, 10);
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <main+0x70>)
 8000e6e:	f006 f925 	bl	80070bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <main+0x74>)
 8000e74:	f006 f922 	bl	80070bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <main+0x78>)
 8000e7a:	f006 f91f 	bl	80070bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0x66>
 8000e80:	20000002 	.word	0x20000002
 8000e84:	2000030c 	.word	0x2000030c
 8000e88:	20000280 	.word	0x20000280
 8000e8c:	200001a8 	.word	0x200001a8
 8000e90:	200001f0 	.word	0x200001f0

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2234      	movs	r2, #52	; 0x34
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 ff36 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <SystemClock_Config+0xdc>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <SystemClock_Config+0xdc>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <SystemClock_Config+0xdc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <SystemClock_Config+0xe0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <SystemClock_Config+0xe0>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <SystemClock_Config+0xe0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f08:	23b4      	movs	r3, #180	; 0xb4
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 fddf 	bl	8006ae0 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f28:	f001 f94a 	bl	80021c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f2c:	f005 fa3e 	bl	80063ac <HAL_PWREx_EnableOverDrive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f36:	f001 f943 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2105      	movs	r1, #5
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fa77 	bl	800644c <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f64:	f001 f92c 	bl	80021c0 <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3750      	adds	r7, #80	; 0x50
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <MX_CAN1_Init+0x6c>)
 8000f80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f96:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000f9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000f9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fa2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_CAN1_Init+0x68>)
 8000fca:	f001 fd43 	bl	8002a54 <HAL_CAN_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f001 f8f4 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Filter_Init();
 8000fd8:	f000 fe94 	bl	8001d04 <CAN_Filter_Init>
  /* USER CODE END CAN1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000009c 	.word	0x2000009c
 8000fe4:	40006400 	.word	0x40006400

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C1_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_I2C1_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_I2C1_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_I2C1_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C1_Init+0x50>)
 8001026:	f002 fe67 	bl	8003cf8 <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f001 f8c6 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000c4 	.word	0x200000c4
 800103c:	40005400 	.word	0x40005400
 8001040:	00061a80 	.word	0x00061a80

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b092      	sub	sp, #72	; 0x48
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2220      	movs	r2, #32
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f007 fe50 	bl	8008d14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <MX_TIM1_Init+0x118>)
 8001076:	4a3a      	ldr	r2, [pc, #232]	; (8001160 <MX_TIM1_Init+0x11c>)
 8001078:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <MX_TIM1_Init+0x118>)
 800107c:	2209      	movs	r2, #9
 800107e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <MX_TIM1_Init+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9000-1;
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_TIM1_Init+0x118>)
 8001088:	f242 3227 	movw	r2, #8999	; 0x2327
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <MX_TIM1_Init+0x118>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <MX_TIM1_Init+0x118>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <MX_TIM1_Init+0x118>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a0:	482e      	ldr	r0, [pc, #184]	; (800115c <MX_TIM1_Init+0x118>)
 80010a2:	f006 f87b 	bl	800719c <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010ac:	f001 f888 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010bc:	4619      	mov	r1, r3
 80010be:	4827      	ldr	r0, [pc, #156]	; (800115c <MX_TIM1_Init+0x118>)
 80010c0:	f006 ff06 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010ca:	f001 f879 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4500-1;
 80010d2:	f241 1393 	movw	r3, #4499	; 0x1193
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <MX_TIM1_Init+0x118>)
 80010f6:	f006 fa4f 	bl	8007598 <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001100:	f001 f85e 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	2204      	movs	r2, #4
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_TIM1_Init+0x118>)
 800110e:	f006 fa43 	bl	8007598 <HAL_TIM_PWM_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001118:	f001 f852 	bl	80021c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <MX_TIM1_Init+0x118>)
 8001140:	f006 ff42 	bl	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800114a:	f001 f839 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <MX_TIM1_Init+0x118>)
 8001150:	f001 fa34 	bl	80025bc <HAL_TIM_MspPostInit>

}
 8001154:	bf00      	nop
 8001156:	3748      	adds	r7, #72	; 0x48
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000118 	.word	0x20000118
 8001160:	40010000 	.word	0x40010000

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fdce 	bl	8008d14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_TIM2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011d4:	f006 f831 	bl	800723a <HAL_TIM_Encoder_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011de:	f000 ffef 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011f0:	f006 fe6e 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011fa:	f000 ffe1 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000160 	.word	0x20000160

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_TIM3_Init+0x94>)
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_TIM3_Init+0x98>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001230:	22c7      	movs	r2, #199	; 0xc7
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16650-1;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM3_Init+0x94>)
 800123c:	f244 1209 	movw	r2, #16649	; 0x4109
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM3_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001250:	f005 fee4 	bl	800701c <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800125a:	f000 ffb1 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM3_Init+0x94>)
 800126c:	f006 fa56 	bl	800771c <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 ffa3 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001288:	f006 fe22 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001292:	f000 ff95 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001a8 	.word	0x200001a8
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM4_Init+0x94>)
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <MX_TIM4_Init+0x98>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25-1;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_TIM4_Init+0x94>)
 80012cc:	2218      	movs	r2, #24
 80012ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_TIM4_Init+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM4_Init+0x94>)
 80012d8:	f640 620f 	movw	r2, #3599	; 0xe0f
 80012dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_TIM4_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM4_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012ea:	4814      	ldr	r0, [pc, #80]	; (800133c <MX_TIM4_Init+0x94>)
 80012ec:	f005 fe96 	bl	800701c <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012f6:	f000 ff63 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_TIM4_Init+0x94>)
 8001308:	f006 fa08 	bl	800771c <HAL_TIM_ConfigClockSource>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 ff55 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_TIM4_Init+0x94>)
 8001324:	f006 fdd4 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800132e:	f000 ff47 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001f0 	.word	0x200001f0
 8001340:	40000800 	.word	0x40000800

08001344 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f007 fcde 	bl	8008d14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_TIM5_Init+0xa0>)
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <MX_TIM5_Init+0xa4>)
 8001364:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_TIM5_Init+0xa0>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_TIM5_Init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_TIM5_Init+0xa0>)
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_TIM5_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM5_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001386:	2303      	movs	r3, #3
 8001388:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800139e:	2301      	movs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM5_Init+0xa0>)
 80013b2:	f005 ff42 	bl	800723a <HAL_TIM_Encoder_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013bc:	f000 ff00 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM5_Init+0xa0>)
 80013ce:	f006 fd7f 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80013d8:	f000 fef2 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3730      	adds	r7, #48	; 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000238 	.word	0x20000238
 80013e8:	40000c00 	.word	0x40000c00

080013ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_TIM7_Init+0x64>)
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <MX_TIM7_Init+0x68>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_TIM7_Init+0x64>)
 8001402:	2263      	movs	r2, #99	; 0x63
 8001404:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_TIM7_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9900-1;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_TIM7_Init+0x64>)
 800140e:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8001412:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_TIM7_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM7_Init+0x64>)
 800141c:	f005 fdfe 	bl	800701c <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001426:	f000 fecb 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_TIM7_Init+0x64>)
 8001438:	f006 fd4a 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001442:	f000 febd 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000280 	.word	0x20000280
 8001454:	40001400 	.word	0x40001400

08001458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_USART2_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001490:	f006 fe00 	bl	8008094 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149a:	f000 fe91 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002c8 	.word	0x200002c8
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a3e      	ldr	r2, [pc, #248]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_GPIO_Init+0x118>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <MX_GPIO_Init+0x118>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <MX_GPIO_Init+0x118>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800154e:	2200      	movs	r2, #0
 8001550:	f643 410f 	movw	r1, #15375	; 0x3c0f
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_GPIO_Init+0x11c>)
 8001556:	f002 fbb5 	bl	8003cc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <MX_GPIO_Init+0x120>)
 8001560:	f002 fbb0 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_GPIO_Init+0x11c>)
 800157e:	f002 fa0d 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001582:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001586:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001588:	2311      	movs	r3, #17
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <MX_GPIO_Init+0x11c>)
 800159c:	f002 f9fe 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a0:	2304      	movs	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a4:	2311      	movs	r3, #17
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0x120>)
 80015b8:	f002 f9f0 	bl	800399c <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00

080015d0 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <TurnOffAll+0x6c>)
 80015dc:	f002 fb72 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <TurnOffAll+0x6c>)
 80015e8:	f002 fb6c 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <TurnOffAll+0x6c>)
 80015f4:	f002 fb66 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2104      	movs	r1, #4
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <TurnOffAll+0x70>)
 80015fe:	f002 fb61 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <TurnOffAll+0x6c>)
 800160a:	f002 fb5b 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2104      	movs	r1, #4
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <TurnOffAll+0x6c>)
 8001614:	f002 fb56 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2108      	movs	r1, #8
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <TurnOffAll+0x6c>)
 800161e:	f002 fb51 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <TurnOffAll+0x6c>)
 8001628:	f002 fb4c 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2102      	movs	r1, #2
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TurnOffAll+0x6c>)
 8001632:	f002 fb47 	bl	8003cc4 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00

08001644 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
	uint8_t boot[8] = {66, 79, 79, 84, 48, 13, 10, 0};
 8001652:	4aca      	ldr	r2, [pc, #808]	; (800197c <TurnOnAt+0x338>)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165c:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (i) {
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b08      	cmp	r3, #8
 8001664:	f200 822c 	bhi.w	8001ac0 <TurnOnAt+0x47c>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <TurnOnAt+0x2c>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001695 	.word	0x08001695
 8001674:	08001709 	.word	0x08001709
 8001678:	08001781 	.word	0x08001781
 800167c:	080017f9 	.word	0x080017f9
 8001680:	0800186b 	.word	0x0800186b
 8001684:	080018e3 	.word	0x080018e3
 8001688:	08001955 	.word	0x08001955
 800168c:	080019dd 	.word	0x080019dd
 8001690:	08001a4f 	.word	0x08001a4f
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	48b9      	ldr	r0, [pc, #740]	; (8001980 <TurnOnAt+0x33c>)
 800169c:	f002 fb12 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80016a0:	2005      	movs	r0, #5
 80016a2:	f001 f9b3 	bl	8002a0c <HAL_Delay>
		VL53L1X_BootState(dev, &bootState);
 80016a6:	4bb7      	ldr	r3, [pc, #732]	; (8001984 <TurnOnAt+0x340>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	f107 0217 	add.w	r2, r7, #23
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f007 f9e4 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 80016b6:	e023      	b.n	8001700 <TurnOnAt+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016be:	48b0      	ldr	r0, [pc, #704]	; (8001980 <TurnOnAt+0x33c>)
 80016c0:	f002 fb00 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80016c4:	200a      	movs	r0, #10
 80016c6:	f001 f9a1 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d0:	48ab      	ldr	r0, [pc, #684]	; (8001980 <TurnOnAt+0x33c>)
 80016d2:	f002 faf7 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80016d6:	200a      	movs	r0, #10
 80016d8:	f001 f998 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80016dc:	4ba9      	ldr	r3, [pc, #676]	; (8001984 <TurnOnAt+0x340>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f107 0217 	add.w	r2, r7, #23
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f007 f9c9 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80016ec:	f107 010c 	add.w	r1, r7, #12
 80016f0:	230a      	movs	r3, #10
 80016f2:	2208      	movs	r2, #8
 80016f4:	48a4      	ldr	r0, [pc, #656]	; (8001988 <TurnOnAt+0x344>)
 80016f6:	f006 fd1a 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 80016fa:	2002      	movs	r0, #2
 80016fc:	f001 f986 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0d8      	beq.n	80016b8 <TurnOnAt+0x74>
		}
		break;
 8001706:	e1db      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170e:	489c      	ldr	r0, [pc, #624]	; (8001980 <TurnOnAt+0x33c>)
 8001710:	f002 fad8 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001714:	2005      	movs	r0, #5
 8001716:	f001 f979 	bl	8002a0c <HAL_Delay>
		boot[4] = 49;
 800171a:	2331      	movs	r3, #49	; 0x31
 800171c:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 800171e:	4b99      	ldr	r3, [pc, #612]	; (8001984 <TurnOnAt+0x340>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f107 0217 	add.w	r2, r7, #23
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f007 f9a8 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 800172e:	e023      	b.n	8001778 <TurnOnAt+0x134>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4892      	ldr	r0, [pc, #584]	; (8001980 <TurnOnAt+0x33c>)
 8001738:	f002 fac4 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f001 f965 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	488d      	ldr	r0, [pc, #564]	; (8001980 <TurnOnAt+0x33c>)
 800174a:	f002 fabb 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800174e:	200a      	movs	r0, #10
 8001750:	f001 f95c 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001754:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <TurnOnAt+0x340>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	f107 0217 	add.w	r2, r7, #23
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f007 f98d 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001764:	f107 010c 	add.w	r1, r7, #12
 8001768:	230a      	movs	r3, #10
 800176a:	2208      	movs	r2, #8
 800176c:	4886      	ldr	r0, [pc, #536]	; (8001988 <TurnOnAt+0x344>)
 800176e:	f006 fcde 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001772:	2002      	movs	r0, #2
 8001774:	f001 f94a 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0d8      	beq.n	8001730 <TurnOnAt+0xec>
		}
		break;
 800177e:	e19f      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	487e      	ldr	r0, [pc, #504]	; (8001980 <TurnOnAt+0x33c>)
 8001788:	f002 fa9c 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800178c:	2005      	movs	r0, #5
 800178e:	f001 f93d 	bl	8002a0c <HAL_Delay>
		boot[4] = 50;
 8001792:	2332      	movs	r3, #50	; 0x32
 8001794:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <TurnOnAt+0x340>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f107 0217 	add.w	r2, r7, #23
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 f96c 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 80017a6:	e023      	b.n	80017f0 <TurnOnAt+0x1ac>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ae:	4874      	ldr	r0, [pc, #464]	; (8001980 <TurnOnAt+0x33c>)
 80017b0:	f002 fa88 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f001 f929 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c0:	486f      	ldr	r0, [pc, #444]	; (8001980 <TurnOnAt+0x33c>)
 80017c2:	f002 fa7f 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f001 f920 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80017cc:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <TurnOnAt+0x340>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f107 0217 	add.w	r2, r7, #23
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f007 f951 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80017dc:	f107 010c 	add.w	r1, r7, #12
 80017e0:	230a      	movs	r3, #10
 80017e2:	2208      	movs	r2, #8
 80017e4:	4868      	ldr	r0, [pc, #416]	; (8001988 <TurnOnAt+0x344>)
 80017e6:	f006 fca2 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f001 f90e 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0d8      	beq.n	80017a8 <TurnOnAt+0x164>
		}
		break;
 80017f6:	e163      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2104      	movs	r1, #4
 80017fc:	4863      	ldr	r0, [pc, #396]	; (800198c <TurnOnAt+0x348>)
 80017fe:	f002 fa61 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001802:	2005      	movs	r0, #5
 8001804:	f001 f902 	bl	8002a0c <HAL_Delay>
		boot[4] = 51;
 8001808:	2333      	movs	r3, #51	; 0x33
 800180a:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <TurnOnAt+0x340>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f107 0217 	add.w	r2, r7, #23
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f007 f931 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 800181c:	e021      	b.n	8001862 <TurnOnAt+0x21e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2104      	movs	r1, #4
 8001822:	485a      	ldr	r0, [pc, #360]	; (800198c <TurnOnAt+0x348>)
 8001824:	f002 fa4e 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f001 f8ef 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2104      	movs	r1, #4
 8001832:	4856      	ldr	r0, [pc, #344]	; (800198c <TurnOnAt+0x348>)
 8001834:	f002 fa46 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001838:	200a      	movs	r0, #10
 800183a:	f001 f8e7 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <TurnOnAt+0x340>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f107 0217 	add.w	r2, r7, #23
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f007 f918 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 800184e:	f107 010c 	add.w	r1, r7, #12
 8001852:	230a      	movs	r3, #10
 8001854:	2208      	movs	r2, #8
 8001856:	484c      	ldr	r0, [pc, #304]	; (8001988 <TurnOnAt+0x344>)
 8001858:	f006 fc69 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 800185c:	2002      	movs	r0, #2
 800185e:	f001 f8d5 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0da      	beq.n	800181e <TurnOnAt+0x1da>
		}
		break;
 8001868:	e12a      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	4843      	ldr	r0, [pc, #268]	; (8001980 <TurnOnAt+0x33c>)
 8001872:	f002 fa27 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001876:	2005      	movs	r0, #5
 8001878:	f001 f8c8 	bl	8002a0c <HAL_Delay>
		boot[4] = 52;
 800187c:	2334      	movs	r3, #52	; 0x34
 800187e:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <TurnOnAt+0x340>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	f107 0217 	add.w	r2, r7, #23
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f007 f8f7 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 8001890:	e023      	b.n	80018da <TurnOnAt+0x296>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001898:	4839      	ldr	r0, [pc, #228]	; (8001980 <TurnOnAt+0x33c>)
 800189a:	f002 fa13 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800189e:	200a      	movs	r0, #10
 80018a0:	f001 f8b4 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018aa:	4835      	ldr	r0, [pc, #212]	; (8001980 <TurnOnAt+0x33c>)
 80018ac:	f002 fa0a 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80018b0:	200a      	movs	r0, #10
 80018b2:	f001 f8ab 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80018b6:	4b33      	ldr	r3, [pc, #204]	; (8001984 <TurnOnAt+0x340>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f107 0217 	add.w	r2, r7, #23
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f007 f8dc 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80018c6:	f107 010c 	add.w	r1, r7, #12
 80018ca:	230a      	movs	r3, #10
 80018cc:	2208      	movs	r2, #8
 80018ce:	482e      	ldr	r0, [pc, #184]	; (8001988 <TurnOnAt+0x344>)
 80018d0:	f006 fc2d 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f001 f899 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0d8      	beq.n	8001892 <TurnOnAt+0x24e>
		}
		break;
 80018e0:	e0ee      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2104      	movs	r1, #4
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <TurnOnAt+0x33c>)
 80018e8:	f002 f9ec 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f001 f88d 	bl	8002a0c <HAL_Delay>
		boot[4] = 53;
 80018f2:	2335      	movs	r3, #53	; 0x35
 80018f4:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <TurnOnAt+0x340>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f107 0217 	add.w	r2, r7, #23
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f007 f8bc 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 8001906:	e021      	b.n	800194c <TurnOnAt+0x308>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2104      	movs	r1, #4
 800190c:	481c      	ldr	r0, [pc, #112]	; (8001980 <TurnOnAt+0x33c>)
 800190e:	f002 f9d9 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001912:	200a      	movs	r0, #10
 8001914:	f001 f87a 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2104      	movs	r1, #4
 800191c:	4818      	ldr	r0, [pc, #96]	; (8001980 <TurnOnAt+0x33c>)
 800191e:	f002 f9d1 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001922:	200a      	movs	r0, #10
 8001924:	f001 f872 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <TurnOnAt+0x340>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f107 0217 	add.w	r2, r7, #23
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f007 f8a3 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001938:	f107 010c 	add.w	r1, r7, #12
 800193c:	230a      	movs	r3, #10
 800193e:	2208      	movs	r2, #8
 8001940:	4811      	ldr	r0, [pc, #68]	; (8001988 <TurnOnAt+0x344>)
 8001942:	f006 fbf4 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001946:	2002      	movs	r0, #2
 8001948:	f001 f860 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0da      	beq.n	8001908 <TurnOnAt+0x2c4>
		}
		break;
 8001952:	e0b5      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2108      	movs	r1, #8
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <TurnOnAt+0x33c>)
 800195a:	f002 f9b3 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800195e:	2005      	movs	r0, #5
 8001960:	f001 f854 	bl	8002a0c <HAL_Delay>
		boot[4] = 54;
 8001964:	2336      	movs	r3, #54	; 0x36
 8001966:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <TurnOnAt+0x340>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	f107 0217 	add.w	r2, r7, #23
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f007 f883 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 8001978:	e02c      	b.n	80019d4 <TurnOnAt+0x390>
 800197a:	bf00      	nop
 800197c:	08009d70 	.word	0x08009d70
 8001980:	40020800 	.word	0x40020800
 8001984:	20000000 	.word	0x20000000
 8001988:	200002c8 	.word	0x200002c8
 800198c:	40020c00 	.word	0x40020c00
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2108      	movs	r1, #8
 8001994:	484d      	ldr	r0, [pc, #308]	; (8001acc <TurnOnAt+0x488>)
 8001996:	f002 f995 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800199a:	200a      	movs	r0, #10
 800199c:	f001 f836 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2108      	movs	r1, #8
 80019a4:	4849      	ldr	r0, [pc, #292]	; (8001acc <TurnOnAt+0x488>)
 80019a6:	f002 f98d 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80019aa:	200a      	movs	r0, #10
 80019ac:	f001 f82e 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <TurnOnAt+0x48c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	f107 0217 	add.w	r2, r7, #23
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f007 f85f 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	230a      	movs	r3, #10
 80019c6:	2208      	movs	r2, #8
 80019c8:	4842      	ldr	r0, [pc, #264]	; (8001ad4 <TurnOnAt+0x490>)
 80019ca:	f006 fbb0 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 80019ce:	2002      	movs	r0, #2
 80019d0:	f001 f81c 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0da      	beq.n	8001990 <TurnOnAt+0x34c>
		}
		break;
 80019da:	e071      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2101      	movs	r1, #1
 80019e0:	483a      	ldr	r0, [pc, #232]	; (8001acc <TurnOnAt+0x488>)
 80019e2:	f002 f96f 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80019e6:	2005      	movs	r0, #5
 80019e8:	f001 f810 	bl	8002a0c <HAL_Delay>
		boot[4] = 55;
 80019ec:	2337      	movs	r3, #55	; 0x37
 80019ee:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <TurnOnAt+0x48c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	f107 0217 	add.w	r2, r7, #23
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 f83f 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 8001a00:	e021      	b.n	8001a46 <TurnOnAt+0x402>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	4831      	ldr	r0, [pc, #196]	; (8001acc <TurnOnAt+0x488>)
 8001a08:	f002 f95c 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f000 fffd 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2101      	movs	r1, #1
 8001a16:	482d      	ldr	r0, [pc, #180]	; (8001acc <TurnOnAt+0x488>)
 8001a18:	f002 f954 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f000 fff5 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <TurnOnAt+0x48c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	f107 0217 	add.w	r2, r7, #23
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f007 f826 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001a32:	f107 010c 	add.w	r1, r7, #12
 8001a36:	230a      	movs	r3, #10
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4826      	ldr	r0, [pc, #152]	; (8001ad4 <TurnOnAt+0x490>)
 8001a3c:	f006 fb77 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f000 ffe3 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0da      	beq.n	8001a02 <TurnOnAt+0x3be>
		}
		break;
 8001a4c:	e038      	b.n	8001ac0 <TurnOnAt+0x47c>
	case 8:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2102      	movs	r1, #2
 8001a52:	481e      	ldr	r0, [pc, #120]	; (8001acc <TurnOnAt+0x488>)
 8001a54:	f002 f936 	bl	8003cc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001a58:	2005      	movs	r0, #5
 8001a5a:	f000 ffd7 	bl	8002a0c <HAL_Delay>
		boot[4] = 56;
 8001a5e:	2338      	movs	r3, #56	; 0x38
 8001a60:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <TurnOnAt+0x48c>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	f107 0217 	add.w	r2, r7, #23
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 f806 	bl	8008a7e <VL53L1X_BootState>
		while(bootState==0){
 8001a72:	e021      	b.n	8001ab8 <TurnOnAt+0x474>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2102      	movs	r1, #2
 8001a78:	4814      	ldr	r0, [pc, #80]	; (8001acc <TurnOnAt+0x488>)
 8001a7a:	f002 f923 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001a7e:	2064      	movs	r0, #100	; 0x64
 8001a80:	f000 ffc4 	bl	8002a0c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2102      	movs	r1, #2
 8001a88:	4810      	ldr	r0, [pc, #64]	; (8001acc <TurnOnAt+0x488>)
 8001a8a:	f002 f91b 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f000 ffbc 	bl	8002a0c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <TurnOnAt+0x48c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	f107 0217 	add.w	r2, r7, #23
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 ffed 	bl	8008a7e <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001aa4:	f107 010c 	add.w	r1, r7, #12
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	2208      	movs	r2, #8
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <TurnOnAt+0x490>)
 8001aae:	f006 fb3e 	bl	800812e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f000 ffaa 	bl	8002a0c <HAL_Delay>
		while(bootState==0){
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0da      	beq.n	8001a74 <TurnOnAt+0x430>
		}
		break;
 8001abe:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	200002c8 	.word	0x200002c8

08001ad8 <ChangeAddresses>:

uint16_t ChangeAddresses(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	uint8_t success = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	71fb      	strb	r3, [r7, #7]
	TurnOffAll();
 8001ae2:	f7ff fd75 	bl	80015d0 <TurnOffAll>
	HAL_Delay(10);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f000 ff90 	bl	8002a0c <HAL_Delay>
	for (uint8_t i = 0; i != nof; ++i) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	71bb      	strb	r3, [r7, #6]
 8001af0:	e033      	b.n	8001b5a <ChangeAddresses+0x82>
		success *= TurnOnAt(i);
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fda5 	bl	8001644 <TurnOnAt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	fb12 f303 	smulbb	r3, r2, r3
 8001b04:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(5);
 8001b06:	2005      	movs	r0, #5
 8001b08:	f000 ff80 	bl	8002a0c <HAL_Delay>
		printf("try init: %d\r\n", i);
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4817      	ldr	r0, [pc, #92]	; (8001b70 <ChangeAddresses+0x98>)
 8001b12:	f007 f9b1 	bl	8008e78 <iprintf>
		VL53L1X_SensorInit(dev);
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <ChangeAddresses+0x9c>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 fe9a 	bl	8008854 <VL53L1X_SensorInit>
		printf("try addr change: %d\r\n", i);
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <ChangeAddresses+0xa0>)
 8001b26:	f007 f9a7 	bl	8008e78 <iprintf>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <ChangeAddresses+0x9c>)
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	4912      	ldr	r1, [pc, #72]	; (8001b7c <ChangeAddresses+0xa4>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f006 fe6e 	bl	8008818 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <ChangeAddresses+0xa4>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f006 ff33 	bl	80089b0 <VL53L1X_StartRanging>
		printf("done: %d\r\n", i);
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <ChangeAddresses+0xa8>)
 8001b50:	f007 f992 	bl	8008e78 <iprintf>
	for (uint8_t i = 0; i != nof; ++i) {
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71bb      	strb	r3, [r7, #6]
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <ChangeAddresses+0xac>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1c6      	bne.n	8001af2 <ChangeAddresses+0x1a>
	}
	return success;
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	b29b      	uxth	r3, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08009d78 	.word	0x08009d78
 8001b74:	20000000 	.word	0x20000000
 8001b78:	08009d88 	.word	0x08009d88
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	08009da0 	.word	0x08009da0
 8001b84:	20000002 	.word	0x20000002

08001b88 <GetAllData>:

uint8_t GetAllData(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	VL53L1X_GetDistance(devs[0], &dis[0]);
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <GetAllData+0x128>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4a48      	ldr	r2, [pc, #288]	; (8001cb4 <GetAllData+0x12c>)
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 ff8f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[0]);
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <GetAllData+0x128>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 fec1 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[1], &dis[1]);
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <GetAllData+0x128>)
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <GetAllData+0x12c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f006 ff7f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[1]);
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <GetAllData+0x128>)
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 feb1 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[2], &dis[2]);
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <GetAllData+0x128>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <GetAllData+0x12c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f006 ff6f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[2]);
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <GetAllData+0x128>)
 8001be0:	789b      	ldrb	r3, [r3, #2]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f006 fea1 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[3], &dis[3]);
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <GetAllData+0x128>)
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <GetAllData+0x12c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f006 ff5f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[3]);
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <GetAllData+0x128>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 fe91 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[4], &dis[4]);
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <GetAllData+0x128>)
 8001c0c:	791b      	ldrb	r3, [r3, #4]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <GetAllData+0x12c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3308      	adds	r3, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f006 ff4f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[4]);
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <GetAllData+0x128>)
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 fe81 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[5], &dis[5]);
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <GetAllData+0x128>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <GetAllData+0x12c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	330a      	adds	r3, #10
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f006 ff3f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[5]);
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <GetAllData+0x128>)
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 fe71 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[6], &dis[6]);
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <GetAllData+0x128>)
 8001c4c:	799b      	ldrb	r3, [r3, #6]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <GetAllData+0x12c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	330c      	adds	r3, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f006 ff2f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[6]);
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <GetAllData+0x128>)
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fe61 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[7], &dis[7]);
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <GetAllData+0x128>)
 8001c6c:	79db      	ldrb	r3, [r3, #7]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <GetAllData+0x12c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330e      	adds	r3, #14
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f006 ff1f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[7]);
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <GetAllData+0x128>)
 8001c80:	79db      	ldrb	r3, [r3, #7]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fe51 	bl	800892c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[8], &dis[8]);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <GetAllData+0x128>)
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <GetAllData+0x12c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3310      	adds	r3, #16
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f006 ff0f 	bl	8008abc <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[8]);
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <GetAllData+0x128>)
 8001ca0:	7a1b      	ldrb	r3, [r3, #8]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 fe41 	bl	800892c <VL53L1X_ClearInterrupt>
}
 8001caa:	bf00      	nop
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	2000030c 	.word	0x2000030c

08001cb8 <PrintAllData>:

void PrintAllData(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
	for (int i = 0; i != nof; ++i) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	e00d      	b.n	8001ce0 <PrintAllData+0x28>
		printf("%d:%d\r\n", i, dis[i]);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <PrintAllData+0x40>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <PrintAllData+0x44>)
 8001cd6:	f007 f8cf 	bl	8008e78 <iprintf>
	for (int i = 0; i != nof; ++i) {
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <PrintAllData+0x48>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d1eb      	bne.n	8001cc4 <PrintAllData+0xc>
	}
	//HAL_Delay(500);
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000030c 	.word	0x2000030c
 8001cfc:	08009dac 	.word	0x08009dac
 8001d00:	20000002 	.word	0x20000002

08001d04 <CAN_Filter_Init>:

void CAN_Filter_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	//Set the CAN Filter which has Mask Ids
	//CAN Filter1
	//Receiving CAN data via 0x102~0x10E
	canFilter1.FilterMaskIdHigh = 0x7F3 << 5; // Shift 5 bit
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d0a:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8001d0e:	609a      	str	r2, [r3, #8]
	canFilter1.FilterIdHigh = 0x106 << 5;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d12:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8001d16:	601a      	str	r2, [r3, #0]
	canFilter1.FilterMaskIdLow = 0x7F3 << 5; // Shift 5 bit
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d1a:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8001d1e:	60da      	str	r2, [r3, #12]
	canFilter1.FilterIdLow = 0x106 << 5;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d22:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8001d26:	605a      	str	r2, [r3, #4]
//	canFilter1.FilterMaskIdHigh = 0x000 << 5; // Shift 5 bit
//	canFilter1.FilterIdHigh = 0x000 << 5;
//	canFilter1.FilterMaskIdLow = 0x000 << 5; // Shift 5 bit
//	canFilter1.FilterIdLow = 0x000 << 5;
	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
	canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	61da      	str	r2, [r3, #28]
	canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
	canFilter1.FilterBank = 0;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
	canFilter1.FilterActivation = ENABLE;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	621a      	str	r2, [r3, #32]

	/* Set options for messages; ID type(standard), Length(8 byte) */
	can1TxHeader.RTR = CAN_RTR_DATA;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <CAN_Filter_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
	can1TxHeader.IDE = CAN_ID_STD;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <CAN_Filter_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
	can1TxHeader.DLC = 8;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <CAN_Filter_Init+0x74>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	611a      	str	r2, [r3, #16]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <CAN_Filter_Init+0x70>)
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <CAN_Filter_Init+0x78>)
 8001d5c:	f000 ff76 	bl	8002c4c <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d60:	2102      	movs	r1, #2
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <CAN_Filter_Init+0x78>)
 8001d64:	f001 fa83 	bl	800326e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <CAN_Filter_Init+0x78>)
 8001d6a:	f001 f84f 	bl	8002e0c <HAL_CAN_Start>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000310 	.word	0x20000310
 8001d78:	20000354 	.word	0x20000354
 8001d7c:	2000009c 	.word	0x2000009c

08001d80 <CAN_Send>:

void CAN_Send(uint8_t ID, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4604      	mov	r4, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	4603      	mov	r3, r0
 8001d94:	71bb      	strb	r3, [r7, #6]
 8001d96:	460b      	mov	r3, r1
 8001d98:	717b      	strb	r3, [r7, #5]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	713b      	strb	r3, [r7, #4]
	  /* Set options for messages; Address */
	  can1TxHeader.StdId = ID;
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <CAN_Send+0x70>)
 8001da2:	6013      	str	r3, [r2, #0]

	  can1Tx0Data[7] = data7;
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <CAN_Send+0x74>)
 8001da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001daa:	71d3      	strb	r3, [r2, #7]
	  can1Tx0Data[6] = data6;
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <CAN_Send+0x74>)
 8001dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001db2:	7193      	strb	r3, [r2, #6]
	  can1Tx0Data[5] = data5;
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <CAN_Send+0x74>)
 8001db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dba:	7153      	strb	r3, [r2, #5]
	  can1Tx0Data[4] = data4;
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <CAN_Send+0x74>)
 8001dbe:	7f3b      	ldrb	r3, [r7, #28]
 8001dc0:	7113      	strb	r3, [r2, #4]
	  can1Tx0Data[3] = data3;
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <CAN_Send+0x74>)
 8001dc4:	7e3b      	ldrb	r3, [r7, #24]
 8001dc6:	70d3      	strb	r3, [r2, #3]
	  can1Tx0Data[2] = data2;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <CAN_Send+0x74>)
 8001dca:	793b      	ldrb	r3, [r7, #4]
 8001dcc:	7093      	strb	r3, [r2, #2]
	  can1Tx0Data[1] = data1;
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <CAN_Send+0x74>)
 8001dd0:	797b      	ldrb	r3, [r7, #5]
 8001dd2:	7053      	strb	r3, [r2, #1]
	  can1Tx0Data[0] = data0;
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <CAN_Send+0x74>)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	7013      	strb	r3, [r2, #0]
//	  can1Tx0Data[2] = 108;
//	  can1Tx0Data[1] = 101;
//	  can1Tx0Data[0] = 72;

	  //TxMailBox1 = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
	  HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, &can1Tx0Data[0], &TxMailBox1);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <CAN_Send+0x78>)
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <CAN_Send+0x74>)
 8001dde:	4904      	ldr	r1, [pc, #16]	; (8001df0 <CAN_Send+0x70>)
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <CAN_Send+0x7c>)
 8001de2:	f001 f857 	bl	8002e94 <HAL_CAN_AddTxMessage>
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000354 	.word	0x20000354
 8001df4:	20000378 	.word	0x20000378
 8001df8:	20000374 	.word	0x20000374
 8001dfc:	2000009c 	.word	0x2000009c

08001e00 <CAN_SendAll>:

void CAN_SendAll(void) {
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af06      	add	r7, sp, #24
	CAN_Send(0x10, speed0.i & 0xFF, (speed0.i & 0xFF00) >> 8, (speed0.i & 0xFF0000) >> 16, speed0.i >> 24, speed1.i & 0xFF, (speed1.i & 0xFF00) >> 8, (speed1.i & 0xFF0000) >> 16, speed1.i >> 24);
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <CAN_SendAll+0x94>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b2dd      	uxtb	r5, r3
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <CAN_SendAll+0x94>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b2de      	uxtb	r6, r3
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <CAN_SendAll+0x94>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	fa5f fc83 	uxtb.w	ip, r3
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <CAN_SendAll+0x94>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e1b      	lsrs	r3, r3, #24
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <CAN_SendAll+0x98>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	491a      	ldr	r1, [pc, #104]	; (8001e98 <CAN_SendAll+0x98>)
 8001e2e:	6809      	ldr	r1, [r1, #0]
 8001e30:	0a09      	lsrs	r1, r1, #8
 8001e32:	b2c9      	uxtb	r1, r1
 8001e34:	4818      	ldr	r0, [pc, #96]	; (8001e98 <CAN_SendAll+0x98>)
 8001e36:	6800      	ldr	r0, [r0, #0]
 8001e38:	0c00      	lsrs	r0, r0, #16
 8001e3a:	b2c0      	uxtb	r0, r0
 8001e3c:	4c16      	ldr	r4, [pc, #88]	; (8001e98 <CAN_SendAll+0x98>)
 8001e3e:	6824      	ldr	r4, [r4, #0]
 8001e40:	0e24      	lsrs	r4, r4, #24
 8001e42:	b2e4      	uxtb	r4, r4
 8001e44:	9404      	str	r4, [sp, #16]
 8001e46:	9003      	str	r0, [sp, #12]
 8001e48:	9102      	str	r1, [sp, #8]
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4663      	mov	r3, ip
 8001e50:	4632      	mov	r2, r6
 8001e52:	4629      	mov	r1, r5
 8001e54:	2010      	movs	r0, #16
 8001e56:	f7ff ff93 	bl	8001d80 <CAN_Send>
	CAN_Send(0x11, 0, 0, 0, 0, 0, 0, dis[0] >> 8, dis [0] & 0xFF);
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <CAN_SendAll+0x9c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <CAN_SendAll+0x9c>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	8812      	ldrh	r2, [r2, #0]
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	9204      	str	r2, [sp, #16]
 8001e70:	9303      	str	r3, [sp, #12]
 8001e72:	2300      	movs	r3, #0
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2300      	movs	r3, #0
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	2011      	movs	r0, #17
 8001e86:	f7ff ff7b 	bl	8001d80 <CAN_Send>
//	CAN_Send(0x11, dis[0] >> 8, dis[0] & 0xFF, dis[1] >> 8, dis[1] & 0xFF, dis[2] >> 8, dis[2] & 0xFF, 0, 0);
//	CAN_Send(0x11, dis[3] >> 8, dis[3] & 0xFF, dis[4] >> 8, dis[4] & 0xFF, dis[5] >> 8, dis[5] & 0xFF, 0, 0);
//	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) ;
//	CAN_Send(0x11, dis[6] >> 8, dis[6] & 0xFF, dis[7] >> 8, dis[7] & 0xFF, dis[8] >> 8, dis[8] & 0xFF, 0, 0);
}
 8001e8a:	bf00      	nop
 8001e8c:	3704      	adds	r7, #4
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000398 	.word	0x20000398
 8001e98:	2000039c 	.word	0x2000039c
 8001e9c:	2000030c 	.word	0x2000030c

08001ea0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Receiving CAN Data */
/* Get CAN1 message Through FIFO0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1RxHeader, can1Rx0Data);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001eac:	2100      	movs	r1, #0
 8001eae:	481a      	ldr	r0, [pc, #104]	; (8001f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001eb0:	f001 f8cb 	bl	800304a <HAL_CAN_GetRxMessage>
	uint8_t left_dir = can1Rx0Data[0];
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	73fb      	strb	r3, [r7, #15]
	uint16_t left_ccr = can1Rx0Data[1] << 8 | can1Rx0Data[2];
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ec4:	789b      	ldrb	r3, [r3, #2]
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	81bb      	strh	r3, [r7, #12]
	uint8_t right_dir = can1Rx0Data[3];
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	72fb      	strb	r3, [r7, #11]
	uint16_t right_ccr = can1Rx0Data[4] << 8 | can1Rx0Data[5];
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ede:	795b      	ldrb	r3, [r3, #5]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	813b      	strh	r3, [r7, #8]
	setLeftMotorCCR(left_ccr, left_dir);
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f816 	bl	8001f20 <setLeftMotorCCR>
	setRightMotorCCR(right_ccr, right_dir);
 8001ef4:	7afa      	ldrb	r2, [r7, #11]
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f83a 	bl	8001f74 <setRightMotorCCR>
	printf("yes\r\n");
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001f02:	f007 f83f 	bl	8008f84 <puts>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000036c 	.word	0x2000036c
 8001f14:	20000338 	.word	0x20000338
 8001f18:	2000009c 	.word	0x2000009c
 8001f1c:	08009db4 	.word	0x08009db4

08001f20 <setLeftMotorCCR>:

void setLeftMotorCCR(uint16_t ccr, uint8_t dir) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	717b      	strb	r3, [r7, #5]
	if (dir == DIR_BACKWARD) {
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <setLeftMotorCCR+0x22>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <setLeftMotorCCR+0x4c>)
 8001f3c:	f001 fec2 	bl	8003cc4 <HAL_GPIO_WritePin>
 8001f40:	e004      	b.n	8001f4c <setLeftMotorCCR+0x2c>
	}
	else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	4809      	ldr	r0, [pc, #36]	; (8001f6c <setLeftMotorCCR+0x4c>)
 8001f48:	f001 febc 	bl	8003cc4 <HAL_GPIO_WritePin>

	}

	 //uint32_t ccr = (uint32_t) speed * 20;
	 if (ccr > TIM1->ARR) ccr = TIM1->ARR;
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <setLeftMotorCCR+0x50>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d902      	bls.n	8001f5c <setLeftMotorCCR+0x3c>
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <setLeftMotorCCR+0x50>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	80fb      	strh	r3, [r7, #6]
	 //printf("%d\r\n", ccr0);
	 TIM1->CCR2 = ccr;
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <setLeftMotorCCR+0x50>)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	6393      	str	r3, [r2, #56]	; 0x38
	 //HAL_Delay(50);
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40010000 	.word	0x40010000

08001f74 <setRightMotorCCR>:

void setRightMotorCCR(uint16_t ccr, uint8_t dir) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	4613      	mov	r3, r2
 8001f82:	717b      	strb	r3, [r7, #5]
	if (dir == DIR_BACKWARD) {
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <setRightMotorCCR+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <setRightMotorCCR+0x4c>)
 8001f90:	f001 fe98 	bl	8003cc4 <HAL_GPIO_WritePin>
 8001f94:	e004      	b.n	8001fa0 <setRightMotorCCR+0x2c>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <setRightMotorCCR+0x4c>)
 8001f9c:	f001 fe92 	bl	8003cc4 <HAL_GPIO_WritePin>
	}


	 //uint32_t ccr = (uint32_t) speed * 20;
	 if (ccr > TIM1->ARR) ccr = TIM1->ARR;
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <setRightMotorCCR+0x50>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d902      	bls.n	8001fb0 <setRightMotorCCR+0x3c>
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <setRightMotorCCR+0x50>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	80fb      	strh	r3, [r7, #6]
	 TIM1->CCR1 = ccr;
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <setRightMotorCCR+0x50>)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	6353      	str	r3, [r2, #52]	; 0x34
	 //HAL_Delay(50);
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40010000 	.word	0x40010000

08001fc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a6d      	ldr	r2, [pc, #436]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	f040 80bd 	bne.w	8002154 <HAL_TIM_PeriodElapsedCallback+0x18c>
		  counter0 = __HAL_TIM_GET_COUNTER(&htim2);
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	4a6b      	ldr	r2, [pc, #428]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001fe2:	6013      	str	r3, [r2, #0]
		  counter1 = __HAL_TIM_GET_COUNTER(&htim5);
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001fec:	6013      	str	r3, [r2, #0]

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d118      	bne.n	800202e <HAL_TIM_PeriodElapsedCallback+0x66>
			  if (counter0 <= oldCounter0){
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d808      	bhi.n	800201a <HAL_TIM_PeriodElapsedCallback+0x52>
				  // pure forward
				  //printf("a1,");
				  diff0 = -counter0 + oldCounter0;
 8002008:	4b64      	ldr	r3, [pc, #400]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b60      	ldr	r3, [pc, #384]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	461a      	mov	r2, r3
 8002014:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e021      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // backward -> forward
				  //printf("a2,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	461a      	mov	r2, r3
 8002028:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e017      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
		  }
		  else {
			  if (counter0 <= oldCounter0) {
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d809      	bhi.n	800204e <HAL_TIM_PeriodElapsedCallback+0x86>
				  // forward -> backward
				  //printf("a3,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 800203a:	4b58      	ldr	r3, [pc, #352]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b54      	ldr	r3, [pc, #336]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	461a      	mov	r2, r3
 8002048:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e007      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // pure backward
				  //printf("a4,");
				  diff0 = -counter0 + oldCounter0;
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800205c:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)) {
 800205e:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b10      	cmp	r3, #16
 800206a:	d118      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0xd6>
			  if (counter1 >= oldCounter1) {
 800206c:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d309      	bcc.n	800208c <HAL_TIM_PeriodElapsedCallback+0xc4>
				  // forward -> backward change
				  //printf("b1: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 8002078:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	461a      	mov	r2, r3
 8002086:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e020      	b.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x106>
			  }

			  else {
				  // pure backward
				  //printf("b2: ");
				  diff1 = counter1 - oldCounter1;
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e017      	b.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x106>
			  }
		  }
		  else {
			  if (counter1 >= oldCounter1) {
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d308      	bcc.n	80020bc <HAL_TIM_PeriodElapsedCallback+0xf4>
				  // pure forward
				  //printf("b3: ");
				  diff1 = counter1 - oldCounter1;
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e008      	b.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x106>
			  }
			  else {
				  // backward -> forward change
				  //printf("b4: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80020cc:	601a      	str	r2, [r3, #0]
			  }
		  }
		  oldCounter0 = __HAL_TIM_GET_COUNTER(&htim2);
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	4a31      	ldr	r2, [pc, #196]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80020d6:	6013      	str	r3, [r2, #0]
		  oldCounter1 = __HAL_TIM_GET_COUNTER(&htim5);
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020e0:	6013      	str	r3, [r2, #0]

		  speed0.fl = diff0 * 0.0054931640625 * 90.9091;
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa34 	bl	8000554 <__aeabi_i2d>
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80020f2:	f7fe fa99 	bl	8000628 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	a320      	add	r3, pc, #128	; (adr r3, 8002180 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa90 	bl	8000628 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fc9c 	bl	8000a4c <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002118:	6013      	str	r3, [r2, #0]
		  speed1.fl = diff1 * 0.0054931640625 * 90.9091;
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa18 	bl	8000554 <__aeabi_i2d>
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	a312      	add	r3, pc, #72	; (adr r3, 8002180 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fa74 	bl	8000628 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fc80 	bl	8000a4c <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002150:	6013      	str	r3, [r2, #0]
	}
	else if (htim == &htim4) {
		// CAN
		CAN_SendAll();
	}
}
 8002152:	e00e      	b.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x1aa>
	else if (htim == &htim3) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d104      	bne.n	8002166 <HAL_TIM_PeriodElapsedCallback+0x19e>
		GetAllData();
 800215c:	f7ff fd14 	bl	8001b88 <GetAllData>
		PrintAllData();
 8002160:	f7ff fdaa 	bl	8001cb8 <PrintAllData>
}
 8002164:	e005      	b.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x1aa>
	else if (htim == &htim4) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		CAN_SendAll();
 800216e:	f7ff fe47 	bl	8001e00 <CAN_SendAll>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	b1c432ca 	.word	0xb1c432ca
 8002184:	4056ba2e 	.word	0x4056ba2e
 8002188:	20000280 	.word	0x20000280
 800218c:	20000160 	.word	0x20000160
 8002190:	20000380 	.word	0x20000380
 8002194:	20000238 	.word	0x20000238
 8002198:	20000384 	.word	0x20000384
 800219c:	20000388 	.word	0x20000388
 80021a0:	20000390 	.word	0x20000390
 80021a4:	2000038c 	.word	0x2000038c
 80021a8:	20000394 	.word	0x20000394
 80021ac:	3f768000 	.word	0x3f768000
 80021b0:	20000398 	.word	0x20000398
 80021b4:	2000039c 	.word	0x2000039c
 80021b8:	200001a8 	.word	0x200001a8
 80021bc:	200001f0 	.word	0x200001f0

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_MspInit+0x4c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_MspInit+0x4c>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800220a:	2007      	movs	r0, #7
 800220c:	f001 fb54 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_CAN_MspInit+0x94>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d134      	bne.n	80022a8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 8002248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_CAN_MspInit+0x98>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002276:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002288:	2309      	movs	r3, #9
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <HAL_CAN_MspInit+0x9c>)
 8002294:	f001 fb82 	bl	800399c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2014      	movs	r0, #20
 800229e:	f001 fb16 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80022a2:	2014      	movs	r0, #20
 80022a4:	f001 fb2f 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40006400 	.word	0x40006400
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000

080022bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_I2C_MspInit+0x94>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d134      	bne.n	8002348 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_I2C_MspInit+0x98>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_I2C_MspInit+0x98>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_I2C_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002300:	2312      	movs	r3, #18
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800230c:	2304      	movs	r3, #4
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <HAL_I2C_MspInit+0x9c>)
 8002318:	f001 fb40 	bl	800399c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_I2C_MspInit+0x98>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <HAL_I2C_MspInit+0x98>)
 8002326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232a:	6413      	str	r3, [r2, #64]	; 0x40
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_I2C_MspInit+0x98>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	201f      	movs	r0, #31
 800233e:	f001 fac6 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002342:	201f      	movs	r0, #31
 8002344:	f001 fadf 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40005400 	.word	0x40005400
 8002354:	40023800 	.word	0x40023800
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_TIM_PWM_MspInit+0x3c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10d      	bne.n	800238a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_TIM_PWM_MspInit+0x40>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_TIM_PWM_MspInit+0x40>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_TIM_PWM_MspInit+0x40>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d152      	bne.n	8002468 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a46      	ldr	r2, [pc, #280]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002416:	2320      	movs	r3, #32
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002426:	2301      	movs	r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	482d      	ldr	r0, [pc, #180]	; (80024e8 <HAL_TIM_Encoder_MspInit+0x148>)
 8002432:	f001 fab3 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002436:	2308      	movs	r3, #8
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002446:	2301      	movs	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4826      	ldr	r0, [pc, #152]	; (80024ec <HAL_TIM_Encoder_MspInit+0x14c>)
 8002452:	f001 faa3 	bl	800399c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	201c      	movs	r0, #28
 800245c:	f001 fa37 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002460:	201c      	movs	r0, #28
 8002462:	f001 fa50 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002466:	e038      	b.n	80024da <HAL_TIM_Encoder_MspInit+0x13a>
  else if(htim_encoder->Instance==TIM5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d133      	bne.n	80024da <HAL_TIM_Encoder_MspInit+0x13a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x144>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024aa:	2303      	movs	r3, #3
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <HAL_TIM_Encoder_MspInit+0x148>)
 80024c6:	f001 fa69 	bl	800399c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2032      	movs	r0, #50	; 0x32
 80024d0:	f001 f9fd 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024d4:	2032      	movs	r0, #50	; 0x32
 80024d6:	f001 fa16 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3730      	adds	r7, #48	; 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40000c00 	.word	0x40000c00

080024f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_TIM_Base_MspInit+0xb8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d116      	bne.n	8002534 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	201d      	movs	r0, #29
 8002528:	f001 f9d1 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800252c:	201d      	movs	r0, #29
 800252e:	f001 f9ea 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002532:	e036      	b.n	80025a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_TIM_Base_MspInit+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d116      	bne.n	800256c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	201e      	movs	r0, #30
 8002560:	f001 f9b5 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002564:	201e      	movs	r0, #30
 8002566:	f001 f9ce 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 800256a:	e01a      	b.n	80025a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_TIM_Base_MspInit+0xc4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002580:	f043 0320 	orr.w	r3, r3, #32
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2037      	movs	r0, #55	; 0x37
 8002598:	f001 f999 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800259c:	2037      	movs	r0, #55	; 0x37
 800259e:	f001 f9b2 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40001400 	.word	0x40001400

080025bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_MspPostInit+0x68>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11e      	bne.n	800261c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIM_MspPostInit+0x6c>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_TIM_MspPostInit+0x6c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4619      	mov	r1, r3
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_TIM_MspPostInit+0x70>)
 8002618:	f001 f9c0 	bl	800399c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40010000 	.word	0x40010000
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_UART_MspInit+0x84>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d12b      	bne.n	80026aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_UART_MspInit+0x88>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_UART_MspInit+0x88>)
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_UART_MspInit+0x88>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_UART_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_UART_MspInit+0x88>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_UART_MspInit+0x88>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800268a:	230c      	movs	r3, #12
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269a:	2307      	movs	r3, #7
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_UART_MspInit+0x8c>)
 80026a6:	f001 f979 	bl	800399c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40004400 	.word	0x40004400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <NMI_Handler+0x4>

080026c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <MemManage_Handler+0x4>

080026d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <BusFault_Handler+0x4>

080026d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <UsageFault_Handler+0x4>

080026de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800270c:	f000 f95e 	bl	80029cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <CAN1_RX0_IRQHandler+0x10>)
 800271a:	f000 fdce 	bl	80032ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000009c 	.word	0x2000009c

08002728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <TIM2_IRQHandler+0x10>)
 800272e:	f004 fe2a 	bl	8007386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000160 	.word	0x20000160

0800273c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM3_IRQHandler+0x10>)
 8002742:	f004 fe20 	bl	8007386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200001a8 	.word	0x200001a8

08002750 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM4_IRQHandler+0x10>)
 8002756:	f004 fe16 	bl	8007386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200001f0 	.word	0x200001f0

08002764 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <I2C1_EV_IRQHandler+0x10>)
 800276a:	f001 ff2d 	bl	80045c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200000c4 	.word	0x200000c4

08002778 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <TIM5_IRQHandler+0x10>)
 800277e:	f004 fe02 	bl	8007386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000238 	.word	0x20000238

0800278c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <TIM7_IRQHandler+0x10>)
 8002792:	f004 fdf8 	bl	8007386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000280 	.word	0x20000280

080027a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e00a      	b.n	80027c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b2:	f3af 8000 	nop.w
 80027b6:	4601      	mov	r1, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf0      	blt.n	80027b2 <_read+0x12>
	}

return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_close>:
	}
	return len;
}

int _close(int file)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002802:	605a      	str	r2, [r3, #4]
	return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_isatty>:

int _isatty(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f006 fa24 	bl	8008cc0 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20020000 	.word	0x20020000
 80028a4:	00000400 	.word	0x00000400
 80028a8:	200003a0 	.word	0x200003a0
 80028ac:	200004b8 	.word	0x200004b8

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028da:	490e      	ldr	r1, [pc, #56]	; (8002914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f0:	4c0b      	ldr	r4, [pc, #44]	; (8002920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028fe:	f7ff ffd7 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f006 f9e3 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002906:	f7fe fa87 	bl	8000e18 <main>
  bx  lr    
 800290a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800290c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002918:	08009ed8 	.word	0x08009ed8
  ldr r2, =_sbss
 800291c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002920:	200004b8 	.word	0x200004b8

08002924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>
	...

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_Init+0x40>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_Init+0x40>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_Init+0x40>)
 800293e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_Init+0x40>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 ffb1 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002956:	2000      	movs	r0, #0
 8002958:	f000 f808 	bl	800296c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800295c:	f7ff fc36 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x54>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_InitTick+0x58>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002982:	fbb3 f3f1 	udiv	r3, r3, r1
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ffc9 	bl	8003922 <HAL_SYSTICK_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e00e      	b.n	80029b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d80a      	bhi.n	80029b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a0:	2200      	movs	r2, #0
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f000 ff91 	bl	80038ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <HAL_InitTick+0x5c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000010 	.word	0x20000010
 80029c4:	20000018 	.word	0x20000018
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x20>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_IncTick+0x24>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_IncTick+0x24>)
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000018 	.word	0x20000018
 80029f0:	200003a4 	.word	0x200003a4

080029f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return uwTick;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_GetTick+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200003a4 	.word	0x200003a4

08002a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff ffee 	bl	80029f4 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d005      	beq.n	8002a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_Delay+0x44>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a32:	bf00      	nop
 8002a34:	f7ff ffde 	bl	80029f4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d8f7      	bhi.n	8002a34 <HAL_Delay+0x28>
  {
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000018 	.word	0x20000018

08002a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0ed      	b.n	8002c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fbd2 	bl	800221c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a88:	f7ff ffb4 	bl	80029f4 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a8e:	e012      	b.n	8002ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a90:	f7ff ffb0 	bl	80029f4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b0a      	cmp	r3, #10
 8002a9c:	d90b      	bls.n	8002ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0c5      	b.n	8002c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0e5      	beq.n	8002a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0202 	bic.w	r2, r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7ff ff8e 	bl	80029f4 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ada:	e012      	b.n	8002b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002adc:	f7ff ff8a 	bl	80029f4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b0a      	cmp	r3, #10
 8002ae8:	d90b      	bls.n	8002b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2205      	movs	r2, #5
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e09f      	b.n	8002c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e1b      	ldrb	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7e5b      	ldrb	r3, [r3, #25]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e007      	b.n	8002b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e9b      	ldrb	r3, [r3, #26]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e007      	b.n	8002b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0220 	bic.w	r2, r2, #32
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7edb      	ldrb	r3, [r3, #27]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0210 	bic.w	r2, r2, #16
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e007      	b.n	8002bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0210 	orr.w	r2, r2, #16
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7f1b      	ldrb	r3, [r3, #28]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d108      	bne.n	8002bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e007      	b.n	8002be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0208 	bic.w	r2, r2, #8
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7f5b      	ldrb	r3, [r3, #29]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0204 	orr.w	r2, r2, #4
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e007      	b.n	8002c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d003      	beq.n	8002c72 <HAL_CAN_ConfigFilter+0x26>
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f040 80be 	bne.w	8002dee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002c72:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_CAN_ConfigFilter+0x1bc>)
 8002c74:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d123      	bne.n	8002d1c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3248      	adds	r2, #72	; 0x48
 8002cfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	3348      	adds	r3, #72	; 0x48
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d122      	bne.n	8002d6a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3248      	adds	r2, #72	; 0x48
 8002d4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d60:	6979      	ldr	r1, [r7, #20]
 8002d62:	3348      	adds	r3, #72	; 0x48
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d84:	e007      	b.n	8002d96 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	401a      	ands	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002db0:	e007      	b.n	8002dc2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de0:	f023 0201 	bic.w	r2, r3, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e006      	b.n	8002dfc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40006400 	.word	0x40006400

08002e0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d12e      	bne.n	8002e7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e38:	f7ff fddc 	bl	80029f4 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e3e:	e012      	b.n	8002e66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e40:	f7ff fdd8 	bl	80029f4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b0a      	cmp	r3, #10
 8002e4c:	d90b      	bls.n	8002e66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e012      	b.n	8002e8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e006      	b.n	8002e8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d003      	beq.n	8002ec0 <HAL_CAN_AddTxMessage+0x2c>
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	f040 80b8 	bne.w	8003030 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80a0 	beq.w	8003020 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	0e1b      	lsrs	r3, r3, #24
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d907      	bls.n	8002f00 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e09e      	b.n	800303e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f00:	2201      	movs	r2, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	409a      	lsls	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3318      	adds	r3, #24
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	440b      	add	r3, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e00f      	b.n	8002f4e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3318      	adds	r3, #24
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	440b      	add	r3, r1
 8002f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3318      	adds	r3, #24
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3304      	adds	r3, #4
 8002f60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	7d1b      	ldrb	r3, [r3, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d111      	bne.n	8002f8e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3318      	adds	r3, #24
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6811      	ldr	r1, [r2, #0]
 8002f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3318      	adds	r3, #24
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	440b      	add	r3, r1
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3307      	adds	r3, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	061a      	lsls	r2, r3, #24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3306      	adds	r3, #6
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3305      	adds	r3, #5
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	3204      	adds	r2, #4
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	6811      	ldr	r1, [r2, #0]
 8002fb6:	ea43 0200 	orr.w	r2, r3, r0
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002fc4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3303      	adds	r3, #3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	061a      	lsls	r2, r3, #24
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6811      	ldr	r1, [r2, #0]
 8002fec:	ea43 0200 	orr.w	r2, r3, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ffa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3318      	adds	r3, #24
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4413      	add	r3, r2
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3318      	adds	r3, #24
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	440b      	add	r3, r1
 800301a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e00e      	b.n	800303e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e006      	b.n	800303e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800304a:	b480      	push	{r7}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <HAL_CAN_GetRxMessage+0x24>
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f040 80f3 	bne.w	8003254 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10e      	bne.n	8003092 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0e7      	b.n	8003262 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d8      	b.n	8003262 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	331b      	adds	r3, #27
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0204 	and.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	331b      	adds	r3, #27
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0d5b      	lsrs	r3, r3, #21
 80030de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	331b      	adds	r3, #27
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4413      	add	r3, r2
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	331b      	adds	r3, #27
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0202 	and.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	331b      	adds	r3, #27
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	331b      	adds	r3, #27
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	331b      	adds	r3, #27
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4413      	add	r3, r2
 8003168:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0a1a      	lsrs	r2, r3, #8
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4413      	add	r3, r2
 8003198:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0c1a      	lsrs	r2, r3, #16
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	3302      	adds	r3, #2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0e1a      	lsrs	r2, r3, #24
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3303      	adds	r3, #3
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3304      	adds	r3, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0a1a      	lsrs	r2, r3, #8
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3305      	adds	r3, #5
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0c1a      	lsrs	r2, r3, #16
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	3306      	adds	r3, #6
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4413      	add	r3, r2
 8003218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e1a      	lsrs	r2, r3, #24
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3307      	adds	r3, #7
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e007      	b.n	8003250 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e006      	b.n	8003262 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d002      	beq.n	800328c <HAL_CAN_ActivateNotification+0x1e>
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d109      	bne.n	80032a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6959      	ldr	r1, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e006      	b.n	80032ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b08a      	sub	sp, #40	; 0x28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d07c      	beq.n	80033fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d023      	beq.n	8003352 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f983 	bl	8003628 <HAL_CAN_TxMailbox0CompleteCallback>
 8003322:	e016      	b.n	8003352 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	e00c      	b.n	8003352 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e002      	b.n	8003352 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f989 	bl	8003664 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d024      	beq.n	80033a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f963 	bl	800363c <HAL_CAN_TxMailbox1CompleteCallback>
 8003376:	e016      	b.n	80033a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	e00c      	b.n	80033a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e002      	b.n	80033a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f969 	bl	8003678 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d024      	beq.n	80033fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f943 	bl	8003650 <HAL_CAN_TxMailbox2CompleteCallback>
 80033ca:	e016      	b.n	80033fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e00c      	b.n	80033fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e002      	b.n	80033fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f949 	bl	800368c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003414:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2210      	movs	r2, #16
 800341c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2208      	movs	r2, #8
 8003438:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f930 	bl	80036a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe fd21 	bl	8001ea0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00c      	beq.n	8003482 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003478:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2208      	movs	r2, #8
 800349c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f912 	bl	80036c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8f9 	bl	80036b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8fc 	bl	80036dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2208      	movs	r2, #8
 80034fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8f5 	bl	80036f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d07b      	beq.n	8003608 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d072      	beq.n	8003600 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	2b00      	cmp	r3, #0
 8003576:	d043      	beq.n	8003600 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03e      	beq.n	8003600 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003588:	2b60      	cmp	r3, #96	; 0x60
 800358a:	d02b      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x32a>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d82e      	bhi.n	80035ee <HAL_CAN_IRQHandler+0x334>
 8003590:	2b50      	cmp	r3, #80	; 0x50
 8003592:	d022      	beq.n	80035da <HAL_CAN_IRQHandler+0x320>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d82a      	bhi.n	80035ee <HAL_CAN_IRQHandler+0x334>
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d019      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x316>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d826      	bhi.n	80035ee <HAL_CAN_IRQHandler+0x334>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d010      	beq.n	80035c6 <HAL_CAN_IRQHandler+0x30c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d822      	bhi.n	80035ee <HAL_CAN_IRQHandler+0x334>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d002      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x2f8>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d005      	beq.n	80035bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035b0:	e01d      	b.n	80035ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ba:	e019      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f043 0310 	orr.w	r3, r3, #16
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c4:	e014      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ce:	e00f      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d8:	e00a      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035e2:	e005      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ec:	e000      	b.n	80035f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80035ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2204      	movs	r2, #4
 8003606:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f872 	bl	8003704 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003620:	bf00      	nop
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff3e 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff31 	bl	800377c <__NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <SysTick_Config>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d004      	beq.n	8003958 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e00c      	b.n	8003972 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2205      	movs	r2, #5
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398c:	b2db      	uxtb	r3, r3
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	; 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e165      	b.n	8003c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b8:	2201      	movs	r2, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	f040 8154 	bne.w	8003c7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d005      	beq.n	80039ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d130      	bne.n	8003a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a24:	2201      	movs	r2, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 0201 	and.w	r2, r3, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d017      	beq.n	8003a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d123      	bne.n	8003ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3208      	adds	r2, #8
 8003aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	220f      	movs	r2, #15
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0203 	and.w	r2, r3, #3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80ae 	beq.w	8003c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_GPIO_Init+0x300>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_GPIO_Init+0x300>)
 8003b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b30:	6453      	str	r3, [r2, #68]	; 0x44
 8003b32:	4b5a      	ldr	r3, [pc, #360]	; (8003c9c <HAL_GPIO_Init+0x300>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3e:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_GPIO_Init+0x304>)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	3302      	adds	r3, #2
 8003b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	220f      	movs	r2, #15
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a4f      	ldr	r2, [pc, #316]	; (8003ca4 <HAL_GPIO_Init+0x308>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x21a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a4e      	ldr	r2, [pc, #312]	; (8003ca8 <HAL_GPIO_Init+0x30c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x216>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4d      	ldr	r2, [pc, #308]	; (8003cac <HAL_GPIO_Init+0x310>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x212>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_GPIO_Init+0x314>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x20e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <HAL_GPIO_Init+0x318>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x20a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <HAL_GPIO_Init+0x31c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x206>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a49      	ldr	r2, [pc, #292]	; (8003cbc <HAL_GPIO_Init+0x320>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x202>
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	e00c      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003b9e:	2307      	movs	r3, #7
 8003ba0:	e00a      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e008      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e004      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_GPIO_Init+0x21c>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f002 0203 	and.w	r2, r2, #3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4093      	lsls	r3, r2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc8:	4935      	ldr	r1, [pc, #212]	; (8003ca0 <HAL_GPIO_Init+0x304>)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c78:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <HAL_GPIO_Init+0x324>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	f67f ae96 	bls.w	80039b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3724      	adds	r7, #36	; 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020800 	.word	0x40020800
 8003cb0:	40020c00 	.word	0x40020c00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40021400 	.word	0x40021400
 8003cbc:	40021800 	.word	0x40021800
 8003cc0:	40013c00 	.word	0x40013c00

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce0:	e003      	b.n	8003cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	619a      	str	r2, [r3, #24]
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e12b      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe facc 	bl	80022bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f002 fc68 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a81      	ldr	r2, [pc, #516]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d807      	bhi.n	8003d7c <HAL_I2C_Init+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <HAL_I2C_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x92>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_I2C_Init+0x27c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0e7      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a78      	ldr	r2, [pc, #480]	; (8003f78 <HAL_I2C_Init+0x280>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <HAL_I2C_Init+0xd4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_I2C_Init+0xe8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_I2C_Init+0x284>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	495c      	ldr	r1, [pc, #368]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d819      	bhi.n	8003e34 <HAL_I2C_Init+0x13c>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e59      	subs	r1, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e14:	400b      	ands	r3, r1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_I2C_Init+0x138>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1e59      	subs	r1, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2e:	e051      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e04f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <HAL_I2C_Init+0x168>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e58      	subs	r0, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	440b      	add	r3, r1
 8003e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e012      	b.n	8003e86 <HAL_I2C_Init+0x18e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	0099      	lsls	r1, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x196>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <HAL_I2C_Init+0x1bc>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1e58      	subs	r0, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	440b      	add	r3, r1
 8003ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e58      	subs	r0, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	0099      	lsls	r1, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	6809      	ldr	r1, [r1, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6911      	ldr	r1, [r2, #16]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	000186a0 	.word	0x000186a0
 8003f70:	001e847f 	.word	0x001e847f
 8003f74:	003d08ff 	.word	0x003d08ff
 8003f78:	431bde83 	.word	0x431bde83
 8003f7c:	10624dd3 	.word	0x10624dd3

08003f80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
 8003f90:	4613      	mov	r3, r2
 8003f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7fe fd2e 	bl	80029f4 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	f040 80e0 	bne.w	8004168 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4970      	ldr	r1, [pc, #448]	; (8004174 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f001 ffd0 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0d3      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_Master_Transmit+0x50>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0cc      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2210      	movs	r2, #16
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	893a      	ldrh	r2, [r7, #8]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_I2C_Master_Transmit+0x1f8>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f001 fd92 	bl	8005b68 <I2C_MasterRequestWrite>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08d      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004064:	e066      	b.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f002 f84a 	bl	8006104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_I2C_Master_Transmit+0x188>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	6a39      	ldr	r1, [r7, #32]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f002 f83a 	bl	8006186 <I2C_WaitOnBTFFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b04      	cmp	r3, #4
 800411e:	d107      	bne.n	8004130 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e01a      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d194      	bne.n	8004066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000

0800417c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	460b      	mov	r3, r1
 800418a:	817b      	strh	r3, [r7, #10]
 800418c:	4613      	mov	r3, r2
 800418e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004190:	f7fe fc30 	bl	80029f4 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	f040 820b 	bne.w	80045ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2319      	movs	r3, #25
 80041aa:	2201      	movs	r2, #1
 80041ac:	497c      	ldr	r1, [pc, #496]	; (80043a0 <HAL_I2C_Master_Receive+0x224>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f001 fed2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
 80041bc:	e1fe      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_I2C_Master_Receive+0x50>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e1f7      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d007      	beq.n	80041f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2222      	movs	r2, #34	; 0x22
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2210      	movs	r2, #16
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	893a      	ldrh	r2, [r7, #8]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a5c      	ldr	r2, [pc, #368]	; (80043a4 <HAL_I2C_Master_Receive+0x228>)
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004234:	8979      	ldrh	r1, [r7, #10]
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 fd16 	bl	8005c6c <I2C_MasterRequestRead>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1b8      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d113      	bne.n	800427a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e18c      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	2b01      	cmp	r3, #1
 8004280:	d11b      	bne.n	80042ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e16c      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d11b      	bne.n	80042fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	e14c      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004320:	e138      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b03      	cmp	r3, #3
 8004328:	f200 80f1 	bhi.w	800450e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b01      	cmp	r3, #1
 8004332:	d123      	bne.n	800437c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f001 ff97 	bl	800626c <I2C_WaitOnRXNEFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e139      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437a:	e10b      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b02      	cmp	r3, #2
 8004382:	d14e      	bne.n	8004422 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2200      	movs	r2, #0
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <HAL_I2C_Master_Receive+0x22c>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 fde2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e10e      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
 800439e:	bf00      	nop
 80043a0:	00100002 	.word	0x00100002
 80043a4:	ffff0000 	.word	0xffff0000
 80043a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004420:	e0b8      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2200      	movs	r2, #0
 800442a:	4966      	ldr	r1, [pc, #408]	; (80045c4 <HAL_I2C_Master_Receive+0x448>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f001 fd93 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0bf      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2200      	movs	r2, #0
 8004486:	494f      	ldr	r1, [pc, #316]	; (80045c4 <HAL_I2C_Master_Receive+0x448>)
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f001 fd65 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e091      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800450c:	e042      	b.n	8004594 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f001 feaa 	bl	800626c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e04c      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d118      	bne.n	8004594 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f aec2 	bne.w	8004322 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	; 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	00010004 	.word	0x00010004

080045c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d003      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x38>
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	f040 80c1 	bne.w	8004782 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <HAL_I2C_EV_IRQHandler+0x6e>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004620:	d003      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x62>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004628:	d101      	bne.n	800462e <HAL_I2C_EV_IRQHandler+0x66>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_I2C_EV_IRQHandler+0x68>
 800462e:	2300      	movs	r3, #0
 8004630:	2b01      	cmp	r3, #1
 8004632:	f000 8132 	beq.w	800489a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0x92>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	0a5b      	lsrs	r3, r3, #9
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f001 fe92 	bl	8006376 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fcdc 	bl	8005010 <I2C_Master_SB>
 8004658:	e092      	b.n	8004780 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0xb2>
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fd52 	bl	800511c <I2C_Master_ADD10>
 8004678:	e082      	b.n	8004780 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0xd2>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	0a5b      	lsrs	r3, r3, #9
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fd6c 	bl	8005170 <I2C_Master_ADDR>
 8004698:	e072      	b.n	8004780 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d03b      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b4:	f000 80f3 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	09db      	lsrs	r3, r3, #7
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0a9b      	lsrs	r3, r3, #10
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f94c 	bl	800497a <I2C_MasterTransmit_TXE>
 80046e2:	e04d      	b.n	8004780 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d6 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a5b      	lsrs	r3, r3, #9
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80cf 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	2b21      	cmp	r3, #33	; 0x21
 8004704:	d103      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9d3 	bl	8004ab2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470c:	e0c7      	b.n	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	f040 80c4 	bne.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa41 	bl	8004b9e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471c:	e0bf      	b.n	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472c:	f000 80b7 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00f      	beq.n	800475c <HAL_I2C_EV_IRQHandler+0x194>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HAL_I2C_EV_IRQHandler+0x194>
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fab6 	bl	8004cc6 <I2C_MasterReceive_RXNE>
 800475a:	e011      	b.n	8004780 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 809a 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	0a5b      	lsrs	r3, r3, #9
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8093 	beq.w	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb5f 	bl	8004e3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477e:	e08e      	b.n	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004780:	e08d      	b.n	800489e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e007      	b.n	80047a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	0a5b      	lsrs	r3, r3, #9
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ff1d 	bl	800560e <I2C_Slave_ADDR>
 80047d4:	e066      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0a5b      	lsrs	r3, r3, #9
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 ff58 	bl	80056a4 <I2C_Slave_STOPF>
 80047f4:	e056      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	2b21      	cmp	r3, #33	; 0x21
 80047fa:	d002      	beq.n	8004802 <HAL_I2C_EV_IRQHandler+0x23a>
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b29      	cmp	r3, #41	; 0x29
 8004800:	d125      	bne.n	800484e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	09db      	lsrs	r3, r3, #7
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00f      	beq.n	800482e <HAL_I2C_EV_IRQHandler+0x266>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0a9b      	lsrs	r3, r3, #10
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_I2C_EV_IRQHandler+0x266>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fe33 	bl	8005492 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482c:	e039      	b.n	80048a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d033      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0a5b      	lsrs	r3, r3, #9
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02d      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe60 	bl	800550c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800484c:	e029      	b.n	80048a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00f      	beq.n	800487a <HAL_I2C_EV_IRQHandler+0x2b2>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	0a9b      	lsrs	r3, r3, #10
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fe6b 	bl	800554e <I2C_SlaveReceive_RXNE>
 8004878:	e014      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	0a5b      	lsrs	r3, r3, #9
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fe99 	bl	80055ca <I2C_SlaveReceive_BTF>
 8004898:	e004      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	70fb      	strb	r3, [r7, #3]
 8004906:	4613      	mov	r3, r2
 8004908:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004990:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d150      	bne.n	8004a42 <I2C_MasterTransmit_TXE+0xc8>
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b21      	cmp	r3, #33	; 0x21
 80049a4:	d14d      	bne.n	8004a42 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d01d      	beq.n	80049e8 <I2C_MasterTransmit_TXE+0x6e>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d01a      	beq.n	80049e8 <I2C_MasterTransmit_TXE+0x6e>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b8:	d016      	beq.n	80049e8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2211      	movs	r2, #17
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff62 	bl	80048aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e6:	e060      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d107      	bne.n	8004a32 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff7d 	bl	800492a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a30:	e03b      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff35 	bl	80048aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a40:	e033      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b21      	cmp	r3, #33	; 0x21
 8004a46:	d005      	beq.n	8004a54 <I2C_MasterTransmit_TXE+0xda>
 8004a48:	7bbb      	ldrb	r3, [r7, #14]
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d12d      	bne.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b22      	cmp	r3, #34	; 0x22
 8004a52:	d12a      	bne.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a6e:	e01c      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d103      	bne.n	8004a84 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f88e 	bl	8004b9e <I2C_MemoryTransmit_TXE_BTF>
}
 8004a82:	e012      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aa8:	e7ff      	b.n	8004aaa <I2C_MasterTransmit_TXE+0x130>
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b21      	cmp	r3, #33	; 0x21
 8004aca:	d164      	bne.n	8004b96 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d012      	beq.n	8004afc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004afa:	e04c      	b.n	8004b96 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d01d      	beq.n	8004b3e <I2C_MasterTransmit_BTF+0x8c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d01a      	beq.n	8004b3e <I2C_MasterTransmit_BTF+0x8c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b0e:	d016      	beq.n	8004b3e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b1e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2211      	movs	r2, #17
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff feb7 	bl	80048aa <HAL_I2C_MasterTxCpltCallback>
}
 8004b3c:	e02b      	b.n	8004b96 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b4c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d107      	bne.n	8004b88 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fed2 	bl	800492a <HAL_I2C_MemTxCpltCallback>
}
 8004b86:	e006      	b.n	8004b96 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fe8a 	bl	80048aa <HAL_I2C_MasterTxCpltCallback>
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11d      	bne.n	8004bf2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10b      	bne.n	8004bd6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bd4:	e073      	b.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	121b      	asrs	r3, r3, #8
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bf0:	e065      	b.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10b      	bne.n	8004c12 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c10:	e055      	b.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d151      	bne.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b22      	cmp	r3, #34	; 0x22
 8004c1e:	d10d      	bne.n	8004c3c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c3a:	e040      	b.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d015      	beq.n	8004c72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b21      	cmp	r3, #33	; 0x21
 8004c4a:	d112      	bne.n	8004c72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c70:	e025      	b.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d120      	bne.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b21      	cmp	r3, #33	; 0x21
 8004c80:	d11d      	bne.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c90:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fe36 	bl	800492a <HAL_I2C_MemTxCpltCallback>
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b22      	cmp	r3, #34	; 0x22
 8004cd8:	f040 80ac 	bne.w	8004e34 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d921      	bls.n	8004d2e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	f040 808c 	bne.w	8004e34 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d2c:	e082      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d075      	beq.n	8004e22 <I2C_MasterReceive_RXNE+0x15c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d002      	beq.n	8004d42 <I2C_MasterReceive_RXNE+0x7c>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d16f      	bne.n	8004e22 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fa60 	bl	8006208 <I2C_WaitOnSTOPRequestThroughIT>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d142      	bne.n	8004dd4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d10a      	bne.n	8004dbe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fdc1 	bl	800493e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dbc:	e03a      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2212      	movs	r2, #18
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fd76 	bl	80048be <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd2:	e02f      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fd99 	bl	8004952 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e20:	e008      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e30:	605a      	str	r2, [r3, #4]
}
 8004e32:	e7ff      	b.n	8004e34 <I2C_MasterReceive_RXNE+0x16e>
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d11b      	bne.n	8004e8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e8a:	e0bd      	b.n	8005008 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d129      	bne.n	8004eea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d00a      	beq.n	8004ec2 <I2C_MasterReceive_BTF+0x86>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d007      	beq.n	8004ec2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ee8:	e08e      	b.n	8005008 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d176      	bne.n	8004fe2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d002      	beq.n	8004f00 <I2C_MasterReceive_BTF+0xc4>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d108      	bne.n	8004f12 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e019      	b.n	8004f46 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d002      	beq.n	8004f1e <I2C_MasterReceive_BTF+0xe2>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d108      	bne.n	8004f30 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e00a      	b.n	8004f46 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d007      	beq.n	8004f46 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fa0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d10a      	bne.n	8004fcc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fcba 	bl	800493e <HAL_I2C_MemRxCpltCallback>
}
 8004fca:	e01d      	b.n	8005008 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2212      	movs	r2, #18
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fc6f 	bl	80048be <HAL_I2C_MasterRxCpltCallback>
}
 8004fe0:	e012      	b.n	8005008 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d117      	bne.n	8005054 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800503e:	e067      	b.n	8005110 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]
}
 8005052:	e05d      	b.n	8005110 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505c:	d133      	bne.n	80050c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b21      	cmp	r3, #33	; 0x21
 8005068:	d109      	bne.n	800507e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800507a:	611a      	str	r2, [r3, #16]
 800507c:	e008      	b.n	8005090 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	b2da      	uxtb	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <I2C_Master_SB+0x92>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d032      	beq.n	8005110 <I2C_Master_SB+0x100>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02d      	beq.n	8005110 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c2:	605a      	str	r2, [r3, #4]
}
 80050c4:	e024      	b.n	8005110 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	11db      	asrs	r3, r3, #7
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0306 	and.w	r3, r3, #6
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f063 030f 	orn	r3, r3, #15
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	611a      	str	r2, [r3, #16]
}
 80050ea:	e011      	b.n	8005110 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10d      	bne.n	8005110 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	11db      	asrs	r3, r3, #7
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f063 030e 	orn	r3, r3, #14
 8005108:	b2da      	uxtb	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	b2da      	uxtb	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <I2C_Master_ADD10+0x26>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <I2C_Master_ADD10+0x48>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	605a      	str	r2, [r3, #4]
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b091      	sub	sp, #68	; 0x44
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b22      	cmp	r3, #34	; 0x22
 8005198:	f040 8169 	bne.w	800546e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <I2C_Master_ADDR+0x54>
 80051a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d10b      	bne.n	80051c4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	e160      	b.n	8005486 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11d      	bne.n	8005208 <I2C_Master_ADDR+0x98>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d4:	d118      	bne.n	8005208 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d6:	2300      	movs	r3, #0
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
 8005206:	e13e      	b.n	8005486 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d113      	bne.n	800523a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e115      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 808a 	bne.w	800535a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800524c:	d137      	bne.n	80052be <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526c:	d113      	bne.n	8005296 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	e0e7      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e0d3      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d02e      	beq.n	8005322 <I2C_Master_ADDR+0x1b2>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d02b      	beq.n	8005322 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	2b12      	cmp	r3, #18
 80052ce:	d102      	bne.n	80052d6 <I2C_Master_ADDR+0x166>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d125      	bne.n	8005322 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d00e      	beq.n	80052fa <I2C_Master_ADDR+0x18a>
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d00b      	beq.n	80052fa <I2C_Master_ADDR+0x18a>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d008      	beq.n	80052fa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e007      	b.n	800530a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005308:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	e0a1      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005330:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e085      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d14d      	bne.n	8005400 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	2b04      	cmp	r3, #4
 8005368:	d016      	beq.n	8005398 <I2C_Master_ADDR+0x228>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b02      	cmp	r3, #2
 800536e:	d013      	beq.n	8005398 <I2C_Master_ADDR+0x228>
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2b10      	cmp	r3, #16
 8005374:	d010      	beq.n	8005398 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e007      	b.n	80053a8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b6:	d117      	bne.n	80053e8 <I2C_Master_ADDR+0x278>
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053be:	d00b      	beq.n	80053d8 <I2C_Master_ADDR+0x268>
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d008      	beq.n	80053d8 <I2C_Master_ADDR+0x268>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d005      	beq.n	80053d8 <I2C_Master_ADDR+0x268>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d002      	beq.n	80053d8 <I2C_Master_ADDR+0x268>
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d107      	bne.n	80053e8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	e032      	b.n	8005466 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800540e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d117      	bne.n	8005450 <I2C_Master_ADDR+0x2e0>
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005426:	d00b      	beq.n	8005440 <I2C_Master_ADDR+0x2d0>
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	2b01      	cmp	r3, #1
 800542c:	d008      	beq.n	8005440 <I2C_Master_ADDR+0x2d0>
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	2b08      	cmp	r3, #8
 8005432:	d005      	beq.n	8005440 <I2C_Master_ADDR+0x2d0>
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	2b10      	cmp	r3, #16
 8005438:	d002      	beq.n	8005440 <I2C_Master_ADDR+0x2d0>
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2b20      	cmp	r3, #32
 800543e:	d107      	bne.n	8005450 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800544e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800546c:	e00b      	b.n	8005486 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	e7ff      	b.n	8005486 <I2C_Master_ADDR+0x316>
 8005486:	bf00      	nop
 8005488:	3744      	adds	r7, #68	; 0x44
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02b      	beq.n	8005504 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d114      	bne.n	8005504 <I2C_SlaveTransmit_TXE+0x72>
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b29      	cmp	r3, #41	; 0x29
 80054de:	d111      	bne.n	8005504 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2221      	movs	r2, #33	; 0x21
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2228      	movs	r2, #40	; 0x28
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f9e7 	bl	80048d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d02c      	beq.n	80055c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d114      	bne.n	80055c2 <I2C_SlaveReceive_RXNE+0x74>
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d111      	bne.n	80055c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2222      	movs	r2, #34	; 0x22
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2228      	movs	r2, #40	; 0x28
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff f992 	bl	80048e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d012      	beq.n	8005602 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005628:	2b28      	cmp	r3, #40	; 0x28
 800562a:	d127      	bne.n	800567c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d103      	bne.n	8005660 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	81bb      	strh	r3, [r7, #12]
 800565e:	e002      	b.n	8005666 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800566e:	89ba      	ldrh	r2, [r7, #12]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff f940 	bl	80048fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800567a:	e00e      	b.n	800569a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005700:	d172      	bne.n	80057e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b22      	cmp	r3, #34	; 0x22
 8005706:	d002      	beq.n	800570e <I2C_Slave_STOPF+0x6a>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b2a      	cmp	r3, #42	; 0x2a
 800570c:	d135      	bne.n	800577a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0204 	orr.w	r2, r3, #4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe f919 	bl	800397e <HAL_DMA_GetState>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d049      	beq.n	80057e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	4a69      	ldr	r2, [pc, #420]	; (80058fc <I2C_Slave_STOPF+0x258>)
 8005758:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe f8eb 	bl	800393a <HAL_DMA_Abort_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03d      	beq.n	80057e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005774:	4610      	mov	r0, r2
 8005776:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005778:	e035      	b.n	80057e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0204 	orr.w	r2, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe f8e3 	bl	800397e <HAL_DMA_GetState>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d014      	beq.n	80057e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	4a4e      	ldr	r2, [pc, #312]	; (80058fc <I2C_Slave_STOPF+0x258>)
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe f8b5 	bl	800393a <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
 80057e4:	e000      	b.n	80057e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03e      	beq.n	8005870 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d112      	bne.n	8005826 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d112      	bne.n	800585a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f843 	bl	8005904 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800587e:	e039      	b.n	80058f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b2a      	cmp	r3, #42	; 0x2a
 8005884:	d109      	bne.n	800589a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2228      	movs	r2, #40	; 0x28
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f826 	bl	80048e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b28      	cmp	r3, #40	; 0x28
 80058a4:	d111      	bne.n	80058ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <I2C_Slave_STOPF+0x25c>)
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f827 	bl	8004916 <HAL_I2C_ListenCpltCallback>
}
 80058c8:	e014      	b.n	80058f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	2b22      	cmp	r3, #34	; 0x22
 80058d0:	d002      	beq.n	80058d8 <I2C_Slave_STOPF+0x234>
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b22      	cmp	r3, #34	; 0x22
 80058d6:	d10d      	bne.n	80058f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fe fff9 	bl	80048e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08005e09 	.word	0x08005e09
 8005900:	ffff0000 	.word	0xffff0000

08005904 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	2b10      	cmp	r3, #16
 8005920:	d002      	beq.n	8005928 <I2C_ITError+0x24>
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d10a      	bne.n	800593e <I2C_ITError+0x3a>
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b22      	cmp	r3, #34	; 0x22
 800592c:	d107      	bne.n	800593e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005944:	2b28      	cmp	r3, #40	; 0x28
 8005946:	d107      	bne.n	8005958 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2228      	movs	r2, #40	; 0x28
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005956:	e015      	b.n	8005984 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005966:	d00a      	beq.n	800597e <I2C_ITError+0x7a>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b60      	cmp	r3, #96	; 0x60
 800596c:	d007      	beq.n	800597e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005992:	d162      	bne.n	8005a5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d020      	beq.n	80059f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	4a6a      	ldr	r2, [pc, #424]	; (8005b60 <I2C_ITError+0x25c>)
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fd ffbb 	bl	800393a <HAL_DMA_Abort_IT>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8089 	beq.w	8005ade <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059ee:	4610      	mov	r0, r2
 80059f0:	4798      	blx	r3
 80059f2:	e074      	b.n	8005ade <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	4a59      	ldr	r2, [pc, #356]	; (8005b60 <I2C_ITError+0x25c>)
 80059fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fd ff9a 	bl	800393a <HAL_DMA_Abort_IT>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d068      	beq.n	8005ade <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d10b      	bne.n	8005a32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	e041      	b.n	8005ade <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b60      	cmp	r3, #96	; 0x60
 8005a64:	d125      	bne.n	8005ab2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d10b      	bne.n	8005a9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe ff5b 	bl	8004966 <HAL_I2C_AbortCpltCallback>
 8005ab0:	e015      	b.n	8005ade <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d10b      	bne.n	8005ad8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fe ff3a 	bl	8004952 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10e      	bne.n	8005b0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d113      	bne.n	8005b58 <I2C_ITError+0x254>
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b28      	cmp	r3, #40	; 0x28
 8005b34:	d110      	bne.n	8005b58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <I2C_ITError+0x260>)
 8005b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fe fedf 	bl	8004916 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	08005e09 	.word	0x08005e09
 8005b64:	ffff0000 	.word	0xffff0000

08005b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	460b      	mov	r3, r1
 8005b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d006      	beq.n	8005b92 <I2C_MasterRequestWrite+0x2a>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d003      	beq.n	8005b92 <I2C_MasterRequestWrite+0x2a>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b90:	d108      	bne.n	8005ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e00b      	b.n	8005bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	2b12      	cmp	r3, #18
 8005baa:	d107      	bne.n	8005bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f9c5 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be2:	d103      	bne.n	8005bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e035      	b.n	8005c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf8:	d108      	bne.n	8005c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bfa:	897b      	ldrh	r3, [r7, #10]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	e01b      	b.n	8005c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c0c:	897b      	ldrh	r3, [r7, #10]
 8005c0e:	11db      	asrs	r3, r3, #7
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0306 	and.w	r3, r3, #6
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f063 030f 	orn	r3, r3, #15
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <I2C_MasterRequestWrite+0xfc>)
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f9eb 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e010      	b.n	8005c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4907      	ldr	r1, [pc, #28]	; (8005c68 <I2C_MasterRequestWrite+0x100>)
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f9db 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	00010008 	.word	0x00010008
 8005c68:	00010002 	.word	0x00010002

08005c6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d006      	beq.n	8005ca6 <I2C_MasterRequestRead+0x3a>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d003      	beq.n	8005ca6 <I2C_MasterRequestRead+0x3a>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ca4:	d108      	bne.n	8005cb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e00b      	b.n	8005cd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	2b11      	cmp	r3, #17
 8005cbe:	d107      	bne.n	8005cd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f93b 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf6:	d103      	bne.n	8005d00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e079      	b.n	8005df8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d0c:	d108      	bne.n	8005d20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	611a      	str	r2, [r3, #16]
 8005d1e:	e05f      	b.n	8005de0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d20:	897b      	ldrh	r3, [r7, #10]
 8005d22:	11db      	asrs	r3, r3, #7
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0306 	and.w	r3, r3, #6
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f063 030f 	orn	r3, r3, #15
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4930      	ldr	r1, [pc, #192]	; (8005e00 <I2C_MasterRequestRead+0x194>)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f961 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e054      	b.n	8005df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4929      	ldr	r1, [pc, #164]	; (8005e04 <I2C_MasterRequestRead+0x198>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f951 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e044      	b.n	8005df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f8d9 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d103      	bne.n	8005dc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e017      	b.n	8005df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005dc8:	897b      	ldrh	r3, [r7, #10]
 8005dca:	11db      	asrs	r3, r3, #7
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0306 	and.w	r3, r3, #6
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f063 030e 	orn	r3, r3, #14
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4907      	ldr	r1, [pc, #28]	; (8005e04 <I2C_MasterRequestRead+0x198>)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f90d 	bl	8006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	00010008 	.word	0x00010008
 8005e04:	00010002 	.word	0x00010002

08005e08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e22:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <I2C_DMAAbort+0x148>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	08db      	lsrs	r3, r3, #3
 8005e28:	4a4a      	ldr	r2, [pc, #296]	; (8005f54 <I2C_DMAAbort+0x14c>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	0a1a      	lsrs	r2, r3, #8
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	00da      	lsls	r2, r3, #3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e4e:	e00a      	b.n	8005e66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e64:	d0ea      	beq.n	8005e3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	2200      	movs	r2, #0
 8005e74:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	2200      	movs	r2, #0
 8005e84:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	2200      	movs	r2, #0
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d10e      	bne.n	8005ef6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005eee:	6978      	ldr	r0, [r7, #20]
 8005ef0:	f7fe fd39 	bl	8004966 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ef4:	e027      	b.n	8005f46 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005efc:	2b28      	cmp	r3, #40	; 0x28
 8005efe:	d117      	bne.n	8005f30 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2228      	movs	r2, #40	; 0x28
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f2e:	e007      	b.n	8005f40 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f40:	6978      	ldr	r0, [r7, #20]
 8005f42:	f7fe fd06 	bl	8004952 <HAL_I2C_ErrorCallback>
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000010 	.word	0x20000010
 8005f54:	14f8b589 	.word	0x14f8b589

08005f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f68:	e025      	b.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d021      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fc fd3f 	bl	80029f4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e023      	b.n	8005ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10d      	bne.n	8005fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	e00c      	b.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf0c      	ite	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d0b6      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006014:	e051      	b.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d123      	bne.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800603e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e046      	b.n	80060fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d021      	beq.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fc fcbd 	bl	80029f4 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d116      	bne.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e020      	b.n	80060fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10c      	bne.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	43da      	mvns	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4013      	ands	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bf14      	ite	ne
 80060d6:	2301      	movne	r3, #1
 80060d8:	2300      	moveq	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	e00b      	b.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	43da      	mvns	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4013      	ands	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d18d      	bne.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006110:	e02d      	b.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f900 	bl	8006318 <I2C_IsAcknowledgeFailed>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e02d      	b.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d021      	beq.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fc fc63 	bl	80029f4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d116      	bne.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e007      	b.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d1ca      	bne.n	8006112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006192:	e02d      	b.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f8bf 	bl	8006318 <I2C_IsAcknowledgeFailed>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e02d      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d021      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fc fc22 	bl	80029f4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d116      	bne.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e007      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d1ca      	bne.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006214:	4b13      	ldr	r3, [pc, #76]	; (8006264 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	08db      	lsrs	r3, r3, #3
 800621a:	4a13      	ldr	r2, [pc, #76]	; (8006268 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	0a1a      	lsrs	r2, r3, #8
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b01      	subs	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e008      	b.n	8006258 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006254:	d0e9      	beq.n	800622a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	20000010 	.word	0x20000010
 8006268:	14f8b589 	.word	0x14f8b589

0800626c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006278:	e042      	b.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d119      	bne.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0210 	mvn.w	r2, #16
 8006290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e029      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062bc:	f7fc fb9a 	bl	80029f4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d116      	bne.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e007      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d1b5      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632e:	d11b      	bne.n	8006368 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006338:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f043 0204 	orr.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006386:	d103      	bne.n	8006390 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800638e:	e007      	b.n	80063a0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006398:	d102      	bne.n	80063a0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2208      	movs	r2, #8
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4b20      	ldr	r3, [pc, #128]	; (800643c <HAL_PWREx_EnableOverDrive+0x90>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_PWREx_EnableOverDrive+0x90>)
 80063c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6413      	str	r3, [r2, #64]	; 0x40
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_PWREx_EnableOverDrive+0x90>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_PWREx_EnableOverDrive+0x94>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063d8:	f7fc fb0c 	bl	80029f4 <HAL_GetTick>
 80063dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063de:	e009      	b.n	80063f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063e0:	f7fc fb08 	bl	80029f4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ee:	d901      	bls.n	80063f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e01f      	b.n	8006434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063f4:	4b13      	ldr	r3, [pc, #76]	; (8006444 <HAL_PWREx_EnableOverDrive+0x98>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d1ee      	bne.n	80063e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006408:	f7fc faf4 	bl	80029f4 <HAL_GetTick>
 800640c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800640e:	e009      	b.n	8006424 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006410:	f7fc faf0 	bl	80029f4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641e:	d901      	bls.n	8006424 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e007      	b.n	8006434 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <HAL_PWREx_EnableOverDrive+0x98>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006430:	d1ee      	bne.n	8006410 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40023800 	.word	0x40023800
 8006440:	420e0040 	.word	0x420e0040
 8006444:	40007000 	.word	0x40007000
 8006448:	420e0044 	.word	0x420e0044

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0cc      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006460:	4b68      	ldr	r3, [pc, #416]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d90c      	bls.n	8006488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b63      	ldr	r3, [pc, #396]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0b8      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d020      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a0:	4b59      	ldr	r3, [pc, #356]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a58      	ldr	r2, [pc, #352]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b8:	4b53      	ldr	r3, [pc, #332]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a52      	ldr	r2, [pc, #328]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	494d      	ldr	r1, [pc, #308]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d044      	beq.n	800656c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d119      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e07f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d003      	beq.n	800650a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	2b03      	cmp	r3, #3
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650a:	4b3f      	ldr	r3, [pc, #252]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	4b3b      	ldr	r3, [pc, #236]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e067      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652a:	4b37      	ldr	r3, [pc, #220]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 0203 	bic.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4934      	ldr	r1, [pc, #208]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800653c:	f7fc fa5a 	bl	80029f4 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	e00a      	b.n	800655a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006544:	f7fc fa56 	bl	80029f4 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e04f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 020c 	and.w	r2, r3, #12
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	429a      	cmp	r2, r3
 800656a:	d1eb      	bne.n	8006544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656c:	4b25      	ldr	r3, [pc, #148]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d20c      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b22      	ldr	r3, [pc, #136]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d001      	beq.n	8006594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e032      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4916      	ldr	r1, [pc, #88]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065d2:	f000 f855 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	490a      	ldr	r1, [pc, #40]	; (800660c <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	5ccb      	ldrb	r3, [r1, r3]
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fc f9ba 	bl	800296c <HAL_InitTick>

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023c00 	.word	0x40023c00
 8006608:	40023800 	.word	0x40023800
 800660c:	08009dbc 	.word	0x08009dbc
 8006610:	20000010 	.word	0x20000010
 8006614:	20000014 	.word	0x20000014

08006618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <HAL_RCC_GetHCLKFreq+0x14>)
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000010 	.word	0x20000010

08006630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006634:	f7ff fff0 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0a9b      	lsrs	r3, r3, #10
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4903      	ldr	r1, [pc, #12]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	08009dcc 	.word	0x08009dcc

08006658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800665c:	f7ff ffdc 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006660:	4602      	mov	r2, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0b5b      	lsrs	r3, r3, #13
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCC_GetPCLK2Freq+0x24>)
 800666e:	5ccb      	ldrb	r3, [r1, r3]
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	08009dcc 	.word	0x08009dcc

08006680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006684:	b0ae      	sub	sp, #184	; 0xb8
 8006686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a6:	4bcb      	ldr	r3, [pc, #812]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	f200 8206 	bhi.w	8006ac0 <HAL_RCC_GetSysClockFreq+0x440>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	080066f1 	.word	0x080066f1
 80066c0:	08006ac1 	.word	0x08006ac1
 80066c4:	08006ac1 	.word	0x08006ac1
 80066c8:	08006ac1 	.word	0x08006ac1
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	08006ac1 	.word	0x08006ac1
 80066d4:	08006ac1 	.word	0x08006ac1
 80066d8:	08006ac1 	.word	0x08006ac1
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006ac1 	.word	0x08006ac1
 80066e4:	08006ac1 	.word	0x08006ac1
 80066e8:	08006ac1 	.word	0x08006ac1
 80066ec:	080068f1 	.word	0x080068f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066f0:	4bb9      	ldr	r3, [pc, #740]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80066f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80066f6:	e1e7      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066f8:	4bb8      	ldr	r3, [pc, #736]	; (80069dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80066fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066fe:	e1e3      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006700:	4bb4      	ldr	r3, [pc, #720]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800670c:	4bb1      	ldr	r3, [pc, #708]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d071      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006718:	4bae      	ldr	r3, [pc, #696]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800672c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800673a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	0159      	lsls	r1, r3, #5
 800674c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006750:	0150      	lsls	r0, r2, #5
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4621      	mov	r1, r4
 8006758:	1a51      	subs	r1, r2, r1
 800675a:	6439      	str	r1, [r7, #64]	; 0x40
 800675c:	4629      	mov	r1, r5
 800675e:	eb63 0301 	sbc.w	r3, r3, r1
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006770:	4649      	mov	r1, r9
 8006772:	018b      	lsls	r3, r1, #6
 8006774:	4641      	mov	r1, r8
 8006776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800677a:	4641      	mov	r1, r8
 800677c:	018a      	lsls	r2, r1, #6
 800677e:	4641      	mov	r1, r8
 8006780:	1a51      	subs	r1, r2, r1
 8006782:	63b9      	str	r1, [r7, #56]	; 0x38
 8006784:	4649      	mov	r1, r9
 8006786:	eb63 0301 	sbc.w	r3, r3, r1
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006798:	4649      	mov	r1, r9
 800679a:	00cb      	lsls	r3, r1, #3
 800679c:	4641      	mov	r1, r8
 800679e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a2:	4641      	mov	r1, r8
 80067a4:	00ca      	lsls	r2, r1, #3
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	4622      	mov	r2, r4
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
 80067b2:	462b      	mov	r3, r5
 80067b4:	460a      	mov	r2, r1
 80067b6:	eb42 0303 	adc.w	r3, r2, r3
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067c8:	4629      	mov	r1, r5
 80067ca:	024b      	lsls	r3, r1, #9
 80067cc:	4621      	mov	r1, r4
 80067ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067d2:	4621      	mov	r1, r4
 80067d4:	024a      	lsls	r2, r1, #9
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80067ec:	f7fa f97e 	bl	8000aec <__aeabi_uldivmod>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4613      	mov	r3, r2
 80067f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067fa:	e067      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fc:	4b75      	ldr	r3, [pc, #468]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	099b      	lsrs	r3, r3, #6
 8006802:	2200      	movs	r2, #0
 8006804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006808:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800680c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	67bb      	str	r3, [r7, #120]	; 0x78
 8006816:	2300      	movs	r3, #0
 8006818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800681a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f04f 0100 	mov.w	r1, #0
 800682a:	0159      	lsls	r1, r3, #5
 800682c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006830:	0150      	lsls	r0, r2, #5
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4621      	mov	r1, r4
 8006838:	1a51      	subs	r1, r2, r1
 800683a:	62b9      	str	r1, [r7, #40]	; 0x28
 800683c:	4629      	mov	r1, r5
 800683e:	eb63 0301 	sbc.w	r3, r3, r1
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006850:	4649      	mov	r1, r9
 8006852:	018b      	lsls	r3, r1, #6
 8006854:	4641      	mov	r1, r8
 8006856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800685a:	4641      	mov	r1, r8
 800685c:	018a      	lsls	r2, r1, #6
 800685e:	4641      	mov	r1, r8
 8006860:	ebb2 0a01 	subs.w	sl, r2, r1
 8006864:	4649      	mov	r1, r9
 8006866:	eb63 0b01 	sbc.w	fp, r3, r1
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006876:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800687a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800687e:	4692      	mov	sl, r2
 8006880:	469b      	mov	fp, r3
 8006882:	4623      	mov	r3, r4
 8006884:	eb1a 0303 	adds.w	r3, sl, r3
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	462b      	mov	r3, r5
 800688c:	eb4b 0303 	adc.w	r3, fp, r3
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800689e:	4629      	mov	r1, r5
 80068a0:	028b      	lsls	r3, r1, #10
 80068a2:	4621      	mov	r1, r4
 80068a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068a8:	4621      	mov	r1, r4
 80068aa:	028a      	lsls	r2, r1, #10
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068b4:	2200      	movs	r2, #0
 80068b6:	673b      	str	r3, [r7, #112]	; 0x70
 80068b8:	677a      	str	r2, [r7, #116]	; 0x74
 80068ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80068be:	f7fa f915 	bl	8000aec <__aeabi_uldivmod>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4613      	mov	r3, r2
 80068c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068cc:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80068de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80068ee:	e0eb      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068fc:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d06b      	beq.n	80069e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006908:	4b32      	ldr	r3, [pc, #200]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	099b      	lsrs	r3, r3, #6
 800690e:	2200      	movs	r2, #0
 8006910:	66bb      	str	r3, [r7, #104]	; 0x68
 8006912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	663b      	str	r3, [r7, #96]	; 0x60
 800691c:	2300      	movs	r3, #0
 800691e:	667b      	str	r3, [r7, #100]	; 0x64
 8006920:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006924:	4622      	mov	r2, r4
 8006926:	462b      	mov	r3, r5
 8006928:	f04f 0000 	mov.w	r0, #0
 800692c:	f04f 0100 	mov.w	r1, #0
 8006930:	0159      	lsls	r1, r3, #5
 8006932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006936:	0150      	lsls	r0, r2, #5
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4621      	mov	r1, r4
 800693e:	1a51      	subs	r1, r2, r1
 8006940:	61b9      	str	r1, [r7, #24]
 8006942:	4629      	mov	r1, r5
 8006944:	eb63 0301 	sbc.w	r3, r3, r1
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006956:	4659      	mov	r1, fp
 8006958:	018b      	lsls	r3, r1, #6
 800695a:	4651      	mov	r1, sl
 800695c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006960:	4651      	mov	r1, sl
 8006962:	018a      	lsls	r2, r1, #6
 8006964:	4651      	mov	r1, sl
 8006966:	ebb2 0801 	subs.w	r8, r2, r1
 800696a:	4659      	mov	r1, fp
 800696c:	eb63 0901 	sbc.w	r9, r3, r1
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800697c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006984:	4690      	mov	r8, r2
 8006986:	4699      	mov	r9, r3
 8006988:	4623      	mov	r3, r4
 800698a:	eb18 0303 	adds.w	r3, r8, r3
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	462b      	mov	r3, r5
 8006992:	eb49 0303 	adc.w	r3, r9, r3
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80069a4:	4629      	mov	r1, r5
 80069a6:	024b      	lsls	r3, r1, #9
 80069a8:	4621      	mov	r1, r4
 80069aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069ae:	4621      	mov	r1, r4
 80069b0:	024a      	lsls	r2, r1, #9
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ba:	2200      	movs	r2, #0
 80069bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80069be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80069c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069c4:	f7fa f892 	bl	8000aec <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069d2:	e065      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x420>
 80069d4:	40023800 	.word	0x40023800
 80069d8:	00f42400 	.word	0x00f42400
 80069dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e0:	4b3d      	ldr	r3, [pc, #244]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	099b      	lsrs	r3, r3, #6
 80069e6:	2200      	movs	r2, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	4611      	mov	r1, r2
 80069ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
 80069f2:	2300      	movs	r3, #0
 80069f4:	657b      	str	r3, [r7, #84]	; 0x54
 80069f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80069fa:	4642      	mov	r2, r8
 80069fc:	464b      	mov	r3, r9
 80069fe:	f04f 0000 	mov.w	r0, #0
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	0159      	lsls	r1, r3, #5
 8006a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0c:	0150      	lsls	r0, r2, #5
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4641      	mov	r1, r8
 8006a14:	1a51      	subs	r1, r2, r1
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	4649      	mov	r1, r9
 8006a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	018b      	lsls	r3, r1, #6
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a36:	4651      	mov	r1, sl
 8006a38:	018a      	lsls	r2, r1, #6
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	1a54      	subs	r4, r2, r1
 8006a3e:	4659      	mov	r1, fp
 8006a40:	eb63 0501 	sbc.w	r5, r3, r1
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	00eb      	lsls	r3, r5, #3
 8006a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a52:	00e2      	lsls	r2, r4, #3
 8006a54:	4614      	mov	r4, r2
 8006a56:	461d      	mov	r5, r3
 8006a58:	4643      	mov	r3, r8
 8006a5a:	18e3      	adds	r3, r4, r3
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	464b      	mov	r3, r9
 8006a60:	eb45 0303 	adc.w	r3, r5, r3
 8006a64:	607b      	str	r3, [r7, #4]
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a72:	4629      	mov	r1, r5
 8006a74:	028b      	lsls	r3, r1, #10
 8006a76:	4621      	mov	r1, r4
 8006a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	028a      	lsls	r2, r1, #10
 8006a80:	4610      	mov	r0, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a88:	2200      	movs	r2, #0
 8006a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a92:	f7fa f82b 	bl	8000aec <__aeabi_uldivmod>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006aa0:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	0f1b      	lsrs	r3, r3, #28
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006abe:	e003      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <HAL_RCC_GetSysClockFreq+0x45c>)
 8006ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	37b8      	adds	r7, #184	; 0xb8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	00f42400 	.word	0x00f42400

08006ae0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e28d      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8083 	beq.w	8006c06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b00:	4b94      	ldr	r3, [pc, #592]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d019      	beq.n	8006b40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b0c:	4b91      	ldr	r3, [pc, #580]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d106      	bne.n	8006b26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b18:	4b8e      	ldr	r3, [pc, #568]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b24:	d00c      	beq.n	8006b40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b26:	4b8b      	ldr	r3, [pc, #556]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b2e:	2b0c      	cmp	r3, #12
 8006b30:	d112      	bne.n	8006b58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b32:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b3e:	d10b      	bne.n	8006b58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b40:	4b84      	ldr	r3, [pc, #528]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d05b      	beq.n	8006c04 <HAL_RCC_OscConfig+0x124>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d157      	bne.n	8006c04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e25a      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d106      	bne.n	8006b70 <HAL_RCC_OscConfig+0x90>
 8006b62:	4b7c      	ldr	r3, [pc, #496]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7b      	ldr	r2, [pc, #492]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e01d      	b.n	8006bac <HAL_RCC_OscConfig+0xcc>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0xb4>
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a75      	ldr	r2, [pc, #468]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b73      	ldr	r3, [pc, #460]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a72      	ldr	r2, [pc, #456]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xcc>
 8006b94:	4b6f      	ldr	r3, [pc, #444]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6e      	ldr	r2, [pc, #440]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6b      	ldr	r2, [pc, #428]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb ff1e 	bl	80029f4 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fb ff1a 	bl	80029f4 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e21f      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b61      	ldr	r3, [pc, #388]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0xdc>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fb ff0a 	bl	80029f4 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fb ff06 	bl	80029f4 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e20b      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf6:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x104>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d06f      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c12:	4b50      	ldr	r3, [pc, #320]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c1e:	4b4d      	ldr	r3, [pc, #308]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d105      	bne.n	8006c36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c2a:	4b4a      	ldr	r3, [pc, #296]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c36:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c3e:	2b0c      	cmp	r3, #12
 8006c40:	d11c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c42:	4b44      	ldr	r3, [pc, #272]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d116      	bne.n	8006c7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4e:	4b41      	ldr	r3, [pc, #260]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_RCC_OscConfig+0x186>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e1d3      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c66:	4b3b      	ldr	r3, [pc, #236]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4937      	ldr	r1, [pc, #220]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7a:	e03a      	b.n	8006cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c84:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <HAL_RCC_OscConfig+0x278>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8a:	f7fb feb3 	bl	80029f4 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c92:	f7fb feaf 	bl	80029f4 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e1b4      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb0:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4925      	ldr	r1, [pc, #148]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
 8006cc4:	e015      	b.n	8006cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cc6:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <HAL_RCC_OscConfig+0x278>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fb fe92 	bl	80029f4 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd4:	f7fb fe8e 	bl	80029f4 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e193      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d036      	beq.n	8006d6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d016      	beq.n	8006d34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d06:	4b15      	ldr	r3, [pc, #84]	; (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0c:	f7fb fe72 	bl	80029f4 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d14:	f7fb fe6e 	bl	80029f4 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e173      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x234>
 8006d32:	e01b      	b.n	8006d6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3a:	f7fb fe5b 	bl	80029f4 <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d40:	e00e      	b.n	8006d60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d42:	f7fb fe57 	bl	80029f4 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d907      	bls.n	8006d60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e15c      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
 8006d54:	40023800 	.word	0x40023800
 8006d58:	42470000 	.word	0x42470000
 8006d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d60:	4b8a      	ldr	r3, [pc, #552]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ea      	bne.n	8006d42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8097 	beq.w	8006ea8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d7e:	4b83      	ldr	r3, [pc, #524]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10f      	bne.n	8006daa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	4b7f      	ldr	r3, [pc, #508]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	4a7e      	ldr	r2, [pc, #504]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d98:	6413      	str	r3, [r2, #64]	; 0x40
 8006d9a:	4b7c      	ldr	r3, [pc, #496]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da2:	60bb      	str	r3, [r7, #8]
 8006da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006daa:	4b79      	ldr	r3, [pc, #484]	; (8006f90 <HAL_RCC_OscConfig+0x4b0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d118      	bne.n	8006de8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006db6:	4b76      	ldr	r3, [pc, #472]	; (8006f90 <HAL_RCC_OscConfig+0x4b0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a75      	ldr	r2, [pc, #468]	; (8006f90 <HAL_RCC_OscConfig+0x4b0>)
 8006dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc2:	f7fb fe17 	bl	80029f4 <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dca:	f7fb fe13 	bl	80029f4 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e118      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ddc:	4b6c      	ldr	r3, [pc, #432]	; (8006f90 <HAL_RCC_OscConfig+0x4b0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f0      	beq.n	8006dca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d106      	bne.n	8006dfe <HAL_RCC_OscConfig+0x31e>
 8006df0:	4b66      	ldr	r3, [pc, #408]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	4a65      	ldr	r2, [pc, #404]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfc:	e01c      	b.n	8006e38 <HAL_RCC_OscConfig+0x358>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x340>
 8006e06:	4b61      	ldr	r3, [pc, #388]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	4a60      	ldr	r2, [pc, #384]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e0c:	f043 0304 	orr.w	r3, r3, #4
 8006e10:	6713      	str	r3, [r2, #112]	; 0x70
 8006e12:	4b5e      	ldr	r3, [pc, #376]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	4a5d      	ldr	r2, [pc, #372]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCC_OscConfig+0x358>
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e24:	4a59      	ldr	r2, [pc, #356]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e2c:	4b57      	ldr	r3, [pc, #348]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e30:	4a56      	ldr	r2, [pc, #344]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e32:	f023 0304 	bic.w	r3, r3, #4
 8006e36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d015      	beq.n	8006e6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e40:	f7fb fdd8 	bl	80029f4 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e46:	e00a      	b.n	8006e5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e48:	f7fb fdd4 	bl	80029f4 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e0d7      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e5e:	4b4b      	ldr	r3, [pc, #300]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0ee      	beq.n	8006e48 <HAL_RCC_OscConfig+0x368>
 8006e6a:	e014      	b.n	8006e96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6c:	f7fb fdc2 	bl	80029f4 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e72:	e00a      	b.n	8006e8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e74:	f7fb fdbe 	bl	80029f4 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e0c1      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1ee      	bne.n	8006e74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e9c:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	4a3a      	ldr	r2, [pc, #232]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80ad 	beq.w	800700c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eb2:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d060      	beq.n	8006f80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d145      	bne.n	8006f52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <HAL_RCC_OscConfig+0x4b4>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fb fd92 	bl	80029f4 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fb fd8e 	bl	80029f4 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e093      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69da      	ldr	r2, [r3, #28]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	071b      	lsls	r3, r3, #28
 8006f1e:	491b      	ldr	r1, [pc, #108]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_RCC_OscConfig+0x4b4>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2a:	f7fb fd63 	bl	80029f4 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f32:	f7fb fd5f 	bl	80029f4 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e064      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x452>
 8006f50:	e05c      	b.n	800700c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <HAL_RCC_OscConfig+0x4b4>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fb fd4c 	bl	80029f4 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fb fd48 	bl	80029f4 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e04d      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <HAL_RCC_OscConfig+0x4ac>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x480>
 8006f7e:	e045      	b.n	800700c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e040      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40007000 	.word	0x40007000
 8006f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <HAL_RCC_OscConfig+0x538>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d030      	beq.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d129      	bne.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d122      	bne.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fc8:	4013      	ands	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d119      	bne.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d10f      	bne.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d107      	bne.n	8007008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d001      	beq.n	800700c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e000      	b.n	800700e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40023800 	.word	0x40023800

0800701c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e041      	b.n	80070b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb fa56 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f000 fc4e 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e04e      	b.n	8007172 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a23      	ldr	r2, [pc, #140]	; (8007180 <HAL_TIM_Base_Start_IT+0xc4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d022      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d01d      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <HAL_TIM_Base_Start_IT+0xc8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_TIM_Base_Start_IT+0xcc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_Base_Start_IT+0xd0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_TIM_Base_Start_IT+0xd4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_Base_Start_IT+0xd8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_TIM_Base_Start_IT+0x80>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_TIM_Base_Start_IT+0xdc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d111      	bne.n	8007160 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b06      	cmp	r3, #6
 800714c:	d010      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	e007      	b.n	8007170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40010400 	.word	0x40010400
 8007194:	40014000 	.word	0x40014000
 8007198:	40001800 	.word	0x40001800

0800719c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e041      	b.n	8007232 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fb f8ca 	bl	800235c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f000 fb8e 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e097      	b.n	800737e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fb f89c 	bl	80023a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800727e:	f023 0307 	bic.w	r3, r3, #7
 8007282:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f000 fb34 	bl	80078fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072bc:	f023 0303 	bic.w	r3, r3, #3
 80072c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	4313      	orrs	r3, r2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80072da:	f023 030c 	bic.w	r3, r3, #12
 80072de:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	4313      	orrs	r3, r2
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	011a      	lsls	r2, r3, #4
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	4313      	orrs	r3, r2
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007318:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007320:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	4313      	orrs	r3, r2
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d122      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d11b      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f06f 0202 	mvn.w	r2, #2
 80073b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa78 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 80073ce:	e005      	b.n	80073dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa6a 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa7b 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d122      	bne.n	8007436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d11b      	bne.n	8007436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0204 	mvn.w	r2, #4
 8007406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa4e 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 8007422:	e005      	b.n	8007430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa40 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa51 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d122      	bne.n	800748a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b08      	cmp	r3, #8
 8007450:	d11b      	bne.n	800748a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0208 	mvn.w	r2, #8
 800745a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2204      	movs	r2, #4
 8007460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa24 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 8007476:	e005      	b.n	8007484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa16 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa27 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b10      	cmp	r3, #16
 8007496:	d122      	bne.n	80074de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d11b      	bne.n	80074de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0210 	mvn.w	r2, #16
 80074ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2208      	movs	r2, #8
 80074b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f9fa 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 80074ca:	e005      	b.n	80074d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f9ec 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9fd 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10e      	bne.n	800750a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f06f 0201 	mvn.w	r2, #1
 8007502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fa fd5f 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d10e      	bne.n	8007536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007522:	2b80      	cmp	r3, #128	; 0x80
 8007524:	d107      	bne.n	8007536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fda5 	bl	8008080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d10e      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d107      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f9c2 	bl	80078e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b20      	cmp	r3, #32
 800756e:	d10e      	bne.n	800758e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b20      	cmp	r3, #32
 800757c:	d107      	bne.n	800758e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0220 	mvn.w	r2, #32
 8007586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fd6f 	bl	800806c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e0ae      	b.n	8007714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b0c      	cmp	r3, #12
 80075c2:	f200 809f 	bhi.w	8007704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007705 	.word	0x08007705
 80075d4:	08007705 	.word	0x08007705
 80075d8:	08007705 	.word	0x08007705
 80075dc:	08007641 	.word	0x08007641
 80075e0:	08007705 	.word	0x08007705
 80075e4:	08007705 	.word	0x08007705
 80075e8:	08007705 	.word	0x08007705
 80075ec:	08007683 	.word	0x08007683
 80075f0:	08007705 	.word	0x08007705
 80075f4:	08007705 	.word	0x08007705
 80075f8:	08007705 	.word	0x08007705
 80075fc:	080076c3 	.word	0x080076c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fa18 	bl	8007a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0208 	orr.w	r2, r2, #8
 800761a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0204 	bic.w	r2, r2, #4
 800762a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6999      	ldr	r1, [r3, #24]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	619a      	str	r2, [r3, #24]
      break;
 800763e:	e064      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fa68 	bl	8007b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6999      	ldr	r1, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	619a      	str	r2, [r3, #24]
      break;
 8007680:	e043      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fabd 	bl	8007c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0208 	orr.w	r2, r2, #8
 800769c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0204 	bic.w	r2, r2, #4
 80076ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69d9      	ldr	r1, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	61da      	str	r2, [r3, #28]
      break;
 80076c0:	e023      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fb11 	bl	8007cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	021a      	lsls	r2, r3, #8
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	61da      	str	r2, [r3, #28]
      break;
 8007702:	e002      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIM_ConfigClockSource+0x1c>
 8007734:	2302      	movs	r3, #2
 8007736:	e0b4      	b.n	80078a2 <HAL_TIM_ConfigClockSource+0x186>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800775e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007770:	d03e      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007776:	f200 8087 	bhi.w	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777e:	f000 8086 	beq.w	800788e <HAL_TIM_ConfigClockSource+0x172>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d87f      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007788:	2b70      	cmp	r3, #112	; 0x70
 800778a:	d01a      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0xa6>
 800778c:	2b70      	cmp	r3, #112	; 0x70
 800778e:	d87b      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007790:	2b60      	cmp	r3, #96	; 0x60
 8007792:	d050      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x11a>
 8007794:	2b60      	cmp	r3, #96	; 0x60
 8007796:	d877      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007798:	2b50      	cmp	r3, #80	; 0x50
 800779a:	d03c      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0xfa>
 800779c:	2b50      	cmp	r3, #80	; 0x50
 800779e:	d873      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d058      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x13a>
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	d86f      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d064      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077ac:	2b30      	cmp	r3, #48	; 0x30
 80077ae:	d86b      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d060      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d867      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d05c      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d05a      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077c0:	e062      	b.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6899      	ldr	r1, [r3, #8]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f000 fb5d 	bl	8007e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
      break;
 80077ee:	e04f      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6899      	ldr	r1, [r3, #8]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f000 fb46 	bl	8007e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007812:	609a      	str	r2, [r3, #8]
      break;
 8007814:	e03c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	461a      	mov	r2, r3
 8007824:	f000 faba 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2150      	movs	r1, #80	; 0x50
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fb13 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007834:	e02c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	461a      	mov	r2, r3
 8007844:	f000 fad9 	bl	8007dfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2160      	movs	r1, #96	; 0x60
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fb03 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007854:	e01c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6859      	ldr	r1, [r3, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	461a      	mov	r2, r3
 8007864:	f000 fa9a 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2140      	movs	r1, #64	; 0x40
 800786e:	4618      	mov	r0, r3
 8007870:	f000 faf3 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007874:	e00c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f000 faea 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007886:	e003      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e000      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800788e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a40      	ldr	r2, [pc, #256]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d00f      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a3d      	ldr	r2, [pc, #244]	; (8007a14 <TIM_Base_SetConfig+0x118>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00b      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3c      	ldr	r2, [pc, #240]	; (8007a18 <TIM_Base_SetConfig+0x11c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a3b      	ldr	r2, [pc, #236]	; (8007a1c <TIM_Base_SetConfig+0x120>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a3a      	ldr	r2, [pc, #232]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d108      	bne.n	800794e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2f      	ldr	r2, [pc, #188]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d02b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d027      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2c      	ldr	r2, [pc, #176]	; (8007a14 <TIM_Base_SetConfig+0x118>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d023      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2b      	ldr	r2, [pc, #172]	; (8007a18 <TIM_Base_SetConfig+0x11c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01f      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a2a      	ldr	r2, [pc, #168]	; (8007a1c <TIM_Base_SetConfig+0x120>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a29      	ldr	r2, [pc, #164]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d017      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <TIM_Base_SetConfig+0x128>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <TIM_Base_SetConfig+0x12c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00f      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a26      	ldr	r2, [pc, #152]	; (8007a2c <TIM_Base_SetConfig+0x130>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a25      	ldr	r2, [pc, #148]	; (8007a30 <TIM_Base_SetConfig+0x134>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a24      	ldr	r2, [pc, #144]	; (8007a34 <TIM_Base_SetConfig+0x138>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a23      	ldr	r2, [pc, #140]	; (8007a38 <TIM_Base_SetConfig+0x13c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d108      	bne.n	80079c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <TIM_Base_SetConfig+0x114>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <TIM_Base_SetConfig+0x124>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	615a      	str	r2, [r3, #20]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40010000 	.word	0x40010000
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800
 8007a1c:	40000c00 	.word	0x40000c00
 8007a20:	40010400 	.word	0x40010400
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800
 8007a30:	40001800 	.word	0x40001800
 8007a34:	40001c00 	.word	0x40001c00
 8007a38:	40002000 	.word	0x40002000

08007a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	f023 0201 	bic.w	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 0302 	bic.w	r3, r3, #2
 8007a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <TIM_OC1_SetConfig+0xd8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d003      	beq.n	8007aa0 <TIM_OC1_SetConfig+0x64>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1f      	ldr	r2, [pc, #124]	; (8007b18 <TIM_OC1_SetConfig+0xdc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10c      	bne.n	8007aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f023 0308 	bic.w	r3, r3, #8
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 0304 	bic.w	r3, r3, #4
 8007ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_OC1_SetConfig+0xd8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_OC1_SetConfig+0x8e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <TIM_OC1_SetConfig+0xdc>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d111      	bne.n	8007aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	621a      	str	r2, [r3, #32]
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40010400 	.word	0x40010400

08007b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f023 0210 	bic.w	r2, r3, #16
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f023 0320 	bic.w	r3, r3, #32
 8007b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <TIM_OC2_SetConfig+0xe4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC2_SetConfig+0x68>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <TIM_OC2_SetConfig+0xe8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10d      	bne.n	8007ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <TIM_OC2_SetConfig+0xe4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC2_SetConfig+0x94>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <TIM_OC2_SetConfig+0xe8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d113      	bne.n	8007bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40010000 	.word	0x40010000
 8007c04:	40010400 	.word	0x40010400

08007c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <TIM_OC3_SetConfig+0xe0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d003      	beq.n	8007c6e <TIM_OC3_SetConfig+0x66>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a20      	ldr	r2, [pc, #128]	; (8007cec <TIM_OC3_SetConfig+0xe4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d10d      	bne.n	8007c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <TIM_OC3_SetConfig+0xe0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_OC3_SetConfig+0x92>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a15      	ldr	r2, [pc, #84]	; (8007cec <TIM_OC3_SetConfig+0xe4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d113      	bne.n	8007cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	621a      	str	r2, [r3, #32]
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	031b      	lsls	r3, r3, #12
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a12      	ldr	r2, [pc, #72]	; (8007d94 <TIM_OC4_SetConfig+0xa4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC4_SetConfig+0x68>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <TIM_OC4_SetConfig+0xa8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	019b      	lsls	r3, r3, #6
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40010400 	.word	0x40010400

08007d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 030a 	bic.w	r3, r3, #10
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f023 0210 	bic.w	r2, r3, #16
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	031b      	lsls	r3, r3, #12
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f043 0307 	orr.w	r3, r3, #7
 8007e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	609a      	str	r2, [r3, #8]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	021a      	lsls	r2, r3, #8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	609a      	str	r2, [r3, #8]
}
 8007ec4:	bf00      	nop
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e05a      	b.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a21      	ldr	r2, [pc, #132]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d022      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f34:	d01d      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1d      	ldr	r2, [pc, #116]	; (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d018      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1a      	ldr	r2, [pc, #104]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00e      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d009      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d004      	beq.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a15      	ldr	r2, [pc, #84]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d10c      	bne.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40010400 	.word	0x40010400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40001800 	.word	0x40001800

08007fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e03d      	b.n	8008060 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e03f      	b.n	8008126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fa fab8 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2224      	movs	r2, #36	; 0x24
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f929 	bl	8008330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b08a      	sub	sp, #40	; 0x28
 8008132:	af02      	add	r7, sp, #8
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b20      	cmp	r3, #32
 800814c:	d17c      	bne.n	8008248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <HAL_UART_Transmit+0x2c>
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e075      	b.n	800824a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_UART_Transmit+0x3e>
 8008168:	2302      	movs	r3, #2
 800816a:	e06e      	b.n	800824a <HAL_UART_Transmit+0x11c>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008182:	f7fa fc37 	bl	80029f4 <HAL_GetTick>
 8008186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819c:	d108      	bne.n	80081b0 <HAL_UART_Transmit+0x82>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e003      	b.n	80081b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081c0:	e02a      	b.n	8008218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2200      	movs	r2, #0
 80081ca:	2180      	movs	r1, #128	; 0x80
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f840 	bl	8008252 <UART_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e036      	b.n	800824a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	3302      	adds	r3, #2
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	e007      	b.n	800820a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1cf      	bne.n	80081c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	2140      	movs	r1, #64	; 0x40
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f810 	bl	8008252 <UART_WaitOnFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e000      	b.n	800824a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008248:	2302      	movs	r3, #2
  }
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b090      	sub	sp, #64	; 0x40
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	603b      	str	r3, [r7, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008262:	e050      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d04c      	beq.n	8008306 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800826c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <UART_WaitOnFlagUntilTimeout+0x30>
 8008272:	f7fa fbbf 	bl	80029f4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827e:	429a      	cmp	r2, r3
 8008280:	d241      	bcs.n	8008306 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082a2:	637a      	str	r2, [r7, #52]	; 0x34
 80082a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3314      	adds	r3, #20
 80082bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	613b      	str	r3, [r7, #16]
   return(result);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d6:	623a      	str	r2, [r7, #32]
 80082d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	69f9      	ldr	r1, [r7, #28]
 80082dc:	6a3a      	ldr	r2, [r7, #32]
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e00f      	b.n	8008326 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4013      	ands	r3, r2
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	429a      	cmp	r2, r3
 8008314:	bf0c      	ite	eq
 8008316:	2301      	moveq	r3, #1
 8008318:	2300      	movne	r3, #0
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	429a      	cmp	r2, r3
 8008322:	d09f      	beq.n	8008264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3740      	adds	r7, #64	; 0x40
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008334:	b0c0      	sub	sp, #256	; 0x100
 8008336:	af00      	add	r7, sp, #0
 8008338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	68d9      	ldr	r1, [r3, #12]
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	ea40 0301 	orr.w	r3, r0, r1
 8008358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	431a      	orrs	r2, r3
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	431a      	orrs	r2, r3
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008388:	f021 010c 	bic.w	r1, r1, #12
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008396:	430b      	orrs	r3, r1
 8008398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800839a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083aa:	6999      	ldr	r1, [r3, #24]
 80083ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	ea40 0301 	orr.w	r3, r0, r1
 80083b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b8f      	ldr	r3, [pc, #572]	; (80085fc <UART_SetConfig+0x2cc>)
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d005      	beq.n	80083d0 <UART_SetConfig+0xa0>
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b8d      	ldr	r3, [pc, #564]	; (8008600 <UART_SetConfig+0x2d0>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d104      	bne.n	80083da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083d0:	f7fe f942 	bl	8006658 <HAL_RCC_GetPCLK2Freq>
 80083d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083d8:	e003      	b.n	80083e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083da:	f7fe f929 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 80083de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ec:	f040 810c 	bne.w	8008608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008402:	4622      	mov	r2, r4
 8008404:	462b      	mov	r3, r5
 8008406:	1891      	adds	r1, r2, r2
 8008408:	65b9      	str	r1, [r7, #88]	; 0x58
 800840a:	415b      	adcs	r3, r3
 800840c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008412:	4621      	mov	r1, r4
 8008414:	eb12 0801 	adds.w	r8, r2, r1
 8008418:	4629      	mov	r1, r5
 800841a:	eb43 0901 	adc.w	r9, r3, r1
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	f04f 0300 	mov.w	r3, #0
 8008426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800842a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800842e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008432:	4690      	mov	r8, r2
 8008434:	4699      	mov	r9, r3
 8008436:	4623      	mov	r3, r4
 8008438:	eb18 0303 	adds.w	r3, r8, r3
 800843c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008440:	462b      	mov	r3, r5
 8008442:	eb49 0303 	adc.w	r3, r9, r3
 8008446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800844a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800845a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800845e:	460b      	mov	r3, r1
 8008460:	18db      	adds	r3, r3, r3
 8008462:	653b      	str	r3, [r7, #80]	; 0x50
 8008464:	4613      	mov	r3, r2
 8008466:	eb42 0303 	adc.w	r3, r2, r3
 800846a:	657b      	str	r3, [r7, #84]	; 0x54
 800846c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008474:	f7f8 fb3a 	bl	8000aec <__aeabi_uldivmod>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4b61      	ldr	r3, [pc, #388]	; (8008604 <UART_SetConfig+0x2d4>)
 800847e:	fba3 2302 	umull	r2, r3, r3, r2
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	011c      	lsls	r4, r3, #4
 8008486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800848a:	2200      	movs	r2, #0
 800848c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008498:	4642      	mov	r2, r8
 800849a:	464b      	mov	r3, r9
 800849c:	1891      	adds	r1, r2, r2
 800849e:	64b9      	str	r1, [r7, #72]	; 0x48
 80084a0:	415b      	adcs	r3, r3
 80084a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084a8:	4641      	mov	r1, r8
 80084aa:	eb12 0a01 	adds.w	sl, r2, r1
 80084ae:	4649      	mov	r1, r9
 80084b0:	eb43 0b01 	adc.w	fp, r3, r1
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084c8:	4692      	mov	sl, r2
 80084ca:	469b      	mov	fp, r3
 80084cc:	4643      	mov	r3, r8
 80084ce:	eb1a 0303 	adds.w	r3, sl, r3
 80084d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084d6:	464b      	mov	r3, r9
 80084d8:	eb4b 0303 	adc.w	r3, fp, r3
 80084dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084f4:	460b      	mov	r3, r1
 80084f6:	18db      	adds	r3, r3, r3
 80084f8:	643b      	str	r3, [r7, #64]	; 0x40
 80084fa:	4613      	mov	r3, r2
 80084fc:	eb42 0303 	adc.w	r3, r2, r3
 8008500:	647b      	str	r3, [r7, #68]	; 0x44
 8008502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800850a:	f7f8 faef 	bl	8000aec <__aeabi_uldivmod>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4611      	mov	r1, r2
 8008514:	4b3b      	ldr	r3, [pc, #236]	; (8008604 <UART_SetConfig+0x2d4>)
 8008516:	fba3 2301 	umull	r2, r3, r3, r1
 800851a:	095b      	lsrs	r3, r3, #5
 800851c:	2264      	movs	r2, #100	; 0x64
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	1acb      	subs	r3, r1, r3
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800852a:	4b36      	ldr	r3, [pc, #216]	; (8008604 <UART_SetConfig+0x2d4>)
 800852c:	fba3 2302 	umull	r2, r3, r3, r2
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008538:	441c      	add	r4, r3
 800853a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853e:	2200      	movs	r2, #0
 8008540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	1891      	adds	r1, r2, r2
 8008552:	63b9      	str	r1, [r7, #56]	; 0x38
 8008554:	415b      	adcs	r3, r3
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800855c:	4641      	mov	r1, r8
 800855e:	1851      	adds	r1, r2, r1
 8008560:	6339      	str	r1, [r7, #48]	; 0x30
 8008562:	4649      	mov	r1, r9
 8008564:	414b      	adcs	r3, r1
 8008566:	637b      	str	r3, [r7, #52]	; 0x34
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008574:	4659      	mov	r1, fp
 8008576:	00cb      	lsls	r3, r1, #3
 8008578:	4651      	mov	r1, sl
 800857a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800857e:	4651      	mov	r1, sl
 8008580:	00ca      	lsls	r2, r1, #3
 8008582:	4610      	mov	r0, r2
 8008584:	4619      	mov	r1, r3
 8008586:	4603      	mov	r3, r0
 8008588:	4642      	mov	r2, r8
 800858a:	189b      	adds	r3, r3, r2
 800858c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008590:	464b      	mov	r3, r9
 8008592:	460a      	mov	r2, r1
 8008594:	eb42 0303 	adc.w	r3, r2, r3
 8008598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085b0:	460b      	mov	r3, r1
 80085b2:	18db      	adds	r3, r3, r3
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b6:	4613      	mov	r3, r2
 80085b8:	eb42 0303 	adc.w	r3, r2, r3
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085c6:	f7f8 fa91 	bl	8000aec <__aeabi_uldivmod>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <UART_SetConfig+0x2d4>)
 80085d0:	fba3 1302 	umull	r1, r3, r3, r2
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	2164      	movs	r1, #100	; 0x64
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	3332      	adds	r3, #50	; 0x32
 80085e2:	4a08      	ldr	r2, [pc, #32]	; (8008604 <UART_SetConfig+0x2d4>)
 80085e4:	fba2 2303 	umull	r2, r3, r2, r3
 80085e8:	095b      	lsrs	r3, r3, #5
 80085ea:	f003 0207 	and.w	r2, r3, #7
 80085ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4422      	add	r2, r4
 80085f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085f8:	e105      	b.n	8008806 <UART_SetConfig+0x4d6>
 80085fa:	bf00      	nop
 80085fc:	40011000 	.word	0x40011000
 8008600:	40011400 	.word	0x40011400
 8008604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800860c:	2200      	movs	r2, #0
 800860e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800861a:	4642      	mov	r2, r8
 800861c:	464b      	mov	r3, r9
 800861e:	1891      	adds	r1, r2, r2
 8008620:	6239      	str	r1, [r7, #32]
 8008622:	415b      	adcs	r3, r3
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
 8008626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800862a:	4641      	mov	r1, r8
 800862c:	1854      	adds	r4, r2, r1
 800862e:	4649      	mov	r1, r9
 8008630:	eb43 0501 	adc.w	r5, r3, r1
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	f04f 0300 	mov.w	r3, #0
 800863c:	00eb      	lsls	r3, r5, #3
 800863e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008642:	00e2      	lsls	r2, r4, #3
 8008644:	4614      	mov	r4, r2
 8008646:	461d      	mov	r5, r3
 8008648:	4643      	mov	r3, r8
 800864a:	18e3      	adds	r3, r4, r3
 800864c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008650:	464b      	mov	r3, r9
 8008652:	eb45 0303 	adc.w	r3, r5, r3
 8008656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800865a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008676:	4629      	mov	r1, r5
 8008678:	008b      	lsls	r3, r1, #2
 800867a:	4621      	mov	r1, r4
 800867c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008680:	4621      	mov	r1, r4
 8008682:	008a      	lsls	r2, r1, #2
 8008684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008688:	f7f8 fa30 	bl	8000aec <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4b60      	ldr	r3, [pc, #384]	; (8008814 <UART_SetConfig+0x4e4>)
 8008692:	fba3 2302 	umull	r2, r3, r3, r2
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	011c      	lsls	r4, r3, #4
 800869a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086ac:	4642      	mov	r2, r8
 80086ae:	464b      	mov	r3, r9
 80086b0:	1891      	adds	r1, r2, r2
 80086b2:	61b9      	str	r1, [r7, #24]
 80086b4:	415b      	adcs	r3, r3
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086bc:	4641      	mov	r1, r8
 80086be:	1851      	adds	r1, r2, r1
 80086c0:	6139      	str	r1, [r7, #16]
 80086c2:	4649      	mov	r1, r9
 80086c4:	414b      	adcs	r3, r1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086d4:	4659      	mov	r1, fp
 80086d6:	00cb      	lsls	r3, r1, #3
 80086d8:	4651      	mov	r1, sl
 80086da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086de:	4651      	mov	r1, sl
 80086e0:	00ca      	lsls	r2, r1, #3
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	4642      	mov	r2, r8
 80086ea:	189b      	adds	r3, r3, r2
 80086ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086f0:	464b      	mov	r3, r9
 80086f2:	460a      	mov	r2, r1
 80086f4:	eb42 0303 	adc.w	r3, r2, r3
 80086f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	67bb      	str	r3, [r7, #120]	; 0x78
 8008706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008714:	4649      	mov	r1, r9
 8008716:	008b      	lsls	r3, r1, #2
 8008718:	4641      	mov	r1, r8
 800871a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800871e:	4641      	mov	r1, r8
 8008720:	008a      	lsls	r2, r1, #2
 8008722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008726:	f7f8 f9e1 	bl	8000aec <__aeabi_uldivmod>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4b39      	ldr	r3, [pc, #228]	; (8008814 <UART_SetConfig+0x4e4>)
 8008730:	fba3 1302 	umull	r1, r3, r3, r2
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	2164      	movs	r1, #100	; 0x64
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	3332      	adds	r3, #50	; 0x32
 8008742:	4a34      	ldr	r2, [pc, #208]	; (8008814 <UART_SetConfig+0x4e4>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800874e:	441c      	add	r4, r3
 8008750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008754:	2200      	movs	r2, #0
 8008756:	673b      	str	r3, [r7, #112]	; 0x70
 8008758:	677a      	str	r2, [r7, #116]	; 0x74
 800875a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800875e:	4642      	mov	r2, r8
 8008760:	464b      	mov	r3, r9
 8008762:	1891      	adds	r1, r2, r2
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	415b      	adcs	r3, r3
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800876e:	4641      	mov	r1, r8
 8008770:	1851      	adds	r1, r2, r1
 8008772:	6039      	str	r1, [r7, #0]
 8008774:	4649      	mov	r1, r9
 8008776:	414b      	adcs	r3, r1
 8008778:	607b      	str	r3, [r7, #4]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008786:	4659      	mov	r1, fp
 8008788:	00cb      	lsls	r3, r1, #3
 800878a:	4651      	mov	r1, sl
 800878c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008790:	4651      	mov	r1, sl
 8008792:	00ca      	lsls	r2, r1, #3
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	4603      	mov	r3, r0
 800879a:	4642      	mov	r2, r8
 800879c:	189b      	adds	r3, r3, r2
 800879e:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a0:	464b      	mov	r3, r9
 80087a2:	460a      	mov	r2, r1
 80087a4:	eb42 0303 	adc.w	r3, r2, r3
 80087a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	663b      	str	r3, [r7, #96]	; 0x60
 80087b4:	667a      	str	r2, [r7, #100]	; 0x64
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087c2:	4649      	mov	r1, r9
 80087c4:	008b      	lsls	r3, r1, #2
 80087c6:	4641      	mov	r1, r8
 80087c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087cc:	4641      	mov	r1, r8
 80087ce:	008a      	lsls	r2, r1, #2
 80087d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087d4:	f7f8 f98a 	bl	8000aec <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <UART_SetConfig+0x4e4>)
 80087de:	fba3 1302 	umull	r1, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	2164      	movs	r1, #100	; 0x64
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	3332      	adds	r3, #50	; 0x32
 80087f0:	4a08      	ldr	r2, [pc, #32]	; (8008814 <UART_SetConfig+0x4e4>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	095b      	lsrs	r3, r3, #5
 80087f8:	f003 020f 	and.w	r2, r3, #15
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4422      	add	r2, r4
 8008804:	609a      	str	r2, [r3, #8]
}
 8008806:	bf00      	nop
 8008808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800880c:	46bd      	mov	sp, r7
 800880e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008812:	bf00      	nop
 8008814:	51eb851f 	.word	0x51eb851f

08008818 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	460a      	mov	r2, r1
 8008822:	80fb      	strh	r3, [r7, #6]
 8008824:	4613      	mov	r3, r2
 8008826:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 800882c:	797b      	ldrb	r3, [r7, #5]
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	b2da      	uxtb	r2, r3
 8008832:	88fb      	ldrh	r3, [r7, #6]
 8008834:	2101      	movs	r1, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f994 	bl	8008b64 <VL53L1_WrByte>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4313      	orrs	r3, r2
 8008844:	73fb      	strb	r3, [r7, #15]
	return status;
 8008846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8008862:	2300      	movs	r3, #0
 8008864:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8008866:	232d      	movs	r3, #45	; 0x2d
 8008868:	73bb      	strb	r3, [r7, #14]
 800886a:	e011      	b.n	8008890 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	b299      	uxth	r1, r3
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	3b2d      	subs	r3, #45	; 0x2d
 8008874:	4a2c      	ldr	r2, [pc, #176]	; (8008928 <VL53L1X_SensorInit+0xd4>)
 8008876:	5cd2      	ldrb	r2, [r2, r3]
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f972 	bl	8008b64 <VL53L1_WrByte>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4313      	orrs	r3, r2
 8008888:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	3301      	adds	r3, #1
 800888e:	73bb      	strb	r3, [r7, #14]
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	2b87      	cmp	r3, #135	; 0x87
 8008894:	d9ea      	bls.n	800886c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f889 	bl	80089b0 <VL53L1X_StartRanging>
 800889e:	4603      	mov	r3, r0
 80088a0:	461a      	mov	r2, r3
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80088ac:	e00b      	b.n	80088c6 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80088ae:	f107 020d 	add.w	r2, r7, #13
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f8aa 	bl	8008a10 <VL53L1X_CheckForDataReady>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80088c6:	7b7b      	ldrb	r3, [r7, #13]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f0      	beq.n	80088ae <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80088cc:	88fb      	ldrh	r3, [r7, #6]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f82c 	bl	800892c <VL53L1X_ClearInterrupt>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	4313      	orrs	r3, r2
 80088dc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f87d 	bl	80089e0 <VL53L1X_StopRanging>
 80088e6:	4603      	mov	r3, r0
 80088e8:	461a      	mov	r2, r3
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	2209      	movs	r2, #9
 80088f4:	2108      	movs	r1, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f934 	bl	8008b64 <VL53L1_WrByte>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4313      	orrs	r3, r2
 8008904:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2200      	movs	r2, #0
 800890a:	210b      	movs	r1, #11
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f929 	bl	8008b64 <VL53L1_WrByte>
 8008912:	4603      	mov	r3, r0
 8008914:	461a      	mov	r2, r3
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4313      	orrs	r3, r2
 800891a:	73fb      	strb	r3, [r7, #15]
	return status;
 800891c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	08009dd4 	.word	0x08009dd4

0800892c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	2201      	movs	r2, #1
 800893e:	2186      	movs	r1, #134	; 0x86
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f90f 	bl	8008b64 <VL53L1_WrByte>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	4313      	orrs	r3, r2
 800894e:	73fb      	strb	r3, [r7, #15]
	return status;
 8008950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800896c:	f107 020e 	add.w	r2, r7, #14
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	2130      	movs	r1, #48	; 0x30
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f921 	bl	8008bbc <VL53L1_RdByte>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	4313      	orrs	r3, r2
 8008982:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	b2db      	uxtb	r3, r3
 800898c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	701a      	strb	r2, [r3, #0]
	return status;
 80089a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	2240      	movs	r2, #64	; 0x40
 80089c2:	2187      	movs	r1, #135	; 0x87
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f8cd 	bl	8008b64 <VL53L1_WrByte>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	73fb      	strb	r3, [r7, #15]
	return status;
 80089d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	2200      	movs	r2, #0
 80089f2:	2187      	movs	r1, #135	; 0x87
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8b5 	bl	8008b64 <VL53L1_WrByte>
 80089fa:	4603      	mov	r3, r0
 80089fc:	461a      	mov	r2, r3
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	73fb      	strb	r3, [r7, #15]
	return status;
 8008a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8008a20:	f107 020d 	add.w	r2, r7, #13
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ff97 	bl	800895c <VL53L1X_GetInterruptPolarity>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8008a38:	f107 020e 	add.w	r2, r7, #14
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
 8008a3e:	2131      	movs	r1, #49	; 0x31
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f8bb 	bl	8008bbc <VL53L1_RdByte>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8008a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10c      	bne.n	8008a72 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	7b7a      	ldrb	r2, [r7, #13]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d103      	bne.n	8008a6c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8008a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	4603      	mov	r3, r0
 8008a86:	6039      	str	r1, [r7, #0]
 8008a88:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8008a92:	f107 020e 	add.w	r2, r7, #14
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	21e5      	movs	r1, #229	; 0xe5
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f88e 	bl	8008bbc <VL53L1_RdByte>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8008aaa:	7bba      	ldrb	r2, [r7, #14]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	701a      	strb	r2, [r3, #0]
	return status;
 8008ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8008acc:	f107 020c 	add.w	r2, r7, #12
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	2196      	movs	r1, #150	; 0x96
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f8a9 	bl	8008c2c <VL53L1_RdWord>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8008ae4:	89ba      	ldrh	r2, [r7, #12]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	801a      	strh	r2, [r3, #0]
	return status;
 8008aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	4603      	mov	r3, r0
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	89f9      	ldrh	r1, [r7, #14]
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	9200      	str	r2, [sp, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4805      	ldr	r0, [pc, #20]	; (8008b28 <_I2CWrite+0x30>)
 8008b14:	f7fb fa34 	bl	8003f80 <HAL_I2C_Master_Transmit>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008b1c:	697b      	ldr	r3, [r7, #20]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200000c4 	.word	0x200000c4

08008b2c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	4603      	mov	r3, r0
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8008b3a:	89fb      	ldrh	r3, [r7, #14]
 8008b3c:	f043 0301 	orr.w	r3, r3, #1
 8008b40:	b299      	uxth	r1, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	220a      	movs	r2, #10
 8008b48:	9200      	str	r2, [sp, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4804      	ldr	r0, [pc, #16]	; (8008b60 <_I2CRead+0x34>)
 8008b4e:	f7fb fb15 	bl	800417c <HAL_I2C_Master_Receive>
 8008b52:	4603      	mov	r3, r0
 8008b54:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008b56:	697b      	ldr	r3, [r7, #20]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	200000c4 	.word	0x200000c4

08008b64 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	80fb      	strh	r3, [r7, #6]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	80bb      	strh	r3, [r7, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008b7a:	88bb      	ldrh	r3, [r7, #4]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <VL53L1_WrByte+0x54>)
 8008b84:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008b86:	88bb      	ldrh	r3, [r7, #4]
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <VL53L1_WrByte+0x54>)
 8008b8c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008b8e:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <VL53L1_WrByte+0x54>)
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	2203      	movs	r2, #3
 8008b98:	4907      	ldr	r1, [pc, #28]	; (8008bb8 <VL53L1_WrByte+0x54>)
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ffac 	bl	8008af8 <_I2CWrite>
 8008ba0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ba8:	23f3      	movs	r3, #243	; 0xf3
 8008baa:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8008bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200003a8 	.word	0x200003a8

08008bbc <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	603a      	str	r2, [r7, #0]
 8008bc6:	80fb      	strh	r3, [r7, #6]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008bd0:	88bb      	ldrh	r3, [r7, #4]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <VL53L1_RdByte+0x6c>)
 8008bda:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008bdc:	88bb      	ldrh	r3, [r7, #4]
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <VL53L1_RdByte+0x6c>)
 8008be2:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2202      	movs	r2, #2
 8008be8:	490f      	ldr	r1, [pc, #60]	; (8008c28 <VL53L1_RdByte+0x6c>)
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff ff84 	bl	8008af8 <_I2CWrite>
 8008bf0:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008bf8:	23f3      	movs	r3, #243	; 0xf3
 8008bfa:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008bfc:	e00d      	b.n	8008c1a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	2201      	movs	r2, #1
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ff91 	bl	8008b2c <_I2CRead>
 8008c0a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c12:	23f3      	movs	r3, #243	; 0xf3
 8008c14:	73fb      	strb	r3, [r7, #15]
 8008c16:	e000      	b.n	8008c1a <VL53L1_RdByte+0x5e>
    }
done:
 8008c18:	bf00      	nop
    return Status;
 8008c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200003a8 	.word	0x200003a8

08008c2c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	603a      	str	r2, [r7, #0]
 8008c36:	80fb      	strh	r3, [r7, #6]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008c40:	88bb      	ldrh	r3, [r7, #4]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	4b18      	ldr	r3, [pc, #96]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c4a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008c4c:	88bb      	ldrh	r3, [r7, #4]
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	4b16      	ldr	r3, [pc, #88]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c52:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	2202      	movs	r2, #2
 8008c58:	4914      	ldr	r1, [pc, #80]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff ff4c 	bl	8008af8 <_I2CWrite>
 8008c60:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c68:	23f3      	movs	r3, #243	; 0xf3
 8008c6a:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008c6c:	e018      	b.n	8008ca0 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008c6e:	88fb      	ldrh	r3, [r7, #6]
 8008c70:	2202      	movs	r2, #2
 8008c72:	490e      	ldr	r1, [pc, #56]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff ff59 	bl	8008b2c <_I2CRead>
 8008c7a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c82:	23f3      	movs	r3, #243	; 0xf3
 8008c84:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008c86:	e00b      	b.n	8008ca0 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <VL53L1_RdWord+0x80>)
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4413      	add	r3, r2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8008ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200003a8 	.word	0x200003a8

08008cb0 <calloc>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <calloc+0xc>)
 8008cb2:	460a      	mov	r2, r1
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	f000 b834 	b.w	8008d24 <_calloc_r>
 8008cbc:	2000001c 	.word	0x2000001c

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4d0d      	ldr	r5, [pc, #52]	; (8008d04 <__libc_init_array+0x38>)
 8008cd0:	4c0d      	ldr	r4, [pc, #52]	; (8008d08 <__libc_init_array+0x3c>)
 8008cd2:	1b64      	subs	r4, r4, r5
 8008cd4:	10a4      	asrs	r4, r4, #2
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	42a6      	cmp	r6, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	4d0b      	ldr	r5, [pc, #44]	; (8008d0c <__libc_init_array+0x40>)
 8008cde:	4c0c      	ldr	r4, [pc, #48]	; (8008d10 <__libc_init_array+0x44>)
 8008ce0:	f001 f83a 	bl	8009d58 <_init>
 8008ce4:	1b64      	subs	r4, r4, r5
 8008ce6:	10a4      	asrs	r4, r4, #2
 8008ce8:	2600      	movs	r6, #0
 8008cea:	42a6      	cmp	r6, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf4:	4798      	blx	r3
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfe:	4798      	blx	r3
 8008d00:	3601      	adds	r6, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	08009ed0 	.word	0x08009ed0
 8008d08:	08009ed0 	.word	0x08009ed0
 8008d0c:	08009ed0 	.word	0x08009ed0
 8008d10:	08009ed4 	.word	0x08009ed4

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <_calloc_r>:
 8008d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d26:	fba1 2402 	umull	r2, r4, r1, r2
 8008d2a:	b94c      	cbnz	r4, 8008d40 <_calloc_r+0x1c>
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	9201      	str	r2, [sp, #4]
 8008d30:	f000 f82e 	bl	8008d90 <_malloc_r>
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	4605      	mov	r5, r0
 8008d38:	b930      	cbnz	r0, 8008d48 <_calloc_r+0x24>
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bd30      	pop	{r4, r5, pc}
 8008d40:	220c      	movs	r2, #12
 8008d42:	6002      	str	r2, [r0, #0]
 8008d44:	2500      	movs	r5, #0
 8008d46:	e7f8      	b.n	8008d3a <_calloc_r+0x16>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f7ff ffe3 	bl	8008d14 <memset>
 8008d4e:	e7f4      	b.n	8008d3a <_calloc_r+0x16>

08008d50 <sbrk_aligned>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4e0e      	ldr	r6, [pc, #56]	; (8008d8c <sbrk_aligned+0x3c>)
 8008d54:	460c      	mov	r4, r1
 8008d56:	6831      	ldr	r1, [r6, #0]
 8008d58:	4605      	mov	r5, r0
 8008d5a:	b911      	cbnz	r1, 8008d62 <sbrk_aligned+0x12>
 8008d5c:	f000 f91a 	bl	8008f94 <_sbrk_r>
 8008d60:	6030      	str	r0, [r6, #0]
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f915 	bl	8008f94 <_sbrk_r>
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d00a      	beq.n	8008d84 <sbrk_aligned+0x34>
 8008d6e:	1cc4      	adds	r4, r0, #3
 8008d70:	f024 0403 	bic.w	r4, r4, #3
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d007      	beq.n	8008d88 <sbrk_aligned+0x38>
 8008d78:	1a21      	subs	r1, r4, r0
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f90a 	bl	8008f94 <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d101      	bne.n	8008d88 <sbrk_aligned+0x38>
 8008d84:	f04f 34ff 	mov.w	r4, #4294967295
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	200004ac 	.word	0x200004ac

08008d90 <_malloc_r>:
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	1ccd      	adds	r5, r1, #3
 8008d96:	f025 0503 	bic.w	r5, r5, #3
 8008d9a:	3508      	adds	r5, #8
 8008d9c:	2d0c      	cmp	r5, #12
 8008d9e:	bf38      	it	cc
 8008da0:	250c      	movcc	r5, #12
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	4607      	mov	r7, r0
 8008da6:	db01      	blt.n	8008dac <_malloc_r+0x1c>
 8008da8:	42a9      	cmp	r1, r5
 8008daa:	d905      	bls.n	8008db8 <_malloc_r+0x28>
 8008dac:	230c      	movs	r3, #12
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	2600      	movs	r6, #0
 8008db2:	4630      	mov	r0, r6
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	4e2e      	ldr	r6, [pc, #184]	; (8008e74 <_malloc_r+0xe4>)
 8008dba:	f000 fbdb 	bl	8009574 <__malloc_lock>
 8008dbe:	6833      	ldr	r3, [r6, #0]
 8008dc0:	461c      	mov	r4, r3
 8008dc2:	bb34      	cbnz	r4, 8008e12 <_malloc_r+0x82>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff ffc2 	bl	8008d50 <sbrk_aligned>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	4604      	mov	r4, r0
 8008dd0:	d14d      	bne.n	8008e6e <_malloc_r+0xde>
 8008dd2:	6834      	ldr	r4, [r6, #0]
 8008dd4:	4626      	mov	r6, r4
 8008dd6:	2e00      	cmp	r6, #0
 8008dd8:	d140      	bne.n	8008e5c <_malloc_r+0xcc>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4638      	mov	r0, r7
 8008de0:	eb04 0803 	add.w	r8, r4, r3
 8008de4:	f000 f8d6 	bl	8008f94 <_sbrk_r>
 8008de8:	4580      	cmp	r8, r0
 8008dea:	d13a      	bne.n	8008e62 <_malloc_r+0xd2>
 8008dec:	6821      	ldr	r1, [r4, #0]
 8008dee:	3503      	adds	r5, #3
 8008df0:	1a6d      	subs	r5, r5, r1
 8008df2:	f025 0503 	bic.w	r5, r5, #3
 8008df6:	3508      	adds	r5, #8
 8008df8:	2d0c      	cmp	r5, #12
 8008dfa:	bf38      	it	cc
 8008dfc:	250c      	movcc	r5, #12
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4638      	mov	r0, r7
 8008e02:	f7ff ffa5 	bl	8008d50 <sbrk_aligned>
 8008e06:	3001      	adds	r0, #1
 8008e08:	d02b      	beq.n	8008e62 <_malloc_r+0xd2>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	442b      	add	r3, r5
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	e00e      	b.n	8008e30 <_malloc_r+0xa0>
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	1b52      	subs	r2, r2, r5
 8008e16:	d41e      	bmi.n	8008e56 <_malloc_r+0xc6>
 8008e18:	2a0b      	cmp	r2, #11
 8008e1a:	d916      	bls.n	8008e4a <_malloc_r+0xba>
 8008e1c:	1961      	adds	r1, r4, r5
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	6025      	str	r5, [r4, #0]
 8008e22:	bf18      	it	ne
 8008e24:	6059      	strne	r1, [r3, #4]
 8008e26:	6863      	ldr	r3, [r4, #4]
 8008e28:	bf08      	it	eq
 8008e2a:	6031      	streq	r1, [r6, #0]
 8008e2c:	5162      	str	r2, [r4, r5]
 8008e2e:	604b      	str	r3, [r1, #4]
 8008e30:	4638      	mov	r0, r7
 8008e32:	f104 060b 	add.w	r6, r4, #11
 8008e36:	f000 fba3 	bl	8009580 <__malloc_unlock>
 8008e3a:	f026 0607 	bic.w	r6, r6, #7
 8008e3e:	1d23      	adds	r3, r4, #4
 8008e40:	1af2      	subs	r2, r6, r3
 8008e42:	d0b6      	beq.n	8008db2 <_malloc_r+0x22>
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	50a3      	str	r3, [r4, r2]
 8008e48:	e7b3      	b.n	8008db2 <_malloc_r+0x22>
 8008e4a:	6862      	ldr	r2, [r4, #4]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	bf0c      	ite	eq
 8008e50:	6032      	streq	r2, [r6, #0]
 8008e52:	605a      	strne	r2, [r3, #4]
 8008e54:	e7ec      	b.n	8008e30 <_malloc_r+0xa0>
 8008e56:	4623      	mov	r3, r4
 8008e58:	6864      	ldr	r4, [r4, #4]
 8008e5a:	e7b2      	b.n	8008dc2 <_malloc_r+0x32>
 8008e5c:	4634      	mov	r4, r6
 8008e5e:	6876      	ldr	r6, [r6, #4]
 8008e60:	e7b9      	b.n	8008dd6 <_malloc_r+0x46>
 8008e62:	230c      	movs	r3, #12
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	4638      	mov	r0, r7
 8008e68:	f000 fb8a 	bl	8009580 <__malloc_unlock>
 8008e6c:	e7a1      	b.n	8008db2 <_malloc_r+0x22>
 8008e6e:	6025      	str	r5, [r4, #0]
 8008e70:	e7de      	b.n	8008e30 <_malloc_r+0xa0>
 8008e72:	bf00      	nop
 8008e74:	200004a8 	.word	0x200004a8

08008e78 <iprintf>:
 8008e78:	b40f      	push	{r0, r1, r2, r3}
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <iprintf+0x2c>)
 8008e7c:	b513      	push	{r0, r1, r4, lr}
 8008e7e:	681c      	ldr	r4, [r3, #0]
 8008e80:	b124      	cbz	r4, 8008e8c <iprintf+0x14>
 8008e82:	69a3      	ldr	r3, [r4, #24]
 8008e84:	b913      	cbnz	r3, 8008e8c <iprintf+0x14>
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 fa6e 	bl	8009368 <__sinit>
 8008e8c:	ab05      	add	r3, sp, #20
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	68a1      	ldr	r1, [r4, #8]
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 fbef 	bl	8009678 <_vfiprintf_r>
 8008e9a:	b002      	add	sp, #8
 8008e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4770      	bx	lr
 8008ea4:	2000001c 	.word	0x2000001c

08008ea8 <_puts_r>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	4605      	mov	r5, r0
 8008eae:	b118      	cbz	r0, 8008eb8 <_puts_r+0x10>
 8008eb0:	6983      	ldr	r3, [r0, #24]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <_puts_r+0x10>
 8008eb4:	f000 fa58 	bl	8009368 <__sinit>
 8008eb8:	69ab      	ldr	r3, [r5, #24]
 8008eba:	68ac      	ldr	r4, [r5, #8]
 8008ebc:	b913      	cbnz	r3, 8008ec4 <_puts_r+0x1c>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 fa52 	bl	8009368 <__sinit>
 8008ec4:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <_puts_r+0xd0>)
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	d120      	bne.n	8008f0c <_puts_r+0x64>
 8008eca:	686c      	ldr	r4, [r5, #4]
 8008ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ece:	07db      	lsls	r3, r3, #31
 8008ed0:	d405      	bmi.n	8008ede <_puts_r+0x36>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	0598      	lsls	r0, r3, #22
 8008ed6:	d402      	bmi.n	8008ede <_puts_r+0x36>
 8008ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eda:	f000 fae3 	bl	80094a4 <__retarget_lock_acquire_recursive>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	0719      	lsls	r1, r3, #28
 8008ee2:	d51d      	bpl.n	8008f20 <_puts_r+0x78>
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	b1db      	cbz	r3, 8008f20 <_puts_r+0x78>
 8008ee8:	3e01      	subs	r6, #1
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	bb39      	cbnz	r1, 8008f46 <_puts_r+0x9e>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da38      	bge.n	8008f6c <_puts_r+0xc4>
 8008efa:	4622      	mov	r2, r4
 8008efc:	210a      	movs	r1, #10
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f858 	bl	8008fb4 <__swbuf_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d011      	beq.n	8008f2c <_puts_r+0x84>
 8008f08:	250a      	movs	r5, #10
 8008f0a:	e011      	b.n	8008f30 <_puts_r+0x88>
 8008f0c:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <_puts_r+0xd4>)
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	d101      	bne.n	8008f16 <_puts_r+0x6e>
 8008f12:	68ac      	ldr	r4, [r5, #8]
 8008f14:	e7da      	b.n	8008ecc <_puts_r+0x24>
 8008f16:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <_puts_r+0xd8>)
 8008f18:	429c      	cmp	r4, r3
 8008f1a:	bf08      	it	eq
 8008f1c:	68ec      	ldreq	r4, [r5, #12]
 8008f1e:	e7d5      	b.n	8008ecc <_puts_r+0x24>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f898 	bl	8009058 <__swsetup_r>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d0dd      	beq.n	8008ee8 <_puts_r+0x40>
 8008f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f32:	07da      	lsls	r2, r3, #31
 8008f34:	d405      	bmi.n	8008f42 <_puts_r+0x9a>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	059b      	lsls	r3, r3, #22
 8008f3a:	d402      	bmi.n	8008f42 <_puts_r+0x9a>
 8008f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3e:	f000 fab2 	bl	80094a6 <__retarget_lock_release_recursive>
 8008f42:	4628      	mov	r0, r5
 8008f44:	bd70      	pop	{r4, r5, r6, pc}
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da04      	bge.n	8008f54 <_puts_r+0xac>
 8008f4a:	69a2      	ldr	r2, [r4, #24]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	dc06      	bgt.n	8008f5e <_puts_r+0xb6>
 8008f50:	290a      	cmp	r1, #10
 8008f52:	d004      	beq.n	8008f5e <_puts_r+0xb6>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	7019      	strb	r1, [r3, #0]
 8008f5c:	e7c5      	b.n	8008eea <_puts_r+0x42>
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f827 	bl	8008fb4 <__swbuf_r>
 8008f66:	3001      	adds	r0, #1
 8008f68:	d1bf      	bne.n	8008eea <_puts_r+0x42>
 8008f6a:	e7df      	b.n	8008f2c <_puts_r+0x84>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	250a      	movs	r5, #10
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	701d      	strb	r5, [r3, #0]
 8008f76:	e7db      	b.n	8008f30 <_puts_r+0x88>
 8008f78:	08009e54 	.word	0x08009e54
 8008f7c:	08009e74 	.word	0x08009e74
 8008f80:	08009e34 	.word	0x08009e34

08008f84 <puts>:
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <puts+0xc>)
 8008f86:	4601      	mov	r1, r0
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f7ff bf8d 	b.w	8008ea8 <_puts_r>
 8008f8e:	bf00      	nop
 8008f90:	2000001c 	.word	0x2000001c

08008f94 <_sbrk_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d06      	ldr	r5, [pc, #24]	; (8008fb0 <_sbrk_r+0x1c>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f9 fc50 	bl	8002844 <_sbrk>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_sbrk_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_sbrk_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	200004b4 	.word	0x200004b4

08008fb4 <__swbuf_r>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	460e      	mov	r6, r1
 8008fb8:	4614      	mov	r4, r2
 8008fba:	4605      	mov	r5, r0
 8008fbc:	b118      	cbz	r0, 8008fc6 <__swbuf_r+0x12>
 8008fbe:	6983      	ldr	r3, [r0, #24]
 8008fc0:	b90b      	cbnz	r3, 8008fc6 <__swbuf_r+0x12>
 8008fc2:	f000 f9d1 	bl	8009368 <__sinit>
 8008fc6:	4b21      	ldr	r3, [pc, #132]	; (800904c <__swbuf_r+0x98>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	d12b      	bne.n	8009024 <__swbuf_r+0x70>
 8008fcc:	686c      	ldr	r4, [r5, #4]
 8008fce:	69a3      	ldr	r3, [r4, #24]
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	071a      	lsls	r2, r3, #28
 8008fd6:	d52f      	bpl.n	8009038 <__swbuf_r+0x84>
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	b36b      	cbz	r3, 8009038 <__swbuf_r+0x84>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	1ac0      	subs	r0, r0, r3
 8008fe2:	6963      	ldr	r3, [r4, #20]
 8008fe4:	b2f6      	uxtb	r6, r6
 8008fe6:	4283      	cmp	r3, r0
 8008fe8:	4637      	mov	r7, r6
 8008fea:	dc04      	bgt.n	8008ff6 <__swbuf_r+0x42>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 f926 	bl	8009240 <_fflush_r>
 8008ff4:	bb30      	cbnz	r0, 8009044 <__swbuf_r+0x90>
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	60a3      	str	r3, [r4, #8]
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	6022      	str	r2, [r4, #0]
 8009002:	701e      	strb	r6, [r3, #0]
 8009004:	6963      	ldr	r3, [r4, #20]
 8009006:	3001      	adds	r0, #1
 8009008:	4283      	cmp	r3, r0
 800900a:	d004      	beq.n	8009016 <__swbuf_r+0x62>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	07db      	lsls	r3, r3, #31
 8009010:	d506      	bpl.n	8009020 <__swbuf_r+0x6c>
 8009012:	2e0a      	cmp	r6, #10
 8009014:	d104      	bne.n	8009020 <__swbuf_r+0x6c>
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 f911 	bl	8009240 <_fflush_r>
 800901e:	b988      	cbnz	r0, 8009044 <__swbuf_r+0x90>
 8009020:	4638      	mov	r0, r7
 8009022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <__swbuf_r+0x9c>)
 8009026:	429c      	cmp	r4, r3
 8009028:	d101      	bne.n	800902e <__swbuf_r+0x7a>
 800902a:	68ac      	ldr	r4, [r5, #8]
 800902c:	e7cf      	b.n	8008fce <__swbuf_r+0x1a>
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <__swbuf_r+0xa0>)
 8009030:	429c      	cmp	r4, r3
 8009032:	bf08      	it	eq
 8009034:	68ec      	ldreq	r4, [r5, #12]
 8009036:	e7ca      	b.n	8008fce <__swbuf_r+0x1a>
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f80c 	bl	8009058 <__swsetup_r>
 8009040:	2800      	cmp	r0, #0
 8009042:	d0cb      	beq.n	8008fdc <__swbuf_r+0x28>
 8009044:	f04f 37ff 	mov.w	r7, #4294967295
 8009048:	e7ea      	b.n	8009020 <__swbuf_r+0x6c>
 800904a:	bf00      	nop
 800904c:	08009e54 	.word	0x08009e54
 8009050:	08009e74 	.word	0x08009e74
 8009054:	08009e34 	.word	0x08009e34

08009058 <__swsetup_r>:
 8009058:	4b32      	ldr	r3, [pc, #200]	; (8009124 <__swsetup_r+0xcc>)
 800905a:	b570      	push	{r4, r5, r6, lr}
 800905c:	681d      	ldr	r5, [r3, #0]
 800905e:	4606      	mov	r6, r0
 8009060:	460c      	mov	r4, r1
 8009062:	b125      	cbz	r5, 800906e <__swsetup_r+0x16>
 8009064:	69ab      	ldr	r3, [r5, #24]
 8009066:	b913      	cbnz	r3, 800906e <__swsetup_r+0x16>
 8009068:	4628      	mov	r0, r5
 800906a:	f000 f97d 	bl	8009368 <__sinit>
 800906e:	4b2e      	ldr	r3, [pc, #184]	; (8009128 <__swsetup_r+0xd0>)
 8009070:	429c      	cmp	r4, r3
 8009072:	d10f      	bne.n	8009094 <__swsetup_r+0x3c>
 8009074:	686c      	ldr	r4, [r5, #4]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800907c:	0719      	lsls	r1, r3, #28
 800907e:	d42c      	bmi.n	80090da <__swsetup_r+0x82>
 8009080:	06dd      	lsls	r5, r3, #27
 8009082:	d411      	bmi.n	80090a8 <__swsetup_r+0x50>
 8009084:	2309      	movs	r3, #9
 8009086:	6033      	str	r3, [r6, #0]
 8009088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	e03e      	b.n	8009112 <__swsetup_r+0xba>
 8009094:	4b25      	ldr	r3, [pc, #148]	; (800912c <__swsetup_r+0xd4>)
 8009096:	429c      	cmp	r4, r3
 8009098:	d101      	bne.n	800909e <__swsetup_r+0x46>
 800909a:	68ac      	ldr	r4, [r5, #8]
 800909c:	e7eb      	b.n	8009076 <__swsetup_r+0x1e>
 800909e:	4b24      	ldr	r3, [pc, #144]	; (8009130 <__swsetup_r+0xd8>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	bf08      	it	eq
 80090a4:	68ec      	ldreq	r4, [r5, #12]
 80090a6:	e7e6      	b.n	8009076 <__swsetup_r+0x1e>
 80090a8:	0758      	lsls	r0, r3, #29
 80090aa:	d512      	bpl.n	80090d2 <__swsetup_r+0x7a>
 80090ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ae:	b141      	cbz	r1, 80090c2 <__swsetup_r+0x6a>
 80090b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b4:	4299      	cmp	r1, r3
 80090b6:	d002      	beq.n	80090be <__swsetup_r+0x66>
 80090b8:	4630      	mov	r0, r6
 80090ba:	f000 fa67 	bl	800958c <_free_r>
 80090be:	2300      	movs	r3, #0
 80090c0:	6363      	str	r3, [r4, #52]	; 0x34
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	2300      	movs	r3, #0
 80090cc:	6063      	str	r3, [r4, #4]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f043 0308 	orr.w	r3, r3, #8
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	b94b      	cbnz	r3, 80090f2 <__swsetup_r+0x9a>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e8:	d003      	beq.n	80090f2 <__swsetup_r+0x9a>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4630      	mov	r0, r6
 80090ee:	f000 fa01 	bl	80094f4 <__smakebuf_r>
 80090f2:	89a0      	ldrh	r0, [r4, #12]
 80090f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f8:	f010 0301 	ands.w	r3, r0, #1
 80090fc:	d00a      	beq.n	8009114 <__swsetup_r+0xbc>
 80090fe:	2300      	movs	r3, #0
 8009100:	60a3      	str	r3, [r4, #8]
 8009102:	6963      	ldr	r3, [r4, #20]
 8009104:	425b      	negs	r3, r3
 8009106:	61a3      	str	r3, [r4, #24]
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	b943      	cbnz	r3, 800911e <__swsetup_r+0xc6>
 800910c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009110:	d1ba      	bne.n	8009088 <__swsetup_r+0x30>
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	0781      	lsls	r1, r0, #30
 8009116:	bf58      	it	pl
 8009118:	6963      	ldrpl	r3, [r4, #20]
 800911a:	60a3      	str	r3, [r4, #8]
 800911c:	e7f4      	b.n	8009108 <__swsetup_r+0xb0>
 800911e:	2000      	movs	r0, #0
 8009120:	e7f7      	b.n	8009112 <__swsetup_r+0xba>
 8009122:	bf00      	nop
 8009124:	2000001c 	.word	0x2000001c
 8009128:	08009e54 	.word	0x08009e54
 800912c:	08009e74 	.word	0x08009e74
 8009130:	08009e34 	.word	0x08009e34

08009134 <__sflush_r>:
 8009134:	898a      	ldrh	r2, [r1, #12]
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	4605      	mov	r5, r0
 800913c:	0710      	lsls	r0, r2, #28
 800913e:	460c      	mov	r4, r1
 8009140:	d458      	bmi.n	80091f4 <__sflush_r+0xc0>
 8009142:	684b      	ldr	r3, [r1, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc05      	bgt.n	8009154 <__sflush_r+0x20>
 8009148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	dc02      	bgt.n	8009154 <__sflush_r+0x20>
 800914e:	2000      	movs	r0, #0
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009156:	2e00      	cmp	r6, #0
 8009158:	d0f9      	beq.n	800914e <__sflush_r+0x1a>
 800915a:	2300      	movs	r3, #0
 800915c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009160:	682f      	ldr	r7, [r5, #0]
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	d032      	beq.n	80091cc <__sflush_r+0x98>
 8009166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	075a      	lsls	r2, r3, #29
 800916c:	d505      	bpl.n	800917a <__sflush_r+0x46>
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	1ac0      	subs	r0, r0, r3
 8009172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009174:	b10b      	cbz	r3, 800917a <__sflush_r+0x46>
 8009176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009178:	1ac0      	subs	r0, r0, r3
 800917a:	2300      	movs	r3, #0
 800917c:	4602      	mov	r2, r0
 800917e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009180:	6a21      	ldr	r1, [r4, #32]
 8009182:	4628      	mov	r0, r5
 8009184:	47b0      	blx	r6
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	d106      	bne.n	800919a <__sflush_r+0x66>
 800918c:	6829      	ldr	r1, [r5, #0]
 800918e:	291d      	cmp	r1, #29
 8009190:	d82c      	bhi.n	80091ec <__sflush_r+0xb8>
 8009192:	4a2a      	ldr	r2, [pc, #168]	; (800923c <__sflush_r+0x108>)
 8009194:	40ca      	lsrs	r2, r1
 8009196:	07d6      	lsls	r6, r2, #31
 8009198:	d528      	bpl.n	80091ec <__sflush_r+0xb8>
 800919a:	2200      	movs	r2, #0
 800919c:	6062      	str	r2, [r4, #4]
 800919e:	04d9      	lsls	r1, r3, #19
 80091a0:	6922      	ldr	r2, [r4, #16]
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	d504      	bpl.n	80091b0 <__sflush_r+0x7c>
 80091a6:	1c42      	adds	r2, r0, #1
 80091a8:	d101      	bne.n	80091ae <__sflush_r+0x7a>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b903      	cbnz	r3, 80091b0 <__sflush_r+0x7c>
 80091ae:	6560      	str	r0, [r4, #84]	; 0x54
 80091b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091b2:	602f      	str	r7, [r5, #0]
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d0ca      	beq.n	800914e <__sflush_r+0x1a>
 80091b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091bc:	4299      	cmp	r1, r3
 80091be:	d002      	beq.n	80091c6 <__sflush_r+0x92>
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 f9e3 	bl	800958c <_free_r>
 80091c6:	2000      	movs	r0, #0
 80091c8:	6360      	str	r0, [r4, #52]	; 0x34
 80091ca:	e7c1      	b.n	8009150 <__sflush_r+0x1c>
 80091cc:	6a21      	ldr	r1, [r4, #32]
 80091ce:	2301      	movs	r3, #1
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b0      	blx	r6
 80091d4:	1c41      	adds	r1, r0, #1
 80091d6:	d1c7      	bne.n	8009168 <__sflush_r+0x34>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c4      	beq.n	8009168 <__sflush_r+0x34>
 80091de:	2b1d      	cmp	r3, #29
 80091e0:	d001      	beq.n	80091e6 <__sflush_r+0xb2>
 80091e2:	2b16      	cmp	r3, #22
 80091e4:	d101      	bne.n	80091ea <__sflush_r+0xb6>
 80091e6:	602f      	str	r7, [r5, #0]
 80091e8:	e7b1      	b.n	800914e <__sflush_r+0x1a>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	e7ad      	b.n	8009150 <__sflush_r+0x1c>
 80091f4:	690f      	ldr	r7, [r1, #16]
 80091f6:	2f00      	cmp	r7, #0
 80091f8:	d0a9      	beq.n	800914e <__sflush_r+0x1a>
 80091fa:	0793      	lsls	r3, r2, #30
 80091fc:	680e      	ldr	r6, [r1, #0]
 80091fe:	bf08      	it	eq
 8009200:	694b      	ldreq	r3, [r1, #20]
 8009202:	600f      	str	r7, [r1, #0]
 8009204:	bf18      	it	ne
 8009206:	2300      	movne	r3, #0
 8009208:	eba6 0807 	sub.w	r8, r6, r7
 800920c:	608b      	str	r3, [r1, #8]
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	dd9c      	ble.n	800914e <__sflush_r+0x1a>
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009218:	4643      	mov	r3, r8
 800921a:	463a      	mov	r2, r7
 800921c:	4628      	mov	r0, r5
 800921e:	47b0      	blx	r6
 8009220:	2800      	cmp	r0, #0
 8009222:	dc06      	bgt.n	8009232 <__sflush_r+0xfe>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	e78e      	b.n	8009150 <__sflush_r+0x1c>
 8009232:	4407      	add	r7, r0
 8009234:	eba8 0800 	sub.w	r8, r8, r0
 8009238:	e7e9      	b.n	800920e <__sflush_r+0xda>
 800923a:	bf00      	nop
 800923c:	20400001 	.word	0x20400001

08009240 <_fflush_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	690b      	ldr	r3, [r1, #16]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b913      	cbnz	r3, 8009250 <_fflush_r+0x10>
 800924a:	2500      	movs	r5, #0
 800924c:	4628      	mov	r0, r5
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	b118      	cbz	r0, 800925a <_fflush_r+0x1a>
 8009252:	6983      	ldr	r3, [r0, #24]
 8009254:	b90b      	cbnz	r3, 800925a <_fflush_r+0x1a>
 8009256:	f000 f887 	bl	8009368 <__sinit>
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <_fflush_r+0x6c>)
 800925c:	429c      	cmp	r4, r3
 800925e:	d11b      	bne.n	8009298 <_fflush_r+0x58>
 8009260:	686c      	ldr	r4, [r5, #4]
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ef      	beq.n	800924a <_fflush_r+0xa>
 800926a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d404      	bmi.n	800927a <_fflush_r+0x3a>
 8009270:	0599      	lsls	r1, r3, #22
 8009272:	d402      	bmi.n	800927a <_fflush_r+0x3a>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f000 f915 	bl	80094a4 <__retarget_lock_acquire_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	4621      	mov	r1, r4
 800927e:	f7ff ff59 	bl	8009134 <__sflush_r>
 8009282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009284:	07da      	lsls	r2, r3, #31
 8009286:	4605      	mov	r5, r0
 8009288:	d4e0      	bmi.n	800924c <_fflush_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d4dd      	bmi.n	800924c <_fflush_r+0xc>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f000 f908 	bl	80094a6 <__retarget_lock_release_recursive>
 8009296:	e7d9      	b.n	800924c <_fflush_r+0xc>
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <_fflush_r+0x70>)
 800929a:	429c      	cmp	r4, r3
 800929c:	d101      	bne.n	80092a2 <_fflush_r+0x62>
 800929e:	68ac      	ldr	r4, [r5, #8]
 80092a0:	e7df      	b.n	8009262 <_fflush_r+0x22>
 80092a2:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <_fflush_r+0x74>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	bf08      	it	eq
 80092a8:	68ec      	ldreq	r4, [r5, #12]
 80092aa:	e7da      	b.n	8009262 <_fflush_r+0x22>
 80092ac:	08009e54 	.word	0x08009e54
 80092b0:	08009e74 	.word	0x08009e74
 80092b4:	08009e34 	.word	0x08009e34

080092b8 <std>:
 80092b8:	2300      	movs	r3, #0
 80092ba:	b510      	push	{r4, lr}
 80092bc:	4604      	mov	r4, r0
 80092be:	e9c0 3300 	strd	r3, r3, [r0]
 80092c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092c6:	6083      	str	r3, [r0, #8]
 80092c8:	8181      	strh	r1, [r0, #12]
 80092ca:	6643      	str	r3, [r0, #100]	; 0x64
 80092cc:	81c2      	strh	r2, [r0, #14]
 80092ce:	6183      	str	r3, [r0, #24]
 80092d0:	4619      	mov	r1, r3
 80092d2:	2208      	movs	r2, #8
 80092d4:	305c      	adds	r0, #92	; 0x5c
 80092d6:	f7ff fd1d 	bl	8008d14 <memset>
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <std+0x38>)
 80092dc:	6263      	str	r3, [r4, #36]	; 0x24
 80092de:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <std+0x3c>)
 80092e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <std+0x40>)
 80092e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <std+0x44>)
 80092e8:	6224      	str	r4, [r4, #32]
 80092ea:	6323      	str	r3, [r4, #48]	; 0x30
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	08009c01 	.word	0x08009c01
 80092f4:	08009c23 	.word	0x08009c23
 80092f8:	08009c5b 	.word	0x08009c5b
 80092fc:	08009c7f 	.word	0x08009c7f

08009300 <_cleanup_r>:
 8009300:	4901      	ldr	r1, [pc, #4]	; (8009308 <_cleanup_r+0x8>)
 8009302:	f000 b8af 	b.w	8009464 <_fwalk_reent>
 8009306:	bf00      	nop
 8009308:	08009241 	.word	0x08009241

0800930c <__sfmoreglue>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	2268      	movs	r2, #104	; 0x68
 8009310:	1e4d      	subs	r5, r1, #1
 8009312:	4355      	muls	r5, r2
 8009314:	460e      	mov	r6, r1
 8009316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800931a:	f7ff fd39 	bl	8008d90 <_malloc_r>
 800931e:	4604      	mov	r4, r0
 8009320:	b140      	cbz	r0, 8009334 <__sfmoreglue+0x28>
 8009322:	2100      	movs	r1, #0
 8009324:	e9c0 1600 	strd	r1, r6, [r0]
 8009328:	300c      	adds	r0, #12
 800932a:	60a0      	str	r0, [r4, #8]
 800932c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009330:	f7ff fcf0 	bl	8008d14 <memset>
 8009334:	4620      	mov	r0, r4
 8009336:	bd70      	pop	{r4, r5, r6, pc}

08009338 <__sfp_lock_acquire>:
 8009338:	4801      	ldr	r0, [pc, #4]	; (8009340 <__sfp_lock_acquire+0x8>)
 800933a:	f000 b8b3 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	200004b1 	.word	0x200004b1

08009344 <__sfp_lock_release>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__sfp_lock_release+0x8>)
 8009346:	f000 b8ae 	b.w	80094a6 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	200004b1 	.word	0x200004b1

08009350 <__sinit_lock_acquire>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__sinit_lock_acquire+0x8>)
 8009352:	f000 b8a7 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	200004b2 	.word	0x200004b2

0800935c <__sinit_lock_release>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__sinit_lock_release+0x8>)
 800935e:	f000 b8a2 	b.w	80094a6 <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	200004b2 	.word	0x200004b2

08009368 <__sinit>:
 8009368:	b510      	push	{r4, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	f7ff fff0 	bl	8009350 <__sinit_lock_acquire>
 8009370:	69a3      	ldr	r3, [r4, #24]
 8009372:	b11b      	cbz	r3, 800937c <__sinit+0x14>
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	f7ff bff0 	b.w	800935c <__sinit_lock_release>
 800937c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009380:	6523      	str	r3, [r4, #80]	; 0x50
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <__sinit+0x68>)
 8009384:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <__sinit+0x6c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	62a2      	str	r2, [r4, #40]	; 0x28
 800938a:	42a3      	cmp	r3, r4
 800938c:	bf04      	itt	eq
 800938e:	2301      	moveq	r3, #1
 8009390:	61a3      	streq	r3, [r4, #24]
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f820 	bl	80093d8 <__sfp>
 8009398:	6060      	str	r0, [r4, #4]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f81c 	bl	80093d8 <__sfp>
 80093a0:	60a0      	str	r0, [r4, #8]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f818 	bl	80093d8 <__sfp>
 80093a8:	2200      	movs	r2, #0
 80093aa:	60e0      	str	r0, [r4, #12]
 80093ac:	2104      	movs	r1, #4
 80093ae:	6860      	ldr	r0, [r4, #4]
 80093b0:	f7ff ff82 	bl	80092b8 <std>
 80093b4:	68a0      	ldr	r0, [r4, #8]
 80093b6:	2201      	movs	r2, #1
 80093b8:	2109      	movs	r1, #9
 80093ba:	f7ff ff7d 	bl	80092b8 <std>
 80093be:	68e0      	ldr	r0, [r4, #12]
 80093c0:	2202      	movs	r2, #2
 80093c2:	2112      	movs	r1, #18
 80093c4:	f7ff ff78 	bl	80092b8 <std>
 80093c8:	2301      	movs	r3, #1
 80093ca:	61a3      	str	r3, [r4, #24]
 80093cc:	e7d2      	b.n	8009374 <__sinit+0xc>
 80093ce:	bf00      	nop
 80093d0:	08009e30 	.word	0x08009e30
 80093d4:	08009301 	.word	0x08009301

080093d8 <__sfp>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	4607      	mov	r7, r0
 80093dc:	f7ff ffac 	bl	8009338 <__sfp_lock_acquire>
 80093e0:	4b1e      	ldr	r3, [pc, #120]	; (800945c <__sfp+0x84>)
 80093e2:	681e      	ldr	r6, [r3, #0]
 80093e4:	69b3      	ldr	r3, [r6, #24]
 80093e6:	b913      	cbnz	r3, 80093ee <__sfp+0x16>
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ffbd 	bl	8009368 <__sinit>
 80093ee:	3648      	adds	r6, #72	; 0x48
 80093f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	d503      	bpl.n	8009400 <__sfp+0x28>
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	b30b      	cbz	r3, 8009440 <__sfp+0x68>
 80093fc:	6836      	ldr	r6, [r6, #0]
 80093fe:	e7f7      	b.n	80093f0 <__sfp+0x18>
 8009400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009404:	b9d5      	cbnz	r5, 800943c <__sfp+0x64>
 8009406:	4b16      	ldr	r3, [pc, #88]	; (8009460 <__sfp+0x88>)
 8009408:	60e3      	str	r3, [r4, #12]
 800940a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800940e:	6665      	str	r5, [r4, #100]	; 0x64
 8009410:	f000 f847 	bl	80094a2 <__retarget_lock_init_recursive>
 8009414:	f7ff ff96 	bl	8009344 <__sfp_lock_release>
 8009418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800941c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009420:	6025      	str	r5, [r4, #0]
 8009422:	61a5      	str	r5, [r4, #24]
 8009424:	2208      	movs	r2, #8
 8009426:	4629      	mov	r1, r5
 8009428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800942c:	f7ff fc72 	bl	8008d14 <memset>
 8009430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009438:	4620      	mov	r0, r4
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	3468      	adds	r4, #104	; 0x68
 800943e:	e7d9      	b.n	80093f4 <__sfp+0x1c>
 8009440:	2104      	movs	r1, #4
 8009442:	4638      	mov	r0, r7
 8009444:	f7ff ff62 	bl	800930c <__sfmoreglue>
 8009448:	4604      	mov	r4, r0
 800944a:	6030      	str	r0, [r6, #0]
 800944c:	2800      	cmp	r0, #0
 800944e:	d1d5      	bne.n	80093fc <__sfp+0x24>
 8009450:	f7ff ff78 	bl	8009344 <__sfp_lock_release>
 8009454:	230c      	movs	r3, #12
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	e7ee      	b.n	8009438 <__sfp+0x60>
 800945a:	bf00      	nop
 800945c:	08009e30 	.word	0x08009e30
 8009460:	ffff0001 	.word	0xffff0001

08009464 <_fwalk_reent>:
 8009464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009468:	4606      	mov	r6, r0
 800946a:	4688      	mov	r8, r1
 800946c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009470:	2700      	movs	r7, #0
 8009472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009476:	f1b9 0901 	subs.w	r9, r9, #1
 800947a:	d505      	bpl.n	8009488 <_fwalk_reent+0x24>
 800947c:	6824      	ldr	r4, [r4, #0]
 800947e:	2c00      	cmp	r4, #0
 8009480:	d1f7      	bne.n	8009472 <_fwalk_reent+0xe>
 8009482:	4638      	mov	r0, r7
 8009484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009488:	89ab      	ldrh	r3, [r5, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d907      	bls.n	800949e <_fwalk_reent+0x3a>
 800948e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009492:	3301      	adds	r3, #1
 8009494:	d003      	beq.n	800949e <_fwalk_reent+0x3a>
 8009496:	4629      	mov	r1, r5
 8009498:	4630      	mov	r0, r6
 800949a:	47c0      	blx	r8
 800949c:	4307      	orrs	r7, r0
 800949e:	3568      	adds	r5, #104	; 0x68
 80094a0:	e7e9      	b.n	8009476 <_fwalk_reent+0x12>

080094a2 <__retarget_lock_init_recursive>:
 80094a2:	4770      	bx	lr

080094a4 <__retarget_lock_acquire_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_release_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__swhatbuf_r>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	460e      	mov	r6, r1
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	b096      	sub	sp, #88	; 0x58
 80094b4:	4614      	mov	r4, r2
 80094b6:	461d      	mov	r5, r3
 80094b8:	da08      	bge.n	80094cc <__swhatbuf_r+0x24>
 80094ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	602a      	str	r2, [r5, #0]
 80094c2:	061a      	lsls	r2, r3, #24
 80094c4:	d410      	bmi.n	80094e8 <__swhatbuf_r+0x40>
 80094c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ca:	e00e      	b.n	80094ea <__swhatbuf_r+0x42>
 80094cc:	466a      	mov	r2, sp
 80094ce:	f000 fbfd 	bl	8009ccc <_fstat_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dbf1      	blt.n	80094ba <__swhatbuf_r+0x12>
 80094d6:	9a01      	ldr	r2, [sp, #4]
 80094d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094e0:	425a      	negs	r2, r3
 80094e2:	415a      	adcs	r2, r3
 80094e4:	602a      	str	r2, [r5, #0]
 80094e6:	e7ee      	b.n	80094c6 <__swhatbuf_r+0x1e>
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	2000      	movs	r0, #0
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	b016      	add	sp, #88	; 0x58
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080094f4 <__smakebuf_r>:
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f8:	079d      	lsls	r5, r3, #30
 80094fa:	4606      	mov	r6, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	d507      	bpl.n	8009510 <__smakebuf_r+0x1c>
 8009500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	2301      	movs	r3, #1
 800950a:	6163      	str	r3, [r4, #20]
 800950c:	b002      	add	sp, #8
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	ab01      	add	r3, sp, #4
 8009512:	466a      	mov	r2, sp
 8009514:	f7ff ffc8 	bl	80094a8 <__swhatbuf_r>
 8009518:	9900      	ldr	r1, [sp, #0]
 800951a:	4605      	mov	r5, r0
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff fc37 	bl	8008d90 <_malloc_r>
 8009522:	b948      	cbnz	r0, 8009538 <__smakebuf_r+0x44>
 8009524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009528:	059a      	lsls	r2, r3, #22
 800952a:	d4ef      	bmi.n	800950c <__smakebuf_r+0x18>
 800952c:	f023 0303 	bic.w	r3, r3, #3
 8009530:	f043 0302 	orr.w	r3, r3, #2
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	e7e3      	b.n	8009500 <__smakebuf_r+0xc>
 8009538:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <__smakebuf_r+0x7c>)
 800953a:	62b3      	str	r3, [r6, #40]	; 0x28
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	6163      	str	r3, [r4, #20]
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	6120      	str	r0, [r4, #16]
 800954e:	b15b      	cbz	r3, 8009568 <__smakebuf_r+0x74>
 8009550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009554:	4630      	mov	r0, r6
 8009556:	f000 fbcb 	bl	8009cf0 <_isatty_r>
 800955a:	b128      	cbz	r0, 8009568 <__smakebuf_r+0x74>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	89a0      	ldrh	r0, [r4, #12]
 800956a:	4305      	orrs	r5, r0
 800956c:	81a5      	strh	r5, [r4, #12]
 800956e:	e7cd      	b.n	800950c <__smakebuf_r+0x18>
 8009570:	08009301 	.word	0x08009301

08009574 <__malloc_lock>:
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <__malloc_lock+0x8>)
 8009576:	f7ff bf95 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 800957a:	bf00      	nop
 800957c:	200004b0 	.word	0x200004b0

08009580 <__malloc_unlock>:
 8009580:	4801      	ldr	r0, [pc, #4]	; (8009588 <__malloc_unlock+0x8>)
 8009582:	f7ff bf90 	b.w	80094a6 <__retarget_lock_release_recursive>
 8009586:	bf00      	nop
 8009588:	200004b0 	.word	0x200004b0

0800958c <_free_r>:
 800958c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800958e:	2900      	cmp	r1, #0
 8009590:	d044      	beq.n	800961c <_free_r+0x90>
 8009592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009596:	9001      	str	r0, [sp, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f1a1 0404 	sub.w	r4, r1, #4
 800959e:	bfb8      	it	lt
 80095a0:	18e4      	addlt	r4, r4, r3
 80095a2:	f7ff ffe7 	bl	8009574 <__malloc_lock>
 80095a6:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <_free_r+0x94>)
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	b933      	cbnz	r3, 80095bc <_free_r+0x30>
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	b003      	add	sp, #12
 80095b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b8:	f7ff bfe2 	b.w	8009580 <__malloc_unlock>
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d908      	bls.n	80095d2 <_free_r+0x46>
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf01      	itttt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	1949      	addeq	r1, r1, r5
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	e7ed      	b.n	80095ae <_free_r+0x22>
 80095d2:	461a      	mov	r2, r3
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b10b      	cbz	r3, 80095dc <_free_r+0x50>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d9fa      	bls.n	80095d2 <_free_r+0x46>
 80095dc:	6811      	ldr	r1, [r2, #0]
 80095de:	1855      	adds	r5, r2, r1
 80095e0:	42a5      	cmp	r5, r4
 80095e2:	d10b      	bne.n	80095fc <_free_r+0x70>
 80095e4:	6824      	ldr	r4, [r4, #0]
 80095e6:	4421      	add	r1, r4
 80095e8:	1854      	adds	r4, r2, r1
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	6011      	str	r1, [r2, #0]
 80095ee:	d1e0      	bne.n	80095b2 <_free_r+0x26>
 80095f0:	681c      	ldr	r4, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	6053      	str	r3, [r2, #4]
 80095f6:	4421      	add	r1, r4
 80095f8:	6011      	str	r1, [r2, #0]
 80095fa:	e7da      	b.n	80095b2 <_free_r+0x26>
 80095fc:	d902      	bls.n	8009604 <_free_r+0x78>
 80095fe:	230c      	movs	r3, #12
 8009600:	6003      	str	r3, [r0, #0]
 8009602:	e7d6      	b.n	80095b2 <_free_r+0x26>
 8009604:	6825      	ldr	r5, [r4, #0]
 8009606:	1961      	adds	r1, r4, r5
 8009608:	428b      	cmp	r3, r1
 800960a:	bf04      	itt	eq
 800960c:	6819      	ldreq	r1, [r3, #0]
 800960e:	685b      	ldreq	r3, [r3, #4]
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	bf04      	itt	eq
 8009614:	1949      	addeq	r1, r1, r5
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	6054      	str	r4, [r2, #4]
 800961a:	e7ca      	b.n	80095b2 <_free_r+0x26>
 800961c:	b003      	add	sp, #12
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	200004a8 	.word	0x200004a8

08009624 <__sfputc_r>:
 8009624:	6893      	ldr	r3, [r2, #8]
 8009626:	3b01      	subs	r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	b410      	push	{r4}
 800962c:	6093      	str	r3, [r2, #8]
 800962e:	da08      	bge.n	8009642 <__sfputc_r+0x1e>
 8009630:	6994      	ldr	r4, [r2, #24]
 8009632:	42a3      	cmp	r3, r4
 8009634:	db01      	blt.n	800963a <__sfputc_r+0x16>
 8009636:	290a      	cmp	r1, #10
 8009638:	d103      	bne.n	8009642 <__sfputc_r+0x1e>
 800963a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800963e:	f7ff bcb9 	b.w	8008fb4 <__swbuf_r>
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	1c58      	adds	r0, r3, #1
 8009646:	6010      	str	r0, [r2, #0]
 8009648:	7019      	strb	r1, [r3, #0]
 800964a:	4608      	mov	r0, r1
 800964c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009650:	4770      	bx	lr

08009652 <__sfputs_r>:
 8009652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	4614      	mov	r4, r2
 800965a:	18d5      	adds	r5, r2, r3
 800965c:	42ac      	cmp	r4, r5
 800965e:	d101      	bne.n	8009664 <__sfputs_r+0x12>
 8009660:	2000      	movs	r0, #0
 8009662:	e007      	b.n	8009674 <__sfputs_r+0x22>
 8009664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009668:	463a      	mov	r2, r7
 800966a:	4630      	mov	r0, r6
 800966c:	f7ff ffda 	bl	8009624 <__sfputc_r>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d1f3      	bne.n	800965c <__sfputs_r+0xa>
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009678 <_vfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	460d      	mov	r5, r1
 800967e:	b09d      	sub	sp, #116	; 0x74
 8009680:	4614      	mov	r4, r2
 8009682:	4698      	mov	r8, r3
 8009684:	4606      	mov	r6, r0
 8009686:	b118      	cbz	r0, 8009690 <_vfiprintf_r+0x18>
 8009688:	6983      	ldr	r3, [r0, #24]
 800968a:	b90b      	cbnz	r3, 8009690 <_vfiprintf_r+0x18>
 800968c:	f7ff fe6c 	bl	8009368 <__sinit>
 8009690:	4b89      	ldr	r3, [pc, #548]	; (80098b8 <_vfiprintf_r+0x240>)
 8009692:	429d      	cmp	r5, r3
 8009694:	d11b      	bne.n	80096ce <_vfiprintf_r+0x56>
 8009696:	6875      	ldr	r5, [r6, #4]
 8009698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800969a:	07d9      	lsls	r1, r3, #31
 800969c:	d405      	bmi.n	80096aa <_vfiprintf_r+0x32>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	059a      	lsls	r2, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_vfiprintf_r+0x32>
 80096a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a6:	f7ff fefd 	bl	80094a4 <__retarget_lock_acquire_recursive>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	071b      	lsls	r3, r3, #28
 80096ae:	d501      	bpl.n	80096b4 <_vfiprintf_r+0x3c>
 80096b0:	692b      	ldr	r3, [r5, #16]
 80096b2:	b9eb      	cbnz	r3, 80096f0 <_vfiprintf_r+0x78>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff fcce 	bl	8009058 <__swsetup_r>
 80096bc:	b1c0      	cbz	r0, 80096f0 <_vfiprintf_r+0x78>
 80096be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c0:	07dc      	lsls	r4, r3, #31
 80096c2:	d50e      	bpl.n	80096e2 <_vfiprintf_r+0x6a>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	b01d      	add	sp, #116	; 0x74
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	4b7b      	ldr	r3, [pc, #492]	; (80098bc <_vfiprintf_r+0x244>)
 80096d0:	429d      	cmp	r5, r3
 80096d2:	d101      	bne.n	80096d8 <_vfiprintf_r+0x60>
 80096d4:	68b5      	ldr	r5, [r6, #8]
 80096d6:	e7df      	b.n	8009698 <_vfiprintf_r+0x20>
 80096d8:	4b79      	ldr	r3, [pc, #484]	; (80098c0 <_vfiprintf_r+0x248>)
 80096da:	429d      	cmp	r5, r3
 80096dc:	bf08      	it	eq
 80096de:	68f5      	ldreq	r5, [r6, #12]
 80096e0:	e7da      	b.n	8009698 <_vfiprintf_r+0x20>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d4ed      	bmi.n	80096c4 <_vfiprintf_r+0x4c>
 80096e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ea:	f7ff fedc 	bl	80094a6 <__retarget_lock_release_recursive>
 80096ee:	e7e9      	b.n	80096c4 <_vfiprintf_r+0x4c>
 80096f0:	2300      	movs	r3, #0
 80096f2:	9309      	str	r3, [sp, #36]	; 0x24
 80096f4:	2320      	movs	r3, #32
 80096f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80096fe:	2330      	movs	r3, #48	; 0x30
 8009700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098c4 <_vfiprintf_r+0x24c>
 8009704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009708:	f04f 0901 	mov.w	r9, #1
 800970c:	4623      	mov	r3, r4
 800970e:	469a      	mov	sl, r3
 8009710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009714:	b10a      	cbz	r2, 800971a <_vfiprintf_r+0xa2>
 8009716:	2a25      	cmp	r2, #37	; 0x25
 8009718:	d1f9      	bne.n	800970e <_vfiprintf_r+0x96>
 800971a:	ebba 0b04 	subs.w	fp, sl, r4
 800971e:	d00b      	beq.n	8009738 <_vfiprintf_r+0xc0>
 8009720:	465b      	mov	r3, fp
 8009722:	4622      	mov	r2, r4
 8009724:	4629      	mov	r1, r5
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ff93 	bl	8009652 <__sfputs_r>
 800972c:	3001      	adds	r0, #1
 800972e:	f000 80aa 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009734:	445a      	add	r2, fp
 8009736:	9209      	str	r2, [sp, #36]	; 0x24
 8009738:	f89a 3000 	ldrb.w	r3, [sl]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80a2 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009742:	2300      	movs	r3, #0
 8009744:	f04f 32ff 	mov.w	r2, #4294967295
 8009748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800974c:	f10a 0a01 	add.w	sl, sl, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9307      	str	r3, [sp, #28]
 8009754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009758:	931a      	str	r3, [sp, #104]	; 0x68
 800975a:	4654      	mov	r4, sl
 800975c:	2205      	movs	r2, #5
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	4858      	ldr	r0, [pc, #352]	; (80098c4 <_vfiprintf_r+0x24c>)
 8009764:	f7f6 fd54 	bl	8000210 <memchr>
 8009768:	9a04      	ldr	r2, [sp, #16]
 800976a:	b9d8      	cbnz	r0, 80097a4 <_vfiprintf_r+0x12c>
 800976c:	06d1      	lsls	r1, r2, #27
 800976e:	bf44      	itt	mi
 8009770:	2320      	movmi	r3, #32
 8009772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009776:	0713      	lsls	r3, r2, #28
 8009778:	bf44      	itt	mi
 800977a:	232b      	movmi	r3, #43	; 0x2b
 800977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b2a      	cmp	r3, #42	; 0x2a
 8009786:	d015      	beq.n	80097b4 <_vfiprintf_r+0x13c>
 8009788:	9a07      	ldr	r2, [sp, #28]
 800978a:	4654      	mov	r4, sl
 800978c:	2000      	movs	r0, #0
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	4621      	mov	r1, r4
 8009794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009798:	3b30      	subs	r3, #48	; 0x30
 800979a:	2b09      	cmp	r3, #9
 800979c:	d94e      	bls.n	800983c <_vfiprintf_r+0x1c4>
 800979e:	b1b0      	cbz	r0, 80097ce <_vfiprintf_r+0x156>
 80097a0:	9207      	str	r2, [sp, #28]
 80097a2:	e014      	b.n	80097ce <_vfiprintf_r+0x156>
 80097a4:	eba0 0308 	sub.w	r3, r0, r8
 80097a8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	46a2      	mov	sl, r4
 80097b2:	e7d2      	b.n	800975a <_vfiprintf_r+0xe2>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	1d19      	adds	r1, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfbb      	ittet	lt
 80097c0:	425b      	neglt	r3, r3
 80097c2:	f042 0202 	orrlt.w	r2, r2, #2
 80097c6:	9307      	strge	r3, [sp, #28]
 80097c8:	9307      	strlt	r3, [sp, #28]
 80097ca:	bfb8      	it	lt
 80097cc:	9204      	strlt	r2, [sp, #16]
 80097ce:	7823      	ldrb	r3, [r4, #0]
 80097d0:	2b2e      	cmp	r3, #46	; 0x2e
 80097d2:	d10c      	bne.n	80097ee <_vfiprintf_r+0x176>
 80097d4:	7863      	ldrb	r3, [r4, #1]
 80097d6:	2b2a      	cmp	r3, #42	; 0x2a
 80097d8:	d135      	bne.n	8009846 <_vfiprintf_r+0x1ce>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9203      	str	r2, [sp, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfb8      	it	lt
 80097e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ea:	3402      	adds	r4, #2
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098d4 <_vfiprintf_r+0x25c>
 80097f2:	7821      	ldrb	r1, [r4, #0]
 80097f4:	2203      	movs	r2, #3
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7f6 fd0a 	bl	8000210 <memchr>
 80097fc:	b140      	cbz	r0, 8009810 <_vfiprintf_r+0x198>
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	eba0 000a 	sub.w	r0, r0, sl
 8009804:	fa03 f000 	lsl.w	r0, r3, r0
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	4303      	orrs	r3, r0
 800980c:	3401      	adds	r4, #1
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009814:	482c      	ldr	r0, [pc, #176]	; (80098c8 <_vfiprintf_r+0x250>)
 8009816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800981a:	2206      	movs	r2, #6
 800981c:	f7f6 fcf8 	bl	8000210 <memchr>
 8009820:	2800      	cmp	r0, #0
 8009822:	d03f      	beq.n	80098a4 <_vfiprintf_r+0x22c>
 8009824:	4b29      	ldr	r3, [pc, #164]	; (80098cc <_vfiprintf_r+0x254>)
 8009826:	bb1b      	cbnz	r3, 8009870 <_vfiprintf_r+0x1f8>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	3307      	adds	r3, #7
 800982c:	f023 0307 	bic.w	r3, r3, #7
 8009830:	3308      	adds	r3, #8
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	443b      	add	r3, r7
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	e767      	b.n	800970c <_vfiprintf_r+0x94>
 800983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009840:	460c      	mov	r4, r1
 8009842:	2001      	movs	r0, #1
 8009844:	e7a5      	b.n	8009792 <_vfiprintf_r+0x11a>
 8009846:	2300      	movs	r3, #0
 8009848:	3401      	adds	r4, #1
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	4619      	mov	r1, r3
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4620      	mov	r0, r4
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	3a30      	subs	r2, #48	; 0x30
 800985a:	2a09      	cmp	r2, #9
 800985c:	d903      	bls.n	8009866 <_vfiprintf_r+0x1ee>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c5      	beq.n	80097ee <_vfiprintf_r+0x176>
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	e7c3      	b.n	80097ee <_vfiprintf_r+0x176>
 8009866:	fb0c 2101 	mla	r1, ip, r1, r2
 800986a:	4604      	mov	r4, r0
 800986c:	2301      	movs	r3, #1
 800986e:	e7f0      	b.n	8009852 <_vfiprintf_r+0x1da>
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	462a      	mov	r2, r5
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <_vfiprintf_r+0x258>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	4630      	mov	r0, r6
 800987c:	f3af 8000 	nop.w
 8009880:	4607      	mov	r7, r0
 8009882:	1c78      	adds	r0, r7, #1
 8009884:	d1d6      	bne.n	8009834 <_vfiprintf_r+0x1bc>
 8009886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009888:	07d9      	lsls	r1, r3, #31
 800988a:	d405      	bmi.n	8009898 <_vfiprintf_r+0x220>
 800988c:	89ab      	ldrh	r3, [r5, #12]
 800988e:	059a      	lsls	r2, r3, #22
 8009890:	d402      	bmi.n	8009898 <_vfiprintf_r+0x220>
 8009892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009894:	f7ff fe07 	bl	80094a6 <__retarget_lock_release_recursive>
 8009898:	89ab      	ldrh	r3, [r5, #12]
 800989a:	065b      	lsls	r3, r3, #25
 800989c:	f53f af12 	bmi.w	80096c4 <_vfiprintf_r+0x4c>
 80098a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a2:	e711      	b.n	80096c8 <_vfiprintf_r+0x50>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f000 f880 	bl	80099b4 <_printf_i>
 80098b4:	e7e4      	b.n	8009880 <_vfiprintf_r+0x208>
 80098b6:	bf00      	nop
 80098b8:	08009e54 	.word	0x08009e54
 80098bc:	08009e74 	.word	0x08009e74
 80098c0:	08009e34 	.word	0x08009e34
 80098c4:	08009e94 	.word	0x08009e94
 80098c8:	08009e9e 	.word	0x08009e9e
 80098cc:	00000000 	.word	0x00000000
 80098d0:	08009653 	.word	0x08009653
 80098d4:	08009e9a 	.word	0x08009e9a

080098d8 <_printf_common>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4616      	mov	r6, r2
 80098de:	4699      	mov	r9, r3
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	bfb8      	it	lt
 80098ec:	4613      	movlt	r3, r2
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f4:	4607      	mov	r7, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b10a      	cbz	r2, 80098fe <_printf_common+0x26>
 80098fa:	3301      	adds	r3, #1
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	0699      	lsls	r1, r3, #26
 8009902:	bf42      	ittt	mi
 8009904:	6833      	ldrmi	r3, [r6, #0]
 8009906:	3302      	addmi	r3, #2
 8009908:	6033      	strmi	r3, [r6, #0]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d106      	bne.n	8009920 <_printf_common+0x48>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc26      	bgt.n	800996e <_printf_common+0x96>
 8009920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009924:	1e13      	subs	r3, r2, #0
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	bf18      	it	ne
 800992a:	2301      	movne	r3, #1
 800992c:	0692      	lsls	r2, r2, #26
 800992e:	d42b      	bmi.n	8009988 <_printf_common+0xb0>
 8009930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	3001      	adds	r0, #1
 800993c:	d01e      	beq.n	800997c <_printf_common+0xa4>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	68e5      	ldr	r5, [r4, #12]
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	f003 0306 	and.w	r3, r3, #6
 8009948:	2b04      	cmp	r3, #4
 800994a:	bf08      	it	eq
 800994c:	1aad      	subeq	r5, r5, r2
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	bf0c      	ite	eq
 8009954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009958:	2500      	movne	r5, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	bfc4      	itt	gt
 800995e:	1a9b      	subgt	r3, r3, r2
 8009960:	18ed      	addgt	r5, r5, r3
 8009962:	2600      	movs	r6, #0
 8009964:	341a      	adds	r4, #26
 8009966:	42b5      	cmp	r5, r6
 8009968:	d11a      	bne.n	80099a0 <_printf_common+0xc8>
 800996a:	2000      	movs	r0, #0
 800996c:	e008      	b.n	8009980 <_printf_common+0xa8>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4649      	mov	r1, r9
 8009974:	4638      	mov	r0, r7
 8009976:	47c0      	blx	r8
 8009978:	3001      	adds	r0, #1
 800997a:	d103      	bne.n	8009984 <_printf_common+0xac>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	3501      	adds	r5, #1
 8009986:	e7c6      	b.n	8009916 <_printf_common+0x3e>
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	2030      	movs	r0, #48	; 0x30
 800998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009992:	4422      	add	r2, r4
 8009994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800999c:	3302      	adds	r3, #2
 800999e:	e7c7      	b.n	8009930 <_printf_common+0x58>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4622      	mov	r2, r4
 80099a4:	4649      	mov	r1, r9
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa4>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d9      	b.n	8009966 <_printf_common+0x8e>
	...

080099b4 <_printf_i>:
 80099b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	7e0f      	ldrb	r7, [r1, #24]
 80099ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099bc:	2f78      	cmp	r7, #120	; 0x78
 80099be:	4691      	mov	r9, r2
 80099c0:	4680      	mov	r8, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	469a      	mov	sl, r3
 80099c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ca:	d807      	bhi.n	80099dc <_printf_i+0x28>
 80099cc:	2f62      	cmp	r7, #98	; 0x62
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x32>
 80099d0:	2f00      	cmp	r7, #0
 80099d2:	f000 80d8 	beq.w	8009b86 <_printf_i+0x1d2>
 80099d6:	2f58      	cmp	r7, #88	; 0x58
 80099d8:	f000 80a3 	beq.w	8009b22 <_printf_i+0x16e>
 80099dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e4:	e03a      	b.n	8009a5c <_printf_i+0xa8>
 80099e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ea:	2b15      	cmp	r3, #21
 80099ec:	d8f6      	bhi.n	80099dc <_printf_i+0x28>
 80099ee:	a101      	add	r1, pc, #4	; (adr r1, 80099f4 <_printf_i+0x40>)
 80099f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	080099dd 	.word	0x080099dd
 8009a00:	080099dd 	.word	0x080099dd
 8009a04:	080099dd 	.word	0x080099dd
 8009a08:	080099dd 	.word	0x080099dd
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	08009b6d 	.word	0x08009b6d
 8009a24:	08009a91 	.word	0x08009a91
 8009a28:	08009b4f 	.word	0x08009b4f
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	08009b8f 	.word	0x08009b8f
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	08009b57 	.word	0x08009b57
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	602a      	str	r2, [r5, #0]
 8009a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0a3      	b.n	8009ba8 <_printf_i+0x1f4>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	6829      	ldr	r1, [r5, #0]
 8009a64:	0606      	lsls	r6, r0, #24
 8009a66:	f101 0304 	add.w	r3, r1, #4
 8009a6a:	d50a      	bpl.n	8009a82 <_printf_i+0xce>
 8009a6c:	680e      	ldr	r6, [r1, #0]
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	2e00      	cmp	r6, #0
 8009a72:	da03      	bge.n	8009a7c <_printf_i+0xc8>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	4276      	negs	r6, r6
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	485e      	ldr	r0, [pc, #376]	; (8009bf8 <_printf_i+0x244>)
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e019      	b.n	8009ab6 <_printf_i+0x102>
 8009a82:	680e      	ldr	r6, [r1, #0]
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a8a:	bf18      	it	ne
 8009a8c:	b236      	sxthne	r6, r6
 8009a8e:	e7ef      	b.n	8009a70 <_printf_i+0xbc>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	1d19      	adds	r1, r3, #4
 8009a96:	6029      	str	r1, [r5, #0]
 8009a98:	0601      	lsls	r1, r0, #24
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_i+0xec>
 8009a9c:	681e      	ldr	r6, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <_printf_i+0xf2>
 8009aa0:	0646      	lsls	r6, r0, #25
 8009aa2:	d5fb      	bpl.n	8009a9c <_printf_i+0xe8>
 8009aa4:	881e      	ldrh	r6, [r3, #0]
 8009aa6:	4854      	ldr	r0, [pc, #336]	; (8009bf8 <_printf_i+0x244>)
 8009aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009aaa:	bf0c      	ite	eq
 8009aac:	2308      	moveq	r3, #8
 8009aae:	230a      	movne	r3, #10
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ab6:	6865      	ldr	r5, [r4, #4]
 8009ab8:	60a5      	str	r5, [r4, #8]
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	bfa2      	ittt	ge
 8009abe:	6821      	ldrge	r1, [r4, #0]
 8009ac0:	f021 0104 	bicge.w	r1, r1, #4
 8009ac4:	6021      	strge	r1, [r4, #0]
 8009ac6:	b90e      	cbnz	r6, 8009acc <_printf_i+0x118>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	d04d      	beq.n	8009b68 <_printf_i+0x1b4>
 8009acc:	4615      	mov	r5, r2
 8009ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ad6:	5dc7      	ldrb	r7, [r0, r7]
 8009ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009adc:	4637      	mov	r7, r6
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	460e      	mov	r6, r1
 8009ae2:	d9f4      	bls.n	8009ace <_printf_i+0x11a>
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d10b      	bne.n	8009b00 <_printf_i+0x14c>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07de      	lsls	r6, r3, #31
 8009aec:	d508      	bpl.n	8009b00 <_printf_i+0x14c>
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	4299      	cmp	r1, r3
 8009af4:	bfde      	ittt	le
 8009af6:	2330      	movle	r3, #48	; 0x30
 8009af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b00:	1b52      	subs	r2, r2, r5
 8009b02:	6122      	str	r2, [r4, #16]
 8009b04:	f8cd a000 	str.w	sl, [sp]
 8009b08:	464b      	mov	r3, r9
 8009b0a:	aa03      	add	r2, sp, #12
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff fee2 	bl	80098d8 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d14c      	bne.n	8009bb2 <_printf_i+0x1fe>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	b004      	add	sp, #16
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	4835      	ldr	r0, [pc, #212]	; (8009bf8 <_printf_i+0x244>)
 8009b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b28:	6829      	ldr	r1, [r5, #0]
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b30:	6029      	str	r1, [r5, #0]
 8009b32:	061d      	lsls	r5, r3, #24
 8009b34:	d514      	bpl.n	8009b60 <_printf_i+0x1ac>
 8009b36:	07df      	lsls	r7, r3, #31
 8009b38:	bf44      	itt	mi
 8009b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b3e:	6023      	strmi	r3, [r4, #0]
 8009b40:	b91e      	cbnz	r6, 8009b4a <_printf_i+0x196>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f023 0320 	bic.w	r3, r3, #32
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e7b0      	b.n	8009ab0 <_printf_i+0xfc>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	f043 0320 	orr.w	r3, r3, #32
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2378      	movs	r3, #120	; 0x78
 8009b58:	4828      	ldr	r0, [pc, #160]	; (8009bfc <_printf_i+0x248>)
 8009b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b5e:	e7e3      	b.n	8009b28 <_printf_i+0x174>
 8009b60:	0659      	lsls	r1, r3, #25
 8009b62:	bf48      	it	mi
 8009b64:	b2b6      	uxthmi	r6, r6
 8009b66:	e7e6      	b.n	8009b36 <_printf_i+0x182>
 8009b68:	4615      	mov	r5, r2
 8009b6a:	e7bb      	b.n	8009ae4 <_printf_i+0x130>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	6826      	ldr	r6, [r4, #0]
 8009b70:	6961      	ldr	r1, [r4, #20]
 8009b72:	1d18      	adds	r0, r3, #4
 8009b74:	6028      	str	r0, [r5, #0]
 8009b76:	0635      	lsls	r5, r6, #24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0x1cc>
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0x1d2>
 8009b80:	0670      	lsls	r0, r6, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0x1c8>
 8009b84:	8019      	strh	r1, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	4615      	mov	r5, r2
 8009b8c:	e7ba      	b.n	8009b04 <_printf_i+0x150>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	681d      	ldr	r5, [r3, #0]
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fb38 	bl	8000210 <memchr>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_printf_i+0x1f2>
 8009ba2:	1b40      	subs	r0, r0, r5
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e7a8      	b.n	8009b04 <_printf_i+0x150>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0ab      	beq.n	8009b18 <_printf_i+0x164>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d413      	bmi.n	8009bee <_printf_i+0x23a>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e7a4      	b.n	8009b1c <_printf_i+0x168>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d09b      	beq.n	8009b18 <_printf_i+0x164>
 8009be0:	3501      	adds	r5, #1
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dcf2      	bgt.n	8009bd2 <_printf_i+0x21e>
 8009bec:	e7eb      	b.n	8009bc6 <_printf_i+0x212>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	f104 0619 	add.w	r6, r4, #25
 8009bf4:	e7f5      	b.n	8009be2 <_printf_i+0x22e>
 8009bf6:	bf00      	nop
 8009bf8:	08009ea5 	.word	0x08009ea5
 8009bfc:	08009eb6 	.word	0x08009eb6

08009c00 <__sread>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	460c      	mov	r4, r1
 8009c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c08:	f000 f894 	bl	8009d34 <_read_r>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	bfab      	itete	ge
 8009c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c12:	89a3      	ldrhlt	r3, [r4, #12]
 8009c14:	181b      	addge	r3, r3, r0
 8009c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c1a:	bfac      	ite	ge
 8009c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c1e:	81a3      	strhlt	r3, [r4, #12]
 8009c20:	bd10      	pop	{r4, pc}

08009c22 <__swrite>:
 8009c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c26:	461f      	mov	r7, r3
 8009c28:	898b      	ldrh	r3, [r1, #12]
 8009c2a:	05db      	lsls	r3, r3, #23
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4616      	mov	r6, r2
 8009c32:	d505      	bpl.n	8009c40 <__swrite+0x1e>
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	2302      	movs	r3, #2
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f000 f868 	bl	8009d10 <_lseek_r>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	4628      	mov	r0, r5
 8009c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	f000 b817 	b.w	8009c88 <_write_r>

08009c5a <__sseek>:
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c62:	f000 f855 	bl	8009d10 <_lseek_r>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	bf15      	itete	ne
 8009c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c76:	81a3      	strheq	r3, [r4, #12]
 8009c78:	bf18      	it	ne
 8009c7a:	81a3      	strhne	r3, [r4, #12]
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <__sclose>:
 8009c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c82:	f000 b813 	b.w	8009cac <_close_r>
	...

08009c88 <_write_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d07      	ldr	r5, [pc, #28]	; (8009ca8 <_write_r+0x20>)
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	602a      	str	r2, [r5, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7f7 f8aa 	bl	8000df0 <_write>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_write_r+0x1e>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_write_r+0x1e>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	200004b4 	.word	0x200004b4

08009cac <_close_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	; (8009cc8 <_close_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f8 fd8f 	bl	80027da <_close>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_close_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_close_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	200004b4 	.word	0x200004b4

08009ccc <_fstat_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	; (8009cec <_fstat_r+0x20>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	f7f8 fd8a 	bl	80027f2 <_fstat>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d102      	bne.n	8009ce8 <_fstat_r+0x1c>
 8009ce2:	682b      	ldr	r3, [r5, #0]
 8009ce4:	b103      	cbz	r3, 8009ce8 <_fstat_r+0x1c>
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	bf00      	nop
 8009cec:	200004b4 	.word	0x200004b4

08009cf0 <_isatty_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d06      	ldr	r5, [pc, #24]	; (8009d0c <_isatty_r+0x1c>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f8 fd89 	bl	8002812 <_isatty>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_isatty_r+0x1a>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_isatty_r+0x1a>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	200004b4 	.word	0x200004b4

08009d10 <_lseek_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d07      	ldr	r5, [pc, #28]	; (8009d30 <_lseek_r+0x20>)
 8009d14:	4604      	mov	r4, r0
 8009d16:	4608      	mov	r0, r1
 8009d18:	4611      	mov	r1, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7f8 fd82 	bl	8002828 <_lseek>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_lseek_r+0x1e>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_lseek_r+0x1e>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200004b4 	.word	0x200004b4

08009d34 <_read_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_read_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f8 fd2c 	bl	80027a0 <_read>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_read_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_read_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	200004b4 	.word	0x200004b4

08009d58 <_init>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr

08009d64 <_fini>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	bf00      	nop
 8009d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	469e      	mov	lr, r3
 8009d6e:	4770      	bx	lr
