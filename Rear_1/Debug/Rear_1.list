
Rear_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000080  0800a074  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800a074  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016483  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5c  00000000  00000000  00036533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244d7  00000000  00000000  0003b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175d8  00000000  00000000  0005fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9811  00000000  00000000  000772ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150b00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  00150b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e74 	.word	0x08009e74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009e74 	.word	0x08009e74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <_write>:
};

union Speedtype speed0;
union Speedtype speed1;

int _write(int file, char* p, int len) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	2310      	movs	r3, #16
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <_write+0x24>)
 8000e06:	f007 fa20 	bl	800824a <HAL_UART_Transmit>
	return len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200002c8 	.word	0x200002c8

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 fddc 	bl	80029d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  dis = calloc(nof, 16 * nof);
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <main+0x74>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <main+0x74>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4610      	mov	r0, r2
 8000e30:	f007 ffcc 	bl	8008dcc <calloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <main+0x78>)
 8000e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f82e 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 fb38 	bl	80014b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 fb0c 	bl	8001460 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e48:	f000 f8d2 	bl	8000ff0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e4c:	f000 f9e2 	bl	8001214 <MX_TIM3_Init>
  MX_CAN1_Init();
 8000e50:	f000 f896 	bl	8000f80 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000e54:	f000 fa2c 	bl	80012b0 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000e58:	f000 facc 	bl	80013f4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000e5c:	f000 f8f6 	bl	800104c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e60:	f000 f984 	bl	800116c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e64:	f000 fa72 	bl	800134c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  setLeftMotorCCR(0, DIR_FORWARD);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f001 f8b4 	bl	8001fd8 <setLeftMotorCCR>
  setRightMotorCCR(0, DIR_FORWARD);
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f001 f8da 	bl	800202c <setRightMotorCCR>

  if (!(ChangeAddresses())) {
 8000e78:	f000 fe32 	bl	8001ae0 <ChangeAddresses>
  }
  else {
	  //HAL_UART_Transmit(&huart2, succ, 6, 10);
  }

  HAL_TIM_Base_Start_IT(&htim3);
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <main+0x7c>)
 8000e7e:	f006 f9ab 	bl	80071d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <main+0x80>)
 8000e84:	f006 f9a8 	bl	80071d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <main+0x70>
 8000e8a:	bf00      	nop
 8000e8c:	20000002 	.word	0x20000002
 8000e90:	2000030c 	.word	0x2000030c
 8000e94:	200001a8 	.word	0x200001a8
 8000e98:	200001f0 	.word	0x200001f0

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b094      	sub	sp, #80	; 0x50
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f007 ffc0 	bl	8008e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <SystemClock_Config+0xdc>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a2b      	ldr	r2, [pc, #172]	; (8000f78 <SystemClock_Config+0xdc>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <SystemClock_Config+0xdc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <SystemClock_Config+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <SystemClock_Config+0xe0>)
 8000ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <SystemClock_Config+0xe0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f02:	2302      	movs	r3, #2
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f10:	23b4      	movs	r3, #180	; 0xb4
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fe69 	bl	8006bfc <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f30:	f001 f99e 	bl	8002270 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f34:	f005 fac8 	bl	80064c8 <HAL_PWREx_EnableOverDrive>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f3e:	f001 f997 	bl	8002270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2105      	movs	r1, #5
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fb01 	bl	8006568 <HAL_RCC_ClockConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f6c:	f001 f980 	bl	8002270 <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <MX_CAN1_Init+0x6c>)
 8000f88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 50;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000f8c:	2232      	movs	r2, #50	; 0x32
 8000f8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000f9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fa2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000faa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_CAN1_Init+0x68>)
 8000fd2:	f001 fd97 	bl	8002b04 <HAL_CAN_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f001 f948 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Filter_Init();
 8000fe0:	f000 fe6e 	bl	8001cc0 <CAN_Filter_Init>
  /* USER CODE END CAN1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	40006400 	.word	0x40006400

08000ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2C1_Init+0x50>)
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <MX_I2C1_Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_I2C1_Init+0x50>)
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_I2C1_Init+0x58>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_I2C1_Init+0x50>)
 800100e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_I2C1_Init+0x50>)
 800102e:	f002 fef1 	bl	8003e14 <HAL_I2C_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001038:	f001 f91a 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000c4 	.word	0x200000c4
 8001044:	40005400 	.word	0x40005400
 8001048:	00061a80 	.word	0x00061a80

0800104c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b092      	sub	sp, #72	; 0x48
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f007 feda 	bl	8008e30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_TIM1_Init+0x118>)
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <MX_TIM1_Init+0x11c>)
 8001080:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_TIM1_Init+0x118>)
 8001084:	2209      	movs	r2, #9
 8001086:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_TIM1_Init+0x118>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9000-1;
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_TIM1_Init+0x118>)
 8001090:	f242 3227 	movw	r2, #8999	; 0x2327
 8001094:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <MX_TIM1_Init+0x118>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <MX_TIM1_Init+0x118>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <MX_TIM1_Init+0x118>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <MX_TIM1_Init+0x118>)
 80010aa:	f006 f905 	bl	80072b8 <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010b4:	f001 f8dc 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c4:	4619      	mov	r1, r3
 80010c6:	4827      	ldr	r0, [pc, #156]	; (8001164 <MX_TIM1_Init+0x118>)
 80010c8:	f006 ff90 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010d2:	f001 f8cd 	bl	8002270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4500-1;
 80010da:	f241 1393 	movw	r3, #4499	; 0x1193
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4819      	ldr	r0, [pc, #100]	; (8001164 <MX_TIM1_Init+0x118>)
 80010fe:	f006 fad9 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001108:	f001 f8b2 	bl	8002270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001110:	2204      	movs	r2, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM1_Init+0x118>)
 8001116:	f006 facd 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001120:	f001 f8a6 	bl	8002270 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM1_Init+0x118>)
 8001148:	f006 ffcc 	bl	80080e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001152:	f001 f88d 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM1_Init+0x118>)
 8001158:	f001 fa88 	bl	800266c <HAL_TIM_MspPostInit>

}
 800115c:	bf00      	nop
 800115e:	3748      	adds	r7, #72	; 0x48
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000118 	.word	0x20000118
 8001168:	40010000 	.word	0x40010000

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f007 fe58 	bl	8008e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_TIM2_Init+0xa4>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_TIM2_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_TIM2_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_TIM2_Init+0xa4>)
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_TIM2_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_TIM2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b0:	2303      	movs	r3, #3
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM2_Init+0xa4>)
 80011dc:	f006 f8bb 	bl	8007356 <HAL_TIM_Encoder_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011e6:	f001 f843 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM2_Init+0xa4>)
 80011f8:	f006 fef8 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001202:	f001 f835 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000160 	.word	0x20000160

08001214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_TIM3_Init+0x98>)
 8001234:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001238:	22c7      	movs	r2, #199	; 0xc7
 800123a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM3_Init+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16650-1;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001244:	f244 1209 	movw	r2, #16649	; 0x4109
 8001248:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_TIM3_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001258:	f005 ff6e 	bl	8007138 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001262:	f001 f805 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001274:	f006 fae0 	bl	8007838 <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 fff7 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_TIM3_Init+0x94>)
 8001290:	f006 feac 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800129a:	f000 ffe9 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001a8 	.word	0x200001a8
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM4_Init+0x94>)
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <MX_TIM4_Init+0x98>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM4_Init+0x94>)
 80012d4:	22c7      	movs	r2, #199	; 0xc7
 80012d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM4_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 18450-1;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_TIM4_Init+0x94>)
 80012e0:	f644 0211 	movw	r2, #18449	; 0x4811
 80012e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_TIM4_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM4_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <MX_TIM4_Init+0x94>)
 80012f4:	f005 ff20 	bl	8007138 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 ffb7 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM4_Init+0x94>)
 8001310:	f006 fa92 	bl	8007838 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 ffa9 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM4_Init+0x94>)
 800132c:	f006 fe5e 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001336:	f000 ff9b 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001f0 	.word	0x200001f0
 8001348:	40000800 	.word	0x40000800

0800134c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f007 fd68 	bl	8008e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_TIM5_Init+0xa0>)
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MX_TIM5_Init+0xa4>)
 800136c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM5_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM5_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM5_Init+0xa0>)
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM5_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM5_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138e:	2303      	movs	r3, #3
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM5_Init+0xa0>)
 80013ba:	f005 ffcc 	bl	8007356 <HAL_TIM_Encoder_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 ff54 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM5_Init+0xa0>)
 80013d6:	f006 fe09 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 ff46 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000238 	.word	0x20000238
 80013f0:	40000c00 	.word	0x40000c00

080013f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_TIM7_Init+0x64>)
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <MX_TIM7_Init+0x68>)
 8001406:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_TIM7_Init+0x64>)
 800140a:	2263      	movs	r2, #99	; 0x63
 800140c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_TIM7_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9900-1;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_TIM7_Init+0x64>)
 8001416:	f242 62ab 	movw	r2, #9899	; 0x26ab
 800141a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_TIM7_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_TIM7_Init+0x64>)
 8001424:	f005 fe88 	bl	8007138 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800142e:	f000 ff1f 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_TIM7_Init+0x64>)
 8001440:	f006 fdd4 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800144a:	f000 ff11 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000280 	.word	0x20000280
 800145c:	40001400 	.word	0x40001400

08001460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_USART2_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART2_UART_Init+0x4c>)
 8001498:	f006 fe8a 	bl	80081b0 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f000 fee5 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002c8 	.word	0x200002c8
 80014b0:	40004400 	.word	0x40004400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <MX_GPIO_Init+0x118>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <MX_GPIO_Init+0x118>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <MX_GPIO_Init+0x118>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <MX_GPIO_Init+0x118>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a37      	ldr	r2, [pc, #220]	; (80015cc <MX_GPIO_Init+0x118>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <MX_GPIO_Init+0x118>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_GPIO_Init+0x118>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a30      	ldr	r2, [pc, #192]	; (80015cc <MX_GPIO_Init+0x118>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <MX_GPIO_Init+0x118>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_GPIO_Init+0x118>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a29      	ldr	r2, [pc, #164]	; (80015cc <MX_GPIO_Init+0x118>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_GPIO_Init+0x118>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_GPIO_Init+0x118>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <MX_GPIO_Init+0x118>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_GPIO_Init+0x118>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001556:	2200      	movs	r2, #0
 8001558:	f643 410f 	movw	r1, #15375	; 0x3c0f
 800155c:	481c      	ldr	r0, [pc, #112]	; (80015d0 <MX_GPIO_Init+0x11c>)
 800155e:	f002 fc3f 	bl	8003de0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2104      	movs	r1, #4
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <MX_GPIO_Init+0x120>)
 8001568:	f002 fc3a 	bl	8003de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x11c>)
 8001586:	f002 fa97 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800158a:	f641 430f 	movw	r3, #7183	; 0x1c0f
 800158e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001590:	2311      	movs	r3, #17
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0x11c>)
 80015a4:	f002 fa88 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a8:	2304      	movs	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015ac:	2311      	movs	r3, #17
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_GPIO_Init+0x120>)
 80015c0:	f002 fa7a 	bl	8003ab8 <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e2:	4818      	ldr	r0, [pc, #96]	; (8001644 <TurnOffAll+0x6c>)
 80015e4:	f002 fbfc 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <TurnOffAll+0x6c>)
 80015f0:	f002 fbf6 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <TurnOffAll+0x6c>)
 80015fc:	f002 fbf0 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2104      	movs	r1, #4
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <TurnOffAll+0x70>)
 8001606:	f002 fbeb 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <TurnOffAll+0x6c>)
 8001612:	f002 fbe5 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2104      	movs	r1, #4
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <TurnOffAll+0x6c>)
 800161c:	f002 fbe0 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2108      	movs	r1, #8
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <TurnOffAll+0x6c>)
 8001626:	f002 fbdb 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2101      	movs	r1, #1
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <TurnOffAll+0x6c>)
 8001630:	f002 fbd6 	bl	8003de0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2102      	movs	r1, #2
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TurnOffAll+0x6c>)
 800163a:	f002 fbd1 	bl	8003de0 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00

0800164c <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
	uint8_t boot[8] = {66, 79, 79, 84, 48, 13, 10, 0};
 800165a:	4aca      	ldr	r2, [pc, #808]	; (8001984 <TurnOnAt+0x338>)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001664:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (i) {
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b08      	cmp	r3, #8
 800166c:	f200 822c 	bhi.w	8001ac8 <TurnOnAt+0x47c>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <TurnOnAt+0x2c>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	0800169d 	.word	0x0800169d
 800167c:	08001711 	.word	0x08001711
 8001680:	08001789 	.word	0x08001789
 8001684:	08001801 	.word	0x08001801
 8001688:	08001873 	.word	0x08001873
 800168c:	080018eb 	.word	0x080018eb
 8001690:	0800195d 	.word	0x0800195d
 8001694:	080019e5 	.word	0x080019e5
 8001698:	08001a57 	.word	0x08001a57
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a2:	48b9      	ldr	r0, [pc, #740]	; (8001988 <TurnOnAt+0x33c>)
 80016a4:	f002 fb9c 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80016a8:	2005      	movs	r0, #5
 80016aa:	f001 fa07 	bl	8002abc <HAL_Delay>
		VL53L1X_BootState(dev, &bootState);
 80016ae:	4bb7      	ldr	r3, [pc, #732]	; (800198c <TurnOnAt+0x340>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f107 0217 	add.w	r2, r7, #23
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 fa6e 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 80016be:	e023      	b.n	8001708 <TurnOnAt+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	48b0      	ldr	r0, [pc, #704]	; (8001988 <TurnOnAt+0x33c>)
 80016c8:	f002 fb8a 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80016cc:	200a      	movs	r0, #10
 80016ce:	f001 f9f5 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d8:	48ab      	ldr	r0, [pc, #684]	; (8001988 <TurnOnAt+0x33c>)
 80016da:	f002 fb81 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80016de:	200a      	movs	r0, #10
 80016e0:	f001 f9ec 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80016e4:	4ba9      	ldr	r3, [pc, #676]	; (800198c <TurnOnAt+0x340>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	f107 0217 	add.w	r2, r7, #23
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f007 fa53 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80016f4:	f107 010c 	add.w	r1, r7, #12
 80016f8:	230a      	movs	r3, #10
 80016fa:	2208      	movs	r2, #8
 80016fc:	48a4      	ldr	r0, [pc, #656]	; (8001990 <TurnOnAt+0x344>)
 80016fe:	f006 fda4 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 8001702:	2002      	movs	r0, #2
 8001704:	f001 f9da 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0d8      	beq.n	80016c0 <TurnOnAt+0x74>
		}
		break;
 800170e:	e1db      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001716:	489c      	ldr	r0, [pc, #624]	; (8001988 <TurnOnAt+0x33c>)
 8001718:	f002 fb62 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800171c:	2005      	movs	r0, #5
 800171e:	f001 f9cd 	bl	8002abc <HAL_Delay>
		boot[4] = 49;
 8001722:	2331      	movs	r3, #49	; 0x31
 8001724:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001726:	4b99      	ldr	r3, [pc, #612]	; (800198c <TurnOnAt+0x340>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f107 0217 	add.w	r2, r7, #23
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f007 fa32 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001736:	e023      	b.n	8001780 <TurnOnAt+0x134>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173e:	4892      	ldr	r0, [pc, #584]	; (8001988 <TurnOnAt+0x33c>)
 8001740:	f002 fb4e 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001744:	200a      	movs	r0, #10
 8001746:	f001 f9b9 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001750:	488d      	ldr	r0, [pc, #564]	; (8001988 <TurnOnAt+0x33c>)
 8001752:	f002 fb45 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f001 f9b0 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 800175c:	4b8b      	ldr	r3, [pc, #556]	; (800198c <TurnOnAt+0x340>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	f107 0217 	add.w	r2, r7, #23
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f007 fa17 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 800176c:	f107 010c 	add.w	r1, r7, #12
 8001770:	230a      	movs	r3, #10
 8001772:	2208      	movs	r2, #8
 8001774:	4886      	ldr	r0, [pc, #536]	; (8001990 <TurnOnAt+0x344>)
 8001776:	f006 fd68 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 800177a:	2002      	movs	r0, #2
 800177c:	f001 f99e 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0d8      	beq.n	8001738 <TurnOnAt+0xec>
		}
		break;
 8001786:	e19f      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	487e      	ldr	r0, [pc, #504]	; (8001988 <TurnOnAt+0x33c>)
 8001790:	f002 fb26 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001794:	2005      	movs	r0, #5
 8001796:	f001 f991 	bl	8002abc <HAL_Delay>
		boot[4] = 50;
 800179a:	2332      	movs	r3, #50	; 0x32
 800179c:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 800179e:	4b7b      	ldr	r3, [pc, #492]	; (800198c <TurnOnAt+0x340>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f107 0217 	add.w	r2, r7, #23
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 f9f6 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 80017ae:	e023      	b.n	80017f8 <TurnOnAt+0x1ac>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b6:	4874      	ldr	r0, [pc, #464]	; (8001988 <TurnOnAt+0x33c>)
 80017b8:	f002 fb12 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80017bc:	200a      	movs	r0, #10
 80017be:	f001 f97d 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c8:	486f      	ldr	r0, [pc, #444]	; (8001988 <TurnOnAt+0x33c>)
 80017ca:	f002 fb09 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f001 f974 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80017d4:	4b6d      	ldr	r3, [pc, #436]	; (800198c <TurnOnAt+0x340>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f107 0217 	add.w	r2, r7, #23
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f007 f9db 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80017e4:	f107 010c 	add.w	r1, r7, #12
 80017e8:	230a      	movs	r3, #10
 80017ea:	2208      	movs	r2, #8
 80017ec:	4868      	ldr	r0, [pc, #416]	; (8001990 <TurnOnAt+0x344>)
 80017ee:	f006 fd2c 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f001 f962 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0d8      	beq.n	80017b0 <TurnOnAt+0x164>
		}
		break;
 80017fe:	e163      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2104      	movs	r1, #4
 8001804:	4863      	ldr	r0, [pc, #396]	; (8001994 <TurnOnAt+0x348>)
 8001806:	f002 faeb 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800180a:	2005      	movs	r0, #5
 800180c:	f001 f956 	bl	8002abc <HAL_Delay>
		boot[4] = 51;
 8001810:	2333      	movs	r3, #51	; 0x33
 8001812:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001814:	4b5d      	ldr	r3, [pc, #372]	; (800198c <TurnOnAt+0x340>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	f107 0217 	add.w	r2, r7, #23
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f007 f9bb 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001824:	e021      	b.n	800186a <TurnOnAt+0x21e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2104      	movs	r1, #4
 800182a:	485a      	ldr	r0, [pc, #360]	; (8001994 <TurnOnAt+0x348>)
 800182c:	f002 fad8 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001830:	200a      	movs	r0, #10
 8001832:	f001 f943 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2104      	movs	r1, #4
 800183a:	4856      	ldr	r0, [pc, #344]	; (8001994 <TurnOnAt+0x348>)
 800183c:	f002 fad0 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001840:	200a      	movs	r0, #10
 8001842:	f001 f93b 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <TurnOnAt+0x340>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f107 0217 	add.w	r2, r7, #23
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f007 f9a2 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001856:	f107 010c 	add.w	r1, r7, #12
 800185a:	230a      	movs	r3, #10
 800185c:	2208      	movs	r2, #8
 800185e:	484c      	ldr	r0, [pc, #304]	; (8001990 <TurnOnAt+0x344>)
 8001860:	f006 fcf3 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 8001864:	2002      	movs	r0, #2
 8001866:	f001 f929 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0da      	beq.n	8001826 <TurnOnAt+0x1da>
		}
		break;
 8001870:	e12a      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001878:	4843      	ldr	r0, [pc, #268]	; (8001988 <TurnOnAt+0x33c>)
 800187a:	f002 fab1 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800187e:	2005      	movs	r0, #5
 8001880:	f001 f91c 	bl	8002abc <HAL_Delay>
		boot[4] = 52;
 8001884:	2334      	movs	r3, #52	; 0x34
 8001886:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <TurnOnAt+0x340>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f107 0217 	add.w	r2, r7, #23
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f007 f981 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001898:	e023      	b.n	80018e2 <TurnOnAt+0x296>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	4839      	ldr	r0, [pc, #228]	; (8001988 <TurnOnAt+0x33c>)
 80018a2:	f002 fa9d 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f001 f908 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	4835      	ldr	r0, [pc, #212]	; (8001988 <TurnOnAt+0x33c>)
 80018b4:	f002 fa94 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f001 f8ff 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <TurnOnAt+0x340>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	f107 0217 	add.w	r2, r7, #23
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f007 f966 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80018ce:	f107 010c 	add.w	r1, r7, #12
 80018d2:	230a      	movs	r3, #10
 80018d4:	2208      	movs	r2, #8
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <TurnOnAt+0x344>)
 80018d8:	f006 fcb7 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 80018dc:	2002      	movs	r0, #2
 80018de:	f001 f8ed 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0d8      	beq.n	800189a <TurnOnAt+0x24e>
		}
		break;
 80018e8:	e0ee      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2104      	movs	r1, #4
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <TurnOnAt+0x33c>)
 80018f0:	f002 fa76 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018f4:	2005      	movs	r0, #5
 80018f6:	f001 f8e1 	bl	8002abc <HAL_Delay>
		boot[4] = 53;
 80018fa:	2335      	movs	r3, #53	; 0x35
 80018fc:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <TurnOnAt+0x340>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	f107 0217 	add.w	r2, r7, #23
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f007 f946 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 800190e:	e021      	b.n	8001954 <TurnOnAt+0x308>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2104      	movs	r1, #4
 8001914:	481c      	ldr	r0, [pc, #112]	; (8001988 <TurnOnAt+0x33c>)
 8001916:	f002 fa63 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800191a:	200a      	movs	r0, #10
 800191c:	f001 f8ce 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2104      	movs	r1, #4
 8001924:	4818      	ldr	r0, [pc, #96]	; (8001988 <TurnOnAt+0x33c>)
 8001926:	f002 fa5b 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800192a:	200a      	movs	r0, #10
 800192c:	f001 f8c6 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <TurnOnAt+0x340>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	f107 0217 	add.w	r2, r7, #23
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f007 f92d 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001940:	f107 010c 	add.w	r1, r7, #12
 8001944:	230a      	movs	r3, #10
 8001946:	2208      	movs	r2, #8
 8001948:	4811      	ldr	r0, [pc, #68]	; (8001990 <TurnOnAt+0x344>)
 800194a:	f006 fc7e 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 800194e:	2002      	movs	r0, #2
 8001950:	f001 f8b4 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0da      	beq.n	8001910 <TurnOnAt+0x2c4>
		}
		break;
 800195a:	e0b5      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2108      	movs	r1, #8
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <TurnOnAt+0x33c>)
 8001962:	f002 fa3d 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001966:	2005      	movs	r0, #5
 8001968:	f001 f8a8 	bl	8002abc <HAL_Delay>
		boot[4] = 54;
 800196c:	2336      	movs	r3, #54	; 0x36
 800196e:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <TurnOnAt+0x340>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	f107 0217 	add.w	r2, r7, #23
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f007 f90d 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001980:	e02c      	b.n	80019dc <TurnOnAt+0x390>
 8001982:	bf00      	nop
 8001984:	08009e8c 	.word	0x08009e8c
 8001988:	40020800 	.word	0x40020800
 800198c:	20000000 	.word	0x20000000
 8001990:	200002c8 	.word	0x200002c8
 8001994:	40020c00 	.word	0x40020c00
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2108      	movs	r1, #8
 800199c:	484d      	ldr	r0, [pc, #308]	; (8001ad4 <TurnOnAt+0x488>)
 800199e:	f002 fa1f 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80019a2:	200a      	movs	r0, #10
 80019a4:	f001 f88a 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2108      	movs	r1, #8
 80019ac:	4849      	ldr	r0, [pc, #292]	; (8001ad4 <TurnOnAt+0x488>)
 80019ae:	f002 fa17 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80019b2:	200a      	movs	r0, #10
 80019b4:	f001 f882 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80019b8:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <TurnOnAt+0x48c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	f107 0217 	add.w	r2, r7, #23
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 f8e9 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80019c8:	f107 010c 	add.w	r1, r7, #12
 80019cc:	230a      	movs	r3, #10
 80019ce:	2208      	movs	r2, #8
 80019d0:	4842      	ldr	r0, [pc, #264]	; (8001adc <TurnOnAt+0x490>)
 80019d2:	f006 fc3a 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f001 f870 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0da      	beq.n	8001998 <TurnOnAt+0x34c>
		}
		break;
 80019e2:	e071      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <TurnOnAt+0x488>)
 80019ea:	f002 f9f9 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80019ee:	2005      	movs	r0, #5
 80019f0:	f001 f864 	bl	8002abc <HAL_Delay>
		boot[4] = 55;
 80019f4:	2337      	movs	r3, #55	; 0x37
 80019f6:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <TurnOnAt+0x48c>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	f107 0217 	add.w	r2, r7, #23
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 f8c9 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001a08:	e021      	b.n	8001a4e <TurnOnAt+0x402>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4831      	ldr	r0, [pc, #196]	; (8001ad4 <TurnOnAt+0x488>)
 8001a10:	f002 f9e6 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f001 f851 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	482d      	ldr	r0, [pc, #180]	; (8001ad4 <TurnOnAt+0x488>)
 8001a20:	f002 f9de 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001a24:	200a      	movs	r0, #10
 8001a26:	f001 f849 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <TurnOnAt+0x48c>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	f107 0217 	add.w	r2, r7, #23
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f007 f8b0 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001a3a:	f107 010c 	add.w	r1, r7, #12
 8001a3e:	230a      	movs	r3, #10
 8001a40:	2208      	movs	r2, #8
 8001a42:	4826      	ldr	r0, [pc, #152]	; (8001adc <TurnOnAt+0x490>)
 8001a44:	f006 fc01 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f001 f837 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0da      	beq.n	8001a0a <TurnOnAt+0x3be>
		}
		break;
 8001a54:	e038      	b.n	8001ac8 <TurnOnAt+0x47c>
	case 8:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2102      	movs	r1, #2
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <TurnOnAt+0x488>)
 8001a5c:	f002 f9c0 	bl	8003de0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001a60:	2005      	movs	r0, #5
 8001a62:	f001 f82b 	bl	8002abc <HAL_Delay>
		boot[4] = 56;
 8001a66:	2338      	movs	r3, #56	; 0x38
 8001a68:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <TurnOnAt+0x48c>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f107 0217 	add.w	r2, r7, #23
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 f890 	bl	8008b9a <VL53L1X_BootState>
		while(bootState==0){
 8001a7a:	e021      	b.n	8001ac0 <TurnOnAt+0x474>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <TurnOnAt+0x488>)
 8001a82:	f002 f9ad 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f001 f818 	bl	8002abc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4810      	ldr	r0, [pc, #64]	; (8001ad4 <TurnOnAt+0x488>)
 8001a92:	f002 f9a5 	bl	8003de0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001a96:	2064      	movs	r0, #100	; 0x64
 8001a98:	f001 f810 	bl	8002abc <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <TurnOnAt+0x48c>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	f107 0217 	add.w	r2, r7, #23
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 f877 	bl	8008b9a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001aac:	f107 010c 	add.w	r1, r7, #12
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <TurnOnAt+0x490>)
 8001ab6:	f006 fbc8 	bl	800824a <HAL_UART_Transmit>
			HAL_Delay(2);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f000 fffe 	bl	8002abc <HAL_Delay>
		while(bootState==0){
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0da      	beq.n	8001a7c <TurnOnAt+0x430>
		}
		break;
 8001ac6:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	200002c8 	.word	0x200002c8

08001ae0 <ChangeAddresses>:

uint16_t ChangeAddresses(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	uint8_t success = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
	TurnOffAll();
 8001aea:	f7ff fd75 	bl	80015d8 <TurnOffAll>
	HAL_Delay(10);
 8001aee:	200a      	movs	r0, #10
 8001af0:	f000 ffe4 	bl	8002abc <HAL_Delay>
	for (uint8_t i = 0; i != nof; ++i) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	71bb      	strb	r3, [r7, #6]
 8001af8:	e033      	b.n	8001b62 <ChangeAddresses+0x82>
		success *= TurnOnAt(i);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fda5 	bl	800164c <TurnOnAt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	fb12 f303 	smulbb	r3, r2, r3
 8001b0c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(5);
 8001b0e:	2005      	movs	r0, #5
 8001b10:	f000 ffd4 	bl	8002abc <HAL_Delay>
		printf("try init: %d\r\n", i);
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <ChangeAddresses+0x98>)
 8001b1a:	f007 fa3b 	bl	8008f94 <iprintf>
		VL53L1X_SensorInit(dev);
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <ChangeAddresses+0x9c>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f006 ff24 	bl	8008970 <VL53L1X_SensorInit>
		printf("try addr change: %d\r\n", i);
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4814      	ldr	r0, [pc, #80]	; (8001b80 <ChangeAddresses+0xa0>)
 8001b2e:	f007 fa31 	bl	8008f94 <iprintf>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <ChangeAddresses+0x9c>)
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	4912      	ldr	r1, [pc, #72]	; (8001b84 <ChangeAddresses+0xa4>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f006 fef8 	bl	8008934 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <ChangeAddresses+0xa4>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 ffbd 	bl	8008acc <VL53L1X_StartRanging>
		printf("done: %d\r\n", i);
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	4619      	mov	r1, r3
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <ChangeAddresses+0xa8>)
 8001b58:	f007 fa1c 	bl	8008f94 <iprintf>
	for (uint8_t i = 0; i != nof; ++i) {
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	71bb      	strb	r3, [r7, #6]
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <ChangeAddresses+0xac>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	79ba      	ldrb	r2, [r7, #6]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1c6      	bne.n	8001afa <ChangeAddresses+0x1a>
	}
	return success;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	b29b      	uxth	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08009e94 	.word	0x08009e94
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	08009ea4 	.word	0x08009ea4
 8001b84:	20000004 	.word	0x20000004
 8001b88:	08009ebc 	.word	0x08009ebc
 8001b8c:	20000002 	.word	0x20000002

08001b90 <GetAllData>:

uint8_t GetAllData(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	VL53L1X_GetDistance(devs[0], &dis[0]);
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <GetAllData+0x128>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <GetAllData+0x12c>)
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f007 f819 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[0]);
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <GetAllData+0x128>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f006 ff4b 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[1], &dis[1]);
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <GetAllData+0x128>)
 8001bb4:	785b      	ldrb	r3, [r3, #1]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <GetAllData+0x12c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f007 f809 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[1]);
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <GetAllData+0x128>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 ff3b 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[2], &dis[2]);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <GetAllData+0x128>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <GetAllData+0x12c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f006 fff9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[2]);
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <GetAllData+0x128>)
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 ff2b 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[3], &dis[3]);
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <GetAllData+0x128>)
 8001bf4:	78db      	ldrb	r3, [r3, #3]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <GetAllData+0x12c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f006 ffe9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[3]);
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <GetAllData+0x128>)
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f006 ff1b 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[4], &dis[4]);
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <GetAllData+0x128>)
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <GetAllData+0x12c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3308      	adds	r3, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f006 ffd9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[4]);
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <GetAllData+0x128>)
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f006 ff0b 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[5], &dis[5]);
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <GetAllData+0x128>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <GetAllData+0x12c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	330a      	adds	r3, #10
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f006 ffc9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[5]);
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <GetAllData+0x128>)
 8001c48:	795b      	ldrb	r3, [r3, #5]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fefb 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[6], &dis[6]);
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <GetAllData+0x128>)
 8001c54:	799b      	ldrb	r3, [r3, #6]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <GetAllData+0x12c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f006 ffb9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[6]);
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <GetAllData+0x128>)
 8001c68:	799b      	ldrb	r3, [r3, #6]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f006 feeb 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[7], &dis[7]);
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <GetAllData+0x128>)
 8001c74:	79db      	ldrb	r3, [r3, #7]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <GetAllData+0x12c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f006 ffa9 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[7]);
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <GetAllData+0x128>)
 8001c88:	79db      	ldrb	r3, [r3, #7]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 fedb 	bl	8008a48 <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[8], &dis[8]);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <GetAllData+0x128>)
 8001c94:	7a1b      	ldrb	r3, [r3, #8]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <GetAllData+0x12c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f006 ff99 	bl	8008bd8 <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[8]);
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <GetAllData+0x128>)
 8001ca8:	7a1b      	ldrb	r3, [r3, #8]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 fecb 	bl	8008a48 <VL53L1X_ClearInterrupt>
}
 8001cb2:	bf00      	nop
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	2000030c 	.word	0x2000030c

08001cc0 <CAN_Filter_Init>:
	}
	//HAL_Delay(500);
}

void CAN_Filter_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	//Receiving CAN data via 0x102~0x10E
//	canFilter1.FilterMaskIdHigh = 0x7F3 << 5; // Shift 5 bit
//	canFilter1.FilterIdHigh = 0x106 << 5;
//	canFilter1.FilterMaskIdLow = 0x7F3 << 5; // Shift 5 bit
//	canFilter1.FilterIdLow = 0x106 << 5;
	canFilter1.FilterMaskIdHigh = 0x000 << 5; // Shift 5 bit
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
	canFilter1.FilterIdHigh = 0x000 << 5;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
	canFilter1.FilterMaskIdLow = 0x000 << 5; // Shift 5 bit
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
	canFilter1.FilterIdLow = 0x000 << 5;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
	canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
	canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
	canFilter1.FilterBank = 0;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
	canFilter1.FilterActivation = ENABLE;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	621a      	str	r2, [r3, #32]

	/* Set options for messages; ID type(standard), Length(8 byte) */
	can1TxHeader.RTR = CAN_RTR_DATA;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <CAN_Filter_Init+0x6c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
	can1TxHeader.IDE = CAN_ID_STD;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <CAN_Filter_Init+0x6c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
	can1TxHeader.DLC = 8;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <CAN_Filter_Init+0x6c>)
 8001d08:	2208      	movs	r2, #8
 8001d0a:	611a      	str	r2, [r3, #16]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8001d0c:	4906      	ldr	r1, [pc, #24]	; (8001d28 <CAN_Filter_Init+0x68>)
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <CAN_Filter_Init+0x70>)
 8001d10:	f000 fff4 	bl	8002cfc <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d14:	2102      	movs	r1, #2
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <CAN_Filter_Init+0x70>)
 8001d18:	f001 fb36 	bl	8003388 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <CAN_Filter_Init+0x70>)
 8001d1e:	f001 f8cd 	bl	8002ebc <HAL_CAN_Start>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000310 	.word	0x20000310
 8001d2c:	20000354 	.word	0x20000354
 8001d30:	2000009c 	.word	0x2000009c

08001d34 <CAN_Send>:

void CAN_Send(uint8_t ID, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	4603      	mov	r3, r0
 8001d48:	71bb      	strb	r3, [r7, #6]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	717b      	strb	r3, [r7, #5]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	713b      	strb	r3, [r7, #4]
	  /* Set options for messages; Address */
	  can1TxHeader.StdId = ID;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <CAN_Send+0x70>)
 8001d56:	6013      	str	r3, [r2, #0]

	  can1Tx0Data[7] = data7;
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <CAN_Send+0x74>)
 8001d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d5e:	71d3      	strb	r3, [r2, #7]
	  can1Tx0Data[6] = data6;
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <CAN_Send+0x74>)
 8001d62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d66:	7193      	strb	r3, [r2, #6]
	  can1Tx0Data[5] = data5;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <CAN_Send+0x74>)
 8001d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6e:	7153      	strb	r3, [r2, #5]
	  can1Tx0Data[4] = data4;
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <CAN_Send+0x74>)
 8001d72:	7f3b      	ldrb	r3, [r7, #28]
 8001d74:	7113      	strb	r3, [r2, #4]
	  can1Tx0Data[3] = data3;
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <CAN_Send+0x74>)
 8001d78:	7e3b      	ldrb	r3, [r7, #24]
 8001d7a:	70d3      	strb	r3, [r2, #3]
	  can1Tx0Data[2] = data2;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <CAN_Send+0x74>)
 8001d7e:	793b      	ldrb	r3, [r7, #4]
 8001d80:	7093      	strb	r3, [r2, #2]
	  can1Tx0Data[1] = data1;
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <CAN_Send+0x74>)
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	7053      	strb	r3, [r2, #1]
	  can1Tx0Data[0] = data0;
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <CAN_Send+0x74>)
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	7013      	strb	r3, [r2, #0]
//	  can1Tx0Data[2] = 108;
//	  can1Tx0Data[1] = 101;
//	  can1Tx0Data[0] = 72;

	  //TxMailBox1 = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
	  HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, &can1Tx0Data[0], &TxMailBox1);
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <CAN_Send+0x78>)
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <CAN_Send+0x74>)
 8001d92:	4904      	ldr	r1, [pc, #16]	; (8001da4 <CAN_Send+0x70>)
 8001d94:	4806      	ldr	r0, [pc, #24]	; (8001db0 <CAN_Send+0x7c>)
 8001d96:	f001 f8d5 	bl	8002f44 <HAL_CAN_AddTxMessage>
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000354 	.word	0x20000354
 8001da8:	20000378 	.word	0x20000378
 8001dac:	20000374 	.word	0x20000374
 8001db0:	2000009c 	.word	0x2000009c

08001db4 <CAN_SendAll>:

void CAN_SendAll(void) {
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af06      	add	r7, sp, #24
	CAN_Send(0x10, speed0.i & 0xFF, (speed0.i & 0xFF00) >> 8, (speed0.i & 0xFF0000) >> 16, speed0.i >> 24, speed1.i & 0xFF, (speed1.i & 0xFF00) >> 8, (speed1.i & 0xFF0000) >> 16, speed1.i >> 24);
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <CAN_SendAll+0x194>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b2dd      	uxtb	r5, r3
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <CAN_SendAll+0x194>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b2de      	uxtb	r6, r3
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <CAN_SendAll+0x194>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	fa5f fc83 	uxtb.w	ip, r3
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <CAN_SendAll+0x194>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0e1b      	lsrs	r3, r3, #24
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <CAN_SendAll+0x198>)
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	495a      	ldr	r1, [pc, #360]	; (8001f4c <CAN_SendAll+0x198>)
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	0a09      	lsrs	r1, r1, #8
 8001de6:	b2c9      	uxtb	r1, r1
 8001de8:	4858      	ldr	r0, [pc, #352]	; (8001f4c <CAN_SendAll+0x198>)
 8001dea:	6800      	ldr	r0, [r0, #0]
 8001dec:	0c00      	lsrs	r0, r0, #16
 8001dee:	b2c0      	uxtb	r0, r0
 8001df0:	4c56      	ldr	r4, [pc, #344]	; (8001f4c <CAN_SendAll+0x198>)
 8001df2:	6824      	ldr	r4, [r4, #0]
 8001df4:	0e24      	lsrs	r4, r4, #24
 8001df6:	b2e4      	uxtb	r4, r4
 8001df8:	9404      	str	r4, [sp, #16]
 8001dfa:	9003      	str	r0, [sp, #12]
 8001dfc:	9102      	str	r1, [sp, #8]
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4663      	mov	r3, ip
 8001e04:	4632      	mov	r2, r6
 8001e06:	4629      	mov	r1, r5
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f7ff ff93 	bl	8001d34 <CAN_Send>
	CAN_Send(0x11, dis[0] >> 8, dis[0] & 0xFF, dis[1] >> 8, dis[1] & 0xFF, dis[2] >> 8, dis[2] & 0xFF, 0, 0);
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b2dc      	uxtb	r4, r3
 8001e22:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3302      	adds	r3, #2
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b2dd      	uxtb	r5, r3
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3302      	adds	r3, #2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4a45      	ldr	r2, [pc, #276]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	3204      	adds	r2, #4
 8001e40:	8812      	ldrh	r2, [r2, #0]
 8001e42:	0a12      	lsrs	r2, r2, #8
 8001e44:	b292      	uxth	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4941      	ldr	r1, [pc, #260]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e4a:	6809      	ldr	r1, [r1, #0]
 8001e4c:	3104      	adds	r1, #4
 8001e4e:	8809      	ldrh	r1, [r1, #0]
 8001e50:	b2c9      	uxtb	r1, r1
 8001e52:	2600      	movs	r6, #0
 8001e54:	9604      	str	r6, [sp, #16]
 8001e56:	2600      	movs	r6, #0
 8001e58:	9603      	str	r6, [sp, #12]
 8001e5a:	9102      	str	r1, [sp, #8]
 8001e5c:	9201      	str	r2, [sp, #4]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	462b      	mov	r3, r5
 8001e62:	4622      	mov	r2, r4
 8001e64:	4601      	mov	r1, r0
 8001e66:	2011      	movs	r0, #17
 8001e68:	f7ff ff64 	bl	8001d34 <CAN_Send>
	CAN_Send(0x11, dis[3] >> 8, dis[3] & 0xFF, dis[4] >> 8, dis[4] & 0xFF, dis[5] >> 8, dis[5] & 0xFF, 0, 0);
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3306      	adds	r3, #6
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3306      	adds	r3, #6
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b2dc      	uxtb	r4, r3
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3308      	adds	r3, #8
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b2dd      	uxtb	r5, r3
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3308      	adds	r3, #8
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <CAN_SendAll+0x19c>)
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	320a      	adds	r2, #10
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	0a12      	lsrs	r2, r2, #8
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	4929      	ldr	r1, [pc, #164]	; (8001f50 <CAN_SendAll+0x19c>)
 8001eac:	6809      	ldr	r1, [r1, #0]
 8001eae:	310a      	adds	r1, #10
 8001eb0:	8809      	ldrh	r1, [r1, #0]
 8001eb2:	b2c9      	uxtb	r1, r1
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	9604      	str	r6, [sp, #16]
 8001eb8:	2600      	movs	r6, #0
 8001eba:	9603      	str	r6, [sp, #12]
 8001ebc:	9102      	str	r1, [sp, #8]
 8001ebe:	9201      	str	r2, [sp, #4]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f7ff ff33 	bl	8001d34 <CAN_Send>
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) ;
 8001ece:	bf00      	nop
 8001ed0:	4820      	ldr	r0, [pc, #128]	; (8001f54 <CAN_SendAll+0x1a0>)
 8001ed2:	f001 f912 	bl	80030fa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f9      	beq.n	8001ed0 <CAN_SendAll+0x11c>
	CAN_Send(0x11, dis[6] >> 8, dis[6] & 0xFF, dis[7] >> 8, dis[7] & 0xFF, dis[8] >> 8, dis[8] & 0xFF, 0, 0);
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <CAN_SendAll+0x19c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2d8      	uxtb	r0, r3
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <CAN_SendAll+0x19c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	330c      	adds	r3, #12
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b2dc      	uxtb	r4, r3
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <CAN_SendAll+0x19c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	330e      	adds	r3, #14
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b2dd      	uxtb	r5, r3
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <CAN_SendAll+0x19c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	330e      	adds	r3, #14
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <CAN_SendAll+0x19c>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	3210      	adds	r2, #16
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	0a12      	lsrs	r2, r2, #8
 8001f16:	b292      	uxth	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	490d      	ldr	r1, [pc, #52]	; (8001f50 <CAN_SendAll+0x19c>)
 8001f1c:	6809      	ldr	r1, [r1, #0]
 8001f1e:	3110      	adds	r1, #16
 8001f20:	8809      	ldrh	r1, [r1, #0]
 8001f22:	b2c9      	uxtb	r1, r1
 8001f24:	2600      	movs	r6, #0
 8001f26:	9604      	str	r6, [sp, #16]
 8001f28:	2600      	movs	r6, #0
 8001f2a:	9603      	str	r6, [sp, #12]
 8001f2c:	9102      	str	r1, [sp, #8]
 8001f2e:	9201      	str	r2, [sp, #4]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	462b      	mov	r3, r5
 8001f34:	4622      	mov	r2, r4
 8001f36:	4601      	mov	r1, r0
 8001f38:	2011      	movs	r0, #17
 8001f3a:	f7ff fefb 	bl	8001d34 <CAN_Send>
}
 8001f3e:	bf00      	nop
 8001f40:	3704      	adds	r7, #4
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000398 	.word	0x20000398
 8001f4c:	2000039c 	.word	0x2000039c
 8001f50:	2000030c 	.word	0x2000030c
 8001f54:	2000009c 	.word	0x2000009c

08001f58 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Receiving CAN Data */
/* Get CAN1 message Through FIFO0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1RxHeader, can1Rx0Data);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001f64:	2100      	movs	r1, #0
 8001f66:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001f68:	f001 f8fc 	bl	8003164 <HAL_CAN_GetRxMessage>
	uint8_t left_dir = can1Rx0Data[0];
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	73fb      	strb	r3, [r7, #15]
	uint16_t left_ccr = can1Rx0Data[1] << 8 | can1Rx0Data[2];
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	81bb      	strh	r3, [r7, #12]
	uint8_t right_dir = can1Rx0Data[3];
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f88:	78db      	ldrb	r3, [r3, #3]
 8001f8a:	72fb      	strb	r3, [r7, #11]
	uint16_t right_ccr = can1Rx0Data[4] << 8 | can1Rx0Data[5];
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001f96:	795b      	ldrb	r3, [r3, #5]
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	813b      	strh	r3, [r7, #8]
	setLeftMotorCCR(left_ccr, left_dir);
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	89bb      	ldrh	r3, [r7, #12]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f816 	bl	8001fd8 <setLeftMotorCCR>
	setRightMotorCCR(right_ccr, right_dir);
 8001fac:	7afa      	ldrb	r2, [r7, #11]
 8001fae:	893b      	ldrh	r3, [r7, #8]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f83a 	bl	800202c <setRightMotorCCR>
	printf("yes\r\n");
 8001fb8:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001fba:	f007 f871 	bl	80090a0 <puts>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000036c 	.word	0x2000036c
 8001fcc:	20000338 	.word	0x20000338
 8001fd0:	2000009c 	.word	0x2000009c
 8001fd4:	08009ed0 	.word	0x08009ed0

08001fd8 <setLeftMotorCCR>:

void setLeftMotorCCR(uint16_t ccr, uint8_t dir) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	717b      	strb	r3, [r7, #5]
	if (dir == DIR_BACKWARD) {
 8001fe8:	797b      	ldrb	r3, [r7, #5]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <setLeftMotorCCR+0x22>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <setLeftMotorCCR+0x4c>)
 8001ff4:	f001 fef4 	bl	8003de0 <HAL_GPIO_WritePin>
 8001ff8:	e004      	b.n	8002004 <setLeftMotorCCR+0x2c>
	}
	else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <setLeftMotorCCR+0x4c>)
 8002000:	f001 feee 	bl	8003de0 <HAL_GPIO_WritePin>

	}

	 //uint32_t ccr = (uint32_t) speed * 20;
	 if (ccr > TIM1->ARR) ccr = TIM1->ARR;
 8002004:	88fa      	ldrh	r2, [r7, #6]
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <setLeftMotorCCR+0x50>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	429a      	cmp	r2, r3
 800200c:	d902      	bls.n	8002014 <setLeftMotorCCR+0x3c>
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <setLeftMotorCCR+0x50>)
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	80fb      	strh	r3, [r7, #6]
	 //printf("%d\r\n", ccr0);
	 TIM1->CCR2 = ccr;
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <setLeftMotorCCR+0x50>)
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
	 //HAL_Delay(50);
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40020800 	.word	0x40020800
 8002028:	40010000 	.word	0x40010000

0800202c <setRightMotorCCR>:

void setRightMotorCCR(uint16_t ccr, uint8_t dir) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4613      	mov	r3, r2
 800203a:	717b      	strb	r3, [r7, #5]
	if (dir == DIR_BACKWARD) {
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <setRightMotorCCR+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2110      	movs	r1, #16
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <setRightMotorCCR+0x4c>)
 8002048:	f001 feca 	bl	8003de0 <HAL_GPIO_WritePin>
 800204c:	e004      	b.n	8002058 <setRightMotorCCR+0x2c>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	2110      	movs	r1, #16
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <setRightMotorCCR+0x4c>)
 8002054:	f001 fec4 	bl	8003de0 <HAL_GPIO_WritePin>
	}


	 //uint32_t ccr = (uint32_t) speed * 20;
	 if (ccr > TIM1->ARR) ccr = TIM1->ARR;
 8002058:	88fa      	ldrh	r2, [r7, #6]
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <setRightMotorCCR+0x50>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	d902      	bls.n	8002068 <setRightMotorCCR+0x3c>
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <setRightMotorCCR+0x50>)
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	80fb      	strh	r3, [r7, #6]
	 TIM1->CCR1 = ccr;
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <setRightMotorCCR+0x50>)
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	6353      	str	r3, [r2, #52]	; 0x34
	 //HAL_Delay(50);
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020400 	.word	0x40020400
 800207c:	40010000 	.word	0x40010000

08002080 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a6b      	ldr	r2, [pc, #428]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	f040 80bd 	bne.w	800220c <HAL_TIM_PeriodElapsedCallback+0x18c>
		  counter0 = __HAL_TIM_GET_COUNTER(&htim2);
 8002092:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4a69      	ldr	r2, [pc, #420]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800209a:	6013      	str	r3, [r2, #0]
		  counter1 = __HAL_TIM_GET_COUNTER(&htim5);
 800209c:	4b69      	ldr	r3, [pc, #420]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	4a69      	ldr	r2, [pc, #420]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80020a4:	6013      	str	r3, [r2, #0]

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d118      	bne.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x66>
			  if (counter0 <= oldCounter0){
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b64      	ldr	r3, [pc, #400]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d808      	bhi.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x52>
				  // pure forward
				  //printf("a1,");
				  diff0 = -counter0 + oldCounter0;
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e021      	b.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // backward -> forward
				  //printf("a2,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 80020d2:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	461a      	mov	r2, r3
 80020e0:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e017      	b.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
		  }
		  else {
			  if (counter0 <= oldCounter0) {
 80020e6:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d809      	bhi.n	8002106 <HAL_TIM_PeriodElapsedCallback+0x86>
				  // forward -> backward
				  //printf("a3,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	461a      	mov	r2, r3
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e007      	b.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // pure backward
				  //printf("a4,");
				  diff0 = -counter0 + oldCounter0;
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002114:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)) {
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d118      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0xd6>
			  if (counter1 >= oldCounter1) {
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d309      	bcc.n	8002144 <HAL_TIM_PeriodElapsedCallback+0xc4>
				  // forward -> backward change
				  //printf("b1: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	461a      	mov	r2, r3
 800213e:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e020      	b.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x106>
			  }

			  else {
				  // pure backward
				  //printf("b2: ");
				  diff1 = counter1 - oldCounter1;
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e017      	b.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x106>
			  }

			  }
		  else {
			  if (counter1 >= oldCounter1) {
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d308      	bcc.n	8002174 <HAL_TIM_PeriodElapsedCallback+0xf4>
				  // pure forward
				  //printf("b3: ");
				  diff1 = counter1 - oldCounter1;
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e008      	b.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x106>
			  }

			  else {
				  // backward -> forward change
				  //printf("b4: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	461a      	mov	r2, r3
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002184:	601a      	str	r2, [r3, #0]
			  }
		  }
		  oldCounter0 = __HAL_TIM_GET_COUNTER(&htim2);
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	4a2f      	ldr	r2, [pc, #188]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800218e:	6013      	str	r3, [r2, #0]
		  oldCounter1 = __HAL_TIM_GET_COUNTER(&htim5);
 8002190:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002198:	6013      	str	r3, [r2, #0]

		  speed0.fl = diff0 * 0.0054931640625 * 90.9091;
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d8 	bl	8000554 <__aeabi_i2d>
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	a31e      	add	r3, pc, #120	; (adr r3, 8002230 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa34 	bl	8000628 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fc40 	bl	8000a4c <__aeabi_d2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80021d0:	6013      	str	r3, [r2, #0]
		  speed1.fl = diff1 * 0.0054931640625 * 90.9091;
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9bc 	bl	8000554 <__aeabi_i2d>
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80021e2:	f7fe fa21 	bl	8000628 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	a310      	add	r3, pc, #64	; (adr r3, 8002230 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fa18 	bl	8000628 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc24 	bl	8000a4c <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002208:	6013      	str	r3, [r2, #0]
	}
	else if (htim == &htim4) {
		// CAN
		CAN_SendAll();
	}
}
 800220a:	e00c      	b.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x1a6>
	else if (htim == &htim3) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d102      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x19a>
		GetAllData();
 8002214:	f7ff fcbc 	bl	8001b90 <GetAllData>
}
 8002218:	e005      	b.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x1a6>
	else if (htim == &htim4) {
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		CAN_SendAll();
 8002222:	f7ff fdc7 	bl	8001db4 <CAN_SendAll>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	b1c432ca 	.word	0xb1c432ca
 8002234:	4056ba2e 	.word	0x4056ba2e
 8002238:	20000280 	.word	0x20000280
 800223c:	20000160 	.word	0x20000160
 8002240:	20000380 	.word	0x20000380
 8002244:	20000238 	.word	0x20000238
 8002248:	20000384 	.word	0x20000384
 800224c:	20000388 	.word	0x20000388
 8002250:	20000390 	.word	0x20000390
 8002254:	2000038c 	.word	0x2000038c
 8002258:	20000394 	.word	0x20000394
 800225c:	3f768000 	.word	0x3f768000
 8002260:	20000398 	.word	0x20000398
 8002264:	2000039c 	.word	0x2000039c
 8002268:	200001a8 	.word	0x200001a8
 800226c:	200001f0 	.word	0x200001f0

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>
	...

0800227c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_MspInit+0x4c>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_MspInit+0x4c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_MspInit+0x4c>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_MspInit+0x4c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ba:	2007      	movs	r0, #7
 80022bc:	f001 fb8a 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_CAN_MspInit+0x94>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d134      	bne.n	8002358 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_CAN_MspInit+0x98>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_CAN_MspInit+0x98>)
 80022f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_CAN_MspInit+0x98>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_CAN_MspInit+0x98>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_CAN_MspInit+0x98>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_CAN_MspInit+0x98>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002338:	2309      	movs	r3, #9
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4809      	ldr	r0, [pc, #36]	; (8002368 <HAL_CAN_MspInit+0x9c>)
 8002344:	f001 fbb8 	bl	8003ab8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2014      	movs	r0, #20
 800234e:	f001 fb4c 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002352:	2014      	movs	r0, #20
 8002354:	f001 fb65 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40006400 	.word	0x40006400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_I2C_MspInit+0x94>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d134      	bne.n	80023f8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_I2C_MspInit+0x98>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_I2C_MspInit+0x98>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_I2C_MspInit+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b0:	2312      	movs	r3, #18
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023bc:	2304      	movs	r3, #4
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4810      	ldr	r0, [pc, #64]	; (8002408 <HAL_I2C_MspInit+0x9c>)
 80023c8:	f001 fb76 	bl	8003ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_I2C_MspInit+0x98>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_I2C_MspInit+0x98>)
 80023d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_I2C_MspInit+0x98>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	201f      	movs	r0, #31
 80023ee:	f001 fafc 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023f2:	201f      	movs	r0, #31
 80023f4:	f001 fb15 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40005400 	.word	0x40005400
 8002404:	40023800 	.word	0x40023800
 8002408:	40020400 	.word	0x40020400

0800240c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_TIM_PWM_MspInit+0x3c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10d      	bne.n	800243a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_TIM_PWM_MspInit+0x40>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_TIM_PWM_MspInit+0x40>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_TIM_PWM_MspInit+0x40>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d152      	bne.n	8002518 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a38      	ldr	r2, [pc, #224]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024c6:	2320      	movs	r3, #32
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024d6:	2301      	movs	r3, #1
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	482d      	ldr	r0, [pc, #180]	; (8002598 <HAL_TIM_Encoder_MspInit+0x148>)
 80024e2:	f001 fae9 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e6:	2308      	movs	r3, #8
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024f6:	2301      	movs	r3, #1
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	4826      	ldr	r0, [pc, #152]	; (800259c <HAL_TIM_Encoder_MspInit+0x14c>)
 8002502:	f001 fad9 	bl	8003ab8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	201c      	movs	r0, #28
 800250c:	f001 fa6d 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002510:	201c      	movs	r0, #28
 8002512:	f001 fa86 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002516:	e038      	b.n	800258a <HAL_TIM_Encoder_MspInit+0x13a>
  else if(htim_encoder->Instance==TIM5)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_TIM_Encoder_MspInit+0x150>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d133      	bne.n	800258a <HAL_TIM_Encoder_MspInit+0x13a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a13      	ldr	r2, [pc, #76]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_TIM_Encoder_MspInit+0x144>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800255a:	2303      	movs	r3, #3
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800256a:	2302      	movs	r3, #2
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	4808      	ldr	r0, [pc, #32]	; (8002598 <HAL_TIM_Encoder_MspInit+0x148>)
 8002576:	f001 fa9f 	bl	8003ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2032      	movs	r0, #50	; 0x32
 8002580:	f001 fa33 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002584:	2032      	movs	r0, #50	; 0x32
 8002586:	f001 fa4c 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400
 80025a0:	40000c00 	.word	0x40000c00

080025a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2a      	ldr	r2, [pc, #168]	; (800265c <HAL_TIM_Base_MspInit+0xb8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d116      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a28      	ldr	r2, [pc, #160]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	201d      	movs	r0, #29
 80025d8:	f001 fa07 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025dc:	201d      	movs	r0, #29
 80025de:	f001 fa20 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80025e2:	e036      	b.n	8002652 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_TIM_Base_MspInit+0xc0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d116      	bne.n	800261c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	201e      	movs	r0, #30
 8002610:	f001 f9eb 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002614:	201e      	movs	r0, #30
 8002616:	f001 fa04 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 800261a:	e01a      	b.n	8002652 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_TIM_Base_MspInit+0xc4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d115      	bne.n	8002652 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 8002630:	f043 0320 	orr.w	r3, r3, #32
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_TIM_Base_MspInit+0xbc>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	2037      	movs	r0, #55	; 0x37
 8002648:	f001 f9cf 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800264c:	2037      	movs	r0, #55	; 0x37
 800264e:	f001 f9e8 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40000400 	.word	0x40000400
 8002660:	40023800 	.word	0x40023800
 8002664:	40000800 	.word	0x40000800
 8002668:	40001400 	.word	0x40001400

0800266c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_TIM_MspPostInit+0x68>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11e      	bne.n	80026cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_TIM_MspPostInit+0x6c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIM_MspPostInit+0x6c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_TIM_MspPostInit+0x6c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026bc:	2301      	movs	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4619      	mov	r1, r3
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_TIM_MspPostInit+0x70>)
 80026c8:	f001 f9f6 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026cc:	bf00      	nop
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000

080026e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_UART_MspInit+0x84>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12b      	bne.n	800275a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_UART_MspInit+0x88>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_UART_MspInit+0x88>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_UART_MspInit+0x8c>)
 8002756:	f001 f9af 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler+0x4>

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f000 f95e 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <CAN1_RX0_IRQHandler+0x10>)
 80027ca:	f000 fe03 	bl	80033d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000009c 	.word	0x2000009c

080027d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <TIM2_IRQHandler+0x10>)
 80027de:	f004 fe60 	bl	80074a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000160 	.word	0x20000160

080027ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <TIM3_IRQHandler+0x10>)
 80027f2:	f004 fe56 	bl	80074a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200001a8 	.word	0x200001a8

08002800 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <TIM4_IRQHandler+0x10>)
 8002806:	f004 fe4c 	bl	80074a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200001f0 	.word	0x200001f0

08002814 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <I2C1_EV_IRQHandler+0x10>)
 800281a:	f001 ff63 	bl	80046e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200000c4 	.word	0x200000c4

08002828 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <TIM5_IRQHandler+0x10>)
 800282e:	f004 fe38 	bl	80074a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000238 	.word	0x20000238

0800283c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <TIM7_IRQHandler+0x10>)
 8002842:	f004 fe2e 	bl	80074a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000280 	.word	0x20000280

08002850 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e00a      	b.n	8002878 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002862:	f3af 8000 	nop.w
 8002866:	4601      	mov	r1, r0
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	60ba      	str	r2, [r7, #8]
 800286e:	b2ca      	uxtb	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbf0      	blt.n	8002862 <_read+0x12>
	}

return len;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <_close>:
	}
	return len;
}

int _close(int file)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
	return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b2:	605a      	str	r2, [r3, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_isatty>:

int _isatty(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	return 1;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f006 fa5a 	bl	8008ddc <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20020000 	.word	0x20020000
 8002954:	00000400 	.word	0x00000400
 8002958:	200003a0 	.word	0x200003a0
 800295c:	200004b8 	.word	0x200004b8

08002960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <SystemInit+0x20>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <SystemInit+0x20>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298a:	490e      	ldr	r1, [pc, #56]	; (80029c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a0:	4c0b      	ldr	r4, [pc, #44]	; (80029d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ae:	f7ff ffd7 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b2:	f006 fa19 	bl	8008de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b6:	f7fe fa2f 	bl	8000e18 <main>
  bx  lr    
 80029ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80029c8:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 80029cc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029d0:	200004b8 	.word	0x200004b8

080029d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_Init+0x40>)
 80029e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_Init+0x40>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x40>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 ffe7 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fc36 	bl	800227c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 ffff 	bl	8003a3e <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 ffc7 	bl	80039ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000010 	.word	0x20000010
 8002a74:	20000018 	.word	0x20000018
 8002a78:	20000014 	.word	0x20000014

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000018 	.word	0x20000018
 8002aa0:	200003a4 	.word	0x200003a4

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	200003a4 	.word	0x200003a4

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000018 	.word	0x20000018

08002b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0ed      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fbd2 	bl	80022cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7ff ffb4 	bl	8002aa4 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b3e:	e012      	b.n	8002b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b40:	f7ff ffb0 	bl	8002aa4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	d90b      	bls.n	8002b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0c5      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0e5      	beq.n	8002b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0202 	bic.w	r2, r2, #2
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff ff8e 	bl	8002aa4 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b8a:	e012      	b.n	8002bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b8c:	f7ff ff8a 	bl	8002aa4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d90b      	bls.n	8002bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09f      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7e5b      	ldrb	r3, [r3, #25]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e9b      	ldrb	r3, [r3, #26]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0220 	bic.w	r2, r2, #32
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7edb      	ldrb	r3, [r3, #27]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0210 	orr.w	r2, r2, #16
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7f1b      	ldrb	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7f5b      	ldrb	r3, [r3, #29]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0204 	orr.w	r2, r2, #4
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d003      	beq.n	8002d22 <HAL_CAN_ConfigFilter+0x26>
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	f040 80be 	bne.w	8002e9e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002d24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	431a      	orrs	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	401a      	ands	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d123      	bne.n	8002dcc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002da6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3248      	adds	r2, #72	; 0x48
 8002dac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	3348      	adds	r3, #72	; 0x48
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d122      	bne.n	8002e1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002df4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3248      	adds	r2, #72	; 0x48
 8002dfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	3348      	adds	r3, #72	; 0x48
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e34:	e007      	b.n	8002e46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e60:	e007      	b.n	8002e72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e90:	f023 0201 	bic.w	r2, r3, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e006      	b.n	8002eac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40006400 	.word	0x40006400

08002ebc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d12e      	bne.n	8002f2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7ff fddc 	bl	8002aa4 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eee:	e012      	b.n	8002f16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef0:	f7ff fdd8 	bl	8002aa4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b0a      	cmp	r3, #10
 8002efc:	d90b      	bls.n	8002f16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e012      	b.n	8002f3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e006      	b.n	8002f3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d003      	beq.n	8002f70 <HAL_CAN_AddTxMessage+0x2c>
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	f040 80b8 	bne.w	80030e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a0 	beq.w	80030d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	0e1b      	lsrs	r3, r3, #24
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d907      	bls.n	8002fb0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e09e      	b.n	80030ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	440b      	add	r3, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e00f      	b.n	8002ffe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ff2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	440b      	add	r3, r1
 8002ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3318      	adds	r3, #24
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	3304      	adds	r3, #4
 8003010:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	7d1b      	ldrb	r3, [r3, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d111      	bne.n	800303e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3318      	adds	r3, #24
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3318      	adds	r3, #24
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	3304      	adds	r3, #4
 800303c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3307      	adds	r3, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	061a      	lsls	r2, r3, #24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3306      	adds	r3, #6
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3305      	adds	r3, #5
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	4313      	orrs	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	3204      	adds	r2, #4
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	4610      	mov	r0, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6811      	ldr	r1, [r2, #0]
 8003066:	ea43 0200 	orr.w	r2, r3, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	440b      	add	r3, r1
 8003070:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003074:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3303      	adds	r3, #3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	061a      	lsls	r2, r3, #24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3302      	adds	r3, #2
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3301      	adds	r3, #1
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	4313      	orrs	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	4610      	mov	r0, r2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	ea43 0200 	orr.w	r2, r3, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3318      	adds	r3, #24
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3318      	adds	r3, #24
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	440b      	add	r3, r1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e00e      	b.n	80030ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e006      	b.n	80030ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d11d      	bne.n	8003156 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3301      	adds	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003178:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d003      	beq.n	8003188 <HAL_CAN_GetRxMessage+0x24>
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b02      	cmp	r3, #2
 8003184:	f040 80f3 	bne.w	800336e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0e7      	b.n	800337c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0d8      	b.n	800337c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	331b      	adds	r3, #27
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4413      	add	r3, r2
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0204 	and.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10c      	bne.n	8003202 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	331b      	adds	r3, #27
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0d5b      	lsrs	r3, r3, #21
 80031f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00b      	b.n	800321a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	331b      	adds	r3, #27
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	08db      	lsrs	r3, r3, #3
 8003212:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	331b      	adds	r3, #27
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0202 	and.w	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	331b      	adds	r3, #27
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	331b      	adds	r3, #27
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	b2da      	uxtb	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	331b      	adds	r3, #27
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	4413      	add	r3, r2
 8003298:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0a1a      	lsrs	r2, r3, #8
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0c1a      	lsrs	r2, r3, #16
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3302      	adds	r3, #2
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e1a      	lsrs	r2, r3, #24
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	3303      	adds	r3, #3
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	3304      	adds	r3, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0a1a      	lsrs	r2, r3, #8
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3305      	adds	r3, #5
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4413      	add	r3, r2
 8003318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	0c1a      	lsrs	r2, r3, #16
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3306      	adds	r3, #6
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	4413      	add	r3, r2
 8003332:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e1a      	lsrs	r2, r3, #24
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3307      	adds	r3, #7
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	e007      	b.n	800336a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e006      	b.n	800337c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003398:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d002      	beq.n	80033a6 <HAL_CAN_ActivateNotification+0x1e>
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d109      	bne.n	80033ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6959      	ldr	r1, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e006      	b.n	80033c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07c      	beq.n	8003514 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f983 	bl	8003742 <HAL_CAN_TxMailbox0CompleteCallback>
 800343c:	e016      	b.n	800346c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e00c      	b.n	800346c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e002      	b.n	800346c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f989 	bl	800377e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d024      	beq.n	80034c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f963 	bl	8003756 <HAL_CAN_TxMailbox1CompleteCallback>
 8003490:	e016      	b.n	80034c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e00c      	b.n	80034c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e002      	b.n	80034c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f969 	bl	8003792 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d024      	beq.n	8003514 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f943 	bl	800376a <HAL_CAN_TxMailbox2CompleteCallback>
 80034e4:	e016      	b.n	8003514 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e00c      	b.n	8003514 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e002      	b.n	8003514 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f949 	bl	80037a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2210      	movs	r2, #16
 8003536:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2208      	movs	r2, #8
 8003552:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f930 	bl	80037ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe fcf0 	bl	8001f58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003592:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2210      	movs	r2, #16
 800359a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f912 	bl	80037e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8f9 	bl	80037ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8fc 	bl	80037f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2208      	movs	r2, #8
 8003618:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8f5 	bl	800380a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d07b      	beq.n	8003722 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d072      	beq.n	800371a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368e:	2b00      	cmp	r3, #0
 8003690:	d043      	beq.n	800371a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03e      	beq.n	800371a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a2:	2b60      	cmp	r3, #96	; 0x60
 80036a4:	d02b      	beq.n	80036fe <HAL_CAN_IRQHandler+0x32a>
 80036a6:	2b60      	cmp	r3, #96	; 0x60
 80036a8:	d82e      	bhi.n	8003708 <HAL_CAN_IRQHandler+0x334>
 80036aa:	2b50      	cmp	r3, #80	; 0x50
 80036ac:	d022      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x320>
 80036ae:	2b50      	cmp	r3, #80	; 0x50
 80036b0:	d82a      	bhi.n	8003708 <HAL_CAN_IRQHandler+0x334>
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d019      	beq.n	80036ea <HAL_CAN_IRQHandler+0x316>
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d826      	bhi.n	8003708 <HAL_CAN_IRQHandler+0x334>
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d010      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x30c>
 80036be:	2b30      	cmp	r3, #48	; 0x30
 80036c0:	d822      	bhi.n	8003708 <HAL_CAN_IRQHandler+0x334>
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d002      	beq.n	80036cc <HAL_CAN_IRQHandler+0x2f8>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d005      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036ca:	e01d      	b.n	8003708 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036d4:	e019      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	f043 0310 	orr.w	r3, r3, #16
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036de:	e014      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e8:	e00f      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f2:	e00a      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036fc:	e005      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003706:	e000      	b.n	800370a <HAL_CAN_IRQHandler+0x336>
            break;
 8003708:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003718:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f872 	bl	800381e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a0:	d301      	bcc.n	80039a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <SysTick_Config+0x40>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ae:	210f      	movs	r1, #15
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	f7ff ff8e 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <SysTick_Config+0x40>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <SysTick_Config+0x40>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff29 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff3e 	bl	800387c <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff8e 	bl	8003928 <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5d 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff31 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa2 	bl	8003990 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e00c      	b.n	8003a8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2205      	movs	r2, #5
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa8:	b2db      	uxtb	r3, r3
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e165      	b.n	8003da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 8154 	bne.w	8003d9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d005      	beq.n	8003b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d130      	bne.n	8003b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2203      	movs	r2, #3
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 0201 	and.w	r2, r3, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d017      	beq.n	8003ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d123      	bne.n	8003bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	08da      	lsrs	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3208      	adds	r2, #8
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80ae 	beq.w	8003d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b5d      	ldr	r3, [pc, #372]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a5c      	ldr	r2, [pc, #368]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b5a      	ldr	r3, [pc, #360]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c5a:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <HAL_GPIO_Init+0x304>)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4f      	ldr	r2, [pc, #316]	; (8003dc0 <HAL_GPIO_Init+0x308>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d025      	beq.n	8003cd2 <HAL_GPIO_Init+0x21a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4e      	ldr	r2, [pc, #312]	; (8003dc4 <HAL_GPIO_Init+0x30c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01f      	beq.n	8003cce <HAL_GPIO_Init+0x216>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4d      	ldr	r2, [pc, #308]	; (8003dc8 <HAL_GPIO_Init+0x310>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d019      	beq.n	8003cca <HAL_GPIO_Init+0x212>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4c      	ldr	r2, [pc, #304]	; (8003dcc <HAL_GPIO_Init+0x314>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_GPIO_Init+0x20e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_GPIO_Init+0x318>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_GPIO_Init+0x20a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4a      	ldr	r2, [pc, #296]	; (8003dd4 <HAL_GPIO_Init+0x31c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <HAL_GPIO_Init+0x206>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <HAL_GPIO_Init+0x320>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_GPIO_Init+0x202>
 8003cb6:	2306      	movs	r3, #6
 8003cb8:	e00c      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00a      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x21c>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	; (8003dbc <HAL_GPIO_Init+0x304>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a31      	ldr	r2, [pc, #196]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f ae96 	bls.w	8003ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40021400 	.word	0x40021400
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	40013c00 	.word	0x40013c00

08003de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]
 8003dec:	4613      	mov	r3, r2
 8003dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df0:	787b      	ldrb	r3, [r7, #1]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dfc:	e003      	b.n	8003e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	041a      	lsls	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	619a      	str	r2, [r3, #24]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e12b      	b.n	800407e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fa96 	bl	800236c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e78:	f002 fc68 	bl	800674c <HAL_RCC_GetPCLK1Freq>
 8003e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4a81      	ldr	r2, [pc, #516]	; (8004088 <HAL_I2C_Init+0x274>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d807      	bhi.n	8003e98 <HAL_I2C_Init+0x84>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a80      	ldr	r2, [pc, #512]	; (800408c <HAL_I2C_Init+0x278>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bf94      	ite	ls
 8003e90:	2301      	movls	r3, #1
 8003e92:	2300      	movhi	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e006      	b.n	8003ea6 <HAL_I2C_Init+0x92>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a7d      	ldr	r2, [pc, #500]	; (8004090 <HAL_I2C_Init+0x27c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	bf94      	ite	ls
 8003ea0:	2301      	movls	r3, #1
 8003ea2:	2300      	movhi	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0e7      	b.n	800407e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a78      	ldr	r2, [pc, #480]	; (8004094 <HAL_I2C_Init+0x280>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0c9b      	lsrs	r3, r3, #18
 8003eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a6a      	ldr	r2, [pc, #424]	; (8004088 <HAL_I2C_Init+0x274>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d802      	bhi.n	8003ee8 <HAL_I2C_Init+0xd4>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	e009      	b.n	8003efc <HAL_I2C_Init+0xe8>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	4a69      	ldr	r2, [pc, #420]	; (8004098 <HAL_I2C_Init+0x284>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	3301      	adds	r3, #1
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	495c      	ldr	r1, [pc, #368]	; (8004088 <HAL_I2C_Init+0x274>)
 8003f18:	428b      	cmp	r3, r1
 8003f1a:	d819      	bhi.n	8003f50 <HAL_I2C_Init+0x13c>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e59      	subs	r1, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f30:	400b      	ands	r3, r1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_I2C_Init+0x138>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1e59      	subs	r1, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	e051      	b.n	8003ff0 <HAL_I2C_Init+0x1dc>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e04f      	b.n	8003ff0 <HAL_I2C_Init+0x1dc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d111      	bne.n	8003f7c <HAL_I2C_Init+0x168>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e58      	subs	r0, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	440b      	add	r3, r1
 8003f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e012      	b.n	8003fa2 <HAL_I2C_Init+0x18e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e58      	subs	r0, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	0099      	lsls	r1, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Init+0x196>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_I2C_Init+0x1dc>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_I2C_Init+0x1bc>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1e58      	subs	r0, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	440b      	add	r3, r1
 8003fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fce:	e00f      	b.n	8003ff0 <HAL_I2C_Init+0x1dc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	0099      	lsls	r1, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	6809      	ldr	r1, [r1, #0]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800401e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6911      	ldr	r1, [r2, #16]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68d2      	ldr	r2, [r2, #12]
 800402a:	4311      	orrs	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	000186a0 	.word	0x000186a0
 800408c:	001e847f 	.word	0x001e847f
 8004090:	003d08ff 	.word	0x003d08ff
 8004094:	431bde83 	.word	0x431bde83
 8004098:	10624dd3 	.word	0x10624dd3

0800409c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	461a      	mov	r2, r3
 80040a8:	460b      	mov	r3, r1
 80040aa:	817b      	strh	r3, [r7, #10]
 80040ac:	4613      	mov	r3, r2
 80040ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7fe fcf8 	bl	8002aa4 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b20      	cmp	r3, #32
 80040c0:	f040 80e0 	bne.w	8004284 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	4970      	ldr	r1, [pc, #448]	; (8004290 <HAL_I2C_Master_Transmit+0x1f4>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 ffd0 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
 80040dc:	e0d3      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2C_Master_Transmit+0x50>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e0cc      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d007      	beq.n	8004112 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2221      	movs	r2, #33	; 0x21
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2210      	movs	r2, #16
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	893a      	ldrh	r2, [r7, #8]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a50      	ldr	r2, [pc, #320]	; (8004294 <HAL_I2C_Master_Transmit+0x1f8>)
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004154:	8979      	ldrh	r1, [r7, #10]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 fd92 	bl	8005c84 <I2C_MasterRequestWrite>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e08d      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004180:	e066      	b.n	8004250 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	6a39      	ldr	r1, [r7, #32]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f002 f84a 	bl	8006220 <I2C_WaitOnTXEFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b04      	cmp	r3, #4
 8004198:	d107      	bne.n	80041aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06b      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	781a      	ldrb	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11b      	bne.n	8004224 <HAL_I2C_Master_Transmit+0x188>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	6a39      	ldr	r1, [r7, #32]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f002 f83a 	bl	80062a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b04      	cmp	r3, #4
 800423a:	d107      	bne.n	800424c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e01a      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d194      	bne.n	8004182 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	00100002 	.word	0x00100002
 8004294:	ffff0000 	.word	0xffff0000

08004298 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	460b      	mov	r3, r1
 80042a6:	817b      	strh	r3, [r7, #10]
 80042a8:	4613      	mov	r3, r2
 80042aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7fe fbfa 	bl	8002aa4 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	f040 820b 	bne.w	80046d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2319      	movs	r3, #25
 80042c6:	2201      	movs	r2, #1
 80042c8:	497c      	ldr	r1, [pc, #496]	; (80044bc <HAL_I2C_Master_Receive+0x224>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 fed2 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
 80042d8:	e1fe      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_I2C_Master_Receive+0x50>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e1f7      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d007      	beq.n	800430e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2222      	movs	r2, #34	; 0x22
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2210      	movs	r2, #16
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <HAL_I2C_Master_Receive+0x228>)
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f001 fd16 	bl	8005d88 <I2C_MasterRequestRead>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e1b8      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d113      	bne.n	8004396 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e18c      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	2b01      	cmp	r3, #1
 800439c:	d11b      	bne.n	80043d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e16c      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d11b      	bne.n	8004416 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	e14c      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800443c:	e138      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	2b03      	cmp	r3, #3
 8004444:	f200 80f1 	bhi.w	800462a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	2b01      	cmp	r3, #1
 800444e:	d123      	bne.n	8004498 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f001 ff97 	bl	8006388 <I2C_WaitOnRXNEFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e139      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004496:	e10b      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	d14e      	bne.n	800453e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2200      	movs	r2, #0
 80044a8:	4906      	ldr	r1, [pc, #24]	; (80044c4 <HAL_I2C_Master_Receive+0x22c>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 fde2 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e10e      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
 80044ba:	bf00      	nop
 80044bc:	00100002 	.word	0x00100002
 80044c0:	ffff0000 	.word	0xffff0000
 80044c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453c:	e0b8      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	4966      	ldr	r1, [pc, #408]	; (80046e0 <HAL_I2C_Master_Receive+0x448>)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f001 fd93 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0bf      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	494f      	ldr	r1, [pc, #316]	; (80046e0 <HAL_I2C_Master_Receive+0x448>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f001 fd65 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e091      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004628:	e042      	b.n	80046b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f001 feaa 	bl	8006388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e04c      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b04      	cmp	r3, #4
 800467c:	d118      	bne.n	80046b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f47f aec2 	bne.w	800443e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	; 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	00010004 	.word	0x00010004

080046e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004704:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b10      	cmp	r3, #16
 8004712:	d003      	beq.n	800471c <HAL_I2C_EV_IRQHandler+0x38>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	f040 80c1 	bne.w	800489e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <HAL_I2C_EV_IRQHandler+0x6e>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800473c:	d003      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0x62>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004744:	d101      	bne.n	800474a <HAL_I2C_EV_IRQHandler+0x66>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x68>
 800474a:	2300      	movs	r3, #0
 800474c:	2b01      	cmp	r3, #1
 800474e:	f000 8132 	beq.w	80049b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x92>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0a5b      	lsrs	r3, r3, #9
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 fe92 	bl	8006492 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fcdc 	bl	800512c <I2C_Master_SB>
 8004774:	e092      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0xb2>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fd52 	bl	8005238 <I2C_Master_ADD10>
 8004794:	e082      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	0a5b      	lsrs	r3, r3, #9
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fd6c 	bl	800528c <I2C_Master_ADDR>
 80047b4:	e072      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03b      	beq.n	800483a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	f000 80f3 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	09db      	lsrs	r3, r3, #7
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00f      	beq.n	8004800 <HAL_I2C_EV_IRQHandler+0x11c>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	0a9b      	lsrs	r3, r3, #10
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_I2C_EV_IRQHandler+0x11c>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f94c 	bl	8004a96 <I2C_MasterTransmit_TXE>
 80047fe:	e04d      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80d6 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80cf 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	2b21      	cmp	r3, #33	; 0x21
 8004820:	d103      	bne.n	800482a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f9d3 	bl	8004bce <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004828:	e0c7      	b.n	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	f040 80c4 	bne.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa41 	bl	8004cba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004838:	e0bf      	b.n	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004848:	f000 80b7 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <HAL_I2C_EV_IRQHandler+0x194>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	0a9b      	lsrs	r3, r3, #10
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <HAL_I2C_EV_IRQHandler+0x194>
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fab6 	bl	8004de2 <I2C_MasterReceive_RXNE>
 8004876:	e011      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 809a 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	0a5b      	lsrs	r3, r3, #9
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8093 	beq.w	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb5f 	bl	8004f58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489a:	e08e      	b.n	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800489c:	e08d      	b.n	80049ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	e007      	b.n	80048c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	0a5b      	lsrs	r3, r3, #9
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 ff1d 	bl	800572a <I2C_Slave_ADDR>
 80048f0:	e066      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x22e>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	0a5b      	lsrs	r3, r3, #9
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 ff58 	bl	80057c0 <I2C_Slave_STOPF>
 8004910:	e056      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d002      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x23a>
 8004918:	7bbb      	ldrb	r3, [r7, #14]
 800491a:	2b29      	cmp	r3, #41	; 0x29
 800491c:	d125      	bne.n	800496a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00f      	beq.n	800494a <HAL_I2C_EV_IRQHandler+0x266>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	0a9b      	lsrs	r3, r3, #10
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_I2C_EV_IRQHandler+0x266>
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fe33 	bl	80055ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004948:	e039      	b.n	80049be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d033      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x2da>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	0a5b      	lsrs	r3, r3, #9
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02d      	beq.n	80049be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fe60 	bl	8005628 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004968:	e029      	b.n	80049be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00f      	beq.n	8004996 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	0a9b      	lsrs	r3, r3, #10
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fe6b 	bl	800566a <I2C_SlaveReceive_RXNE>
 8004994:	e014      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fe99 	bl	80056e6 <I2C_SlaveReceive_BTF>
 80049b4:	e004      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049b6:	bf00      	nop
 80049b8:	e002      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ba:	bf00      	nop
 80049bc:	e000      	b.n	80049c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
 8004a22:	4613      	mov	r3, r2
 8004a24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d150      	bne.n	8004b5e <I2C_MasterTransmit_TXE+0xc8>
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b21      	cmp	r3, #33	; 0x21
 8004ac0:	d14d      	bne.n	8004b5e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d01d      	beq.n	8004b04 <I2C_MasterTransmit_TXE+0x6e>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d01a      	beq.n	8004b04 <I2C_MasterTransmit_TXE+0x6e>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad4:	d016      	beq.n	8004b04 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ae4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2211      	movs	r2, #17
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff62 	bl	80049c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b02:	e060      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b12:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d107      	bne.n	8004b4e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff7d 	bl	8004a46 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b4c:	e03b      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff ff35 	bl	80049c6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b5c:	e033      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b21      	cmp	r3, #33	; 0x21
 8004b62:	d005      	beq.n	8004b70 <I2C_MasterTransmit_TXE+0xda>
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d12d      	bne.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b22      	cmp	r3, #34	; 0x22
 8004b6e:	d12a      	bne.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d108      	bne.n	8004b8c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b8a:	e01c      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d103      	bne.n	8004ba0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f88e 	bl	8004cba <I2C_MemoryTransmit_TXE_BTF>
}
 8004b9e:	e012      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bc4:	e7ff      	b.n	8004bc6 <I2C_MasterTransmit_TXE+0x130>
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b21      	cmp	r3, #33	; 0x21
 8004be6:	d164      	bne.n	8004cb2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d012      	beq.n	8004c18 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c16:	e04c      	b.n	8004cb2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d01d      	beq.n	8004c5a <I2C_MasterTransmit_BTF+0x8c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d01a      	beq.n	8004c5a <I2C_MasterTransmit_BTF+0x8c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c2a:	d016      	beq.n	8004c5a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c3a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2211      	movs	r2, #17
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff feb7 	bl	80049c6 <HAL_I2C_MasterTxCpltCallback>
}
 8004c58:	e02b      	b.n	8004cb2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c68:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c78:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d107      	bne.n	8004ca4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fed2 	bl	8004a46 <HAL_I2C_MemTxCpltCallback>
}
 8004ca2:	e006      	b.n	8004cb2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fe8a 	bl	80049c6 <HAL_I2C_MasterTxCpltCallback>
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10b      	bne.n	8004cf2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004cf0:	e073      	b.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	121b      	asrs	r3, r3, #8
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d0c:	e065      	b.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10b      	bne.n	8004d2e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d2c:	e055      	b.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d151      	bne.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	d10d      	bne.n	8004d58 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d56:	e040      	b.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d015      	beq.n	8004d8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b21      	cmp	r3, #33	; 0x21
 8004d66:	d112      	bne.n	8004d8e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d8c:	e025      	b.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d120      	bne.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b21      	cmp	r3, #33	; 0x21
 8004d9c:	d11d      	bne.n	8004dda <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fe36 	bl	8004a46 <HAL_I2C_MemTxCpltCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b22      	cmp	r3, #34	; 0x22
 8004df4:	f040 80ac 	bne.w	8004f50 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d921      	bls.n	8004e4a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	f040 808c 	bne.w	8004f50 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e48:	e082      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d075      	beq.n	8004f3e <I2C_MasterReceive_RXNE+0x15c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d002      	beq.n	8004e5e <I2C_MasterReceive_RXNE+0x7c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d16f      	bne.n	8004f3e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 fa60 	bl	8006324 <I2C_WaitOnSTOPRequestThroughIT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d142      	bne.n	8004ef0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d10a      	bne.n	8004eda <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fdc1 	bl	8004a5a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ed8:	e03a      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2212      	movs	r2, #18
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fd76 	bl	80049da <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eee:	e02f      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004efe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fd99 	bl	8004a6e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f3c:	e008      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4c:	605a      	str	r2, [r3, #4]
}
 8004f4e:	e7ff      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x16e>
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d11b      	bne.n	8004fa8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fa6:	e0bd      	b.n	8005124 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d129      	bne.n	8005006 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d00a      	beq.n	8004fde <I2C_MasterReceive_BTF+0x86>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d007      	beq.n	8004fde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005004:	e08e      	b.n	8005124 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d176      	bne.n	80050fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d002      	beq.n	800501c <I2C_MasterReceive_BTF+0xc4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b10      	cmp	r3, #16
 800501a:	d108      	bne.n	800502e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e019      	b.n	8005062 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d002      	beq.n	800503a <I2C_MasterReceive_BTF+0xe2>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d108      	bne.n	800504c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e00a      	b.n	8005062 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d007      	beq.n	8005062 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005060:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d10a      	bne.n	80050e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fcba 	bl	8004a5a <HAL_I2C_MemRxCpltCallback>
}
 80050e6:	e01d      	b.n	8005124 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2212      	movs	r2, #18
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fc6f 	bl	80049da <HAL_I2C_MasterRxCpltCallback>
}
 80050fc:	e012      	b.n	8005124 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d117      	bne.n	8005170 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005158:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800515a:	e067      	b.n	800522c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]
}
 800516e:	e05d      	b.n	800522c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005178:	d133      	bne.n	80051e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b21      	cmp	r3, #33	; 0x21
 8005184:	d109      	bne.n	800519a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005196:	611a      	str	r2, [r3, #16]
 8005198:	e008      	b.n	80051ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <I2C_Master_SB+0x92>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d032      	beq.n	800522c <I2C_Master_SB+0x100>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02d      	beq.n	800522c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051de:	605a      	str	r2, [r3, #4]
}
 80051e0:	e024      	b.n	800522c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10e      	bne.n	8005208 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	11db      	asrs	r3, r3, #7
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0306 	and.w	r3, r3, #6
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f063 030f 	orn	r3, r3, #15
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]
}
 8005206:	e011      	b.n	800522c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10d      	bne.n	800522c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	b29b      	uxth	r3, r3
 8005216:	11db      	asrs	r3, r3, #7
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0306 	and.w	r3, r3, #6
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f063 030e 	orn	r3, r3, #14
 8005224:	b2da      	uxtb	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	611a      	str	r2, [r3, #16]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	b2da      	uxtb	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <I2C_Master_ADD10+0x26>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <I2C_Master_ADD10+0x48>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	605a      	str	r2, [r3, #4]
  }
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800528c:	b480      	push	{r7}
 800528e:	b091      	sub	sp, #68	; 0x44
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b22      	cmp	r3, #34	; 0x22
 80052b4:	f040 8169 	bne.w	800558a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10f      	bne.n	80052e0 <I2C_Master_ADDR+0x54>
 80052c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d10b      	bne.n	80052e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	633b      	str	r3, [r7, #48]	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	633b      	str	r3, [r7, #48]	; 0x30
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	e160      	b.n	80055a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11d      	bne.n	8005324 <I2C_Master_ADDR+0x98>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052f0:	d118      	bne.n	8005324 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f2:	2300      	movs	r3, #0
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005316:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
 8005322:	e13e      	b.n	80055a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d113      	bne.n	8005356 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532e:	2300      	movs	r3, #0
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e115      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 808a 	bne.w	8005476 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005368:	d137      	bne.n	80053da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005378:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005388:	d113      	bne.n	80053b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005398:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	e0e7      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e0d3      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d02e      	beq.n	800543e <I2C_Master_ADDR+0x1b2>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d02b      	beq.n	800543e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	2b12      	cmp	r3, #18
 80053ea:	d102      	bne.n	80053f2 <I2C_Master_ADDR+0x166>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d125      	bne.n	800543e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d00e      	beq.n	8005416 <I2C_Master_ADDR+0x18a>
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d00b      	beq.n	8005416 <I2C_Master_ADDR+0x18a>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b10      	cmp	r3, #16
 8005402:	d008      	beq.n	8005416 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e007      	b.n	8005426 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005424:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	e0a1      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e085      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d14d      	bne.n	800551c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	2b04      	cmp	r3, #4
 8005484:	d016      	beq.n	80054b4 <I2C_Master_ADDR+0x228>
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b02      	cmp	r3, #2
 800548a:	d013      	beq.n	80054b4 <I2C_Master_ADDR+0x228>
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	2b10      	cmp	r3, #16
 8005490:	d010      	beq.n	80054b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e007      	b.n	80054c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d2:	d117      	bne.n	8005504 <I2C_Master_ADDR+0x278>
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054da:	d00b      	beq.n	80054f4 <I2C_Master_ADDR+0x268>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d008      	beq.n	80054f4 <I2C_Master_ADDR+0x268>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d005      	beq.n	80054f4 <I2C_Master_ADDR+0x268>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d002      	beq.n	80054f4 <I2C_Master_ADDR+0x268>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d107      	bne.n	8005504 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005502:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	e032      	b.n	8005582 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800552a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d117      	bne.n	800556c <I2C_Master_ADDR+0x2e0>
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005542:	d00b      	beq.n	800555c <I2C_Master_ADDR+0x2d0>
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	2b01      	cmp	r3, #1
 8005548:	d008      	beq.n	800555c <I2C_Master_ADDR+0x2d0>
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b08      	cmp	r3, #8
 800554e:	d005      	beq.n	800555c <I2C_Master_ADDR+0x2d0>
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	2b10      	cmp	r3, #16
 8005554:	d002      	beq.n	800555c <I2C_Master_ADDR+0x2d0>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b20      	cmp	r3, #32
 800555a:	d107      	bne.n	800556c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800556a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005588:	e00b      	b.n	80055a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	e7ff      	b.n	80055a2 <I2C_Master_ADDR+0x316>
 80055a2:	bf00      	nop
 80055a4:	3744      	adds	r7, #68	; 0x44
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02b      	beq.n	8005620 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d114      	bne.n	8005620 <I2C_SlaveTransmit_TXE+0x72>
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b29      	cmp	r3, #41	; 0x29
 80055fa:	d111      	bne.n	8005620 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2228      	movs	r2, #40	; 0x28
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f9e7 	bl	80049ee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02c      	beq.n	80056de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d114      	bne.n	80056de <I2C_SlaveReceive_RXNE+0x74>
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b2a      	cmp	r3, #42	; 0x2a
 80056b8:	d111      	bne.n	80056de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2222      	movs	r2, #34	; 0x22
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2228      	movs	r2, #40	; 0x28
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff f992 	bl	8004a02 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d012      	beq.n	800571e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005744:	2b28      	cmp	r3, #40	; 0x28
 8005746:	d127      	bne.n	8005798 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005756:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	09db      	lsrs	r3, r3, #7
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	81bb      	strh	r3, [r7, #12]
 800577a:	e002      	b.n	8005782 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800578a:	89ba      	ldrh	r2, [r7, #12]
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff f940 	bl	8004a16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005796:	e00e      	b.n	80057b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581c:	d172      	bne.n	8005904 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b22      	cmp	r3, #34	; 0x22
 8005822:	d002      	beq.n	800582a <I2C_Slave_STOPF+0x6a>
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b2a      	cmp	r3, #42	; 0x2a
 8005828:	d135      	bne.n	8005896 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0204 	orr.w	r2, r3, #4
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800585c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe f919 	bl	8003a9a <HAL_DMA_GetState>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d049      	beq.n	8005902 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	4a69      	ldr	r2, [pc, #420]	; (8005a18 <I2C_Slave_STOPF+0x258>)
 8005874:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe f8eb 	bl	8003a56 <HAL_DMA_Abort_IT>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d03d      	beq.n	8005902 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005890:	4610      	mov	r0, r2
 8005892:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005894:	e035      	b.n	8005902 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f043 0204 	orr.w	r2, r3, #4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe f8e3 	bl	8003a9a <HAL_DMA_GetState>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d014      	beq.n	8005904 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4a4e      	ldr	r2, [pc, #312]	; (8005a18 <I2C_Slave_STOPF+0x258>)
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe f8b5 	bl	8003a56 <HAL_DMA_Abort_IT>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	e000      	b.n	8005904 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005902:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d03e      	beq.n	800598c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d112      	bne.n	8005942 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d112      	bne.n	8005976 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f043 0204 	orr.w	r2, r3, #4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f843 	bl	8005a20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800599a:	e039      	b.n	8005a10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b2a      	cmp	r3, #42	; 0x2a
 80059a0:	d109      	bne.n	80059b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2228      	movs	r2, #40	; 0x28
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff f826 	bl	8004a02 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b28      	cmp	r3, #40	; 0x28
 80059c0:	d111      	bne.n	80059e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <I2C_Slave_STOPF+0x25c>)
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff f827 	bl	8004a32 <HAL_I2C_ListenCpltCallback>
}
 80059e4:	e014      	b.n	8005a10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	2b22      	cmp	r3, #34	; 0x22
 80059ec:	d002      	beq.n	80059f4 <I2C_Slave_STOPF+0x234>
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b22      	cmp	r3, #34	; 0x22
 80059f2:	d10d      	bne.n	8005a10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fe fff9 	bl	8004a02 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	08005f25 	.word	0x08005f25
 8005a1c:	ffff0000 	.word	0xffff0000

08005a20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d002      	beq.n	8005a44 <I2C_ITError+0x24>
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d10a      	bne.n	8005a5a <I2C_ITError+0x3a>
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	d107      	bne.n	8005a5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a60:	2b28      	cmp	r3, #40	; 0x28
 8005a62:	d107      	bne.n	8005a74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2228      	movs	r2, #40	; 0x28
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a72:	e015      	b.n	8005aa0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a82:	d00a      	beq.n	8005a9a <I2C_ITError+0x7a>
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b60      	cmp	r3, #96	; 0x60
 8005a88:	d007      	beq.n	8005a9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aae:	d162      	bne.n	8005b76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005abe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d020      	beq.n	8005b10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	4a6a      	ldr	r2, [pc, #424]	; (8005c7c <I2C_ITError+0x25c>)
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd ffbb 	bl	8003a56 <HAL_DMA_Abort_IT>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8089 	beq.w	8005bfa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
 8005b0e:	e074      	b.n	8005bfa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4a59      	ldr	r2, [pc, #356]	; (8005c7c <I2C_ITError+0x25c>)
 8005b16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fd ff9a 	bl	8003a56 <HAL_DMA_Abort_IT>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d068      	beq.n	8005bfa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d10b      	bne.n	8005b4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	e041      	b.n	8005bfa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b60      	cmp	r3, #96	; 0x60
 8005b80:	d125      	bne.n	8005bce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d10b      	bne.n	8005bb6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe ff5b 	bl	8004a82 <HAL_I2C_AbortCpltCallback>
 8005bcc:	e015      	b.n	8005bfa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d10b      	bne.n	8005bf4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fe ff3a 	bl	8004a6e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d113      	bne.n	8005c74 <I2C_ITError+0x254>
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b28      	cmp	r3, #40	; 0x28
 8005c50:	d110      	bne.n	8005c74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <I2C_ITError+0x260>)
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fe fedf 	bl	8004a32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08005f25 	.word	0x08005f25
 8005c80:	ffff0000 	.word	0xffff0000

08005c84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	460b      	mov	r3, r1
 8005c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d006      	beq.n	8005cae <I2C_MasterRequestWrite+0x2a>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d003      	beq.n	8005cae <I2C_MasterRequestWrite+0x2a>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cac:	d108      	bne.n	8005cc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e00b      	b.n	8005cd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	2b12      	cmp	r3, #18
 8005cc6:	d107      	bne.n	8005cd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f9c5 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfe:	d103      	bne.n	8005d08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e035      	b.n	8005d78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d14:	d108      	bne.n	8005d28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e01b      	b.n	8005d60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d28:	897b      	ldrh	r3, [r7, #10]
 8005d2a:	11db      	asrs	r3, r3, #7
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0306 	and.w	r3, r3, #6
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f063 030f 	orn	r3, r3, #15
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	490e      	ldr	r1, [pc, #56]	; (8005d80 <I2C_MasterRequestWrite+0xfc>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f9eb 	bl	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e010      	b.n	8005d78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d56:	897b      	ldrh	r3, [r7, #10]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4907      	ldr	r1, [pc, #28]	; (8005d84 <I2C_MasterRequestWrite+0x100>)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9db 	bl	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	00010008 	.word	0x00010008
 8005d84:	00010002 	.word	0x00010002

08005d88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	460b      	mov	r3, r1
 8005d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d006      	beq.n	8005dc2 <I2C_MasterRequestRead+0x3a>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d003      	beq.n	8005dc2 <I2C_MasterRequestRead+0x3a>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dc0:	d108      	bne.n	8005dd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e00b      	b.n	8005dec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	2b11      	cmp	r3, #17
 8005dda:	d107      	bne.n	8005dec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f93b 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00d      	beq.n	8005e20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e12:	d103      	bne.n	8005e1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e079      	b.n	8005f14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e28:	d108      	bne.n	8005e3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e2a:	897b      	ldrh	r3, [r7, #10]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]
 8005e3a:	e05f      	b.n	8005efc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e3c:	897b      	ldrh	r3, [r7, #10]
 8005e3e:	11db      	asrs	r3, r3, #7
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	f003 0306 	and.w	r3, r3, #6
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f063 030f 	orn	r3, r3, #15
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4930      	ldr	r1, [pc, #192]	; (8005f1c <I2C_MasterRequestRead+0x194>)
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f961 	bl	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e054      	b.n	8005f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	4929      	ldr	r1, [pc, #164]	; (8005f20 <I2C_MasterRequestRead+0x198>)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f951 	bl	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e044      	b.n	8005f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f8d9 	bl	8006074 <I2C_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d103      	bne.n	8005ee0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e017      	b.n	8005f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ee4:	897b      	ldrh	r3, [r7, #10]
 8005ee6:	11db      	asrs	r3, r3, #7
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0306 	and.w	r3, r3, #6
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f063 030e 	orn	r3, r3, #14
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4907      	ldr	r1, [pc, #28]	; (8005f20 <I2C_MasterRequestRead+0x198>)
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f90d 	bl	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	00010008 	.word	0x00010008
 8005f20:	00010002 	.word	0x00010002

08005f24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f3e:	4b4b      	ldr	r3, [pc, #300]	; (800606c <I2C_DMAAbort+0x148>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	4a4a      	ldr	r2, [pc, #296]	; (8006070 <I2C_DMAAbort+0x14c>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	0a1a      	lsrs	r2, r3, #8
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	00da      	lsls	r2, r3, #3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f6a:	e00a      	b.n	8005f82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f80:	d0ea      	beq.n	8005f58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	2200      	movs	r2, #0
 8005f90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b60      	cmp	r3, #96	; 0x60
 8005ff2:	d10e      	bne.n	8006012 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800600a:	6978      	ldr	r0, [r7, #20]
 800600c:	f7fe fd39 	bl	8004a82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006010:	e027      	b.n	8006062 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006018:	2b28      	cmp	r3, #40	; 0x28
 800601a:	d117      	bne.n	800604c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800603a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2228      	movs	r2, #40	; 0x28
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800604a:	e007      	b.n	800605c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800605c:	6978      	ldr	r0, [r7, #20]
 800605e:	f7fe fd06 	bl	8004a6e <HAL_I2C_ErrorCallback>
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000010 	.word	0x20000010
 8006070:	14f8b589 	.word	0x14f8b589

08006074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006084:	e025      	b.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d021      	beq.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fc fd09 	bl	8002aa4 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d116      	bne.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e023      	b.n	800611a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10d      	bne.n	80060f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	43da      	mvns	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	e00c      	b.n	8006112 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	43da      	mvns	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4013      	ands	r3, r2
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf0c      	ite	eq
 800610a:	2301      	moveq	r3, #1
 800610c:	2300      	movne	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	429a      	cmp	r2, r3
 8006116:	d0b6      	beq.n	8006086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006130:	e051      	b.n	80061d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006140:	d123      	bne.n	800618a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0204 	orr.w	r2, r3, #4
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e046      	b.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d021      	beq.n	80061d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fc fc87 	bl	8002aa4 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e020      	b.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10c      	bne.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e00b      	b.n	8006212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	43da      	mvns	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4013      	ands	r3, r2
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d18d      	bne.n	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800622c:	e02d      	b.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f900 	bl	8006434 <I2C_IsAcknowledgeFailed>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e02d      	b.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d021      	beq.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7fc fc2d 	bl	8002aa4 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d116      	bne.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e007      	b.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d1ca      	bne.n	800622e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062ae:	e02d      	b.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f8bf 	bl	8006434 <I2C_IsAcknowledgeFailed>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e02d      	b.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d021      	beq.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c8:	f7fc fbec 	bl	8002aa4 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e007      	b.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b04      	cmp	r3, #4
 8006318:	d1ca      	bne.n	80062b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	08db      	lsrs	r3, r3, #3
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	0a1a      	lsrs	r2, r3, #8
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3b01      	subs	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e008      	b.n	8006374 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d0e9      	beq.n	8006346 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000010 	.word	0x20000010
 8006384:	14f8b589 	.word	0x14f8b589

08006388 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006394:	e042      	b.n	800641c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d119      	bne.n	80063d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0210 	mvn.w	r2, #16
 80063ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e029      	b.n	800642c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d8:	f7fc fb64 	bl	8002aa4 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d302      	bcc.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d116      	bne.n	800641c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e007      	b.n	800642c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d1b5      	bne.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d11b      	bne.n	8006484 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006454:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	f043 0204 	orr.w	r2, r3, #4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80064a2:	d103      	bne.n	80064ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80064aa:	e007      	b.n	80064bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80064b4:	d102      	bne.n	80064bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2208      	movs	r2, #8
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_PWREx_EnableOverDrive+0x94>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064f4:	f7fc fad6 	bl	8002aa4 <HAL_GetTick>
 80064f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064fa:	e009      	b.n	8006510 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064fc:	f7fc fad2 	bl	8002aa4 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800650a:	d901      	bls.n	8006510 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e01f      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006510:	4b13      	ldr	r3, [pc, #76]	; (8006560 <HAL_PWREx_EnableOverDrive+0x98>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d1ee      	bne.n	80064fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006524:	f7fc fabe 	bl	8002aa4 <HAL_GetTick>
 8006528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800652a:	e009      	b.n	8006540 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800652c:	f7fc faba 	bl	8002aa4 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653a:	d901      	bls.n	8006540 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e007      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_PWREx_EnableOverDrive+0x98>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d1ee      	bne.n	800652c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40023800 	.word	0x40023800
 800655c:	420e0040 	.word	0x420e0040
 8006560:	40007000 	.word	0x40007000
 8006564:	420e0044 	.word	0x420e0044

08006568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0cc      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800657c:	4b68      	ldr	r3, [pc, #416]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d90c      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658a:	4b65      	ldr	r3, [pc, #404]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006592:	4b63      	ldr	r3, [pc, #396]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0b8      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d020      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065bc:	4b59      	ldr	r3, [pc, #356]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4a58      	ldr	r2, [pc, #352]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065d4:	4b53      	ldr	r3, [pc, #332]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4a52      	ldr	r2, [pc, #328]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e0:	4b50      	ldr	r3, [pc, #320]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	494d      	ldr	r1, [pc, #308]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d044      	beq.n	8006688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	4b47      	ldr	r3, [pc, #284]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d119      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e07f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d003      	beq.n	8006626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006622:	2b03      	cmp	r3, #3
 8006624:	d107      	bne.n	8006636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e06f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006636:	4b3b      	ldr	r3, [pc, #236]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e067      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006646:	4b37      	ldr	r3, [pc, #220]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f023 0203 	bic.w	r2, r3, #3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4934      	ldr	r1, [pc, #208]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	4313      	orrs	r3, r2
 8006656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006658:	f7fc fa24 	bl	8002aa4 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800665e:	e00a      	b.n	8006676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fc fa20 	bl	8002aa4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e04f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 020c 	and.w	r2, r3, #12
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	429a      	cmp	r2, r3
 8006686:	d1eb      	bne.n	8006660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d20c      	bcs.n	80066b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006696:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669e:	4b20      	ldr	r3, [pc, #128]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e032      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066bc:	4b19      	ldr	r3, [pc, #100]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4916      	ldr	r1, [pc, #88]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	490e      	ldr	r1, [pc, #56]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ee:	f000 f855 	bl	800679c <HAL_RCC_GetSysClockFreq>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	490a      	ldr	r1, [pc, #40]	; (8006728 <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	5ccb      	ldrb	r3, [r1, r3]
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <HAL_RCC_ClockConfig+0x1c4>)
 8006708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fc f984 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023c00 	.word	0x40023c00
 8006724:	40023800 	.word	0x40023800
 8006728:	08009ed8 	.word	0x08009ed8
 800672c:	20000010 	.word	0x20000010
 8006730:	20000014 	.word	0x20000014

08006734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <HAL_RCC_GetHCLKFreq+0x14>)
 800673a:	681b      	ldr	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000010 	.word	0x20000010

0800674c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006750:	f7ff fff0 	bl	8006734 <HAL_RCC_GetHCLKFreq>
 8006754:	4602      	mov	r2, r0
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	0a9b      	lsrs	r3, r3, #10
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4903      	ldr	r1, [pc, #12]	; (8006770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006762:	5ccb      	ldrb	r3, [r1, r3]
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40023800 	.word	0x40023800
 8006770:	08009ee8 	.word	0x08009ee8

08006774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006778:	f7ff ffdc 	bl	8006734 <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	0b5b      	lsrs	r3, r3, #13
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	; (8006798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	08009ee8 	.word	0x08009ee8

0800679c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800679c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a0:	b0ae      	sub	sp, #184	; 0xb8
 80067a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067c2:	4bcb      	ldr	r3, [pc, #812]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 030c 	and.w	r3, r3, #12
 80067ca:	2b0c      	cmp	r3, #12
 80067cc:	f200 8206 	bhi.w	8006bdc <HAL_RCC_GetSysClockFreq+0x440>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	0800680d 	.word	0x0800680d
 80067dc:	08006bdd 	.word	0x08006bdd
 80067e0:	08006bdd 	.word	0x08006bdd
 80067e4:	08006bdd 	.word	0x08006bdd
 80067e8:	08006815 	.word	0x08006815
 80067ec:	08006bdd 	.word	0x08006bdd
 80067f0:	08006bdd 	.word	0x08006bdd
 80067f4:	08006bdd 	.word	0x08006bdd
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006bdd 	.word	0x08006bdd
 8006800:	08006bdd 	.word	0x08006bdd
 8006804:	08006bdd 	.word	0x08006bdd
 8006808:	08006a0d 	.word	0x08006a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800680c:	4bb9      	ldr	r3, [pc, #740]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800680e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006812:	e1e7      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006814:	4bb8      	ldr	r3, [pc, #736]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800681a:	e1e3      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800681c:	4bb4      	ldr	r3, [pc, #720]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006828:	4bb1      	ldr	r3, [pc, #708]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d071      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006834:	4bae      	ldr	r3, [pc, #696]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	099b      	lsrs	r3, r3, #6
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006840:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800685a:	4622      	mov	r2, r4
 800685c:	462b      	mov	r3, r5
 800685e:	f04f 0000 	mov.w	r0, #0
 8006862:	f04f 0100 	mov.w	r1, #0
 8006866:	0159      	lsls	r1, r3, #5
 8006868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800686c:	0150      	lsls	r0, r2, #5
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4621      	mov	r1, r4
 8006874:	1a51      	subs	r1, r2, r1
 8006876:	6439      	str	r1, [r7, #64]	; 0x40
 8006878:	4629      	mov	r1, r5
 800687a:	eb63 0301 	sbc.w	r3, r3, r1
 800687e:	647b      	str	r3, [r7, #68]	; 0x44
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800688c:	4649      	mov	r1, r9
 800688e:	018b      	lsls	r3, r1, #6
 8006890:	4641      	mov	r1, r8
 8006892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006896:	4641      	mov	r1, r8
 8006898:	018a      	lsls	r2, r1, #6
 800689a:	4641      	mov	r1, r8
 800689c:	1a51      	subs	r1, r2, r1
 800689e:	63b9      	str	r1, [r7, #56]	; 0x38
 80068a0:	4649      	mov	r1, r9
 80068a2:	eb63 0301 	sbc.w	r3, r3, r1
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80068b4:	4649      	mov	r1, r9
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4641      	mov	r1, r8
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4641      	mov	r1, r8
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4622      	mov	r2, r4
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
 80068ce:	462b      	mov	r3, r5
 80068d0:	460a      	mov	r2, r1
 80068d2:	eb42 0303 	adc.w	r3, r2, r3
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068e4:	4629      	mov	r1, r5
 80068e6:	024b      	lsls	r3, r1, #9
 80068e8:	4621      	mov	r1, r4
 80068ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068ee:	4621      	mov	r1, r4
 80068f0:	024a      	lsls	r2, r1, #9
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006904:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006908:	f7fa f8f0 	bl	8000aec <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006916:	e067      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006918:	4b75      	ldr	r3, [pc, #468]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	2200      	movs	r2, #0
 8006920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006924:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800692c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006930:	67bb      	str	r3, [r7, #120]	; 0x78
 8006932:	2300      	movs	r3, #0
 8006934:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006936:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800693a:	4622      	mov	r2, r4
 800693c:	462b      	mov	r3, r5
 800693e:	f04f 0000 	mov.w	r0, #0
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	0159      	lsls	r1, r3, #5
 8006948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800694c:	0150      	lsls	r0, r2, #5
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4621      	mov	r1, r4
 8006954:	1a51      	subs	r1, r2, r1
 8006956:	62b9      	str	r1, [r7, #40]	; 0x28
 8006958:	4629      	mov	r1, r5
 800695a:	eb63 0301 	sbc.w	r3, r3, r1
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800696c:	4649      	mov	r1, r9
 800696e:	018b      	lsls	r3, r1, #6
 8006970:	4641      	mov	r1, r8
 8006972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006976:	4641      	mov	r1, r8
 8006978:	018a      	lsls	r2, r1, #6
 800697a:	4641      	mov	r1, r8
 800697c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006980:	4649      	mov	r1, r9
 8006982:	eb63 0b01 	sbc.w	fp, r3, r1
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800699a:	4692      	mov	sl, r2
 800699c:	469b      	mov	fp, r3
 800699e:	4623      	mov	r3, r4
 80069a0:	eb1a 0303 	adds.w	r3, sl, r3
 80069a4:	623b      	str	r3, [r7, #32]
 80069a6:	462b      	mov	r3, r5
 80069a8:	eb4b 0303 	adc.w	r3, fp, r3
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80069ba:	4629      	mov	r1, r5
 80069bc:	028b      	lsls	r3, r1, #10
 80069be:	4621      	mov	r1, r4
 80069c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c4:	4621      	mov	r1, r4
 80069c6:	028a      	lsls	r2, r1, #10
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069d0:	2200      	movs	r2, #0
 80069d2:	673b      	str	r3, [r7, #112]	; 0x70
 80069d4:	677a      	str	r2, [r7, #116]	; 0x74
 80069d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80069da:	f7fa f887 	bl	8000aec <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4613      	mov	r3, r2
 80069e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069e8:	4b41      	ldr	r3, [pc, #260]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	3301      	adds	r3, #1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80069fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006a0a:	e0eb      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a18:	4b35      	ldr	r3, [pc, #212]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d06b      	beq.n	8006afc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	663b      	str	r3, [r7, #96]	; 0x60
 8006a38:	2300      	movs	r3, #0
 8006a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8006a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006a40:	4622      	mov	r2, r4
 8006a42:	462b      	mov	r3, r5
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	0159      	lsls	r1, r3, #5
 8006a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a52:	0150      	lsls	r0, r2, #5
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4621      	mov	r1, r4
 8006a5a:	1a51      	subs	r1, r2, r1
 8006a5c:	61b9      	str	r1, [r7, #24]
 8006a5e:	4629      	mov	r1, r5
 8006a60:	eb63 0301 	sbc.w	r3, r3, r1
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006a72:	4659      	mov	r1, fp
 8006a74:	018b      	lsls	r3, r1, #6
 8006a76:	4651      	mov	r1, sl
 8006a78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	018a      	lsls	r2, r1, #6
 8006a80:	4651      	mov	r1, sl
 8006a82:	ebb2 0801 	subs.w	r8, r2, r1
 8006a86:	4659      	mov	r1, fp
 8006a88:	eb63 0901 	sbc.w	r9, r3, r1
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aa0:	4690      	mov	r8, r2
 8006aa2:	4699      	mov	r9, r3
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	eb18 0303 	adds.w	r3, r8, r3
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	462b      	mov	r3, r5
 8006aae:	eb49 0303 	adc.w	r3, r9, r3
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	024b      	lsls	r3, r1, #9
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aca:	4621      	mov	r1, r4
 8006acc:	024a      	lsls	r2, r1, #9
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ada:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ae0:	f7fa f804 	bl	8000aec <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4613      	mov	r3, r2
 8006aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aee:	e065      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0x420>
 8006af0:	40023800 	.word	0x40023800
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006afc:	4b3d      	ldr	r3, [pc, #244]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	099b      	lsrs	r3, r3, #6
 8006b02:	2200      	movs	r2, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	4611      	mov	r1, r2
 8006b08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0e:	2300      	movs	r3, #0
 8006b10:	657b      	str	r3, [r7, #84]	; 0x54
 8006b12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006b16:	4642      	mov	r2, r8
 8006b18:	464b      	mov	r3, r9
 8006b1a:	f04f 0000 	mov.w	r0, #0
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	0159      	lsls	r1, r3, #5
 8006b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b28:	0150      	lsls	r0, r2, #5
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4641      	mov	r1, r8
 8006b30:	1a51      	subs	r1, r2, r1
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	4649      	mov	r1, r9
 8006b36:	eb63 0301 	sbc.w	r3, r3, r1
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006b48:	4659      	mov	r1, fp
 8006b4a:	018b      	lsls	r3, r1, #6
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b52:	4651      	mov	r1, sl
 8006b54:	018a      	lsls	r2, r1, #6
 8006b56:	4651      	mov	r1, sl
 8006b58:	1a54      	subs	r4, r2, r1
 8006b5a:	4659      	mov	r1, fp
 8006b5c:	eb63 0501 	sbc.w	r5, r3, r1
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	00eb      	lsls	r3, r5, #3
 8006b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b6e:	00e2      	lsls	r2, r4, #3
 8006b70:	4614      	mov	r4, r2
 8006b72:	461d      	mov	r5, r3
 8006b74:	4643      	mov	r3, r8
 8006b76:	18e3      	adds	r3, r4, r3
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	eb45 0303 	adc.w	r3, r5, r3
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b8e:	4629      	mov	r1, r5
 8006b90:	028b      	lsls	r3, r1, #10
 8006b92:	4621      	mov	r1, r4
 8006b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b98:	4621      	mov	r1, r4
 8006b9a:	028a      	lsls	r2, r1, #10
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bae:	f7f9 ff9d 	bl	8000aec <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	0f1b      	lsrs	r3, r3, #28
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006bda:	e003      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	37b8      	adds	r7, #184	; 0xb8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	00f42400 	.word	0x00f42400

08006bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e28d      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8083 	beq.w	8006d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c1c:	4b94      	ldr	r3, [pc, #592]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d019      	beq.n	8006c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c28:	4b91      	ldr	r3, [pc, #580]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c34:	4b8e      	ldr	r3, [pc, #568]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c40:	d00c      	beq.n	8006c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c42:	4b8b      	ldr	r3, [pc, #556]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c4a:	2b0c      	cmp	r3, #12
 8006c4c:	d112      	bne.n	8006c74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c4e:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c5a:	d10b      	bne.n	8006c74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5c:	4b84      	ldr	r3, [pc, #528]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d05b      	beq.n	8006d20 <HAL_RCC_OscConfig+0x124>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d157      	bne.n	8006d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e25a      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCC_OscConfig+0x90>
 8006c7e:	4b7c      	ldr	r3, [pc, #496]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7b      	ldr	r2, [pc, #492]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e01d      	b.n	8006cc8 <HAL_RCC_OscConfig+0xcc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c94:	d10c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0xb4>
 8006c96:	4b76      	ldr	r3, [pc, #472]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a75      	ldr	r2, [pc, #468]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a72      	ldr	r2, [pc, #456]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCC_OscConfig+0xcc>
 8006cb0:	4b6f      	ldr	r3, [pc, #444]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a6e      	ldr	r2, [pc, #440]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	4b6c      	ldr	r3, [pc, #432]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6b      	ldr	r2, [pc, #428]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d013      	beq.n	8006cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fb fee8 	bl	8002aa4 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7fb fee4 	bl	8002aa4 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e21f      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cea:	4b61      	ldr	r3, [pc, #388]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0xdc>
 8006cf6:	e014      	b.n	8006d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fb fed4 	bl	8002aa4 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d00:	f7fb fed0 	bl	8002aa4 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b64      	cmp	r3, #100	; 0x64
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e20b      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d12:	4b57      	ldr	r3, [pc, #348]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f0      	bne.n	8006d00 <HAL_RCC_OscConfig+0x104>
 8006d1e:	e000      	b.n	8006d22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d06f      	beq.n	8006e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d2e:	4b50      	ldr	r3, [pc, #320]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d017      	beq.n	8006d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d3a:	4b4d      	ldr	r3, [pc, #308]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d105      	bne.n	8006d52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d46:	4b4a      	ldr	r3, [pc, #296]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d52:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d11c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5e:	4b44      	ldr	r3, [pc, #272]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x186>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d001      	beq.n	8006d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e1d3      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d82:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4937      	ldr	r1, [pc, #220]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	e03a      	b.n	8006e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d020      	beq.n	8006de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da0:	4b34      	ldr	r3, [pc, #208]	; (8006e74 <HAL_RCC_OscConfig+0x278>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fb fe7d 	bl	8002aa4 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dae:	f7fb fe79 	bl	8002aa4 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1b4      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dcc:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4925      	ldr	r1, [pc, #148]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]
 8006de0:	e015      	b.n	8006e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <HAL_RCC_OscConfig+0x278>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de8:	f7fb fe5c 	bl	8002aa4 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df0:	f7fb fe58 	bl	8002aa4 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e193      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d036      	beq.n	8006e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <HAL_RCC_OscConfig+0x27c>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e28:	f7fb fe3c 	bl	8002aa4 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e30:	f7fb fe38 	bl	8002aa4 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e173      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x234>
 8006e4e:	e01b      	b.n	8006e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x27c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e56:	f7fb fe25 	bl	8002aa4 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e5c:	e00e      	b.n	8006e7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5e:	f7fb fe21 	bl	8002aa4 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d907      	bls.n	8006e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e15c      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
 8006e70:	40023800 	.word	0x40023800
 8006e74:	42470000 	.word	0x42470000
 8006e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e7c:	4b8a      	ldr	r3, [pc, #552]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1ea      	bne.n	8006e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8097 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e9a:	4b83      	ldr	r3, [pc, #524]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	4b7f      	ldr	r3, [pc, #508]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	4a7e      	ldr	r2, [pc, #504]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb6:	4b7c      	ldr	r3, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec6:	4b79      	ldr	r3, [pc, #484]	; (80070ac <HAL_RCC_OscConfig+0x4b0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d118      	bne.n	8006f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed2:	4b76      	ldr	r3, [pc, #472]	; (80070ac <HAL_RCC_OscConfig+0x4b0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a75      	ldr	r2, [pc, #468]	; (80070ac <HAL_RCC_OscConfig+0x4b0>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ede:	f7fb fde1 	bl	8002aa4 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee6:	f7fb fddd 	bl	8002aa4 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e118      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef8:	4b6c      	ldr	r3, [pc, #432]	; (80070ac <HAL_RCC_OscConfig+0x4b0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d106      	bne.n	8006f1a <HAL_RCC_OscConfig+0x31e>
 8006f0c:	4b66      	ldr	r3, [pc, #408]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	4a65      	ldr	r2, [pc, #404]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f12:	f043 0301 	orr.w	r3, r3, #1
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70
 8006f18:	e01c      	b.n	8006f54 <HAL_RCC_OscConfig+0x358>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x340>
 8006f22:	4b61      	ldr	r3, [pc, #388]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	4a60      	ldr	r2, [pc, #384]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f28:	f043 0304 	orr.w	r3, r3, #4
 8006f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2e:	4b5e      	ldr	r3, [pc, #376]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	4a5d      	ldr	r2, [pc, #372]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0x358>
 8006f3c:	4b5a      	ldr	r3, [pc, #360]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4a59      	ldr	r2, [pc, #356]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	6713      	str	r3, [r2, #112]	; 0x70
 8006f48:	4b57      	ldr	r3, [pc, #348]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f4e:	f023 0304 	bic.w	r3, r3, #4
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fb fda2 	bl	8002aa4 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f62:	e00a      	b.n	8006f7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f64:	f7fb fd9e 	bl	8002aa4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e0d7      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7a:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0ee      	beq.n	8006f64 <HAL_RCC_OscConfig+0x368>
 8006f86:	e014      	b.n	8006fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f88:	f7fb fd8c 	bl	8002aa4 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7fb fd88 	bl	8002aa4 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e0c1      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa6:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ee      	bne.n	8006f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb8:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	4a3a      	ldr	r2, [pc, #232]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80ad 	beq.w	8007128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fce:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d060      	beq.n	800709c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d145      	bne.n	800706e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe2:	4b33      	ldr	r3, [pc, #204]	; (80070b0 <HAL_RCC_OscConfig+0x4b4>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fb fd5c 	bl	8002aa4 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7fb fd58 	bl	8002aa4 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e093      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	071b      	lsls	r3, r3, #28
 800703a:	491b      	ldr	r1, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 800703c:	4313      	orrs	r3, r2
 800703e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <HAL_RCC_OscConfig+0x4b4>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007046:	f7fb fd2d 	bl	8002aa4 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704e:	f7fb fd29 	bl	8002aa4 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e064      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x452>
 800706c:	e05c      	b.n	8007128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <HAL_RCC_OscConfig+0x4b4>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fb fd16 	bl	8002aa4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707c:	f7fb fd12 	bl	8002aa4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e04d      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_OscConfig+0x4ac>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x480>
 800709a:	e045      	b.n	8007128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d107      	bne.n	80070b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e040      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000
 80070b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b4:	4b1f      	ldr	r3, [pc, #124]	; (8007134 <HAL_RCC_OscConfig+0x538>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d030      	beq.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d129      	bne.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d122      	bne.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070e4:	4013      	ands	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d119      	bne.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	3b01      	subs	r3, #1
 80070fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d10f      	bne.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d107      	bne.n	8007124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800

08007138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e041      	b.n	80071ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb fa20 	bl	80025a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f000 fc4e 	bl	8007a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e04e      	b.n	800728e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a23      	ldr	r2, [pc, #140]	; (800729c <HAL_TIM_Base_Start_IT+0xc4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d022      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d01d      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1f      	ldr	r2, [pc, #124]	; (80072a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d018      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1e      	ldr	r2, [pc, #120]	; (80072a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d013      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00e      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x80>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d111      	bne.n	800727c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b06      	cmp	r3, #6
 8007268:	d010      	beq.n	800728c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	e007      	b.n	800728c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40010400 	.word	0x40010400
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40001800 	.word	0x40001800

080072b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e041      	b.n	800734e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb f894 	bl	800240c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f000 fb8e 	bl	8007a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e097      	b.n	800749a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fb f866 	bl	8002450 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f000 fb34 	bl	8007a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d8:	f023 0303 	bic.w	r3, r3, #3
 80073dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	4313      	orrs	r3, r2
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073f6:	f023 030c 	bic.w	r3, r3, #12
 80073fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	4313      	orrs	r3, r2
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	011a      	lsls	r2, r3, #4
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	4313      	orrs	r3, r2
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007434:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800743c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	4313      	orrs	r3, r2
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d122      	bne.n	80074fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d11b      	bne.n	80074fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0202 	mvn.w	r2, #2
 80074ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa78 	bl	80079da <HAL_TIM_IC_CaptureCallback>
 80074ea:	e005      	b.n	80074f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa6a 	bl	80079c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa7b 	bl	80079ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b04      	cmp	r3, #4
 800750a:	d122      	bne.n	8007552 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b04      	cmp	r3, #4
 8007518:	d11b      	bne.n	8007552 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f06f 0204 	mvn.w	r2, #4
 8007522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa4e 	bl	80079da <HAL_TIM_IC_CaptureCallback>
 800753e:	e005      	b.n	800754c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa40 	bl	80079c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa51 	bl	80079ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b08      	cmp	r3, #8
 800755e:	d122      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b08      	cmp	r3, #8
 800756c:	d11b      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0208 	mvn.w	r2, #8
 8007576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2204      	movs	r2, #4
 800757c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa24 	bl	80079da <HAL_TIM_IC_CaptureCallback>
 8007592:	e005      	b.n	80075a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa16 	bl	80079c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa27 	bl	80079ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d122      	bne.n	80075fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d11b      	bne.n	80075fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f06f 0210 	mvn.w	r2, #16
 80075ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2208      	movs	r2, #8
 80075d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9fa 	bl	80079da <HAL_TIM_IC_CaptureCallback>
 80075e6:	e005      	b.n	80075f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9ec 	bl	80079c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9fd 	bl	80079ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10e      	bne.n	8007626 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b01      	cmp	r3, #1
 8007614:	d107      	bne.n	8007626 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0201 	mvn.w	r2, #1
 800761e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fa fd2d 	bl	8002080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b80      	cmp	r3, #128	; 0x80
 8007632:	d10e      	bne.n	8007652 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d107      	bne.n	8007652 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800764a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fda5 	bl	800819c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d10e      	bne.n	800767e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d107      	bne.n	800767e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9c2 	bl	8007a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b20      	cmp	r3, #32
 800768a:	d10e      	bne.n	80076aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b20      	cmp	r3, #32
 8007698:	d107      	bne.n	80076aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0220 	mvn.w	r2, #32
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fd6f 	bl	8008188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0ae      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b0c      	cmp	r3, #12
 80076de:	f200 809f 	bhi.w	8007820 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800771d 	.word	0x0800771d
 80076ec:	08007821 	.word	0x08007821
 80076f0:	08007821 	.word	0x08007821
 80076f4:	08007821 	.word	0x08007821
 80076f8:	0800775d 	.word	0x0800775d
 80076fc:	08007821 	.word	0x08007821
 8007700:	08007821 	.word	0x08007821
 8007704:	08007821 	.word	0x08007821
 8007708:	0800779f 	.word	0x0800779f
 800770c:	08007821 	.word	0x08007821
 8007710:	08007821 	.word	0x08007821
 8007714:	08007821 	.word	0x08007821
 8007718:	080077df 	.word	0x080077df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fa18 	bl	8007b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0208 	orr.w	r2, r2, #8
 8007736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0204 	bic.w	r2, r2, #4
 8007746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6999      	ldr	r1, [r3, #24]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	619a      	str	r2, [r3, #24]
      break;
 800775a:	e064      	b.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fa68 	bl	8007c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6999      	ldr	r1, [r3, #24]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	021a      	lsls	r2, r3, #8
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	619a      	str	r2, [r3, #24]
      break;
 800779c:	e043      	b.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fabd 	bl	8007d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0208 	orr.w	r2, r2, #8
 80077b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0204 	bic.w	r2, r2, #4
 80077c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69d9      	ldr	r1, [r3, #28]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	61da      	str	r2, [r3, #28]
      break;
 80077dc:	e023      	b.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fb11 	bl	8007e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69d9      	ldr	r1, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	021a      	lsls	r2, r3, #8
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	61da      	str	r2, [r3, #28]
      break;
 800781e:	e002      	b.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	75fb      	strb	r3, [r7, #23]
      break;
 8007824:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_TIM_ConfigClockSource+0x1c>
 8007850:	2302      	movs	r3, #2
 8007852:	e0b4      	b.n	80079be <HAL_TIM_ConfigClockSource+0x186>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800787a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788c:	d03e      	beq.n	800790c <HAL_TIM_ConfigClockSource+0xd4>
 800788e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007892:	f200 8087 	bhi.w	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	f000 8086 	beq.w	80079aa <HAL_TIM_ConfigClockSource+0x172>
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d87f      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b70      	cmp	r3, #112	; 0x70
 80078a6:	d01a      	beq.n	80078de <HAL_TIM_ConfigClockSource+0xa6>
 80078a8:	2b70      	cmp	r3, #112	; 0x70
 80078aa:	d87b      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b60      	cmp	r3, #96	; 0x60
 80078ae:	d050      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x11a>
 80078b0:	2b60      	cmp	r3, #96	; 0x60
 80078b2:	d877      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b50      	cmp	r3, #80	; 0x50
 80078b6:	d03c      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0xfa>
 80078b8:	2b50      	cmp	r3, #80	; 0x50
 80078ba:	d873      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d058      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x13a>
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d86f      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078c4:	2b30      	cmp	r3, #48	; 0x30
 80078c6:	d064      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x15a>
 80078c8:	2b30      	cmp	r3, #48	; 0x30
 80078ca:	d86b      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d060      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x15a>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d867      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d05c      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x15a>
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d05a      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x15a>
 80078dc:	e062      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6899      	ldr	r1, [r3, #8]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f000 fb5d 	bl	8007fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	609a      	str	r2, [r3, #8]
      break;
 800790a:	e04f      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	6899      	ldr	r1, [r3, #8]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f000 fb46 	bl	8007fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792e:	609a      	str	r2, [r3, #8]
      break;
 8007930:	e03c      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	461a      	mov	r2, r3
 8007940:	f000 faba 	bl	8007eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2150      	movs	r1, #80	; 0x50
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb13 	bl	8007f76 <TIM_ITRx_SetConfig>
      break;
 8007950:	e02c      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 fad9 	bl	8007f16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2160      	movs	r1, #96	; 0x60
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fb03 	bl	8007f76 <TIM_ITRx_SetConfig>
      break;
 8007970:	e01c      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	461a      	mov	r2, r3
 8007980:	f000 fa9a 	bl	8007eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2140      	movs	r1, #64	; 0x40
 800798a:	4618      	mov	r0, r3
 800798c:	f000 faf3 	bl	8007f76 <TIM_ITRx_SetConfig>
      break;
 8007990:	e00c      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f000 faea 	bl	8007f76 <TIM_ITRx_SetConfig>
      break;
 80079a2:	e003      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e000      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a40      	ldr	r2, [pc, #256]	; (8007b2c <TIM_Base_SetConfig+0x114>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a36:	d00f      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3d      	ldr	r2, [pc, #244]	; (8007b30 <TIM_Base_SetConfig+0x118>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3c      	ldr	r2, [pc, #240]	; (8007b34 <TIM_Base_SetConfig+0x11c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a3b      	ldr	r2, [pc, #236]	; (8007b38 <TIM_Base_SetConfig+0x120>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a3a      	ldr	r2, [pc, #232]	; (8007b3c <TIM_Base_SetConfig+0x124>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d108      	bne.n	8007a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a2f      	ldr	r2, [pc, #188]	; (8007b2c <TIM_Base_SetConfig+0x114>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d02b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a78:	d027      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2c      	ldr	r2, [pc, #176]	; (8007b30 <TIM_Base_SetConfig+0x118>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d023      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2b      	ldr	r2, [pc, #172]	; (8007b34 <TIM_Base_SetConfig+0x11c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <TIM_Base_SetConfig+0x120>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <TIM_Base_SetConfig+0x124>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <TIM_Base_SetConfig+0x128>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a27      	ldr	r2, [pc, #156]	; (8007b44 <TIM_Base_SetConfig+0x12c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a26      	ldr	r2, [pc, #152]	; (8007b48 <TIM_Base_SetConfig+0x130>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a25      	ldr	r2, [pc, #148]	; (8007b4c <TIM_Base_SetConfig+0x134>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <TIM_Base_SetConfig+0x138>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <TIM_Base_SetConfig+0x13c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <TIM_Base_SetConfig+0x114>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_Base_SetConfig+0xf8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <TIM_Base_SetConfig+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d103      	bne.n	8007b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	615a      	str	r2, [r3, #20]
}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40000800 	.word	0x40000800
 8007b38:	40000c00 	.word	0x40000c00
 8007b3c:	40010400 	.word	0x40010400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	40014400 	.word	0x40014400
 8007b48:	40014800 	.word	0x40014800
 8007b4c:	40001800 	.word	0x40001800
 8007b50:	40001c00 	.word	0x40001c00
 8007b54:	40002000 	.word	0x40002000

08007b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 0302 	bic.w	r3, r3, #2
 8007ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <TIM_OC1_SetConfig+0xd8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC1_SetConfig+0x64>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a1f      	ldr	r2, [pc, #124]	; (8007c34 <TIM_OC1_SetConfig+0xdc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10c      	bne.n	8007bd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0308 	bic.w	r3, r3, #8
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f023 0304 	bic.w	r3, r3, #4
 8007bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <TIM_OC1_SetConfig+0xd8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_OC1_SetConfig+0x8e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a14      	ldr	r2, [pc, #80]	; (8007c34 <TIM_OC1_SetConfig+0xdc>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d111      	bne.n	8007c0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40010400 	.word	0x40010400

08007c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f023 0210 	bic.w	r2, r3, #16
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0320 	bic.w	r3, r3, #32
 8007c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <TIM_OC2_SetConfig+0xe4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_OC2_SetConfig+0x68>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <TIM_OC2_SetConfig+0xe8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10d      	bne.n	8007cbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a17      	ldr	r2, [pc, #92]	; (8007d1c <TIM_OC2_SetConfig+0xe4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC2_SetConfig+0x94>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a16      	ldr	r2, [pc, #88]	; (8007d20 <TIM_OC2_SetConfig+0xe8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d113      	bne.n	8007cf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40010000 	.word	0x40010000
 8007d20:	40010400 	.word	0x40010400

08007d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a21      	ldr	r2, [pc, #132]	; (8007e04 <TIM_OC3_SetConfig+0xe0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC3_SetConfig+0x66>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <TIM_OC3_SetConfig+0xe4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d10d      	bne.n	8007da6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <TIM_OC3_SetConfig+0xe0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_OC3_SetConfig+0x92>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <TIM_OC3_SetConfig+0xe4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d113      	bne.n	8007dde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	621a      	str	r2, [r3, #32]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400

08007e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	031b      	lsls	r3, r3, #12
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a12      	ldr	r2, [pc, #72]	; (8007eb0 <TIM_OC4_SetConfig+0xa4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_OC4_SetConfig+0x68>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <TIM_OC4_SetConfig+0xa8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d109      	bne.n	8007e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	019b      	lsls	r3, r3, #6
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40010000 	.word	0x40010000
 8007eb4:	40010400 	.word	0x40010400

08007eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 030a 	bic.w	r3, r3, #10
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f023 0210 	bic.w	r2, r3, #16
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	031b      	lsls	r3, r3, #12
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	621a      	str	r2, [r3, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f043 0307 	orr.w	r3, r3, #7
 8007f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	021a      	lsls	r2, r3, #8
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	609a      	str	r2, [r3, #8]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008000:	2302      	movs	r3, #2
 8008002:	e05a      	b.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d022      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008050:	d01d      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1d      	ldr	r2, [pc, #116]	; (80080cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d018      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d013      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00e      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a17      	ldr	r2, [pc, #92]	; (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d004      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d10c      	bne.n	80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4313      	orrs	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40010400 	.word	0x40010400
 80080dc:	40014000 	.word	0x40014000
 80080e0:	40001800 	.word	0x40001800

080080e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e03d      	b.n	800817c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e03f      	b.n	8008242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fa fa82 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	; 0x24
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f929 	bl	800844c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08a      	sub	sp, #40	; 0x28
 800824e:	af02      	add	r7, sp, #8
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	d17c      	bne.n	8008364 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_UART_Transmit+0x2c>
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e075      	b.n	8008366 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_UART_Transmit+0x3e>
 8008284:	2302      	movs	r3, #2
 8008286:	e06e      	b.n	8008366 <HAL_UART_Transmit+0x11c>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2221      	movs	r2, #33	; 0x21
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800829e:	f7fa fc01 	bl	8002aa4 <HAL_GetTick>
 80082a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b8:	d108      	bne.n	80082cc <HAL_UART_Transmit+0x82>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e003      	b.n	80082d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082dc:	e02a      	b.n	8008334 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f840 	bl	800836e <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e036      	b.n	8008366 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	3302      	adds	r3, #2
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	e007      	b.n	8008326 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1cf      	bne.n	80082de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2200      	movs	r2, #0
 8008346:	2140      	movs	r1, #64	; 0x40
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f810 	bl	800836e <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e006      	b.n	8008366 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	e000      	b.n	8008366 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008364:	2302      	movs	r3, #2
  }
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b090      	sub	sp, #64	; 0x40
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800837e:	e050      	b.n	8008422 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d04c      	beq.n	8008422 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0x30>
 800838e:	f7fa fb89 	bl	8002aa4 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800839a:	429a      	cmp	r2, r3
 800839c:	d241      	bcs.n	8008422 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	330c      	adds	r3, #12
 80083bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083be:	637a      	str	r2, [r7, #52]	; 0x34
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e5      	bne.n	800839e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3314      	adds	r3, #20
 80083d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	613b      	str	r3, [r7, #16]
   return(result);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f023 0301 	bic.w	r3, r3, #1
 80083e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3314      	adds	r3, #20
 80083f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f2:	623a      	str	r2, [r7, #32]
 80083f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	69f9      	ldr	r1, [r7, #28]
 80083f8:	6a3a      	ldr	r2, [r7, #32]
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e5      	bne.n	80083d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e00f      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4013      	ands	r3, r2
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	bf0c      	ite	eq
 8008432:	2301      	moveq	r3, #1
 8008434:	2300      	movne	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	429a      	cmp	r2, r3
 800843e:	d09f      	beq.n	8008380 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3740      	adds	r7, #64	; 0x40
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008450:	b0c0      	sub	sp, #256	; 0x100
 8008452:	af00      	add	r7, sp, #0
 8008454:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	68d9      	ldr	r1, [r3, #12]
 800846a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	ea40 0301 	orr.w	r3, r0, r1
 8008474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	431a      	orrs	r2, r3
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	431a      	orrs	r2, r3
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084a4:	f021 010c 	bic.w	r1, r1, #12
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084b2:	430b      	orrs	r3, r1
 80084b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c6:	6999      	ldr	r1, [r3, #24]
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	ea40 0301 	orr.w	r3, r0, r1
 80084d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b8f      	ldr	r3, [pc, #572]	; (8008718 <UART_SetConfig+0x2cc>)
 80084dc:	429a      	cmp	r2, r3
 80084de:	d005      	beq.n	80084ec <UART_SetConfig+0xa0>
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b8d      	ldr	r3, [pc, #564]	; (800871c <UART_SetConfig+0x2d0>)
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d104      	bne.n	80084f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084ec:	f7fe f942 	bl	8006774 <HAL_RCC_GetPCLK2Freq>
 80084f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084f4:	e003      	b.n	80084fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084f6:	f7fe f929 	bl	800674c <HAL_RCC_GetPCLK1Freq>
 80084fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008508:	f040 810c 	bne.w	8008724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800850c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008510:	2200      	movs	r2, #0
 8008512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008516:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800851a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800851e:	4622      	mov	r2, r4
 8008520:	462b      	mov	r3, r5
 8008522:	1891      	adds	r1, r2, r2
 8008524:	65b9      	str	r1, [r7, #88]	; 0x58
 8008526:	415b      	adcs	r3, r3
 8008528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800852a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800852e:	4621      	mov	r1, r4
 8008530:	eb12 0801 	adds.w	r8, r2, r1
 8008534:	4629      	mov	r1, r5
 8008536:	eb43 0901 	adc.w	r9, r3, r1
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800854a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800854e:	4690      	mov	r8, r2
 8008550:	4699      	mov	r9, r3
 8008552:	4623      	mov	r3, r4
 8008554:	eb18 0303 	adds.w	r3, r8, r3
 8008558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800855c:	462b      	mov	r3, r5
 800855e:	eb49 0303 	adc.w	r3, r9, r3
 8008562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008572:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800857a:	460b      	mov	r3, r1
 800857c:	18db      	adds	r3, r3, r3
 800857e:	653b      	str	r3, [r7, #80]	; 0x50
 8008580:	4613      	mov	r3, r2
 8008582:	eb42 0303 	adc.w	r3, r2, r3
 8008586:	657b      	str	r3, [r7, #84]	; 0x54
 8008588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800858c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008590:	f7f8 faac 	bl	8000aec <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4b61      	ldr	r3, [pc, #388]	; (8008720 <UART_SetConfig+0x2d4>)
 800859a:	fba3 2302 	umull	r2, r3, r3, r2
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	011c      	lsls	r4, r3, #4
 80085a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	1891      	adds	r1, r2, r2
 80085ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80085bc:	415b      	adcs	r3, r3
 80085be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085c4:	4641      	mov	r1, r8
 80085c6:	eb12 0a01 	adds.w	sl, r2, r1
 80085ca:	4649      	mov	r1, r9
 80085cc:	eb43 0b01 	adc.w	fp, r3, r1
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085e4:	4692      	mov	sl, r2
 80085e6:	469b      	mov	fp, r3
 80085e8:	4643      	mov	r3, r8
 80085ea:	eb1a 0303 	adds.w	r3, sl, r3
 80085ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085f2:	464b      	mov	r3, r9
 80085f4:	eb4b 0303 	adc.w	r3, fp, r3
 80085f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008608:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800860c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008610:	460b      	mov	r3, r1
 8008612:	18db      	adds	r3, r3, r3
 8008614:	643b      	str	r3, [r7, #64]	; 0x40
 8008616:	4613      	mov	r3, r2
 8008618:	eb42 0303 	adc.w	r3, r2, r3
 800861c:	647b      	str	r3, [r7, #68]	; 0x44
 800861e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008626:	f7f8 fa61 	bl	8000aec <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4611      	mov	r1, r2
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <UART_SetConfig+0x2d4>)
 8008632:	fba3 2301 	umull	r2, r3, r3, r1
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2264      	movs	r2, #100	; 0x64
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	1acb      	subs	r3, r1, r3
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008646:	4b36      	ldr	r3, [pc, #216]	; (8008720 <UART_SetConfig+0x2d4>)
 8008648:	fba3 2302 	umull	r2, r3, r3, r2
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008654:	441c      	add	r4, r3
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008670:	415b      	adcs	r3, r3
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008678:	4641      	mov	r1, r8
 800867a:	1851      	adds	r1, r2, r1
 800867c:	6339      	str	r1, [r7, #48]	; 0x30
 800867e:	4649      	mov	r1, r9
 8008680:	414b      	adcs	r3, r1
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008690:	4659      	mov	r1, fp
 8008692:	00cb      	lsls	r3, r1, #3
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800869a:	4651      	mov	r1, sl
 800869c:	00ca      	lsls	r2, r1, #3
 800869e:	4610      	mov	r0, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	4642      	mov	r2, r8
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086ac:	464b      	mov	r3, r9
 80086ae:	460a      	mov	r2, r1
 80086b0:	eb42 0303 	adc.w	r3, r2, r3
 80086b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086cc:	460b      	mov	r3, r1
 80086ce:	18db      	adds	r3, r3, r3
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d2:	4613      	mov	r3, r2
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086e2:	f7f8 fa03 	bl	8000aec <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <UART_SetConfig+0x2d4>)
 80086ec:	fba3 1302 	umull	r1, r3, r3, r2
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	2164      	movs	r1, #100	; 0x64
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	3332      	adds	r3, #50	; 0x32
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <UART_SetConfig+0x2d4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	f003 0207 	and.w	r2, r3, #7
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4422      	add	r2, r4
 8008712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008714:	e105      	b.n	8008922 <UART_SetConfig+0x4d6>
 8008716:	bf00      	nop
 8008718:	40011000 	.word	0x40011000
 800871c:	40011400 	.word	0x40011400
 8008720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800872e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	1891      	adds	r1, r2, r2
 800873c:	6239      	str	r1, [r7, #32]
 800873e:	415b      	adcs	r3, r3
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008746:	4641      	mov	r1, r8
 8008748:	1854      	adds	r4, r2, r1
 800874a:	4649      	mov	r1, r9
 800874c:	eb43 0501 	adc.w	r5, r3, r1
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	00eb      	lsls	r3, r5, #3
 800875a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800875e:	00e2      	lsls	r2, r4, #3
 8008760:	4614      	mov	r4, r2
 8008762:	461d      	mov	r5, r3
 8008764:	4643      	mov	r3, r8
 8008766:	18e3      	adds	r3, r4, r3
 8008768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800876c:	464b      	mov	r3, r9
 800876e:	eb45 0303 	adc.w	r3, r5, r3
 8008772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008792:	4629      	mov	r1, r5
 8008794:	008b      	lsls	r3, r1, #2
 8008796:	4621      	mov	r1, r4
 8008798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800879c:	4621      	mov	r1, r4
 800879e:	008a      	lsls	r2, r1, #2
 80087a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087a4:	f7f8 f9a2 	bl	8000aec <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4b60      	ldr	r3, [pc, #384]	; (8008930 <UART_SetConfig+0x4e4>)
 80087ae:	fba3 2302 	umull	r2, r3, r3, r2
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	011c      	lsls	r4, r3, #4
 80087b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	1891      	adds	r1, r2, r2
 80087ce:	61b9      	str	r1, [r7, #24]
 80087d0:	415b      	adcs	r3, r3
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d8:	4641      	mov	r1, r8
 80087da:	1851      	adds	r1, r2, r1
 80087dc:	6139      	str	r1, [r7, #16]
 80087de:	4649      	mov	r1, r9
 80087e0:	414b      	adcs	r3, r1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087f0:	4659      	mov	r1, fp
 80087f2:	00cb      	lsls	r3, r1, #3
 80087f4:	4651      	mov	r1, sl
 80087f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087fa:	4651      	mov	r1, sl
 80087fc:	00ca      	lsls	r2, r1, #3
 80087fe:	4610      	mov	r0, r2
 8008800:	4619      	mov	r1, r3
 8008802:	4603      	mov	r3, r0
 8008804:	4642      	mov	r2, r8
 8008806:	189b      	adds	r3, r3, r2
 8008808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800880c:	464b      	mov	r3, r9
 800880e:	460a      	mov	r2, r1
 8008810:	eb42 0303 	adc.w	r3, r2, r3
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	67bb      	str	r3, [r7, #120]	; 0x78
 8008822:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008830:	4649      	mov	r1, r9
 8008832:	008b      	lsls	r3, r1, #2
 8008834:	4641      	mov	r1, r8
 8008836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800883a:	4641      	mov	r1, r8
 800883c:	008a      	lsls	r2, r1, #2
 800883e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008842:	f7f8 f953 	bl	8000aec <__aeabi_uldivmod>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4b39      	ldr	r3, [pc, #228]	; (8008930 <UART_SetConfig+0x4e4>)
 800884c:	fba3 1302 	umull	r1, r3, r3, r2
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	2164      	movs	r1, #100	; 0x64
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	3332      	adds	r3, #50	; 0x32
 800885e:	4a34      	ldr	r2, [pc, #208]	; (8008930 <UART_SetConfig+0x4e4>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800886a:	441c      	add	r4, r3
 800886c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008870:	2200      	movs	r2, #0
 8008872:	673b      	str	r3, [r7, #112]	; 0x70
 8008874:	677a      	str	r2, [r7, #116]	; 0x74
 8008876:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	1891      	adds	r1, r2, r2
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	415b      	adcs	r3, r3
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800888a:	4641      	mov	r1, r8
 800888c:	1851      	adds	r1, r2, r1
 800888e:	6039      	str	r1, [r7, #0]
 8008890:	4649      	mov	r1, r9
 8008892:	414b      	adcs	r3, r1
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	f04f 0300 	mov.w	r3, #0
 800889e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088a2:	4659      	mov	r1, fp
 80088a4:	00cb      	lsls	r3, r1, #3
 80088a6:	4651      	mov	r1, sl
 80088a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ac:	4651      	mov	r1, sl
 80088ae:	00ca      	lsls	r2, r1, #3
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	4603      	mov	r3, r0
 80088b6:	4642      	mov	r2, r8
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80088bc:	464b      	mov	r3, r9
 80088be:	460a      	mov	r2, r1
 80088c0:	eb42 0303 	adc.w	r3, r2, r3
 80088c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	663b      	str	r3, [r7, #96]	; 0x60
 80088d0:	667a      	str	r2, [r7, #100]	; 0x64
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088de:	4649      	mov	r1, r9
 80088e0:	008b      	lsls	r3, r1, #2
 80088e2:	4641      	mov	r1, r8
 80088e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088e8:	4641      	mov	r1, r8
 80088ea:	008a      	lsls	r2, r1, #2
 80088ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80088f0:	f7f8 f8fc 	bl	8000aec <__aeabi_uldivmod>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <UART_SetConfig+0x4e4>)
 80088fa:	fba3 1302 	umull	r1, r3, r3, r2
 80088fe:	095b      	lsrs	r3, r3, #5
 8008900:	2164      	movs	r1, #100	; 0x64
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	3332      	adds	r3, #50	; 0x32
 800890c:	4a08      	ldr	r2, [pc, #32]	; (8008930 <UART_SetConfig+0x4e4>)
 800890e:	fba2 2303 	umull	r2, r3, r2, r3
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	f003 020f 	and.w	r2, r3, #15
 8008918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4422      	add	r2, r4
 8008920:	609a      	str	r2, [r3, #8]
}
 8008922:	bf00      	nop
 8008924:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800892e:	bf00      	nop
 8008930:	51eb851f 	.word	0x51eb851f

08008934 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	460a      	mov	r2, r1
 800893e:	80fb      	strh	r3, [r7, #6]
 8008940:	4613      	mov	r3, r2
 8008942:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8008948:	797b      	ldrb	r3, [r7, #5]
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	b2da      	uxtb	r2, r3
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	2101      	movs	r1, #1
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f994 	bl	8008c80 <VL53L1_WrByte>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	4313      	orrs	r3, r2
 8008960:	73fb      	strb	r3, [r7, #15]
	return status;
 8008962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 800897e:	2300      	movs	r3, #0
 8008980:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8008982:	232d      	movs	r3, #45	; 0x2d
 8008984:	73bb      	strb	r3, [r7, #14]
 8008986:	e011      	b.n	80089ac <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	b299      	uxth	r1, r3
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	3b2d      	subs	r3, #45	; 0x2d
 8008990:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <VL53L1X_SensorInit+0xd4>)
 8008992:	5cd2      	ldrb	r2, [r2, r3]
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f972 	bl	8008c80 <VL53L1_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	3301      	adds	r3, #1
 80089aa:	73bb      	strb	r3, [r7, #14]
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b87      	cmp	r3, #135	; 0x87
 80089b0:	d9ea      	bls.n	8008988 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80089b2:	88fb      	ldrh	r3, [r7, #6]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f889 	bl	8008acc <VL53L1X_StartRanging>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80089c8:	e00b      	b.n	80089e2 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80089ca:	f107 020d 	add.w	r2, r7, #13
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 f8aa 	bl	8008b2c <VL53L1X_CheckForDataReady>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4313      	orrs	r3, r2
 80089e0:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80089e2:	7b7b      	ldrb	r3, [r7, #13]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0f0      	beq.n	80089ca <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f82c 	bl	8008a48 <VL53L1X_ClearInterrupt>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f87d 	bl	8008afc <VL53L1X_StopRanging>
 8008a02:	4603      	mov	r3, r0
 8008a04:	461a      	mov	r2, r3
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	2209      	movs	r2, #9
 8008a10:	2108      	movs	r1, #8
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f934 	bl	8008c80 <VL53L1_WrByte>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	2200      	movs	r2, #0
 8008a26:	210b      	movs	r1, #11
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f929 	bl	8008c80 <VL53L1_WrByte>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	73fb      	strb	r3, [r7, #15]
	return status;
 8008a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08009ef0 	.word	0x08009ef0

08008a48 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8008a56:	88fb      	ldrh	r3, [r7, #6]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2186      	movs	r1, #134	; 0x86
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f90f 	bl	8008c80 <VL53L1_WrByte>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	73fb      	strb	r3, [r7, #15]
	return status;
 8008a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	6039      	str	r1, [r7, #0]
 8008a82:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8008a88:	f107 020e 	add.w	r2, r7, #14
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	2130      	movs	r1, #48	; 0x30
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 f921 	bl	8008cd8 <VL53L1_RdByte>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461a      	mov	r2, r3
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	091b      	lsrs	r3, r3, #4
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bf0c      	ite	eq
 8008ab4:	2301      	moveq	r3, #1
 8008ab6:	2300      	movne	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	701a      	strb	r2, [r3, #0]
	return status;
 8008ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	2240      	movs	r2, #64	; 0x40
 8008ade:	2187      	movs	r1, #135	; 0x87
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f8cd 	bl	8008c80 <VL53L1_WrByte>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461a      	mov	r2, r3
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	73fb      	strb	r3, [r7, #15]
	return status;
 8008af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2187      	movs	r1, #135	; 0x87
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f8b5 	bl	8008c80 <VL53L1_WrByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	73fb      	strb	r3, [r7, #15]
	return status;
 8008b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8008b3c:	f107 020d 	add.w	r2, r7, #13
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ff97 	bl	8008a78 <VL53L1X_GetInterruptPolarity>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8008b54:	f107 020e 	add.w	r2, r7, #14
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	2131      	movs	r1, #49	; 0x31
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f8bb 	bl	8008cd8 <VL53L1_RdByte>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8008b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	7b7a      	ldrb	r2, [r7, #13]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d103      	bne.n	8008b88 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e002      	b.n	8008b8e <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8008b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	6039      	str	r1, [r7, #0]
 8008ba4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8008bae:	f107 020e 	add.w	r2, r7, #14
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	21e5      	movs	r1, #229	; 0xe5
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f88e 	bl	8008cd8 <VL53L1_RdByte>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8008bc6:	7bba      	ldrb	r2, [r7, #14]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	701a      	strb	r2, [r3, #0]
	return status;
 8008bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8008be8:	f107 020c 	add.w	r2, r7, #12
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	2196      	movs	r1, #150	; 0x96
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 f8a9 	bl	8008d48 <VL53L1_RdWord>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8008c00:	89ba      	ldrh	r2, [r7, #12]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	801a      	strh	r2, [r3, #0]
	return status;
 8008c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	89f9      	ldrh	r1, [r7, #14]
 8008c28:	220a      	movs	r2, #10
 8008c2a:	9200      	str	r2, [sp, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	4805      	ldr	r0, [pc, #20]	; (8008c44 <_I2CWrite+0x30>)
 8008c30:	f7fb fa34 	bl	800409c <HAL_I2C_Master_Transmit>
 8008c34:	4603      	mov	r3, r0
 8008c36:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	200000c4 	.word	0x200000c4

08008c48 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	4603      	mov	r3, r0
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8008c56:	89fb      	ldrh	r3, [r7, #14]
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	b299      	uxth	r1, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	220a      	movs	r2, #10
 8008c64:	9200      	str	r2, [sp, #0]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	4804      	ldr	r0, [pc, #16]	; (8008c7c <_I2CRead+0x34>)
 8008c6a:	f7fb fb15 	bl	8004298 <HAL_I2C_Master_Receive>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008c72:	697b      	ldr	r3, [r7, #20]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	200000c4 	.word	0x200000c4

08008c80 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	80fb      	strh	r3, [r7, #6]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	80bb      	strh	r3, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008c96:	88bb      	ldrh	r3, [r7, #4]
 8008c98:	0a1b      	lsrs	r3, r3, #8
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <VL53L1_WrByte+0x54>)
 8008ca0:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008ca2:	88bb      	ldrh	r3, [r7, #4]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <VL53L1_WrByte+0x54>)
 8008ca8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008caa:	4a0a      	ldr	r2, [pc, #40]	; (8008cd4 <VL53L1_WrByte+0x54>)
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	4907      	ldr	r1, [pc, #28]	; (8008cd4 <VL53L1_WrByte+0x54>)
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff ffac 	bl	8008c14 <_I2CWrite>
 8008cbc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008cc4:	23f3      	movs	r3, #243	; 0xf3
 8008cc6:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8008cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200003a8 	.word	0x200003a8

08008cd8 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	603a      	str	r2, [r7, #0]
 8008ce2:	80fb      	strh	r3, [r7, #6]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008cec:	88bb      	ldrh	r3, [r7, #4]
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <VL53L1_RdByte+0x6c>)
 8008cf6:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008cf8:	88bb      	ldrh	r3, [r7, #4]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <VL53L1_RdByte+0x6c>)
 8008cfe:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	2202      	movs	r2, #2
 8008d04:	490f      	ldr	r1, [pc, #60]	; (8008d44 <VL53L1_RdByte+0x6c>)
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff ff84 	bl	8008c14 <_I2CWrite>
 8008d0c:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d14:	23f3      	movs	r3, #243	; 0xf3
 8008d16:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008d18:	e00d      	b.n	8008d36 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff ff91 	bl	8008c48 <_I2CRead>
 8008d26:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d2e:	23f3      	movs	r3, #243	; 0xf3
 8008d30:	73fb      	strb	r3, [r7, #15]
 8008d32:	e000      	b.n	8008d36 <VL53L1_RdByte+0x5e>
    }
done:
 8008d34:	bf00      	nop
    return Status;
 8008d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200003a8 	.word	0x200003a8

08008d48 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	603a      	str	r2, [r7, #0]
 8008d52:	80fb      	strh	r3, [r7, #6]
 8008d54:	460b      	mov	r3, r1
 8008d56:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008d5c:	88bb      	ldrh	r3, [r7, #4]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008d66:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008d68:	88bb      	ldrh	r3, [r7, #4]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008d6e:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	2202      	movs	r2, #2
 8008d74:	4914      	ldr	r1, [pc, #80]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff ff4c 	bl	8008c14 <_I2CWrite>
 8008d7c:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d84:	23f3      	movs	r3, #243	; 0xf3
 8008d86:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008d88:	e018      	b.n	8008dbc <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff ff59 	bl	8008c48 <_I2CRead>
 8008d96:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d9e:	23f3      	movs	r3, #243	; 0xf3
 8008da0:	73fb      	strb	r3, [r7, #15]
        goto done;
 8008da2:	e00b      	b.n	8008dbc <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <VL53L1_RdWord+0x80>)
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8008dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	200003a8 	.word	0x200003a8

08008dcc <calloc>:
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <calloc+0xc>)
 8008dce:	460a      	mov	r2, r1
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	f000 b834 	b.w	8008e40 <_calloc_r>
 8008dd8:	2000001c 	.word	0x2000001c

08008ddc <__errno>:
 8008ddc:	4b01      	ldr	r3, [pc, #4]	; (8008de4 <__errno+0x8>)
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000001c 	.word	0x2000001c

08008de8 <__libc_init_array>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	4d0d      	ldr	r5, [pc, #52]	; (8008e20 <__libc_init_array+0x38>)
 8008dec:	4c0d      	ldr	r4, [pc, #52]	; (8008e24 <__libc_init_array+0x3c>)
 8008dee:	1b64      	subs	r4, r4, r5
 8008df0:	10a4      	asrs	r4, r4, #2
 8008df2:	2600      	movs	r6, #0
 8008df4:	42a6      	cmp	r6, r4
 8008df6:	d109      	bne.n	8008e0c <__libc_init_array+0x24>
 8008df8:	4d0b      	ldr	r5, [pc, #44]	; (8008e28 <__libc_init_array+0x40>)
 8008dfa:	4c0c      	ldr	r4, [pc, #48]	; (8008e2c <__libc_init_array+0x44>)
 8008dfc:	f001 f83a 	bl	8009e74 <_init>
 8008e00:	1b64      	subs	r4, r4, r5
 8008e02:	10a4      	asrs	r4, r4, #2
 8008e04:	2600      	movs	r6, #0
 8008e06:	42a6      	cmp	r6, r4
 8008e08:	d105      	bne.n	8008e16 <__libc_init_array+0x2e>
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e10:	4798      	blx	r3
 8008e12:	3601      	adds	r6, #1
 8008e14:	e7ee      	b.n	8008df4 <__libc_init_array+0xc>
 8008e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1a:	4798      	blx	r3
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	e7f2      	b.n	8008e06 <__libc_init_array+0x1e>
 8008e20:	08009fec 	.word	0x08009fec
 8008e24:	08009fec 	.word	0x08009fec
 8008e28:	08009fec 	.word	0x08009fec
 8008e2c:	08009ff0 	.word	0x08009ff0

08008e30 <memset>:
 8008e30:	4402      	add	r2, r0
 8008e32:	4603      	mov	r3, r0
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d100      	bne.n	8008e3a <memset+0xa>
 8008e38:	4770      	bx	lr
 8008e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3e:	e7f9      	b.n	8008e34 <memset+0x4>

08008e40 <_calloc_r>:
 8008e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e42:	fba1 2402 	umull	r2, r4, r1, r2
 8008e46:	b94c      	cbnz	r4, 8008e5c <_calloc_r+0x1c>
 8008e48:	4611      	mov	r1, r2
 8008e4a:	9201      	str	r2, [sp, #4]
 8008e4c:	f000 f82e 	bl	8008eac <_malloc_r>
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	4605      	mov	r5, r0
 8008e54:	b930      	cbnz	r0, 8008e64 <_calloc_r+0x24>
 8008e56:	4628      	mov	r0, r5
 8008e58:	b003      	add	sp, #12
 8008e5a:	bd30      	pop	{r4, r5, pc}
 8008e5c:	220c      	movs	r2, #12
 8008e5e:	6002      	str	r2, [r0, #0]
 8008e60:	2500      	movs	r5, #0
 8008e62:	e7f8      	b.n	8008e56 <_calloc_r+0x16>
 8008e64:	4621      	mov	r1, r4
 8008e66:	f7ff ffe3 	bl	8008e30 <memset>
 8008e6a:	e7f4      	b.n	8008e56 <_calloc_r+0x16>

08008e6c <sbrk_aligned>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4e0e      	ldr	r6, [pc, #56]	; (8008ea8 <sbrk_aligned+0x3c>)
 8008e70:	460c      	mov	r4, r1
 8008e72:	6831      	ldr	r1, [r6, #0]
 8008e74:	4605      	mov	r5, r0
 8008e76:	b911      	cbnz	r1, 8008e7e <sbrk_aligned+0x12>
 8008e78:	f000 f91a 	bl	80090b0 <_sbrk_r>
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 f915 	bl	80090b0 <_sbrk_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d00a      	beq.n	8008ea0 <sbrk_aligned+0x34>
 8008e8a:	1cc4      	adds	r4, r0, #3
 8008e8c:	f024 0403 	bic.w	r4, r4, #3
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d007      	beq.n	8008ea4 <sbrk_aligned+0x38>
 8008e94:	1a21      	subs	r1, r4, r0
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f90a 	bl	80090b0 <_sbrk_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d101      	bne.n	8008ea4 <sbrk_aligned+0x38>
 8008ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	200004ac 	.word	0x200004ac

08008eac <_malloc_r>:
 8008eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb0:	1ccd      	adds	r5, r1, #3
 8008eb2:	f025 0503 	bic.w	r5, r5, #3
 8008eb6:	3508      	adds	r5, #8
 8008eb8:	2d0c      	cmp	r5, #12
 8008eba:	bf38      	it	cc
 8008ebc:	250c      	movcc	r5, #12
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	db01      	blt.n	8008ec8 <_malloc_r+0x1c>
 8008ec4:	42a9      	cmp	r1, r5
 8008ec6:	d905      	bls.n	8008ed4 <_malloc_r+0x28>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	4e2e      	ldr	r6, [pc, #184]	; (8008f90 <_malloc_r+0xe4>)
 8008ed6:	f000 fbdb 	bl	8009690 <__malloc_lock>
 8008eda:	6833      	ldr	r3, [r6, #0]
 8008edc:	461c      	mov	r4, r3
 8008ede:	bb34      	cbnz	r4, 8008f2e <_malloc_r+0x82>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ffc2 	bl	8008e6c <sbrk_aligned>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	4604      	mov	r4, r0
 8008eec:	d14d      	bne.n	8008f8a <_malloc_r+0xde>
 8008eee:	6834      	ldr	r4, [r6, #0]
 8008ef0:	4626      	mov	r6, r4
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	d140      	bne.n	8008f78 <_malloc_r+0xcc>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4638      	mov	r0, r7
 8008efc:	eb04 0803 	add.w	r8, r4, r3
 8008f00:	f000 f8d6 	bl	80090b0 <_sbrk_r>
 8008f04:	4580      	cmp	r8, r0
 8008f06:	d13a      	bne.n	8008f7e <_malloc_r+0xd2>
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	3503      	adds	r5, #3
 8008f0c:	1a6d      	subs	r5, r5, r1
 8008f0e:	f025 0503 	bic.w	r5, r5, #3
 8008f12:	3508      	adds	r5, #8
 8008f14:	2d0c      	cmp	r5, #12
 8008f16:	bf38      	it	cc
 8008f18:	250c      	movcc	r5, #12
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff ffa5 	bl	8008e6c <sbrk_aligned>
 8008f22:	3001      	adds	r0, #1
 8008f24:	d02b      	beq.n	8008f7e <_malloc_r+0xd2>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	442b      	add	r3, r5
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	e00e      	b.n	8008f4c <_malloc_r+0xa0>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	1b52      	subs	r2, r2, r5
 8008f32:	d41e      	bmi.n	8008f72 <_malloc_r+0xc6>
 8008f34:	2a0b      	cmp	r2, #11
 8008f36:	d916      	bls.n	8008f66 <_malloc_r+0xba>
 8008f38:	1961      	adds	r1, r4, r5
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	6025      	str	r5, [r4, #0]
 8008f3e:	bf18      	it	ne
 8008f40:	6059      	strne	r1, [r3, #4]
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	bf08      	it	eq
 8008f46:	6031      	streq	r1, [r6, #0]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f104 060b 	add.w	r6, r4, #11
 8008f52:	f000 fba3 	bl	800969c <__malloc_unlock>
 8008f56:	f026 0607 	bic.w	r6, r6, #7
 8008f5a:	1d23      	adds	r3, r4, #4
 8008f5c:	1af2      	subs	r2, r6, r3
 8008f5e:	d0b6      	beq.n	8008ece <_malloc_r+0x22>
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	50a3      	str	r3, [r4, r2]
 8008f64:	e7b3      	b.n	8008ece <_malloc_r+0x22>
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	bf0c      	ite	eq
 8008f6c:	6032      	streq	r2, [r6, #0]
 8008f6e:	605a      	strne	r2, [r3, #4]
 8008f70:	e7ec      	b.n	8008f4c <_malloc_r+0xa0>
 8008f72:	4623      	mov	r3, r4
 8008f74:	6864      	ldr	r4, [r4, #4]
 8008f76:	e7b2      	b.n	8008ede <_malloc_r+0x32>
 8008f78:	4634      	mov	r4, r6
 8008f7a:	6876      	ldr	r6, [r6, #4]
 8008f7c:	e7b9      	b.n	8008ef2 <_malloc_r+0x46>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	4638      	mov	r0, r7
 8008f84:	f000 fb8a 	bl	800969c <__malloc_unlock>
 8008f88:	e7a1      	b.n	8008ece <_malloc_r+0x22>
 8008f8a:	6025      	str	r5, [r4, #0]
 8008f8c:	e7de      	b.n	8008f4c <_malloc_r+0xa0>
 8008f8e:	bf00      	nop
 8008f90:	200004a8 	.word	0x200004a8

08008f94 <iprintf>:
 8008f94:	b40f      	push	{r0, r1, r2, r3}
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <iprintf+0x2c>)
 8008f98:	b513      	push	{r0, r1, r4, lr}
 8008f9a:	681c      	ldr	r4, [r3, #0]
 8008f9c:	b124      	cbz	r4, 8008fa8 <iprintf+0x14>
 8008f9e:	69a3      	ldr	r3, [r4, #24]
 8008fa0:	b913      	cbnz	r3, 8008fa8 <iprintf+0x14>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fa6e 	bl	8009484 <__sinit>
 8008fa8:	ab05      	add	r3, sp, #20
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	68a1      	ldr	r1, [r4, #8]
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fbef 	bl	8009794 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbc:	b004      	add	sp, #16
 8008fbe:	4770      	bx	lr
 8008fc0:	2000001c 	.word	0x2000001c

08008fc4 <_puts_r>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	4605      	mov	r5, r0
 8008fca:	b118      	cbz	r0, 8008fd4 <_puts_r+0x10>
 8008fcc:	6983      	ldr	r3, [r0, #24]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_puts_r+0x10>
 8008fd0:	f000 fa58 	bl	8009484 <__sinit>
 8008fd4:	69ab      	ldr	r3, [r5, #24]
 8008fd6:	68ac      	ldr	r4, [r5, #8]
 8008fd8:	b913      	cbnz	r3, 8008fe0 <_puts_r+0x1c>
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 fa52 	bl	8009484 <__sinit>
 8008fe0:	4b2c      	ldr	r3, [pc, #176]	; (8009094 <_puts_r+0xd0>)
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	d120      	bne.n	8009028 <_puts_r+0x64>
 8008fe6:	686c      	ldr	r4, [r5, #4]
 8008fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fea:	07db      	lsls	r3, r3, #31
 8008fec:	d405      	bmi.n	8008ffa <_puts_r+0x36>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	0598      	lsls	r0, r3, #22
 8008ff2:	d402      	bmi.n	8008ffa <_puts_r+0x36>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f000 fae3 	bl	80095c0 <__retarget_lock_acquire_recursive>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	0719      	lsls	r1, r3, #28
 8008ffe:	d51d      	bpl.n	800903c <_puts_r+0x78>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	b1db      	cbz	r3, 800903c <_puts_r+0x78>
 8009004:	3e01      	subs	r6, #1
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800900c:	3b01      	subs	r3, #1
 800900e:	60a3      	str	r3, [r4, #8]
 8009010:	bb39      	cbnz	r1, 8009062 <_puts_r+0x9e>
 8009012:	2b00      	cmp	r3, #0
 8009014:	da38      	bge.n	8009088 <_puts_r+0xc4>
 8009016:	4622      	mov	r2, r4
 8009018:	210a      	movs	r1, #10
 800901a:	4628      	mov	r0, r5
 800901c:	f000 f858 	bl	80090d0 <__swbuf_r>
 8009020:	3001      	adds	r0, #1
 8009022:	d011      	beq.n	8009048 <_puts_r+0x84>
 8009024:	250a      	movs	r5, #10
 8009026:	e011      	b.n	800904c <_puts_r+0x88>
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <_puts_r+0xd4>)
 800902a:	429c      	cmp	r4, r3
 800902c:	d101      	bne.n	8009032 <_puts_r+0x6e>
 800902e:	68ac      	ldr	r4, [r5, #8]
 8009030:	e7da      	b.n	8008fe8 <_puts_r+0x24>
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <_puts_r+0xd8>)
 8009034:	429c      	cmp	r4, r3
 8009036:	bf08      	it	eq
 8009038:	68ec      	ldreq	r4, [r5, #12]
 800903a:	e7d5      	b.n	8008fe8 <_puts_r+0x24>
 800903c:	4621      	mov	r1, r4
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f898 	bl	8009174 <__swsetup_r>
 8009044:	2800      	cmp	r0, #0
 8009046:	d0dd      	beq.n	8009004 <_puts_r+0x40>
 8009048:	f04f 35ff 	mov.w	r5, #4294967295
 800904c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800904e:	07da      	lsls	r2, r3, #31
 8009050:	d405      	bmi.n	800905e <_puts_r+0x9a>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	059b      	lsls	r3, r3, #22
 8009056:	d402      	bmi.n	800905e <_puts_r+0x9a>
 8009058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905a:	f000 fab2 	bl	80095c2 <__retarget_lock_release_recursive>
 800905e:	4628      	mov	r0, r5
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	2b00      	cmp	r3, #0
 8009064:	da04      	bge.n	8009070 <_puts_r+0xac>
 8009066:	69a2      	ldr	r2, [r4, #24]
 8009068:	429a      	cmp	r2, r3
 800906a:	dc06      	bgt.n	800907a <_puts_r+0xb6>
 800906c:	290a      	cmp	r1, #10
 800906e:	d004      	beq.n	800907a <_puts_r+0xb6>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	7019      	strb	r1, [r3, #0]
 8009078:	e7c5      	b.n	8009006 <_puts_r+0x42>
 800907a:	4622      	mov	r2, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f000 f827 	bl	80090d0 <__swbuf_r>
 8009082:	3001      	adds	r0, #1
 8009084:	d1bf      	bne.n	8009006 <_puts_r+0x42>
 8009086:	e7df      	b.n	8009048 <_puts_r+0x84>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	250a      	movs	r5, #10
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	701d      	strb	r5, [r3, #0]
 8009092:	e7db      	b.n	800904c <_puts_r+0x88>
 8009094:	08009f70 	.word	0x08009f70
 8009098:	08009f90 	.word	0x08009f90
 800909c:	08009f50 	.word	0x08009f50

080090a0 <puts>:
 80090a0:	4b02      	ldr	r3, [pc, #8]	; (80090ac <puts+0xc>)
 80090a2:	4601      	mov	r1, r0
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	f7ff bf8d 	b.w	8008fc4 <_puts_r>
 80090aa:	bf00      	nop
 80090ac:	2000001c 	.word	0x2000001c

080090b0 <_sbrk_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	; (80090cc <_sbrk_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f9 fc1a 	bl	80028f4 <_sbrk>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_sbrk_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_sbrk_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	200004b4 	.word	0x200004b4

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f000 f9d1 	bl	8009484 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12b      	bne.n	8009140 <__swbuf_r+0x70>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52f      	bpl.n	8009154 <__swbuf_r+0x84>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b36b      	cbz	r3, 8009154 <__swbuf_r+0x84>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f926 	bl	800935c <_fflush_r>
 8009110:	bb30      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d506      	bpl.n	800913c <__swbuf_r+0x6c>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d104      	bne.n	800913c <__swbuf_r+0x6c>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f911 	bl	800935c <_fflush_r>
 800913a:	b988      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 800913c:	4638      	mov	r0, r7
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <__swbuf_r+0x9c>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swbuf_r+0x7a>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7cf      	b.n	80090ea <__swbuf_r+0x1a>
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7ca      	b.n	80090ea <__swbuf_r+0x1a>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f80c 	bl	8009174 <__swsetup_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	d0cb      	beq.n	80090f8 <__swbuf_r+0x28>
 8009160:	f04f 37ff 	mov.w	r7, #4294967295
 8009164:	e7ea      	b.n	800913c <__swbuf_r+0x6c>
 8009166:	bf00      	nop
 8009168:	08009f70 	.word	0x08009f70
 800916c:	08009f90 	.word	0x08009f90
 8009170:	08009f50 	.word	0x08009f50

08009174 <__swsetup_r>:
 8009174:	4b32      	ldr	r3, [pc, #200]	; (8009240 <__swsetup_r+0xcc>)
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	681d      	ldr	r5, [r3, #0]
 800917a:	4606      	mov	r6, r0
 800917c:	460c      	mov	r4, r1
 800917e:	b125      	cbz	r5, 800918a <__swsetup_r+0x16>
 8009180:	69ab      	ldr	r3, [r5, #24]
 8009182:	b913      	cbnz	r3, 800918a <__swsetup_r+0x16>
 8009184:	4628      	mov	r0, r5
 8009186:	f000 f97d 	bl	8009484 <__sinit>
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <__swsetup_r+0xd0>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d10f      	bne.n	80091b0 <__swsetup_r+0x3c>
 8009190:	686c      	ldr	r4, [r5, #4]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d42c      	bmi.n	80091f6 <__swsetup_r+0x82>
 800919c:	06dd      	lsls	r5, r3, #27
 800919e:	d411      	bmi.n	80091c4 <__swsetup_r+0x50>
 80091a0:	2309      	movs	r3, #9
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
 80091ae:	e03e      	b.n	800922e <__swsetup_r+0xba>
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <__swsetup_r+0xd4>)
 80091b2:	429c      	cmp	r4, r3
 80091b4:	d101      	bne.n	80091ba <__swsetup_r+0x46>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	e7eb      	b.n	8009192 <__swsetup_r+0x1e>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <__swsetup_r+0xd8>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	bf08      	it	eq
 80091c0:	68ec      	ldreq	r4, [r5, #12]
 80091c2:	e7e6      	b.n	8009192 <__swsetup_r+0x1e>
 80091c4:	0758      	lsls	r0, r3, #29
 80091c6:	d512      	bpl.n	80091ee <__swsetup_r+0x7a>
 80091c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ca:	b141      	cbz	r1, 80091de <__swsetup_r+0x6a>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__swsetup_r+0x66>
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 fa67 	bl	80096a8 <_free_r>
 80091da:	2300      	movs	r3, #0
 80091dc:	6363      	str	r3, [r4, #52]	; 0x34
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	b94b      	cbnz	r3, 800920e <__swsetup_r+0x9a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d003      	beq.n	800920e <__swsetup_r+0x9a>
 8009206:	4621      	mov	r1, r4
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fa01 	bl	8009610 <__smakebuf_r>
 800920e:	89a0      	ldrh	r0, [r4, #12]
 8009210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009214:	f010 0301 	ands.w	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <__swsetup_r+0xbc>
 800921a:	2300      	movs	r3, #0
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6963      	ldr	r3, [r4, #20]
 8009220:	425b      	negs	r3, r3
 8009222:	61a3      	str	r3, [r4, #24]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	b943      	cbnz	r3, 800923a <__swsetup_r+0xc6>
 8009228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800922c:	d1ba      	bne.n	80091a4 <__swsetup_r+0x30>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0781      	lsls	r1, r0, #30
 8009232:	bf58      	it	pl
 8009234:	6963      	ldrpl	r3, [r4, #20]
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	e7f4      	b.n	8009224 <__swsetup_r+0xb0>
 800923a:	2000      	movs	r0, #0
 800923c:	e7f7      	b.n	800922e <__swsetup_r+0xba>
 800923e:	bf00      	nop
 8009240:	2000001c 	.word	0x2000001c
 8009244:	08009f70 	.word	0x08009f70
 8009248:	08009f90 	.word	0x08009f90
 800924c:	08009f50 	.word	0x08009f50

08009250 <__sflush_r>:
 8009250:	898a      	ldrh	r2, [r1, #12]
 8009252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009256:	4605      	mov	r5, r0
 8009258:	0710      	lsls	r0, r2, #28
 800925a:	460c      	mov	r4, r1
 800925c:	d458      	bmi.n	8009310 <__sflush_r+0xc0>
 800925e:	684b      	ldr	r3, [r1, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dc05      	bgt.n	8009270 <__sflush_r+0x20>
 8009264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	dc02      	bgt.n	8009270 <__sflush_r+0x20>
 800926a:	2000      	movs	r0, #0
 800926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009272:	2e00      	cmp	r6, #0
 8009274:	d0f9      	beq.n	800926a <__sflush_r+0x1a>
 8009276:	2300      	movs	r3, #0
 8009278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800927c:	682f      	ldr	r7, [r5, #0]
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	d032      	beq.n	80092e8 <__sflush_r+0x98>
 8009282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	075a      	lsls	r2, r3, #29
 8009288:	d505      	bpl.n	8009296 <__sflush_r+0x46>
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	1ac0      	subs	r0, r0, r3
 800928e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009290:	b10b      	cbz	r3, 8009296 <__sflush_r+0x46>
 8009292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009294:	1ac0      	subs	r0, r0, r3
 8009296:	2300      	movs	r3, #0
 8009298:	4602      	mov	r2, r0
 800929a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800929c:	6a21      	ldr	r1, [r4, #32]
 800929e:	4628      	mov	r0, r5
 80092a0:	47b0      	blx	r6
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	d106      	bne.n	80092b6 <__sflush_r+0x66>
 80092a8:	6829      	ldr	r1, [r5, #0]
 80092aa:	291d      	cmp	r1, #29
 80092ac:	d82c      	bhi.n	8009308 <__sflush_r+0xb8>
 80092ae:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <__sflush_r+0x108>)
 80092b0:	40ca      	lsrs	r2, r1
 80092b2:	07d6      	lsls	r6, r2, #31
 80092b4:	d528      	bpl.n	8009308 <__sflush_r+0xb8>
 80092b6:	2200      	movs	r2, #0
 80092b8:	6062      	str	r2, [r4, #4]
 80092ba:	04d9      	lsls	r1, r3, #19
 80092bc:	6922      	ldr	r2, [r4, #16]
 80092be:	6022      	str	r2, [r4, #0]
 80092c0:	d504      	bpl.n	80092cc <__sflush_r+0x7c>
 80092c2:	1c42      	adds	r2, r0, #1
 80092c4:	d101      	bne.n	80092ca <__sflush_r+0x7a>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b903      	cbnz	r3, 80092cc <__sflush_r+0x7c>
 80092ca:	6560      	str	r0, [r4, #84]	; 0x54
 80092cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ce:	602f      	str	r7, [r5, #0]
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d0ca      	beq.n	800926a <__sflush_r+0x1a>
 80092d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d8:	4299      	cmp	r1, r3
 80092da:	d002      	beq.n	80092e2 <__sflush_r+0x92>
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f9e3 	bl	80096a8 <_free_r>
 80092e2:	2000      	movs	r0, #0
 80092e4:	6360      	str	r0, [r4, #52]	; 0x34
 80092e6:	e7c1      	b.n	800926c <__sflush_r+0x1c>
 80092e8:	6a21      	ldr	r1, [r4, #32]
 80092ea:	2301      	movs	r3, #1
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b0      	blx	r6
 80092f0:	1c41      	adds	r1, r0, #1
 80092f2:	d1c7      	bne.n	8009284 <__sflush_r+0x34>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0c4      	beq.n	8009284 <__sflush_r+0x34>
 80092fa:	2b1d      	cmp	r3, #29
 80092fc:	d001      	beq.n	8009302 <__sflush_r+0xb2>
 80092fe:	2b16      	cmp	r3, #22
 8009300:	d101      	bne.n	8009306 <__sflush_r+0xb6>
 8009302:	602f      	str	r7, [r5, #0]
 8009304:	e7b1      	b.n	800926a <__sflush_r+0x1a>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7ad      	b.n	800926c <__sflush_r+0x1c>
 8009310:	690f      	ldr	r7, [r1, #16]
 8009312:	2f00      	cmp	r7, #0
 8009314:	d0a9      	beq.n	800926a <__sflush_r+0x1a>
 8009316:	0793      	lsls	r3, r2, #30
 8009318:	680e      	ldr	r6, [r1, #0]
 800931a:	bf08      	it	eq
 800931c:	694b      	ldreq	r3, [r1, #20]
 800931e:	600f      	str	r7, [r1, #0]
 8009320:	bf18      	it	ne
 8009322:	2300      	movne	r3, #0
 8009324:	eba6 0807 	sub.w	r8, r6, r7
 8009328:	608b      	str	r3, [r1, #8]
 800932a:	f1b8 0f00 	cmp.w	r8, #0
 800932e:	dd9c      	ble.n	800926a <__sflush_r+0x1a>
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009334:	4643      	mov	r3, r8
 8009336:	463a      	mov	r2, r7
 8009338:	4628      	mov	r0, r5
 800933a:	47b0      	blx	r6
 800933c:	2800      	cmp	r0, #0
 800933e:	dc06      	bgt.n	800934e <__sflush_r+0xfe>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e78e      	b.n	800926c <__sflush_r+0x1c>
 800934e:	4407      	add	r7, r0
 8009350:	eba8 0800 	sub.w	r8, r8, r0
 8009354:	e7e9      	b.n	800932a <__sflush_r+0xda>
 8009356:	bf00      	nop
 8009358:	20400001 	.word	0x20400001

0800935c <_fflush_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	690b      	ldr	r3, [r1, #16]
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b913      	cbnz	r3, 800936c <_fflush_r+0x10>
 8009366:	2500      	movs	r5, #0
 8009368:	4628      	mov	r0, r5
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	b118      	cbz	r0, 8009376 <_fflush_r+0x1a>
 800936e:	6983      	ldr	r3, [r0, #24]
 8009370:	b90b      	cbnz	r3, 8009376 <_fflush_r+0x1a>
 8009372:	f000 f887 	bl	8009484 <__sinit>
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <_fflush_r+0x6c>)
 8009378:	429c      	cmp	r4, r3
 800937a:	d11b      	bne.n	80093b4 <_fflush_r+0x58>
 800937c:	686c      	ldr	r4, [r5, #4]
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0ef      	beq.n	8009366 <_fflush_r+0xa>
 8009386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009388:	07d0      	lsls	r0, r2, #31
 800938a:	d404      	bmi.n	8009396 <_fflush_r+0x3a>
 800938c:	0599      	lsls	r1, r3, #22
 800938e:	d402      	bmi.n	8009396 <_fflush_r+0x3a>
 8009390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009392:	f000 f915 	bl	80095c0 <__retarget_lock_acquire_recursive>
 8009396:	4628      	mov	r0, r5
 8009398:	4621      	mov	r1, r4
 800939a:	f7ff ff59 	bl	8009250 <__sflush_r>
 800939e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a0:	07da      	lsls	r2, r3, #31
 80093a2:	4605      	mov	r5, r0
 80093a4:	d4e0      	bmi.n	8009368 <_fflush_r+0xc>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	059b      	lsls	r3, r3, #22
 80093aa:	d4dd      	bmi.n	8009368 <_fflush_r+0xc>
 80093ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ae:	f000 f908 	bl	80095c2 <__retarget_lock_release_recursive>
 80093b2:	e7d9      	b.n	8009368 <_fflush_r+0xc>
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <_fflush_r+0x70>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d101      	bne.n	80093be <_fflush_r+0x62>
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	e7df      	b.n	800937e <_fflush_r+0x22>
 80093be:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <_fflush_r+0x74>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	bf08      	it	eq
 80093c4:	68ec      	ldreq	r4, [r5, #12]
 80093c6:	e7da      	b.n	800937e <_fflush_r+0x22>
 80093c8:	08009f70 	.word	0x08009f70
 80093cc:	08009f90 	.word	0x08009f90
 80093d0:	08009f50 	.word	0x08009f50

080093d4 <std>:
 80093d4:	2300      	movs	r3, #0
 80093d6:	b510      	push	{r4, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	e9c0 3300 	strd	r3, r3, [r0]
 80093de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093e2:	6083      	str	r3, [r0, #8]
 80093e4:	8181      	strh	r1, [r0, #12]
 80093e6:	6643      	str	r3, [r0, #100]	; 0x64
 80093e8:	81c2      	strh	r2, [r0, #14]
 80093ea:	6183      	str	r3, [r0, #24]
 80093ec:	4619      	mov	r1, r3
 80093ee:	2208      	movs	r2, #8
 80093f0:	305c      	adds	r0, #92	; 0x5c
 80093f2:	f7ff fd1d 	bl	8008e30 <memset>
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <std+0x38>)
 80093f8:	6263      	str	r3, [r4, #36]	; 0x24
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <std+0x3c>)
 80093fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <std+0x40>)
 8009400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <std+0x44>)
 8009404:	6224      	str	r4, [r4, #32]
 8009406:	6323      	str	r3, [r4, #48]	; 0x30
 8009408:	bd10      	pop	{r4, pc}
 800940a:	bf00      	nop
 800940c:	08009d1d 	.word	0x08009d1d
 8009410:	08009d3f 	.word	0x08009d3f
 8009414:	08009d77 	.word	0x08009d77
 8009418:	08009d9b 	.word	0x08009d9b

0800941c <_cleanup_r>:
 800941c:	4901      	ldr	r1, [pc, #4]	; (8009424 <_cleanup_r+0x8>)
 800941e:	f000 b8af 	b.w	8009580 <_fwalk_reent>
 8009422:	bf00      	nop
 8009424:	0800935d 	.word	0x0800935d

08009428 <__sfmoreglue>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	2268      	movs	r2, #104	; 0x68
 800942c:	1e4d      	subs	r5, r1, #1
 800942e:	4355      	muls	r5, r2
 8009430:	460e      	mov	r6, r1
 8009432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009436:	f7ff fd39 	bl	8008eac <_malloc_r>
 800943a:	4604      	mov	r4, r0
 800943c:	b140      	cbz	r0, 8009450 <__sfmoreglue+0x28>
 800943e:	2100      	movs	r1, #0
 8009440:	e9c0 1600 	strd	r1, r6, [r0]
 8009444:	300c      	adds	r0, #12
 8009446:	60a0      	str	r0, [r4, #8]
 8009448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800944c:	f7ff fcf0 	bl	8008e30 <memset>
 8009450:	4620      	mov	r0, r4
 8009452:	bd70      	pop	{r4, r5, r6, pc}

08009454 <__sfp_lock_acquire>:
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <__sfp_lock_acquire+0x8>)
 8009456:	f000 b8b3 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 800945a:	bf00      	nop
 800945c:	200004b1 	.word	0x200004b1

08009460 <__sfp_lock_release>:
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <__sfp_lock_release+0x8>)
 8009462:	f000 b8ae 	b.w	80095c2 <__retarget_lock_release_recursive>
 8009466:	bf00      	nop
 8009468:	200004b1 	.word	0x200004b1

0800946c <__sinit_lock_acquire>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__sinit_lock_acquire+0x8>)
 800946e:	f000 b8a7 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	200004b2 	.word	0x200004b2

08009478 <__sinit_lock_release>:
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <__sinit_lock_release+0x8>)
 800947a:	f000 b8a2 	b.w	80095c2 <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	200004b2 	.word	0x200004b2

08009484 <__sinit>:
 8009484:	b510      	push	{r4, lr}
 8009486:	4604      	mov	r4, r0
 8009488:	f7ff fff0 	bl	800946c <__sinit_lock_acquire>
 800948c:	69a3      	ldr	r3, [r4, #24]
 800948e:	b11b      	cbz	r3, 8009498 <__sinit+0x14>
 8009490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009494:	f7ff bff0 	b.w	8009478 <__sinit_lock_release>
 8009498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800949c:	6523      	str	r3, [r4, #80]	; 0x50
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <__sinit+0x68>)
 80094a0:	4a13      	ldr	r2, [pc, #76]	; (80094f0 <__sinit+0x6c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	bf04      	itt	eq
 80094aa:	2301      	moveq	r3, #1
 80094ac:	61a3      	streq	r3, [r4, #24]
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 f820 	bl	80094f4 <__sfp>
 80094b4:	6060      	str	r0, [r4, #4]
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 f81c 	bl	80094f4 <__sfp>
 80094bc:	60a0      	str	r0, [r4, #8]
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 f818 	bl	80094f4 <__sfp>
 80094c4:	2200      	movs	r2, #0
 80094c6:	60e0      	str	r0, [r4, #12]
 80094c8:	2104      	movs	r1, #4
 80094ca:	6860      	ldr	r0, [r4, #4]
 80094cc:	f7ff ff82 	bl	80093d4 <std>
 80094d0:	68a0      	ldr	r0, [r4, #8]
 80094d2:	2201      	movs	r2, #1
 80094d4:	2109      	movs	r1, #9
 80094d6:	f7ff ff7d 	bl	80093d4 <std>
 80094da:	68e0      	ldr	r0, [r4, #12]
 80094dc:	2202      	movs	r2, #2
 80094de:	2112      	movs	r1, #18
 80094e0:	f7ff ff78 	bl	80093d4 <std>
 80094e4:	2301      	movs	r3, #1
 80094e6:	61a3      	str	r3, [r4, #24]
 80094e8:	e7d2      	b.n	8009490 <__sinit+0xc>
 80094ea:	bf00      	nop
 80094ec:	08009f4c 	.word	0x08009f4c
 80094f0:	0800941d 	.word	0x0800941d

080094f4 <__sfp>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	4607      	mov	r7, r0
 80094f8:	f7ff ffac 	bl	8009454 <__sfp_lock_acquire>
 80094fc:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <__sfp+0x84>)
 80094fe:	681e      	ldr	r6, [r3, #0]
 8009500:	69b3      	ldr	r3, [r6, #24]
 8009502:	b913      	cbnz	r3, 800950a <__sfp+0x16>
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff ffbd 	bl	8009484 <__sinit>
 800950a:	3648      	adds	r6, #72	; 0x48
 800950c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	d503      	bpl.n	800951c <__sfp+0x28>
 8009514:	6833      	ldr	r3, [r6, #0]
 8009516:	b30b      	cbz	r3, 800955c <__sfp+0x68>
 8009518:	6836      	ldr	r6, [r6, #0]
 800951a:	e7f7      	b.n	800950c <__sfp+0x18>
 800951c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009520:	b9d5      	cbnz	r5, 8009558 <__sfp+0x64>
 8009522:	4b16      	ldr	r3, [pc, #88]	; (800957c <__sfp+0x88>)
 8009524:	60e3      	str	r3, [r4, #12]
 8009526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800952a:	6665      	str	r5, [r4, #100]	; 0x64
 800952c:	f000 f847 	bl	80095be <__retarget_lock_init_recursive>
 8009530:	f7ff ff96 	bl	8009460 <__sfp_lock_release>
 8009534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800953c:	6025      	str	r5, [r4, #0]
 800953e:	61a5      	str	r5, [r4, #24]
 8009540:	2208      	movs	r2, #8
 8009542:	4629      	mov	r1, r5
 8009544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009548:	f7ff fc72 	bl	8008e30 <memset>
 800954c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009554:	4620      	mov	r0, r4
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009558:	3468      	adds	r4, #104	; 0x68
 800955a:	e7d9      	b.n	8009510 <__sfp+0x1c>
 800955c:	2104      	movs	r1, #4
 800955e:	4638      	mov	r0, r7
 8009560:	f7ff ff62 	bl	8009428 <__sfmoreglue>
 8009564:	4604      	mov	r4, r0
 8009566:	6030      	str	r0, [r6, #0]
 8009568:	2800      	cmp	r0, #0
 800956a:	d1d5      	bne.n	8009518 <__sfp+0x24>
 800956c:	f7ff ff78 	bl	8009460 <__sfp_lock_release>
 8009570:	230c      	movs	r3, #12
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	e7ee      	b.n	8009554 <__sfp+0x60>
 8009576:	bf00      	nop
 8009578:	08009f4c 	.word	0x08009f4c
 800957c:	ffff0001 	.word	0xffff0001

08009580 <_fwalk_reent>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	4606      	mov	r6, r0
 8009586:	4688      	mov	r8, r1
 8009588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800958c:	2700      	movs	r7, #0
 800958e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009592:	f1b9 0901 	subs.w	r9, r9, #1
 8009596:	d505      	bpl.n	80095a4 <_fwalk_reent+0x24>
 8009598:	6824      	ldr	r4, [r4, #0]
 800959a:	2c00      	cmp	r4, #0
 800959c:	d1f7      	bne.n	800958e <_fwalk_reent+0xe>
 800959e:	4638      	mov	r0, r7
 80095a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a4:	89ab      	ldrh	r3, [r5, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d907      	bls.n	80095ba <_fwalk_reent+0x3a>
 80095aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ae:	3301      	adds	r3, #1
 80095b0:	d003      	beq.n	80095ba <_fwalk_reent+0x3a>
 80095b2:	4629      	mov	r1, r5
 80095b4:	4630      	mov	r0, r6
 80095b6:	47c0      	blx	r8
 80095b8:	4307      	orrs	r7, r0
 80095ba:	3568      	adds	r5, #104	; 0x68
 80095bc:	e7e9      	b.n	8009592 <_fwalk_reent+0x12>

080095be <__retarget_lock_init_recursive>:
 80095be:	4770      	bx	lr

080095c0 <__retarget_lock_acquire_recursive>:
 80095c0:	4770      	bx	lr

080095c2 <__retarget_lock_release_recursive>:
 80095c2:	4770      	bx	lr

080095c4 <__swhatbuf_r>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	460e      	mov	r6, r1
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	2900      	cmp	r1, #0
 80095ce:	b096      	sub	sp, #88	; 0x58
 80095d0:	4614      	mov	r4, r2
 80095d2:	461d      	mov	r5, r3
 80095d4:	da08      	bge.n	80095e8 <__swhatbuf_r+0x24>
 80095d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	061a      	lsls	r2, r3, #24
 80095e0:	d410      	bmi.n	8009604 <__swhatbuf_r+0x40>
 80095e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e6:	e00e      	b.n	8009606 <__swhatbuf_r+0x42>
 80095e8:	466a      	mov	r2, sp
 80095ea:	f000 fbfd 	bl	8009de8 <_fstat_r>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	dbf1      	blt.n	80095d6 <__swhatbuf_r+0x12>
 80095f2:	9a01      	ldr	r2, [sp, #4]
 80095f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095fc:	425a      	negs	r2, r3
 80095fe:	415a      	adcs	r2, r3
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	e7ee      	b.n	80095e2 <__swhatbuf_r+0x1e>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	2000      	movs	r0, #0
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	b016      	add	sp, #88	; 0x58
 800960c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009610 <__smakebuf_r>:
 8009610:	898b      	ldrh	r3, [r1, #12]
 8009612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009614:	079d      	lsls	r5, r3, #30
 8009616:	4606      	mov	r6, r0
 8009618:	460c      	mov	r4, r1
 800961a:	d507      	bpl.n	800962c <__smakebuf_r+0x1c>
 800961c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	2301      	movs	r3, #1
 8009626:	6163      	str	r3, [r4, #20]
 8009628:	b002      	add	sp, #8
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	ab01      	add	r3, sp, #4
 800962e:	466a      	mov	r2, sp
 8009630:	f7ff ffc8 	bl	80095c4 <__swhatbuf_r>
 8009634:	9900      	ldr	r1, [sp, #0]
 8009636:	4605      	mov	r5, r0
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fc37 	bl	8008eac <_malloc_r>
 800963e:	b948      	cbnz	r0, 8009654 <__smakebuf_r+0x44>
 8009640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009644:	059a      	lsls	r2, r3, #22
 8009646:	d4ef      	bmi.n	8009628 <__smakebuf_r+0x18>
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	e7e3      	b.n	800961c <__smakebuf_r+0xc>
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <__smakebuf_r+0x7c>)
 8009656:	62b3      	str	r3, [r6, #40]	; 0x28
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	6163      	str	r3, [r4, #20]
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	6120      	str	r0, [r4, #16]
 800966a:	b15b      	cbz	r3, 8009684 <__smakebuf_r+0x74>
 800966c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fbcb 	bl	8009e0c <_isatty_r>
 8009676:	b128      	cbz	r0, 8009684 <__smakebuf_r+0x74>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	89a0      	ldrh	r0, [r4, #12]
 8009686:	4305      	orrs	r5, r0
 8009688:	81a5      	strh	r5, [r4, #12]
 800968a:	e7cd      	b.n	8009628 <__smakebuf_r+0x18>
 800968c:	0800941d 	.word	0x0800941d

08009690 <__malloc_lock>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__malloc_lock+0x8>)
 8009692:	f7ff bf95 	b.w	80095c0 <__retarget_lock_acquire_recursive>
 8009696:	bf00      	nop
 8009698:	200004b0 	.word	0x200004b0

0800969c <__malloc_unlock>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__malloc_unlock+0x8>)
 800969e:	f7ff bf90 	b.w	80095c2 <__retarget_lock_release_recursive>
 80096a2:	bf00      	nop
 80096a4:	200004b0 	.word	0x200004b0

080096a8 <_free_r>:
 80096a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096aa:	2900      	cmp	r1, #0
 80096ac:	d044      	beq.n	8009738 <_free_r+0x90>
 80096ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b2:	9001      	str	r0, [sp, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ba:	bfb8      	it	lt
 80096bc:	18e4      	addlt	r4, r4, r3
 80096be:	f7ff ffe7 	bl	8009690 <__malloc_lock>
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <_free_r+0x94>)
 80096c4:	9801      	ldr	r0, [sp, #4]
 80096c6:	6813      	ldr	r3, [r2, #0]
 80096c8:	b933      	cbnz	r3, 80096d8 <_free_r+0x30>
 80096ca:	6063      	str	r3, [r4, #4]
 80096cc:	6014      	str	r4, [r2, #0]
 80096ce:	b003      	add	sp, #12
 80096d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d4:	f7ff bfe2 	b.w	800969c <__malloc_unlock>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d908      	bls.n	80096ee <_free_r+0x46>
 80096dc:	6825      	ldr	r5, [r4, #0]
 80096de:	1961      	adds	r1, r4, r5
 80096e0:	428b      	cmp	r3, r1
 80096e2:	bf01      	itttt	eq
 80096e4:	6819      	ldreq	r1, [r3, #0]
 80096e6:	685b      	ldreq	r3, [r3, #4]
 80096e8:	1949      	addeq	r1, r1, r5
 80096ea:	6021      	streq	r1, [r4, #0]
 80096ec:	e7ed      	b.n	80096ca <_free_r+0x22>
 80096ee:	461a      	mov	r2, r3
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b10b      	cbz	r3, 80096f8 <_free_r+0x50>
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	d9fa      	bls.n	80096ee <_free_r+0x46>
 80096f8:	6811      	ldr	r1, [r2, #0]
 80096fa:	1855      	adds	r5, r2, r1
 80096fc:	42a5      	cmp	r5, r4
 80096fe:	d10b      	bne.n	8009718 <_free_r+0x70>
 8009700:	6824      	ldr	r4, [r4, #0]
 8009702:	4421      	add	r1, r4
 8009704:	1854      	adds	r4, r2, r1
 8009706:	42a3      	cmp	r3, r4
 8009708:	6011      	str	r1, [r2, #0]
 800970a:	d1e0      	bne.n	80096ce <_free_r+0x26>
 800970c:	681c      	ldr	r4, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	6053      	str	r3, [r2, #4]
 8009712:	4421      	add	r1, r4
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	e7da      	b.n	80096ce <_free_r+0x26>
 8009718:	d902      	bls.n	8009720 <_free_r+0x78>
 800971a:	230c      	movs	r3, #12
 800971c:	6003      	str	r3, [r0, #0]
 800971e:	e7d6      	b.n	80096ce <_free_r+0x26>
 8009720:	6825      	ldr	r5, [r4, #0]
 8009722:	1961      	adds	r1, r4, r5
 8009724:	428b      	cmp	r3, r1
 8009726:	bf04      	itt	eq
 8009728:	6819      	ldreq	r1, [r3, #0]
 800972a:	685b      	ldreq	r3, [r3, #4]
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	bf04      	itt	eq
 8009730:	1949      	addeq	r1, r1, r5
 8009732:	6021      	streq	r1, [r4, #0]
 8009734:	6054      	str	r4, [r2, #4]
 8009736:	e7ca      	b.n	80096ce <_free_r+0x26>
 8009738:	b003      	add	sp, #12
 800973a:	bd30      	pop	{r4, r5, pc}
 800973c:	200004a8 	.word	0x200004a8

08009740 <__sfputc_r>:
 8009740:	6893      	ldr	r3, [r2, #8]
 8009742:	3b01      	subs	r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	b410      	push	{r4}
 8009748:	6093      	str	r3, [r2, #8]
 800974a:	da08      	bge.n	800975e <__sfputc_r+0x1e>
 800974c:	6994      	ldr	r4, [r2, #24]
 800974e:	42a3      	cmp	r3, r4
 8009750:	db01      	blt.n	8009756 <__sfputc_r+0x16>
 8009752:	290a      	cmp	r1, #10
 8009754:	d103      	bne.n	800975e <__sfputc_r+0x1e>
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	f7ff bcb9 	b.w	80090d0 <__swbuf_r>
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	1c58      	adds	r0, r3, #1
 8009762:	6010      	str	r0, [r2, #0]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	4608      	mov	r0, r1
 8009768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976c:	4770      	bx	lr

0800976e <__sfputs_r>:
 800976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	4614      	mov	r4, r2
 8009776:	18d5      	adds	r5, r2, r3
 8009778:	42ac      	cmp	r4, r5
 800977a:	d101      	bne.n	8009780 <__sfputs_r+0x12>
 800977c:	2000      	movs	r0, #0
 800977e:	e007      	b.n	8009790 <__sfputs_r+0x22>
 8009780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009784:	463a      	mov	r2, r7
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ffda 	bl	8009740 <__sfputc_r>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d1f3      	bne.n	8009778 <__sfputs_r+0xa>
 8009790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009794 <_vfiprintf_r>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	460d      	mov	r5, r1
 800979a:	b09d      	sub	sp, #116	; 0x74
 800979c:	4614      	mov	r4, r2
 800979e:	4698      	mov	r8, r3
 80097a0:	4606      	mov	r6, r0
 80097a2:	b118      	cbz	r0, 80097ac <_vfiprintf_r+0x18>
 80097a4:	6983      	ldr	r3, [r0, #24]
 80097a6:	b90b      	cbnz	r3, 80097ac <_vfiprintf_r+0x18>
 80097a8:	f7ff fe6c 	bl	8009484 <__sinit>
 80097ac:	4b89      	ldr	r3, [pc, #548]	; (80099d4 <_vfiprintf_r+0x240>)
 80097ae:	429d      	cmp	r5, r3
 80097b0:	d11b      	bne.n	80097ea <_vfiprintf_r+0x56>
 80097b2:	6875      	ldr	r5, [r6, #4]
 80097b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	d405      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	059a      	lsls	r2, r3, #22
 80097be:	d402      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c2:	f7ff fefd 	bl	80095c0 <__retarget_lock_acquire_recursive>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	071b      	lsls	r3, r3, #28
 80097ca:	d501      	bpl.n	80097d0 <_vfiprintf_r+0x3c>
 80097cc:	692b      	ldr	r3, [r5, #16]
 80097ce:	b9eb      	cbnz	r3, 800980c <_vfiprintf_r+0x78>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff fcce 	bl	8009174 <__swsetup_r>
 80097d8:	b1c0      	cbz	r0, 800980c <_vfiprintf_r+0x78>
 80097da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097dc:	07dc      	lsls	r4, r3, #31
 80097de:	d50e      	bpl.n	80097fe <_vfiprintf_r+0x6a>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	b01d      	add	sp, #116	; 0x74
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	4b7b      	ldr	r3, [pc, #492]	; (80099d8 <_vfiprintf_r+0x244>)
 80097ec:	429d      	cmp	r5, r3
 80097ee:	d101      	bne.n	80097f4 <_vfiprintf_r+0x60>
 80097f0:	68b5      	ldr	r5, [r6, #8]
 80097f2:	e7df      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097f4:	4b79      	ldr	r3, [pc, #484]	; (80099dc <_vfiprintf_r+0x248>)
 80097f6:	429d      	cmp	r5, r3
 80097f8:	bf08      	it	eq
 80097fa:	68f5      	ldreq	r5, [r6, #12]
 80097fc:	e7da      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	0598      	lsls	r0, r3, #22
 8009802:	d4ed      	bmi.n	80097e0 <_vfiprintf_r+0x4c>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff fedc 	bl	80095c2 <__retarget_lock_release_recursive>
 800980a:	e7e9      	b.n	80097e0 <_vfiprintf_r+0x4c>
 800980c:	2300      	movs	r3, #0
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	2320      	movs	r3, #32
 8009812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009816:	f8cd 800c 	str.w	r8, [sp, #12]
 800981a:	2330      	movs	r3, #48	; 0x30
 800981c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099e0 <_vfiprintf_r+0x24c>
 8009820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	4623      	mov	r3, r4
 800982a:	469a      	mov	sl, r3
 800982c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009830:	b10a      	cbz	r2, 8009836 <_vfiprintf_r+0xa2>
 8009832:	2a25      	cmp	r2, #37	; 0x25
 8009834:	d1f9      	bne.n	800982a <_vfiprintf_r+0x96>
 8009836:	ebba 0b04 	subs.w	fp, sl, r4
 800983a:	d00b      	beq.n	8009854 <_vfiprintf_r+0xc0>
 800983c:	465b      	mov	r3, fp
 800983e:	4622      	mov	r2, r4
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff93 	bl	800976e <__sfputs_r>
 8009848:	3001      	adds	r0, #1
 800984a:	f000 80aa 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	445a      	add	r2, fp
 8009852:	9209      	str	r2, [sp, #36]	; 0x24
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a2 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800985e:	2300      	movs	r3, #0
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009868:	f10a 0a01 	add.w	sl, sl, #1
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009874:	931a      	str	r3, [sp, #104]	; 0x68
 8009876:	4654      	mov	r4, sl
 8009878:	2205      	movs	r2, #5
 800987a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987e:	4858      	ldr	r0, [pc, #352]	; (80099e0 <_vfiprintf_r+0x24c>)
 8009880:	f7f6 fcc6 	bl	8000210 <memchr>
 8009884:	9a04      	ldr	r2, [sp, #16]
 8009886:	b9d8      	cbnz	r0, 80098c0 <_vfiprintf_r+0x12c>
 8009888:	06d1      	lsls	r1, r2, #27
 800988a:	bf44      	itt	mi
 800988c:	2320      	movmi	r3, #32
 800988e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009892:	0713      	lsls	r3, r2, #28
 8009894:	bf44      	itt	mi
 8009896:	232b      	movmi	r3, #43	; 0x2b
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	f89a 3000 	ldrb.w	r3, [sl]
 80098a0:	2b2a      	cmp	r3, #42	; 0x2a
 80098a2:	d015      	beq.n	80098d0 <_vfiprintf_r+0x13c>
 80098a4:	9a07      	ldr	r2, [sp, #28]
 80098a6:	4654      	mov	r4, sl
 80098a8:	2000      	movs	r0, #0
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4621      	mov	r1, r4
 80098b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b4:	3b30      	subs	r3, #48	; 0x30
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d94e      	bls.n	8009958 <_vfiprintf_r+0x1c4>
 80098ba:	b1b0      	cbz	r0, 80098ea <_vfiprintf_r+0x156>
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	e014      	b.n	80098ea <_vfiprintf_r+0x156>
 80098c0:	eba0 0308 	sub.w	r3, r0, r8
 80098c4:	fa09 f303 	lsl.w	r3, r9, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	46a2      	mov	sl, r4
 80098ce:	e7d2      	b.n	8009876 <_vfiprintf_r+0xe2>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	9103      	str	r1, [sp, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbb      	ittet	lt
 80098dc:	425b      	neglt	r3, r3
 80098de:	f042 0202 	orrlt.w	r2, r2, #2
 80098e2:	9307      	strge	r3, [sp, #28]
 80098e4:	9307      	strlt	r3, [sp, #28]
 80098e6:	bfb8      	it	lt
 80098e8:	9204      	strlt	r2, [sp, #16]
 80098ea:	7823      	ldrb	r3, [r4, #0]
 80098ec:	2b2e      	cmp	r3, #46	; 0x2e
 80098ee:	d10c      	bne.n	800990a <_vfiprintf_r+0x176>
 80098f0:	7863      	ldrb	r3, [r4, #1]
 80098f2:	2b2a      	cmp	r3, #42	; 0x2a
 80098f4:	d135      	bne.n	8009962 <_vfiprintf_r+0x1ce>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9203      	str	r2, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	f04f 33ff 	movlt.w	r3, #4294967295
 8009906:	3402      	adds	r4, #2
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099f0 <_vfiprintf_r+0x25c>
 800990e:	7821      	ldrb	r1, [r4, #0]
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	f7f6 fc7c 	bl	8000210 <memchr>
 8009918:	b140      	cbz	r0, 800992c <_vfiprintf_r+0x198>
 800991a:	2340      	movs	r3, #64	; 0x40
 800991c:	eba0 000a 	sub.w	r0, r0, sl
 8009920:	fa03 f000 	lsl.w	r0, r3, r0
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	4303      	orrs	r3, r0
 8009928:	3401      	adds	r4, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	482c      	ldr	r0, [pc, #176]	; (80099e4 <_vfiprintf_r+0x250>)
 8009932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009936:	2206      	movs	r2, #6
 8009938:	f7f6 fc6a 	bl	8000210 <memchr>
 800993c:	2800      	cmp	r0, #0
 800993e:	d03f      	beq.n	80099c0 <_vfiprintf_r+0x22c>
 8009940:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <_vfiprintf_r+0x254>)
 8009942:	bb1b      	cbnz	r3, 800998c <_vfiprintf_r+0x1f8>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	3308      	adds	r3, #8
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009952:	443b      	add	r3, r7
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	e767      	b.n	8009828 <_vfiprintf_r+0x94>
 8009958:	fb0c 3202 	mla	r2, ip, r2, r3
 800995c:	460c      	mov	r4, r1
 800995e:	2001      	movs	r0, #1
 8009960:	e7a5      	b.n	80098ae <_vfiprintf_r+0x11a>
 8009962:	2300      	movs	r3, #0
 8009964:	3401      	adds	r4, #1
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	4619      	mov	r1, r3
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4620      	mov	r0, r4
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	; 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_vfiprintf_r+0x1ee>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c5      	beq.n	800990a <_vfiprintf_r+0x176>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c3      	b.n	800990a <_vfiprintf_r+0x176>
 8009982:	fb0c 2101 	mla	r1, ip, r1, r2
 8009986:	4604      	mov	r4, r0
 8009988:	2301      	movs	r3, #1
 800998a:	e7f0      	b.n	800996e <_vfiprintf_r+0x1da>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4b16      	ldr	r3, [pc, #88]	; (80099ec <_vfiprintf_r+0x258>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4630      	mov	r0, r6
 8009998:	f3af 8000 	nop.w
 800999c:	4607      	mov	r7, r0
 800999e:	1c78      	adds	r0, r7, #1
 80099a0:	d1d6      	bne.n	8009950 <_vfiprintf_r+0x1bc>
 80099a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a4:	07d9      	lsls	r1, r3, #31
 80099a6:	d405      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099a8:	89ab      	ldrh	r3, [r5, #12]
 80099aa:	059a      	lsls	r2, r3, #22
 80099ac:	d402      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b0:	f7ff fe07 	bl	80095c2 <__retarget_lock_release_recursive>
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	065b      	lsls	r3, r3, #25
 80099b8:	f53f af12 	bmi.w	80097e0 <_vfiprintf_r+0x4c>
 80099bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099be:	e711      	b.n	80097e4 <_vfiprintf_r+0x50>
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	462a      	mov	r2, r5
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <_vfiprintf_r+0x258>)
 80099c8:	a904      	add	r1, sp, #16
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f880 	bl	8009ad0 <_printf_i>
 80099d0:	e7e4      	b.n	800999c <_vfiprintf_r+0x208>
 80099d2:	bf00      	nop
 80099d4:	08009f70 	.word	0x08009f70
 80099d8:	08009f90 	.word	0x08009f90
 80099dc:	08009f50 	.word	0x08009f50
 80099e0:	08009fb0 	.word	0x08009fb0
 80099e4:	08009fba 	.word	0x08009fba
 80099e8:	00000000 	.word	0x00000000
 80099ec:	0800976f 	.word	0x0800976f
 80099f0:	08009fb6 	.word	0x08009fb6

080099f4 <_printf_common>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4699      	mov	r9, r3
 80099fc:	688a      	ldr	r2, [r1, #8]
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bfb8      	it	lt
 8009a08:	4613      	movlt	r3, r2
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a10:	4607      	mov	r7, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b10a      	cbz	r2, 8009a1a <_printf_common+0x26>
 8009a16:	3301      	adds	r3, #1
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	0699      	lsls	r1, r3, #26
 8009a1e:	bf42      	ittt	mi
 8009a20:	6833      	ldrmi	r3, [r6, #0]
 8009a22:	3302      	addmi	r3, #2
 8009a24:	6033      	strmi	r3, [r6, #0]
 8009a26:	6825      	ldr	r5, [r4, #0]
 8009a28:	f015 0506 	ands.w	r5, r5, #6
 8009a2c:	d106      	bne.n	8009a3c <_printf_common+0x48>
 8009a2e:	f104 0a19 	add.w	sl, r4, #25
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	6832      	ldr	r2, [r6, #0]
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc26      	bgt.n	8009a8a <_printf_common+0x96>
 8009a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a40:	1e13      	subs	r3, r2, #0
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	bf18      	it	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	0692      	lsls	r2, r2, #26
 8009a4a:	d42b      	bmi.n	8009aa4 <_printf_common+0xb0>
 8009a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a50:	4649      	mov	r1, r9
 8009a52:	4638      	mov	r0, r7
 8009a54:	47c0      	blx	r8
 8009a56:	3001      	adds	r0, #1
 8009a58:	d01e      	beq.n	8009a98 <_printf_common+0xa4>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	68e5      	ldr	r5, [r4, #12]
 8009a5e:	6832      	ldr	r2, [r6, #0]
 8009a60:	f003 0306 	and.w	r3, r3, #6
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	bf08      	it	eq
 8009a68:	1aad      	subeq	r5, r5, r2
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	bf0c      	ite	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	2500      	movne	r5, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bfc4      	itt	gt
 8009a7a:	1a9b      	subgt	r3, r3, r2
 8009a7c:	18ed      	addgt	r5, r5, r3
 8009a7e:	2600      	movs	r6, #0
 8009a80:	341a      	adds	r4, #26
 8009a82:	42b5      	cmp	r5, r6
 8009a84:	d11a      	bne.n	8009abc <_printf_common+0xc8>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e008      	b.n	8009a9c <_printf_common+0xa8>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4638      	mov	r0, r7
 8009a92:	47c0      	blx	r8
 8009a94:	3001      	adds	r0, #1
 8009a96:	d103      	bne.n	8009aa0 <_printf_common+0xac>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7c6      	b.n	8009a32 <_printf_common+0x3e>
 8009aa4:	18e1      	adds	r1, r4, r3
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	2030      	movs	r0, #48	; 0x30
 8009aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aae:	4422      	add	r2, r4
 8009ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab8:	3302      	adds	r3, #2
 8009aba:	e7c7      	b.n	8009a4c <_printf_common+0x58>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0e6      	beq.n	8009a98 <_printf_common+0xa4>
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7d9      	b.n	8009a82 <_printf_common+0x8e>
	...

08009ad0 <_printf_i>:
 8009ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	7e0f      	ldrb	r7, [r1, #24]
 8009ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ad8:	2f78      	cmp	r7, #120	; 0x78
 8009ada:	4691      	mov	r9, r2
 8009adc:	4680      	mov	r8, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ae6:	d807      	bhi.n	8009af8 <_printf_i+0x28>
 8009ae8:	2f62      	cmp	r7, #98	; 0x62
 8009aea:	d80a      	bhi.n	8009b02 <_printf_i+0x32>
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	f000 80d8 	beq.w	8009ca2 <_printf_i+0x1d2>
 8009af2:	2f58      	cmp	r7, #88	; 0x58
 8009af4:	f000 80a3 	beq.w	8009c3e <_printf_i+0x16e>
 8009af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b00:	e03a      	b.n	8009b78 <_printf_i+0xa8>
 8009b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b06:	2b15      	cmp	r3, #21
 8009b08:	d8f6      	bhi.n	8009af8 <_printf_i+0x28>
 8009b0a:	a101      	add	r1, pc, #4	; (adr r1, 8009b10 <_printf_i+0x40>)
 8009b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009af9 	.word	0x08009af9
 8009b1c:	08009af9 	.word	0x08009af9
 8009b20:	08009af9 	.word	0x08009af9
 8009b24:	08009af9 	.word	0x08009af9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009af9 	.word	0x08009af9
 8009b30:	08009af9 	.word	0x08009af9
 8009b34:	08009af9 	.word	0x08009af9
 8009b38:	08009af9 	.word	0x08009af9
 8009b3c:	08009c89 	.word	0x08009c89
 8009b40:	08009bad 	.word	0x08009bad
 8009b44:	08009c6b 	.word	0x08009c6b
 8009b48:	08009af9 	.word	0x08009af9
 8009b4c:	08009af9 	.word	0x08009af9
 8009b50:	08009cab 	.word	0x08009cab
 8009b54:	08009af9 	.word	0x08009af9
 8009b58:	08009bad 	.word	0x08009bad
 8009b5c:	08009af9 	.word	0x08009af9
 8009b60:	08009af9 	.word	0x08009af9
 8009b64:	08009c73 	.word	0x08009c73
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	602a      	str	r2, [r5, #0]
 8009b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0a3      	b.n	8009cc4 <_printf_i+0x1f4>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	6829      	ldr	r1, [r5, #0]
 8009b80:	0606      	lsls	r6, r0, #24
 8009b82:	f101 0304 	add.w	r3, r1, #4
 8009b86:	d50a      	bpl.n	8009b9e <_printf_i+0xce>
 8009b88:	680e      	ldr	r6, [r1, #0]
 8009b8a:	602b      	str	r3, [r5, #0]
 8009b8c:	2e00      	cmp	r6, #0
 8009b8e:	da03      	bge.n	8009b98 <_printf_i+0xc8>
 8009b90:	232d      	movs	r3, #45	; 0x2d
 8009b92:	4276      	negs	r6, r6
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b98:	485e      	ldr	r0, [pc, #376]	; (8009d14 <_printf_i+0x244>)
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	e019      	b.n	8009bd2 <_printf_i+0x102>
 8009b9e:	680e      	ldr	r6, [r1, #0]
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ba6:	bf18      	it	ne
 8009ba8:	b236      	sxthne	r6, r6
 8009baa:	e7ef      	b.n	8009b8c <_printf_i+0xbc>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	1d19      	adds	r1, r3, #4
 8009bb2:	6029      	str	r1, [r5, #0]
 8009bb4:	0601      	lsls	r1, r0, #24
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0xec>
 8009bb8:	681e      	ldr	r6, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0xf2>
 8009bbc:	0646      	lsls	r6, r0, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0xe8>
 8009bc0:	881e      	ldrh	r6, [r3, #0]
 8009bc2:	4854      	ldr	r0, [pc, #336]	; (8009d14 <_printf_i+0x244>)
 8009bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2308      	moveq	r3, #8
 8009bca:	230a      	movne	r3, #10
 8009bcc:	2100      	movs	r1, #0
 8009bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bd2:	6865      	ldr	r5, [r4, #4]
 8009bd4:	60a5      	str	r5, [r4, #8]
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	bfa2      	ittt	ge
 8009bda:	6821      	ldrge	r1, [r4, #0]
 8009bdc:	f021 0104 	bicge.w	r1, r1, #4
 8009be0:	6021      	strge	r1, [r4, #0]
 8009be2:	b90e      	cbnz	r6, 8009be8 <_printf_i+0x118>
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	d04d      	beq.n	8009c84 <_printf_i+0x1b4>
 8009be8:	4615      	mov	r5, r2
 8009bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bee:	fb03 6711 	mls	r7, r3, r1, r6
 8009bf2:	5dc7      	ldrb	r7, [r0, r7]
 8009bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bf8:	4637      	mov	r7, r6
 8009bfa:	42bb      	cmp	r3, r7
 8009bfc:	460e      	mov	r6, r1
 8009bfe:	d9f4      	bls.n	8009bea <_printf_i+0x11a>
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d10b      	bne.n	8009c1c <_printf_i+0x14c>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	07de      	lsls	r6, r3, #31
 8009c08:	d508      	bpl.n	8009c1c <_printf_i+0x14c>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6861      	ldr	r1, [r4, #4]
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	bfde      	ittt	le
 8009c12:	2330      	movle	r3, #48	; 0x30
 8009c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c1c:	1b52      	subs	r2, r2, r5
 8009c1e:	6122      	str	r2, [r4, #16]
 8009c20:	f8cd a000 	str.w	sl, [sp]
 8009c24:	464b      	mov	r3, r9
 8009c26:	aa03      	add	r2, sp, #12
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f7ff fee2 	bl	80099f4 <_printf_common>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d14c      	bne.n	8009cce <_printf_i+0x1fe>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	b004      	add	sp, #16
 8009c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3e:	4835      	ldr	r0, [pc, #212]	; (8009d14 <_printf_i+0x244>)
 8009c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c44:	6829      	ldr	r1, [r5, #0]
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c4c:	6029      	str	r1, [r5, #0]
 8009c4e:	061d      	lsls	r5, r3, #24
 8009c50:	d514      	bpl.n	8009c7c <_printf_i+0x1ac>
 8009c52:	07df      	lsls	r7, r3, #31
 8009c54:	bf44      	itt	mi
 8009c56:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5a:	6023      	strmi	r3, [r4, #0]
 8009c5c:	b91e      	cbnz	r6, 8009c66 <_printf_i+0x196>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f023 0320 	bic.w	r3, r3, #32
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2310      	movs	r3, #16
 8009c68:	e7b0      	b.n	8009bcc <_printf_i+0xfc>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f043 0320 	orr.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2378      	movs	r3, #120	; 0x78
 8009c74:	4828      	ldr	r0, [pc, #160]	; (8009d18 <_printf_i+0x248>)
 8009c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7a:	e7e3      	b.n	8009c44 <_printf_i+0x174>
 8009c7c:	0659      	lsls	r1, r3, #25
 8009c7e:	bf48      	it	mi
 8009c80:	b2b6      	uxthmi	r6, r6
 8009c82:	e7e6      	b.n	8009c52 <_printf_i+0x182>
 8009c84:	4615      	mov	r5, r2
 8009c86:	e7bb      	b.n	8009c00 <_printf_i+0x130>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	6826      	ldr	r6, [r4, #0]
 8009c8c:	6961      	ldr	r1, [r4, #20]
 8009c8e:	1d18      	adds	r0, r3, #4
 8009c90:	6028      	str	r0, [r5, #0]
 8009c92:	0635      	lsls	r5, r6, #24
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0x1cc>
 8009c98:	6019      	str	r1, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0x1d2>
 8009c9c:	0670      	lsls	r0, r6, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0x1c8>
 8009ca0:	8019      	strh	r1, [r3, #0]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	e7ba      	b.n	8009c20 <_printf_i+0x150>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	681d      	ldr	r5, [r3, #0]
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7f6 faaa 	bl	8000210 <memchr>
 8009cbc:	b108      	cbz	r0, 8009cc2 <_printf_i+0x1f2>
 8009cbe:	1b40      	subs	r0, r0, r5
 8009cc0:	6060      	str	r0, [r4, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ccc:	e7a8      	b.n	8009c20 <_printf_i+0x150>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0ab      	beq.n	8009c34 <_printf_i+0x164>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	d413      	bmi.n	8009d0a <_printf_i+0x23a>
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	bfb8      	it	lt
 8009cea:	4618      	movlt	r0, r3
 8009cec:	e7a4      	b.n	8009c38 <_printf_i+0x168>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	47d0      	blx	sl
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d09b      	beq.n	8009c34 <_printf_i+0x164>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	9903      	ldr	r1, [sp, #12]
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dcf2      	bgt.n	8009cee <_printf_i+0x21e>
 8009d08:	e7eb      	b.n	8009ce2 <_printf_i+0x212>
 8009d0a:	2500      	movs	r5, #0
 8009d0c:	f104 0619 	add.w	r6, r4, #25
 8009d10:	e7f5      	b.n	8009cfe <_printf_i+0x22e>
 8009d12:	bf00      	nop
 8009d14:	08009fc1 	.word	0x08009fc1
 8009d18:	08009fd2 	.word	0x08009fd2

08009d1c <__sread>:
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	460c      	mov	r4, r1
 8009d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d24:	f000 f894 	bl	8009e50 <_read_r>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	bfab      	itete	ge
 8009d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d30:	181b      	addge	r3, r3, r0
 8009d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d36:	bfac      	ite	ge
 8009d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d3a:	81a3      	strhlt	r3, [r4, #12]
 8009d3c:	bd10      	pop	{r4, pc}

08009d3e <__swrite>:
 8009d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d42:	461f      	mov	r7, r3
 8009d44:	898b      	ldrh	r3, [r1, #12]
 8009d46:	05db      	lsls	r3, r3, #23
 8009d48:	4605      	mov	r5, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	4616      	mov	r6, r2
 8009d4e:	d505      	bpl.n	8009d5c <__swrite+0x1e>
 8009d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d54:	2302      	movs	r3, #2
 8009d56:	2200      	movs	r2, #0
 8009d58:	f000 f868 	bl	8009e2c <_lseek_r>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	4632      	mov	r2, r6
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d72:	f000 b817 	b.w	8009da4 <_write_r>

08009d76 <__sseek>:
 8009d76:	b510      	push	{r4, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7e:	f000 f855 	bl	8009e2c <_lseek_r>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	bf15      	itete	ne
 8009d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d92:	81a3      	strheq	r3, [r4, #12]
 8009d94:	bf18      	it	ne
 8009d96:	81a3      	strhne	r3, [r4, #12]
 8009d98:	bd10      	pop	{r4, pc}

08009d9a <__sclose>:
 8009d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9e:	f000 b813 	b.w	8009dc8 <_close_r>
	...

08009da4 <_write_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_write_r+0x20>)
 8009da8:	4604      	mov	r4, r0
 8009daa:	4608      	mov	r0, r1
 8009dac:	4611      	mov	r1, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f7 f81c 	bl	8000df0 <_write>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_write_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_write_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200004b4 	.word	0x200004b4

08009dc8 <_close_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d06      	ldr	r5, [pc, #24]	; (8009de4 <_close_r+0x1c>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f7f8 fd59 	bl	800288a <_close>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_close_r+0x1a>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_close_r+0x1a>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	200004b4 	.word	0x200004b4

08009de8 <_fstat_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	; (8009e08 <_fstat_r+0x20>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	4611      	mov	r1, r2
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	f7f8 fd54 	bl	80028a2 <_fstat>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	d102      	bne.n	8009e04 <_fstat_r+0x1c>
 8009dfe:	682b      	ldr	r3, [r5, #0]
 8009e00:	b103      	cbz	r3, 8009e04 <_fstat_r+0x1c>
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	200004b4 	.word	0x200004b4

08009e0c <_isatty_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d06      	ldr	r5, [pc, #24]	; (8009e28 <_isatty_r+0x1c>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	f7f8 fd53 	bl	80028c2 <_isatty>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_isatty_r+0x1a>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_isatty_r+0x1a>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	200004b4 	.word	0x200004b4

08009e2c <_lseek_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_lseek_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f8 fd4c 	bl	80028d8 <_lseek>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_lseek_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_lseek_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200004b4 	.word	0x200004b4

08009e50 <_read_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_read_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f8 fcf6 	bl	8002850 <_read>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_read_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_read_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	200004b4 	.word	0x200004b4

08009e74 <_init>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr

08009e80 <_fini>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	bf00      	nop
 8009e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e86:	bc08      	pop	{r3}
 8009e88:	469e      	mov	lr, r3
 8009e8a:	4770      	bx	lr
