
Rear_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f8  080098f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009900  08009900  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000080  08009988  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009988  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016543  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5c  00000000  00000000  000365f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244d7  00000000  00000000  0003b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017594  00000000  00000000  0005fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d984d  00000000  00000000  0007736b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150bb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f4c  00000000  00000000  00150c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009788 	.word	0x08009788

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009788 	.word	0x08009788

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:
union Speedtype speed0;
union Speedtype speed1;
union Speedtype desired_speed0;
union Speedtype desired_speed1;

int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f007 fac8 	bl	8007b5e <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200002c8 	.word	0x200002c8

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fd1e 	bl	8002020 <HAL_Init>

  /* USER CODE BEGIN Init */
  dis = calloc(nof, 16 * nof);
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0x88>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x88>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f008 f874 	bl	80086e0 <calloc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <main+0x8c>)
 80005fe:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f840 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fb4a 	bl	8000c9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000608:	f000 fb1e 	bl	8000c48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800060c:	f000 f8e4 	bl	80007d8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000610:	f000 f9f4 	bl	80009fc <MX_TIM3_Init>
  MX_CAN1_Init();
 8000614:	f000 f8a8 	bl	8000768 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000618:	f000 fa3e 	bl	8000a98 <MX_TIM4_Init>
  MX_TIM7_Init();
 800061c:	f000 fade 	bl	8000bdc <MX_TIM7_Init>
  MX_TIM1_Init();
 8000620:	f000 f908 	bl	8000834 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000624:	f000 f996 	bl	8000954 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000628:	f000 fa84 	bl	8000b34 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //setLeftMotorCCR(0, DIR_FORWARD);
  //setRightMotorCCR(0, DIR_FORWARD);

  if (!(ChangeAddresses())) {
 800062c:	f000 fe66 	bl	80012fc <ChangeAddresses>
  }
  else {
	  //HAL_UART_Transmit(&huart2, succ, 6, 10);
  }

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <main+0x90>)
 8000634:	f006 f97e 	bl	8006934 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000638:	2104      	movs	r1, #4
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0x90>)
 800063c:	f006 f97a 	bl	8006934 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000640:	213c      	movs	r1, #60	; 0x3c
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <main+0x94>)
 8000644:	f006 fae4 	bl	8006c10 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000648:	213c      	movs	r1, #60	; 0x3c
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x98>)
 800064c:	f006 fae0 	bl	8006c10 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Base_Start_IT(&htim7);
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <main+0x9c>)
 8000652:	f006 f8af 	bl	80067b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <main+0xa0>)
 8000658:	f006 f8ac 	bl	80067b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <main+0xa4>)
 800065e:	f006 f8a9 	bl	80067b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x86>
 8000664:	2000030c 	.word	0x2000030c
 8000668:	20000310 	.word	0x20000310
 800066c:	20000118 	.word	0x20000118
 8000670:	20000160 	.word	0x20000160
 8000674:	20000238 	.word	0x20000238
 8000678:	20000280 	.word	0x20000280
 800067c:	200001a8 	.word	0x200001a8
 8000680:	200001f0 	.word	0x200001f0

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f008 f856 	bl	8008744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xe0>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f8:	23b4      	movs	r3, #180	; 0xb4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fd63 	bl	80061d8 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f001 f8ce 	bl	80018b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f005 f9c2 	bl	8005aa4 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f001 f8c7 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f005 f9fb 	bl	8005b44 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f001 f8b0 	bl	80018b8 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_CAN1_Init+0x68>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MX_CAN1_Init+0x6c>)
 8000770:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000774:	2203      	movs	r2, #3
 8000776:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_CAN1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000786:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800078a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_CAN1_Init+0x68>)
 800078e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000792:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_CAN1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_CAN1_Init+0x68>)
 800079c:	2201      	movs	r2, #1
 800079e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_CAN1_Init+0x68>)
 80007ba:	f001 fcc7 	bl	800214c <HAL_CAN_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f001 f878 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Filter_Init();
 80007c8:	f000 feae 	bl	8001528 <CAN_Filter_Init>
  /* USER CODE END CAN1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000009c 	.word	0x2000009c
 80007d4:	40006400 	.word	0x40006400

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f002 fdeb 	bl	80033f0 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f001 f84a 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000c4 	.word	0x200000c4
 800082c:	40005400 	.word	0x40005400
 8000830:	00061a80 	.word	0x00061a80

08000834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	; 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f007 ff70 	bl	8008744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <MX_TIM1_Init+0x118>)
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <MX_TIM1_Init+0x11c>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_TIM1_Init+0x118>)
 800086c:	2209      	movs	r2, #9
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <MX_TIM1_Init+0x118>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9000-1;
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <MX_TIM1_Init+0x118>)
 8000878:	f242 3227 	movw	r2, #8999	; 0x2327
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_TIM1_Init+0x118>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_TIM1_Init+0x118>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <MX_TIM1_Init+0x118>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000890:	482e      	ldr	r0, [pc, #184]	; (800094c <MX_TIM1_Init+0x118>)
 8000892:	f005 ffff 	bl	8006894 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800089c:	f001 f80c 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	4619      	mov	r1, r3
 80008ae:	4827      	ldr	r0, [pc, #156]	; (800094c <MX_TIM1_Init+0x118>)
 80008b0:	f007 f826 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008ba:	f000 fffd 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4500-1;
 80008c2:	f241 1393 	movw	r3, #4499	; 0x1193
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4819      	ldr	r0, [pc, #100]	; (800094c <MX_TIM1_Init+0x118>)
 80008e6:	f006 fb49 	bl	8006f7c <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80008f0:	f000 ffe2 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	2204      	movs	r2, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_TIM1_Init+0x118>)
 80008fe:	f006 fb3d 	bl	8006f7c <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000908:	f000 ffd6 	bl	80018b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM1_Init+0x118>)
 8000930:	f007 f862 	bl	80079f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800093a:	f000 ffbd 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM1_Init+0x118>)
 8000940:	f001 f9b8 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3748      	adds	r7, #72	; 0x48
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000118 	.word	0x20000118
 8000950:	40010000 	.word	0x40010000

08000954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2224      	movs	r2, #36	; 0x24
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f007 feee 	bl	8008744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_TIM2_Init+0xa4>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_TIM2_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM2_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_TIM2_Init+0xa4>)
 8000986:	f04f 32ff 	mov.w	r2, #4294967295
 800098a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM2_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_TIM2_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000998:	2303      	movs	r3, #3
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_TIM2_Init+0xa4>)
 80009c4:	f006 f87e 	bl	8006ac4 <HAL_TIM_Encoder_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009ce:	f000 ff73 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM2_Init+0xa4>)
 80009e0:	f006 ff8e 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009ea:	f000 ff65 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000160 	.word	0x20000160

080009fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <MX_TIM3_Init+0x98>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a20:	22c7      	movs	r2, #199	; 0xc7
 8000a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16650-1;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a2c:	f244 1209 	movw	r2, #16649	; 0x4109
 8000a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a40:	f005 fe68 	bl	8006714 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 ff35 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a5c:	f006 fb50 	bl	8007100 <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 ff27 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_TIM3_Init+0x94>)
 8000a78:	f006 ff42 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 ff19 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001a8 	.word	0x200001a8
 8000a94:	40000400 	.word	0x40000400

08000a98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <MX_TIM4_Init+0x98>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25-1;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000abc:	2218      	movs	r2, #24
 8000abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ac8:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ada:	4814      	ldr	r0, [pc, #80]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000adc:	f005 fe1a 	bl	8006714 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 fee7 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000af8:	f006 fb02 	bl	8007100 <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 fed9 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000b14:	f006 fef4 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 fecb 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200001f0 	.word	0x200001f0
 8000b30:	40000800 	.word	0x40000800

08000b34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2224      	movs	r2, #36	; 0x24
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f007 fdfe 	bl	8008744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_TIM5_Init+0xa4>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000ba2:	f005 ff8f 	bl	8006ac4 <HAL_TIM_Encoder_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 fe84 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM5_Init+0xa0>)
 8000bbe:	f006 fe9f 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bc8:	f000 fe76 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000238 	.word	0x20000238
 8000bd8:	40000c00 	.word	0x40000c00

08000bdc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_TIM7_Init+0x68>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bf2:	2263      	movs	r2, #99	; 0x63
 8000bf4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9900-1;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bfe:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000c02:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c0c:	f005 fd82 	bl	8006714 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c16:	f000 fe4f 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c28:	f006 fe6a 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 fe41 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000280 	.word	0x20000280
 8000c44:	40001400 	.word	0x40001400

08000c48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART2_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f006 ff20 	bl	8007ac4 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 fe15 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200002c8 	.word	0x200002c8
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a4a      	ldr	r2, [pc, #296]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a43      	ldr	r2, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a3c      	ldr	r2, [pc, #240]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0x148>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f643 410f 	movw	r1, #15375	; 0x3c0f
 8000d44:	4828      	ldr	r0, [pc, #160]	; (8000de8 <MX_GPIO_Init+0x14c>)
 8000d46:	f002 fb39 	bl	80033bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4827      	ldr	r0, [pc, #156]	; (8000dec <MX_GPIO_Init+0x150>)
 8000d50:	f002 fb34 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x14c>)
 8000d6e:	f002 f991 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d72:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8000d76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d78:	2311      	movs	r3, #17
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <MX_GPIO_Init+0x14c>)
 8000d8c:	f002 f982 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_GPIO_Init+0x14c>)
 8000da4:	f002 f976 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da8:	2304      	movs	r3, #4
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dac:	2311      	movs	r3, #17
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <MX_GPIO_Init+0x150>)
 8000dc0:	f002 f968 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_GPIO_Init+0x154>)
 8000dd8:	f002 f95c 	bl	8003094 <HAL_GPIO_Init>

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40020400 	.word	0x40020400

08000df4 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <TurnOffAll+0x6c>)
 8000e00:	f002 fadc 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <TurnOffAll+0x6c>)
 8000e0c:	f002 fad6 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e16:	4812      	ldr	r0, [pc, #72]	; (8000e60 <TurnOffAll+0x6c>)
 8000e18:	f002 fad0 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <TurnOffAll+0x70>)
 8000e22:	f002 facb 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <TurnOffAll+0x6c>)
 8000e2e:	f002 fac5 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2104      	movs	r1, #4
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <TurnOffAll+0x6c>)
 8000e38:	f002 fac0 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <TurnOffAll+0x6c>)
 8000e42:	f002 fabb 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <TurnOffAll+0x6c>)
 8000e4c:	f002 fab6 	bl	80033bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TurnOffAll+0x6c>)
 8000e56:	f002 fab1 	bl	80033bc <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	uint8_t boot[8] = {66, 79, 79, 84, 48, 13, 10, 0};
 8000e76:	4aca      	ldr	r2, [pc, #808]	; (80011a0 <TurnOnAt+0x338>)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (i) {
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	f200 822c 	bhi.w	80012e4 <TurnOnAt+0x47c>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <TurnOnAt+0x2c>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000eb9 	.word	0x08000eb9
 8000e98:	08000f2d 	.word	0x08000f2d
 8000e9c:	08000fa5 	.word	0x08000fa5
 8000ea0:	0800101d 	.word	0x0800101d
 8000ea4:	0800108f 	.word	0x0800108f
 8000ea8:	08001107 	.word	0x08001107
 8000eac:	08001179 	.word	0x08001179
 8000eb0:	08001201 	.word	0x08001201
 8000eb4:	08001273 	.word	0x08001273
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	48b9      	ldr	r0, [pc, #740]	; (80011a4 <TurnOnAt+0x33c>)
 8000ec0:	f002 fa7c 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f001 f91d 	bl	8002104 <HAL_Delay>
		VL53L1X_BootState(dev, &bootState);
 8000eca:	4bb7      	ldr	r3, [pc, #732]	; (80011a8 <TurnOnAt+0x340>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	f107 0217 	add.w	r2, r7, #23
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 faea 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8000eda:	e023      	b.n	8000f24 <TurnOnAt+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	48b0      	ldr	r0, [pc, #704]	; (80011a4 <TurnOnAt+0x33c>)
 8000ee4:	f002 fa6a 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f001 f90b 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef4:	48ab      	ldr	r0, [pc, #684]	; (80011a4 <TurnOnAt+0x33c>)
 8000ef6:	f002 fa61 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000efa:	200a      	movs	r0, #10
 8000efc:	f001 f902 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000f00:	4ba9      	ldr	r3, [pc, #676]	; (80011a8 <TurnOnAt+0x340>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	f107 0217 	add.w	r2, r7, #23
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 facf 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	230a      	movs	r3, #10
 8000f16:	2208      	movs	r2, #8
 8000f18:	48a4      	ldr	r0, [pc, #656]	; (80011ac <TurnOnAt+0x344>)
 8000f1a:	f006 fe20 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f001 f8f0 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0d8      	beq.n	8000edc <TurnOnAt+0x74>
		}
		break;
 8000f2a:	e1db      	b.n	80012e4 <TurnOnAt+0x47c>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f32:	489c      	ldr	r0, [pc, #624]	; (80011a4 <TurnOnAt+0x33c>)
 8000f34:	f002 fa42 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f001 f8e3 	bl	8002104 <HAL_Delay>
		boot[4] = 49;
 8000f3e:	2331      	movs	r3, #49	; 0x31
 8000f40:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8000f42:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <TurnOnAt+0x340>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f107 0217 	add.w	r2, r7, #23
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 faae 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8000f52:	e023      	b.n	8000f9c <TurnOnAt+0x134>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5a:	4892      	ldr	r0, [pc, #584]	; (80011a4 <TurnOnAt+0x33c>)
 8000f5c:	f002 fa2e 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f001 f8cf 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6c:	488d      	ldr	r0, [pc, #564]	; (80011a4 <TurnOnAt+0x33c>)
 8000f6e:	f002 fa25 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f001 f8c6 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000f78:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <TurnOnAt+0x340>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	f107 0217 	add.w	r2, r7, #23
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f007 fa93 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4886      	ldr	r0, [pc, #536]	; (80011ac <TurnOnAt+0x344>)
 8000f92:	f006 fde4 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 8000f96:	2002      	movs	r0, #2
 8000f98:	f001 f8b4 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0d8      	beq.n	8000f54 <TurnOnAt+0xec>
		}
		break;
 8000fa2:	e19f      	b.n	80012e4 <TurnOnAt+0x47c>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000faa:	487e      	ldr	r0, [pc, #504]	; (80011a4 <TurnOnAt+0x33c>)
 8000fac:	f002 fa06 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f001 f8a7 	bl	8002104 <HAL_Delay>
		boot[4] = 50;
 8000fb6:	2332      	movs	r3, #50	; 0x32
 8000fb8:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8000fba:	4b7b      	ldr	r3, [pc, #492]	; (80011a8 <TurnOnAt+0x340>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f107 0217 	add.w	r2, r7, #23
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 fa72 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8000fca:	e023      	b.n	8001014 <TurnOnAt+0x1ac>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd2:	4874      	ldr	r0, [pc, #464]	; (80011a4 <TurnOnAt+0x33c>)
 8000fd4:	f002 f9f2 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f001 f893 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe4:	486f      	ldr	r0, [pc, #444]	; (80011a4 <TurnOnAt+0x33c>)
 8000fe6:	f002 f9e9 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f001 f88a 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <TurnOnAt+0x340>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f107 0217 	add.w	r2, r7, #23
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fa57 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001000:	f107 010c 	add.w	r1, r7, #12
 8001004:	230a      	movs	r3, #10
 8001006:	2208      	movs	r2, #8
 8001008:	4868      	ldr	r0, [pc, #416]	; (80011ac <TurnOnAt+0x344>)
 800100a:	f006 fda8 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 800100e:	2002      	movs	r0, #2
 8001010:	f001 f878 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0d8      	beq.n	8000fcc <TurnOnAt+0x164>
		}
		break;
 800101a:	e163      	b.n	80012e4 <TurnOnAt+0x47c>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2104      	movs	r1, #4
 8001020:	4863      	ldr	r0, [pc, #396]	; (80011b0 <TurnOnAt+0x348>)
 8001022:	f002 f9cb 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001026:	2005      	movs	r0, #5
 8001028:	f001 f86c 	bl	8002104 <HAL_Delay>
		boot[4] = 51;
 800102c:	2333      	movs	r3, #51	; 0x33
 800102e:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001030:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <TurnOnAt+0x340>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	f107 0217 	add.w	r2, r7, #23
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f007 fa37 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8001040:	e021      	b.n	8001086 <TurnOnAt+0x21e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2104      	movs	r1, #4
 8001046:	485a      	ldr	r0, [pc, #360]	; (80011b0 <TurnOnAt+0x348>)
 8001048:	f002 f9b8 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f001 f859 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2104      	movs	r1, #4
 8001056:	4856      	ldr	r0, [pc, #344]	; (80011b0 <TurnOnAt+0x348>)
 8001058:	f002 f9b0 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800105c:	200a      	movs	r0, #10
 800105e:	f001 f851 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <TurnOnAt+0x340>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f107 0217 	add.w	r2, r7, #23
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f007 fa1e 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	230a      	movs	r3, #10
 8001078:	2208      	movs	r2, #8
 800107a:	484c      	ldr	r0, [pc, #304]	; (80011ac <TurnOnAt+0x344>)
 800107c:	f006 fd6f 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f001 f83f 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0da      	beq.n	8001042 <TurnOnAt+0x1da>
		}
		break;
 800108c:	e12a      	b.n	80012e4 <TurnOnAt+0x47c>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001094:	4843      	ldr	r0, [pc, #268]	; (80011a4 <TurnOnAt+0x33c>)
 8001096:	f002 f991 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800109a:	2005      	movs	r0, #5
 800109c:	f001 f832 	bl	8002104 <HAL_Delay>
		boot[4] = 52;
 80010a0:	2334      	movs	r3, #52	; 0x34
 80010a2:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <TurnOnAt+0x340>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	f107 0217 	add.w	r2, r7, #23
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 f9fd 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 80010b4:	e023      	b.n	80010fe <TurnOnAt+0x296>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4839      	ldr	r0, [pc, #228]	; (80011a4 <TurnOnAt+0x33c>)
 80010be:	f002 f97d 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f001 f81e 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4835      	ldr	r0, [pc, #212]	; (80011a4 <TurnOnAt+0x33c>)
 80010d0:	f002 f974 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80010d4:	200a      	movs	r0, #10
 80010d6:	f001 f815 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <TurnOnAt+0x340>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f107 0217 	add.w	r2, r7, #23
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 f9e2 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80010ea:	f107 010c 	add.w	r1, r7, #12
 80010ee:	230a      	movs	r3, #10
 80010f0:	2208      	movs	r2, #8
 80010f2:	482e      	ldr	r0, [pc, #184]	; (80011ac <TurnOnAt+0x344>)
 80010f4:	f006 fd33 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 80010f8:	2002      	movs	r0, #2
 80010fa:	f001 f803 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0d8      	beq.n	80010b6 <TurnOnAt+0x24e>
		}
		break;
 8001104:	e0ee      	b.n	80012e4 <TurnOnAt+0x47c>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	4826      	ldr	r0, [pc, #152]	; (80011a4 <TurnOnAt+0x33c>)
 800110c:	f002 f956 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001110:	2005      	movs	r0, #5
 8001112:	f000 fff7 	bl	8002104 <HAL_Delay>
		boot[4] = 53;
 8001116:	2335      	movs	r3, #53	; 0x35
 8001118:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TurnOnAt+0x340>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	f107 0217 	add.w	r2, r7, #23
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f007 f9c2 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 800112a:	e021      	b.n	8001170 <TurnOnAt+0x308>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	481c      	ldr	r0, [pc, #112]	; (80011a4 <TurnOnAt+0x33c>)
 8001132:	f002 f943 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f000 ffe4 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2104      	movs	r1, #4
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <TurnOnAt+0x33c>)
 8001142:	f002 f93b 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001146:	200a      	movs	r0, #10
 8001148:	f000 ffdc 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <TurnOnAt+0x340>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	f107 0217 	add.w	r2, r7, #23
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f007 f9a9 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	230a      	movs	r3, #10
 8001162:	2208      	movs	r2, #8
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <TurnOnAt+0x344>)
 8001166:	f006 fcfa 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 800116a:	2002      	movs	r0, #2
 800116c:	f000 ffca 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0da      	beq.n	800112c <TurnOnAt+0x2c4>
		}
		break;
 8001176:	e0b5      	b.n	80012e4 <TurnOnAt+0x47c>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <TurnOnAt+0x33c>)
 800117e:	f002 f91d 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f000 ffbe 	bl	8002104 <HAL_Delay>
		boot[4] = 54;
 8001188:	2336      	movs	r3, #54	; 0x36
 800118a:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <TurnOnAt+0x340>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	f107 0217 	add.w	r2, r7, #23
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f007 f989 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 800119c:	e02c      	b.n	80011f8 <TurnOnAt+0x390>
 800119e:	bf00      	nop
 80011a0:	080097a0 	.word	0x080097a0
 80011a4:	40020800 	.word	0x40020800
 80011a8:	20000000 	.word	0x20000000
 80011ac:	200002c8 	.word	0x200002c8
 80011b0:	40020c00 	.word	0x40020c00
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2108      	movs	r1, #8
 80011b8:	484d      	ldr	r0, [pc, #308]	; (80012f0 <TurnOnAt+0x488>)
 80011ba:	f002 f8ff 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 ffa0 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	4849      	ldr	r0, [pc, #292]	; (80012f0 <TurnOnAt+0x488>)
 80011ca:	f002 f8f7 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f000 ff98 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <TurnOnAt+0x48c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f107 0217 	add.w	r2, r7, #23
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f007 f965 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80011e4:	f107 010c 	add.w	r1, r7, #12
 80011e8:	230a      	movs	r3, #10
 80011ea:	2208      	movs	r2, #8
 80011ec:	4842      	ldr	r0, [pc, #264]	; (80012f8 <TurnOnAt+0x490>)
 80011ee:	f006 fcb6 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 80011f2:	2002      	movs	r0, #2
 80011f4:	f000 ff86 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0da      	beq.n	80011b4 <TurnOnAt+0x34c>
		}
		break;
 80011fe:	e071      	b.n	80012e4 <TurnOnAt+0x47c>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2101      	movs	r1, #1
 8001204:	483a      	ldr	r0, [pc, #232]	; (80012f0 <TurnOnAt+0x488>)
 8001206:	f002 f8d9 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800120a:	2005      	movs	r0, #5
 800120c:	f000 ff7a 	bl	8002104 <HAL_Delay>
		boot[4] = 55;
 8001210:	2337      	movs	r3, #55	; 0x37
 8001212:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <TurnOnAt+0x48c>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	f107 0217 	add.w	r2, r7, #23
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f007 f945 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8001224:	e021      	b.n	800126a <TurnOnAt+0x402>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	4831      	ldr	r0, [pc, #196]	; (80012f0 <TurnOnAt+0x488>)
 800122c:	f002 f8c6 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 ff67 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2101      	movs	r1, #1
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <TurnOnAt+0x488>)
 800123c:	f002 f8be 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f000 ff5f 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <TurnOnAt+0x48c>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f107 0217 	add.w	r2, r7, #23
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f007 f92c 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	230a      	movs	r3, #10
 800125c:	2208      	movs	r2, #8
 800125e:	4826      	ldr	r0, [pc, #152]	; (80012f8 <TurnOnAt+0x490>)
 8001260:	f006 fc7d 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f000 ff4d 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0da      	beq.n	8001226 <TurnOnAt+0x3be>
		}
		break;
 8001270:	e038      	b.n	80012e4 <TurnOnAt+0x47c>
	case 8:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2102      	movs	r1, #2
 8001276:	481e      	ldr	r0, [pc, #120]	; (80012f0 <TurnOnAt+0x488>)
 8001278:	f002 f8a0 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800127c:	2005      	movs	r0, #5
 800127e:	f000 ff41 	bl	8002104 <HAL_Delay>
		boot[4] = 56;
 8001282:	2338      	movs	r3, #56	; 0x38
 8001284:	743b      	strb	r3, [r7, #16]
		VL53L1X_BootState(dev, &bootState);
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <TurnOnAt+0x48c>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	f107 0217 	add.w	r2, r7, #23
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f007 f90c 	bl	80084ae <VL53L1X_BootState>
		while(bootState==0){
 8001296:	e021      	b.n	80012dc <TurnOnAt+0x474>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2102      	movs	r1, #2
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <TurnOnAt+0x488>)
 800129e:	f002 f88d 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f000 ff2e 	bl	8002104 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2102      	movs	r1, #2
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <TurnOnAt+0x488>)
 80012ae:	f002 f885 	bl	80033bc <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f000 ff26 	bl	8002104 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <TurnOnAt+0x48c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	f107 0217 	add.w	r2, r7, #23
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 f8f3 	bl	80084ae <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 80012c8:	f107 010c 	add.w	r1, r7, #12
 80012cc:	230a      	movs	r3, #10
 80012ce:	2208      	movs	r2, #8
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <TurnOnAt+0x490>)
 80012d2:	f006 fc44 	bl	8007b5e <HAL_UART_Transmit>
			HAL_Delay(2);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f000 ff14 	bl	8002104 <HAL_Delay>
		while(bootState==0){
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0da      	beq.n	8001298 <TurnOnAt+0x430>
		}
		break;
 80012e2:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020800 	.word	0x40020800
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200002c8 	.word	0x200002c8

080012fc <ChangeAddresses>:

uint16_t ChangeAddresses(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	uint8_t success = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	71fb      	strb	r3, [r7, #7]
	TurnOffAll();
 8001306:	f7ff fd75 	bl	8000df4 <TurnOffAll>
	HAL_Delay(10);
 800130a:	200a      	movs	r0, #10
 800130c:	f000 fefa 	bl	8002104 <HAL_Delay>
	for (uint8_t i = 0; i != nof; ++i) {
 8001310:	2300      	movs	r3, #0
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	e033      	b.n	800137e <ChangeAddresses+0x82>
		success *= TurnOnAt(i);
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fda5 	bl	8000e68 <TurnOnAt>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	fb12 f303 	smulbb	r3, r2, r3
 8001328:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(5);
 800132a:	2005      	movs	r0, #5
 800132c:	f000 feea 	bl	8002104 <HAL_Delay>
		printf("try init: %d\r\n", i);
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4619      	mov	r1, r3
 8001334:	4817      	ldr	r0, [pc, #92]	; (8001394 <ChangeAddresses+0x98>)
 8001336:	f007 fab7 	bl	80088a8 <iprintf>
		VL53L1X_SensorInit(dev);
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <ChangeAddresses+0x9c>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f006 ffa0 	bl	8008284 <VL53L1X_SensorInit>
		printf("try addr change: %d\r\n", i);
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <ChangeAddresses+0xa0>)
 800134a:	f007 faad 	bl	80088a8 <iprintf>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <ChangeAddresses+0x9c>)
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	4912      	ldr	r1, [pc, #72]	; (80013a0 <ChangeAddresses+0xa4>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f006 ff74 	bl	8008248 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <ChangeAddresses+0xa4>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f007 f839 	bl	80083e0 <VL53L1X_StartRanging>
		printf("done: %d\r\n", i);
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <ChangeAddresses+0xa8>)
 8001374:	f007 fa98 	bl	80088a8 <iprintf>
	for (uint8_t i = 0; i != nof; ++i) {
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	3301      	adds	r3, #1
 800137c:	71bb      	strb	r3, [r7, #6]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <ChangeAddresses+0xac>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	79ba      	ldrb	r2, [r7, #6]
 8001384:	429a      	cmp	r2, r3
 8001386:	d1c6      	bne.n	8001316 <ChangeAddresses+0x1a>
	}
	return success;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	b29b      	uxth	r3, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	080097a8 	.word	0x080097a8
 8001398:	20000000 	.word	0x20000000
 800139c:	080097b8 	.word	0x080097b8
 80013a0:	20000004 	.word	0x20000004
 80013a4:	080097d0 	.word	0x080097d0
 80013a8:	2000030c 	.word	0x2000030c

080013ac <GetAllData>:

uint8_t GetAllData(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	VL53L1X_GetDistance(devs[0], &dis[0]);
 80013b0:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <GetAllData+0x128>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <GetAllData+0x12c>)
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 f895 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[0]);
 80013c2:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <GetAllData+0x128>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 ffc7 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[1], &dis[1]);
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <GetAllData+0x128>)
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <GetAllData+0x12c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3302      	adds	r3, #2
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f007 f885 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[1]);
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <GetAllData+0x128>)
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 ffb7 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[2], &dis[2]);
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <GetAllData+0x128>)
 80013f0:	789b      	ldrb	r3, [r3, #2]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <GetAllData+0x12c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f007 f875 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[2]);
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <GetAllData+0x128>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	f006 ffa7 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[3], &dis[3]);
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <GetAllData+0x128>)
 8001410:	78db      	ldrb	r3, [r3, #3]
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <GetAllData+0x12c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3306      	adds	r3, #6
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f007 f865 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[3]);
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <GetAllData+0x128>)
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f006 ff97 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[4], &dis[4]);
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <GetAllData+0x128>)
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <GetAllData+0x12c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3308      	adds	r3, #8
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f007 f855 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[4]);
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <GetAllData+0x128>)
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f006 ff87 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[5], &dis[5]);
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <GetAllData+0x128>)
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <GetAllData+0x12c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	330a      	adds	r3, #10
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f007 f845 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[5]);
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <GetAllData+0x128>)
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f006 ff77 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[6], &dis[6]);
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <GetAllData+0x128>)
 8001470:	799b      	ldrb	r3, [r3, #6]
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <GetAllData+0x12c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	330c      	adds	r3, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f007 f835 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[6]);
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <GetAllData+0x128>)
 8001484:	799b      	ldrb	r3, [r3, #6]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f006 ff67 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[7], &dis[7]);
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <GetAllData+0x128>)
 8001490:	79db      	ldrb	r3, [r3, #7]
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <GetAllData+0x12c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	330e      	adds	r3, #14
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f007 f825 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[7]);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <GetAllData+0x128>)
 80014a4:	79db      	ldrb	r3, [r3, #7]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 ff57 	bl	800835c <VL53L1X_ClearInterrupt>
	VL53L1X_GetDistance(devs[8], &dis[8]);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <GetAllData+0x128>)
 80014b0:	7a1b      	ldrb	r3, [r3, #8]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <GetAllData+0x12c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3310      	adds	r3, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f007 f815 	bl	80084ec <VL53L1X_GetDistance>
	VL53L1X_ClearInterrupt(devs[8]);
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <GetAllData+0x128>)
 80014c4:	7a1b      	ldrb	r3, [r3, #8]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f006 ff47 	bl	800835c <VL53L1X_ClearInterrupt>
}
 80014ce:	bf00      	nop
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000310 	.word	0x20000310

080014dc <PrintAllData>:

void PrintAllData(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	for (int i = 0; i != nof; ++i) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e00d      	b.n	8001504 <PrintAllData+0x28>
		printf("%d:%d\r\n", i, dis[i]);
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <PrintAllData+0x40>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <PrintAllData+0x44>)
 80014fa:	f007 f9d5 	bl	80088a8 <iprintf>
	for (int i = 0; i != nof; ++i) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <PrintAllData+0x48>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4293      	cmp	r3, r2
 800150e:	d1eb      	bne.n	80014e8 <PrintAllData+0xc>
	}
	//HAL_Delay(500);
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000310 	.word	0x20000310
 8001520:	080097dc 	.word	0x080097dc
 8001524:	2000030c 	.word	0x2000030c

08001528 <CAN_Filter_Init>:

void CAN_Filter_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	//Set the CAN Filter which has Mask Ids
	//CAN Filter1
	//Receiving CAN data via 0x102~0x10E
	canFilter1.FilterMaskIdHigh = 0x7F3 << 5; // Shift 5 bit
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <CAN_Filter_Init+0x70>)
 800152e:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8001532:	609a      	str	r2, [r3, #8]
	canFilter1.FilterIdHigh = 0x106 << 5;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <CAN_Filter_Init+0x70>)
 8001536:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800153a:	601a      	str	r2, [r3, #0]
	canFilter1.FilterMaskIdLow = 0x7F3 << 5; // Shift 5 bit
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <CAN_Filter_Init+0x70>)
 800153e:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8001542:	60da      	str	r2, [r3, #12]
	canFilter1.FilterIdLow = 0x106 << 5;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <CAN_Filter_Init+0x70>)
 8001546:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800154a:	605a      	str	r2, [r3, #4]
//	canFilter1.FilterMaskIdHigh = 0x000 << 5; // Shift 5 bit
//	canFilter1.FilterIdHigh = 0x000 << 5;
//	canFilter1.FilterMaskIdLow = 0x000 << 5; // Shift 5 bit
//	canFilter1.FilterIdLow = 0x000 << 5;
	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <CAN_Filter_Init+0x70>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
	canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <CAN_Filter_Init+0x70>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
	canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <CAN_Filter_Init+0x70>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
	canFilter1.FilterBank = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <CAN_Filter_Init+0x70>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
	canFilter1.FilterActivation = ENABLE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <CAN_Filter_Init+0x70>)
 8001566:	2201      	movs	r2, #1
 8001568:	621a      	str	r2, [r3, #32]

	/* Set options for messages; ID type(standard), Length(8 byte) */
	can1TxHeader.RTR = CAN_RTR_DATA;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <CAN_Filter_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
	can1TxHeader.IDE = CAN_ID_STD;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <CAN_Filter_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
	can1TxHeader.DLC = 8;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <CAN_Filter_Init+0x74>)
 8001578:	2208      	movs	r2, #8
 800157a:	611a      	str	r2, [r3, #16]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <CAN_Filter_Init+0x70>)
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <CAN_Filter_Init+0x78>)
 8001580:	f000 fee0 	bl	8002344 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001584:	2102      	movs	r1, #2
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <CAN_Filter_Init+0x78>)
 8001588:	f001 f9ed 	bl	8002966 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <CAN_Filter_Init+0x78>)
 800158e:	f000 ffb9 	bl	8002504 <HAL_CAN_Start>
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000314 	.word	0x20000314
 800159c:	20000358 	.word	0x20000358
 80015a0:	2000009c 	.word	0x2000009c

080015a4 <CAN_Send>:

void CAN_Send(uint8_t ID, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	4603      	mov	r3, r0
 80015b8:	71bb      	strb	r3, [r7, #6]
 80015ba:	460b      	mov	r3, r1
 80015bc:	717b      	strb	r3, [r7, #5]
 80015be:	4613      	mov	r3, r2
 80015c0:	713b      	strb	r3, [r7, #4]
	  /* Set options for messages; Address */
	  can1TxHeader.StdId = ID;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <CAN_Send+0x70>)
 80015c6:	6013      	str	r3, [r2, #0]

	  can1Tx0Data[7] = data7;
 80015c8:	4a13      	ldr	r2, [pc, #76]	; (8001618 <CAN_Send+0x74>)
 80015ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ce:	71d3      	strb	r3, [r2, #7]
	  can1Tx0Data[6] = data6;
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <CAN_Send+0x74>)
 80015d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d6:	7193      	strb	r3, [r2, #6]
	  can1Tx0Data[5] = data5;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <CAN_Send+0x74>)
 80015da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015de:	7153      	strb	r3, [r2, #5]
	  can1Tx0Data[4] = data4;
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <CAN_Send+0x74>)
 80015e2:	7f3b      	ldrb	r3, [r7, #28]
 80015e4:	7113      	strb	r3, [r2, #4]
	  can1Tx0Data[3] = data3;
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <CAN_Send+0x74>)
 80015e8:	7e3b      	ldrb	r3, [r7, #24]
 80015ea:	70d3      	strb	r3, [r2, #3]
	  can1Tx0Data[2] = data2;
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <CAN_Send+0x74>)
 80015ee:	793b      	ldrb	r3, [r7, #4]
 80015f0:	7093      	strb	r3, [r2, #2]
	  can1Tx0Data[1] = data1;
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <CAN_Send+0x74>)
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	7053      	strb	r3, [r2, #1]
	  can1Tx0Data[0] = data0;
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <CAN_Send+0x74>)
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	7013      	strb	r3, [r2, #0]
//	  can1Tx0Data[2] = 108;
//	  can1Tx0Data[1] = 101;
//	  can1Tx0Data[0] = 72;

	  //TxMailBox1 = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
	  HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, &can1Tx0Data[0], &TxMailBox1);
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <CAN_Send+0x78>)
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <CAN_Send+0x74>)
 8001602:	4904      	ldr	r1, [pc, #16]	; (8001614 <CAN_Send+0x70>)
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <CAN_Send+0x7c>)
 8001606:	f000 ffc1 	bl	800258c <HAL_CAN_AddTxMessage>
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	20000358 	.word	0x20000358
 8001618:	2000037c 	.word	0x2000037c
 800161c:	20000378 	.word	0x20000378
 8001620:	2000009c 	.word	0x2000009c

08001624 <CAN_SendAll>:

void CAN_SendAll(void) {
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b087      	sub	sp, #28
 8001628:	af06      	add	r7, sp, #24
	//CAN_Send(0x10, speed0.i & 0xFF, (speed0.i & 0xFF00) >> 8, (speed0.i & 0xFF0000) >> 16, speed0.i >> 24, speed1.i & 0xFF, (speed1.i & 0xFF00) >> 8, (speed1.i & 0xFF0000) >> 16, speed1.i >> 24);
	speed0.fl = 123.123f;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <CAN_SendAll+0x70>)
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <CAN_SendAll+0x74>)
 800162e:	601a      	str	r2, [r3, #0]
	speed1.fl = 456.456f;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <CAN_SendAll+0x78>)
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <CAN_SendAll+0x7c>)
 8001634:	601a      	str	r2, [r3, #0]
	CAN_Send(0x10, speed0.i & 0xFF, (speed0.i & 0xFF00) >> 8, (speed0.i & 0xFF0000) >> 16, speed0.i >> 24, speed1.i & 0xFF, (speed1.i & 0xFF00) >> 8, (speed1.i & 0xFF0000) >> 16, speed1.i >> 24);
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <CAN_SendAll+0x70>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b2dd      	uxtb	r5, r3
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <CAN_SendAll+0x70>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b2de      	uxtb	r6, r3
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <CAN_SendAll+0x70>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	fa5f fc83 	uxtb.w	ip, r3
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <CAN_SendAll+0x70>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0e1b      	lsrs	r3, r3, #24
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <CAN_SendAll+0x78>)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <CAN_SendAll+0x78>)
 800165e:	6809      	ldr	r1, [r1, #0]
 8001660:	0a09      	lsrs	r1, r1, #8
 8001662:	b2c9      	uxtb	r1, r1
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <CAN_SendAll+0x78>)
 8001666:	6800      	ldr	r0, [r0, #0]
 8001668:	0c00      	lsrs	r0, r0, #16
 800166a:	b2c0      	uxtb	r0, r0
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <CAN_SendAll+0x78>)
 800166e:	6824      	ldr	r4, [r4, #0]
 8001670:	0e24      	lsrs	r4, r4, #24
 8001672:	b2e4      	uxtb	r4, r4
 8001674:	9404      	str	r4, [sp, #16]
 8001676:	9003      	str	r0, [sp, #12]
 8001678:	9102      	str	r1, [sp, #8]
 800167a:	9201      	str	r2, [sp, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4663      	mov	r3, ip
 8001680:	4632      	mov	r2, r6
 8001682:	4629      	mov	r1, r5
 8001684:	2010      	movs	r0, #16
 8001686:	f7ff ff8d 	bl	80015a4 <CAN_Send>
	//CAN_Send(0x11, 0, 0, 0, 0, 0, 0, dis[0] >> 8, dis [0] & 0xFF);
//	CAN_Send(0x11, dis[0] >> 8, dis[0] & 0xFF, dis[1] >> 8, dis[1] & 0xFF, dis[2] >> 8, dis[2] & 0xFF, 0, 0);
//	CAN_Send(0x11, dis[3] >> 8, dis[3] & 0xFF, dis[4] >> 8, dis[4] & 0xFF, dis[5] >> 8, dis[5] & 0xFF, 0, 0);
//	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) ;
//	CAN_Send(0x11, dis[6] >> 8, dis[6] & 0xFF, dis[7] >> 8, dis[7] & 0xFF, dis[8] >> 8, dis[8] & 0xFF, 0, 0);
}
 800168a:	bf00      	nop
 800168c:	3704      	adds	r7, #4
 800168e:	46bd      	mov	sp, r7
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	bf00      	nop
 8001694:	2000039c 	.word	0x2000039c
 8001698:	42f63efa 	.word	0x42f63efa
 800169c:	200003a0 	.word	0x200003a0
 80016a0:	43e43a5e 	.word	0x43e43a5e

080016a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Receiving CAN Data */
/* Get CAN1 message Through FIFO0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1RxHeader, can1Rx0Data);
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016ae:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80016b4:	f001 f845 	bl	8002742 <HAL_CAN_GetRxMessage>
	uint8_t left_dir = (can1Rx0Data[0] & 0b1000000) >> 7;
 80016b8:	2300      	movs	r3, #0
 80016ba:	75fb      	strb	r3, [r7, #23]
	float left_speed = (1 - 2 * left_dir) * ((can1Rx0Data[0] << 2) | (can1Rx0Data[1] << 16) | (can1Rx0Data[2] << 8) | (can1Rx0Data[3]));
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	f1c3 0301 	rsb	r3, r3, #1
 80016c4:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	0091      	lsls	r1, r2, #2
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016cc:	7852      	ldrb	r2, [r2, #1]
 80016ce:	0412      	lsls	r2, r2, #16
 80016d0:	4311      	orrs	r1, r2
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016d4:	7892      	ldrb	r2, [r2, #2]
 80016d6:	0212      	lsls	r2, r2, #8
 80016d8:	430a      	orrs	r2, r1
 80016da:	4917      	ldr	r1, [pc, #92]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016dc:	78c9      	ldrb	r1, [r1, #3]
 80016de:	430a      	orrs	r2, r1
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	edc7 7a04 	vstr	s15, [r7, #16]
	uint8_t right_dir = (can1Rx0Data[4] & 0b1000000) >> 7;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
	float right_speed = (1 - 2 * left_dir) * ((can1Rx0Data[4] << 24) | (can1Rx0Data[5] << 16) | (can1Rx0Data[6] << 8) | (can1Rx0Data[7]));
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	f1c3 0301 	rsb	r3, r3, #1
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80016fe:	7912      	ldrb	r2, [r2, #4]
 8001700:	0611      	lsls	r1, r2, #24
 8001702:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001704:	7952      	ldrb	r2, [r2, #5]
 8001706:	0412      	lsls	r2, r2, #16
 8001708:	4311      	orrs	r1, r2
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800170c:	7992      	ldrb	r2, [r2, #6]
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	430a      	orrs	r2, r1
 8001712:	4909      	ldr	r1, [pc, #36]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001714:	79c9      	ldrb	r1, [r1, #7]
 8001716:	430a      	orrs	r2, r1
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	edc7 7a02 	vstr	s15, [r7, #8]
//	setLeftMotorCCR(left_ccr, left_dir);
//	setRightMotorCCR(right_ccr, right_dir);
	printf("yes\r\n");
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800172a:	f007 f943 	bl	80089b4 <puts>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000370 	.word	0x20000370
 800173c:	2000033c 	.word	0x2000033c
 8001740:	2000009c 	.word	0x2000009c
 8001744:	080097e4 	.word	0x080097e4

08001748 <HAL_TIM_PeriodElapsedCallback>:
    before_error1 = right_before_error1;
    right_before_error1 = error1;
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 8085 	bne.w	8001864 <HAL_TIM_PeriodElapsedCallback+0x11c>
		  counter0 = __HAL_TIM_GET_COUNTER(&htim2);
 800175a:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001762:	6013      	str	r3, [r2, #0]
		  counter1 = __HAL_TIM_GET_COUNTER(&htim5);
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800176c:	6013      	str	r3, [r2, #0]

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800176e:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b10      	cmp	r3, #16
 800177a:	d118      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x66>
			  if (counter0 <= oldCounter0){
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d808      	bhi.n	800179a <HAL_TIM_PeriodElapsedCallback+0x52>
				  // pure forward
				  //printf("a1,");
				  diff0 = -counter0 + oldCounter0;
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e021      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // backward -> forward
				  //printf("a2,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e017      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
		  }
		  else {
			  if (counter0 <= oldCounter0) {
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d809      	bhi.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x86>
				  // forward -> backward
				  //printf("a3,");
				  diff0 = (4294967295 + oldCounter0) - counter0;
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_TIM_PeriodElapsedCallback+0x96>
			  }
			  else {
				  // pure backward
				  //printf("a4,");
				  diff0 = -counter0 + oldCounter0;
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017dc:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)) {
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d118      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0xd6>
			  if (counter1 >= oldCounter1) {
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d309      	bcc.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
				  // forward -> backward change
				  //printf("b1: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	461a      	mov	r2, r3
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e020      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x106>
			  }

			  else {
				  // pure backward
				  //printf("b2: ");
				  diff1 = counter1 - oldCounter1;
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e017      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x106>
			  }
		  }
		  else {
			  if (counter1 >= oldCounter1) {
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d308      	bcc.n	800183c <HAL_TIM_PeriodElapsedCallback+0xf4>
				  // pure forward
				  //printf("b3: ");
				  diff1 = counter1 - oldCounter1;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e008      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x106>
			  }
			  else {
				  // backward -> forward change
				  //printf("b4: ");
				  diff1 = (4294967295 - oldCounter1) + counter1;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800184c:	601a      	str	r2, [r3, #0]
			  }
		  }
		  oldCounter0 = __HAL_TIM_GET_COUNTER(&htim2);
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001856:	6013      	str	r3, [r2, #0]
		  oldCounter1 = __HAL_TIM_GET_COUNTER(&htim5);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001860:	6013      	str	r3, [r2, #0]
	}
	else if (htim == &htim4) {
		// CAN
		CAN_SendAll();
	}
}
 8001862:	e00e      	b.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x13a>
	else if (htim == &htim3) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d104      	bne.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x12e>
		GetAllData();
 800186c:	f7ff fd9e 	bl	80013ac <GetAllData>
		PrintAllData();
 8001870:	f7ff fe34 	bl	80014dc <PrintAllData>
}
 8001874:	e005      	b.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x13a>
	else if (htim == &htim4) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x13a>
		CAN_SendAll();
 800187e:	f7ff fed1 	bl	8001624 <CAN_SendAll>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000280 	.word	0x20000280
 8001890:	20000160 	.word	0x20000160
 8001894:	20000384 	.word	0x20000384
 8001898:	20000238 	.word	0x20000238
 800189c:	20000388 	.word	0x20000388
 80018a0:	2000038c 	.word	0x2000038c
 80018a4:	20000394 	.word	0x20000394
 80018a8:	20000390 	.word	0x20000390
 80018ac:	20000398 	.word	0x20000398
 80018b0:	200001a8 	.word	0x200001a8
 80018b4:	200001f0 	.word	0x200001f0

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001902:	2007      	movs	r0, #7
 8001904:	f001 fb54 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_CAN_MspInit+0x94>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d134      	bne.n	80019a0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_CAN_MspInit+0x98>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_CAN_MspInit+0x98>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_CAN_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800196e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001980:	2309      	movs	r3, #9
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_CAN_MspInit+0x9c>)
 800198c:	f001 fb82 	bl	8003094 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2014      	movs	r0, #20
 8001996:	f001 fb16 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800199a:	2014      	movs	r0, #20
 800199c:	f001 fb2f 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40006400 	.word	0x40006400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_I2C_MspInit+0x94>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d134      	bne.n	8001a40 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a04:	2304      	movs	r3, #4
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4810      	ldr	r0, [pc, #64]	; (8001a50 <HAL_I2C_MspInit+0x9c>)
 8001a10:	f001 fb40 	bl	8003094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 8001a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_I2C_MspInit+0x98>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	201f      	movs	r0, #31
 8001a36:	f001 fac6 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a3a:	201f      	movs	r0, #31
 8001a3c:	f001 fadf 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400

08001a54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_TIM_PWM_MspInit+0x40>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_TIM_PWM_MspInit+0x40>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_TIM_PWM_MspInit+0x40>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d152      	bne.n	8001b60 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a38      	ldr	r2, [pc, #224]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	482d      	ldr	r0, [pc, #180]	; (8001be0 <HAL_TIM_Encoder_MspInit+0x148>)
 8001b2a:	f001 fab3 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b2e:	2308      	movs	r3, #8
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4826      	ldr	r0, [pc, #152]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001b4a:	f001 faa3 	bl	8003094 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201c      	movs	r0, #28
 8001b54:	f001 fa37 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b58:	201c      	movs	r0, #28
 8001b5a:	f001 fa50 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b5e:	e038      	b.n	8001bd2 <HAL_TIM_Encoder_MspInit+0x13a>
  else if(htim_encoder->Instance==TIM5)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d133      	bne.n	8001bd2 <HAL_TIM_Encoder_MspInit+0x13a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <HAL_TIM_Encoder_MspInit+0x148>)
 8001bbe:	f001 fa69 	bl	8003094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2032      	movs	r0, #50	; 0x32
 8001bc8:	f001 f9fd 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bcc:	2032      	movs	r0, #50	; 0x32
 8001bce:	f001 fa16 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	; 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40000c00 	.word	0x40000c00

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_TIM_Base_MspInit+0xb8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201d      	movs	r0, #29
 8001c20:	f001 f9d1 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c24:	201d      	movs	r0, #29
 8001c26:	f001 f9ea 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c2a:	e036      	b.n	8001c9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d116      	bne.n	8001c64 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	201e      	movs	r0, #30
 8001c58:	f001 f9b5 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c5c:	201e      	movs	r0, #30
 8001c5e:	f001 f9ce 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 8001c62:	e01a      	b.n	8001c9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d115      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c78:	f043 0320 	orr.w	r3, r3, #32
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_TIM_Base_MspInit+0xbc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2037      	movs	r0, #55	; 0x37
 8001c90:	f001 f999 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c94:	2037      	movs	r0, #55	; 0x37
 8001c96:	f001 f9b2 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40001400 	.word	0x40001400

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11e      	bne.n	8001d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_TIM_MspPostInit+0x70>)
 8001d10:	f001 f9c0 	bl	8003094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_UART_MspInit+0x84>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12b      	bne.n	8001da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d82:	230c      	movs	r3, #12
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d9e:	f001 f979 	bl	8003094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f95e 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <CAN1_RX0_IRQHandler+0x10>)
 8001e12:	f000 fdce 	bl	80029b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000009c 	.word	0x2000009c

08001e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM2_IRQHandler+0x10>)
 8001e26:	f004 ffa1 	bl	8006d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000160 	.word	0x20000160

08001e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM3_IRQHandler+0x10>)
 8001e3a:	f004 ff97 	bl	8006d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001a8 	.word	0x200001a8

08001e48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM4_IRQHandler+0x10>)
 8001e4e:	f004 ff8d 	bl	8006d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200001f0 	.word	0x200001f0

08001e5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <I2C1_EV_IRQHandler+0x10>)
 8001e62:	f001 ff2d 	bl	8003cc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000c4 	.word	0x200000c4

08001e70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM5_IRQHandler+0x10>)
 8001e76:	f004 ff79 	bl	8006d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000238 	.word	0x20000238

08001e84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM7_IRQHandler+0x10>)
 8001e8a:	f004 ff6f 	bl	8006d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000280 	.word	0x20000280

08001e98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e00a      	b.n	8001ec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eaa:	f3af 8000 	nop.w
 8001eae:	4601      	mov	r1, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf0      	blt.n	8001eaa <_read+0x12>
	}

return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efa:	605a      	str	r2, [r3, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_isatty>:

int _isatty(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
	return 1;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f006 fbc0 	bl	80086f0 <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20020000 	.word	0x20020000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	200003a4 	.word	0x200003a4
 8001fa4:	200004c0 	.word	0x200004c0

08001fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff ffd7 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f006 fb7f 	bl	80086fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7fe faed 	bl	80005dc <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002010:	08009908 	.word	0x08009908
  ldr r2, =_sbss
 8002014:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002018:	200004bc 	.word	0x200004bc

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 ffb1 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fc36 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 ffc9 	bl	800301a <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 ff91 	bl	8002fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000010 	.word	0x20000010
 80020bc:	20000018 	.word	0x20000018
 80020c0:	20000014 	.word	0x20000014

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000018 	.word	0x20000018
 80020e8:	200003a8 	.word	0x200003a8

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200003a8 	.word	0x200003a8

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000018 	.word	0x20000018

0800214c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0ed      	b.n	800233a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fbd2 	bl	8001914 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff ffb4 	bl	80020ec <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff ffb0 	bl	80020ec <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0c5      	b.n	800233a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0e5      	beq.n	8002188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0202 	bic.w	r2, r2, #2
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff ff8e 	bl	80020ec <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021d2:	e012      	b.n	80021fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d4:	f7ff ff8a 	bl	80020ec <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d90b      	bls.n	80021fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2205      	movs	r2, #5
 80021f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e09f      	b.n	800233a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7e5b      	ldrb	r3, [r3, #25]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e9b      	ldrb	r3, [r3, #26]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d108      	bne.n	8002276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e007      	b.n	8002286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0220 	bic.w	r2, r2, #32
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7edb      	ldrb	r3, [r3, #27]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0210 	bic.w	r2, r2, #16
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0210 	orr.w	r2, r2, #16
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7f1b      	ldrb	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e007      	b.n	80022da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f5b      	ldrb	r3, [r3, #29]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d108      	bne.n	80022f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	ea42 0103 	orr.w	r1, r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d003      	beq.n	800236a <HAL_CAN_ConfigFilter+0x26>
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f040 80be 	bne.w	80024e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_CAN_ConfigFilter+0x1bc>)
 800236c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002384:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	431a      	orrs	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d123      	bne.n	8002414 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3248      	adds	r2, #72	; 0x48
 80023f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002408:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240a:	6979      	ldr	r1, [r7, #20]
 800240c:	3348      	adds	r3, #72	; 0x48
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d122      	bne.n	8002462 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800243c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3248      	adds	r2, #72	; 0x48
 8002442:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002456:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002458:	6979      	ldr	r1, [r7, #20]
 800245a:	3348      	adds	r3, #72	; 0x48
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800247c:	e007      	b.n	800248e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	401a      	ands	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024a8:	e007      	b.n	80024ba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d8:	f023 0201 	bic.w	r2, r3, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e006      	b.n	80024f4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40006400 	.word	0x40006400

08002504 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d12e      	bne.n	8002576 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff fddc 	bl	80020ec <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002536:	e012      	b.n	800255e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002538:	f7ff fdd8 	bl	80020ec <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d90b      	bls.n	800255e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2205      	movs	r2, #5
 8002556:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e012      	b.n	8002584 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e5      	bne.n	8002538 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e006      	b.n	8002584 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d003      	beq.n	80025b8 <HAL_CAN_AddTxMessage+0x2c>
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 80b8 	bne.w	8002728 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a0 	beq.w	8002718 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	0e1b      	lsrs	r3, r3, #24
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d907      	bls.n	80025f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e09e      	b.n	8002736 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025f8:	2201      	movs	r2, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	409a      	lsls	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	6809      	ldr	r1, [r1, #0]
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3318      	adds	r3, #24
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	440b      	add	r3, r1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e00f      	b.n	8002646 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002630:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800263a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3318      	adds	r3, #24
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	440b      	add	r3, r1
 8002644:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3318      	adds	r3, #24
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	3304      	adds	r3, #4
 8002658:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	7d1b      	ldrb	r3, [r3, #20]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d111      	bne.n	8002686 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3318      	adds	r3, #24
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3318      	adds	r3, #24
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	440b      	add	r3, r1
 8002682:	3304      	adds	r3, #4
 8002684:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3307      	adds	r3, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	061a      	lsls	r2, r3, #24
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3306      	adds	r3, #6
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3305      	adds	r3, #5
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	4313      	orrs	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	3204      	adds	r2, #4
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	4610      	mov	r0, r2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6811      	ldr	r1, [r2, #0]
 80026ae:	ea43 0200 	orr.w	r2, r3, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	440b      	add	r3, r1
 80026b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3303      	adds	r3, #3
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	061a      	lsls	r2, r3, #24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3302      	adds	r3, #2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3301      	adds	r3, #1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	4313      	orrs	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	4610      	mov	r0, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6811      	ldr	r1, [r2, #0]
 80026e4:	ea43 0200 	orr.w	r2, r3, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3318      	adds	r3, #24
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	6811      	ldr	r1, [r2, #0]
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3318      	adds	r3, #24
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	440b      	add	r3, r1
 8002712:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e00e      	b.n	8002736 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e006      	b.n	8002736 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002756:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d003      	beq.n	8002766 <HAL_CAN_GetRxMessage+0x24>
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b02      	cmp	r3, #2
 8002762:	f040 80f3 	bne.w	800294c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10e      	bne.n	800278a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0e7      	b.n	800295a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d8      	b.n	800295a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	331b      	adds	r3, #27
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0204 	and.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	331b      	adds	r3, #27
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	08db      	lsrs	r3, r3, #3
 80027f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	331b      	adds	r3, #27
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0202 	and.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	331b      	adds	r3, #27
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	331b      	adds	r3, #27
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b2da      	uxtb	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	331b      	adds	r3, #27
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b29a      	uxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0a1a      	lsrs	r2, r3, #8
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4413      	add	r3, r2
 8002890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0c1a      	lsrs	r2, r3, #16
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3302      	adds	r3, #2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e1a      	lsrs	r2, r3, #24
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3303      	adds	r3, #3
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3304      	adds	r3, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0a1a      	lsrs	r2, r3, #8
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3305      	adds	r3, #5
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0c1a      	lsrs	r2, r3, #16
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3306      	adds	r3, #6
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0e1a      	lsrs	r2, r3, #24
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3307      	adds	r3, #7
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0220 	orr.w	r2, r2, #32
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	e007      	b.n	8002948 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e006      	b.n	800295a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <HAL_CAN_ActivateNotification+0x1e>
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d109      	bne.n	8002998 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6959      	ldr	r1, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e006      	b.n	80029a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d07c      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d023      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f983 	bl	8002d20 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a1a:	e016      	b.n	8002a4a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e00c      	b.n	8002a4a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	e002      	b.n	8002a4a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f989 	bl	8002d5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d024      	beq.n	8002a9e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f963 	bl	8002d34 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a6e:	e016      	b.n	8002a9e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	e00c      	b.n	8002a9e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	e002      	b.n	8002a9e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f969 	bl	8002d70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d024      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ab0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f943 	bl	8002d48 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ac2:	e016      	b.n	8002af2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	e00c      	b.n	8002af2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e002      	b.n	8002af2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f949 	bl	8002d84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00c      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2210      	movs	r2, #16
 8002b14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2208      	movs	r2, #8
 8002b30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f930 	bl	8002d98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fe fda7 	bl	80016a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2210      	movs	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2208      	movs	r2, #8
 8002b94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f912 	bl	8002dc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8f9 	bl	8002dac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8fc 	bl	8002dd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8f5 	bl	8002de8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d07b      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d072      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d043      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03e      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d02b      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x32a>
 8002c84:	2b60      	cmp	r3, #96	; 0x60
 8002c86:	d82e      	bhi.n	8002ce6 <HAL_CAN_IRQHandler+0x334>
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d022      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x320>
 8002c8c:	2b50      	cmp	r3, #80	; 0x50
 8002c8e:	d82a      	bhi.n	8002ce6 <HAL_CAN_IRQHandler+0x334>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d019      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x316>
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d826      	bhi.n	8002ce6 <HAL_CAN_IRQHandler+0x334>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d010      	beq.n	8002cbe <HAL_CAN_IRQHandler+0x30c>
 8002c9c:	2b30      	cmp	r3, #48	; 0x30
 8002c9e:	d822      	bhi.n	8002ce6 <HAL_CAN_IRQHandler+0x334>
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d002      	beq.n	8002caa <HAL_CAN_IRQHandler+0x2f8>
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d005      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ca8:	e01d      	b.n	8002ce6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cb2:	e019      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cbc:	e014      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	f043 0320 	orr.w	r3, r3, #32
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc6:	e00f      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd0:	e00a      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cda:	e005      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ce6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cf6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f872 	bl	8002dfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f7c:	d301      	bcc.n	8002f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00f      	b.n	8002fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <SysTick_Config+0x40>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f7ff ff8e 	bl	8002eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <SysTick_Config+0x40>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <SysTick_Config+0x40>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010

08002fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff29 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd8:	f7ff ff3e 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff8e 	bl	8002f04 <NVIC_EncodePriority>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff5d 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff31 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffa2 	bl	8002f6c <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d004      	beq.n	8003050 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e00c      	b.n	800306a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2205      	movs	r2, #5
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003084:	b2db      	uxtb	r3, r3
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e165      	b.n	800337c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 8154 	bne.w	8003376 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d005      	beq.n	80030e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d130      	bne.n	8003148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 0201 	and.w	r2, r3, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d017      	beq.n	8003184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d123      	bne.n	80031d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	08da      	lsrs	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80ae 	beq.w	8003376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_GPIO_Init+0x300>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a5c      	ldr	r2, [pc, #368]	; (8003394 <HAL_GPIO_Init+0x300>)
 8003224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_GPIO_Init+0x300>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_GPIO_Init+0x304>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x308>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d025      	beq.n	80032ae <HAL_GPIO_Init+0x21a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_GPIO_Init+0x30c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_GPIO_Init+0x216>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4d      	ldr	r2, [pc, #308]	; (80033a4 <HAL_GPIO_Init+0x310>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_GPIO_Init+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4c      	ldr	r2, [pc, #304]	; (80033a8 <HAL_GPIO_Init+0x314>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4b      	ldr	r2, [pc, #300]	; (80033ac <HAL_GPIO_Init+0x318>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00d      	beq.n	800329e <HAL_GPIO_Init+0x20a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4a      	ldr	r2, [pc, #296]	; (80033b0 <HAL_GPIO_Init+0x31c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <HAL_GPIO_Init+0x206>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a49      	ldr	r2, [pc, #292]	; (80033b4 <HAL_GPIO_Init+0x320>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_GPIO_Init+0x202>
 8003292:	2306      	movs	r3, #6
 8003294:	e00c      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 8003296:	2307      	movs	r3, #7
 8003298:	e00a      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 800329a:	2305      	movs	r3, #5
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 800329e:	2304      	movs	r3, #4
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032ae:	2300      	movs	r3, #0
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c0:	4935      	ldr	r1, [pc, #212]	; (8003398 <HAL_GPIO_Init+0x304>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_GPIO_Init+0x324>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f2:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <HAL_GPIO_Init+0x324>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <HAL_GPIO_Init+0x324>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <HAL_GPIO_Init+0x324>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_GPIO_Init+0x324>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_GPIO_Init+0x324>)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_GPIO_Init+0x324>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <HAL_GPIO_Init+0x324>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	f67f ae96 	bls.w	80030b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	40013800 	.word	0x40013800
 800339c:	40020000 	.word	0x40020000
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40021400 	.word	0x40021400
 80033b4:	40021800 	.word	0x40021800
 80033b8:	40013c00 	.word	0x40013c00

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e12b      	b.n	800365a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe facc 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003454:	f002 fc68 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 8003458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a81      	ldr	r2, [pc, #516]	; (8003664 <HAL_I2C_Init+0x274>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d807      	bhi.n	8003474 <HAL_I2C_Init+0x84>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_I2C_Init+0x278>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e006      	b.n	8003482 <HAL_I2C_Init+0x92>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a7d      	ldr	r2, [pc, #500]	; (800366c <HAL_I2C_Init+0x27c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0e7      	b.n	800365a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a78      	ldr	r2, [pc, #480]	; (8003670 <HAL_I2C_Init+0x280>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
 8003494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a6a      	ldr	r2, [pc, #424]	; (8003664 <HAL_I2C_Init+0x274>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d802      	bhi.n	80034c4 <HAL_I2C_Init+0xd4>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3301      	adds	r3, #1
 80034c2:	e009      	b.n	80034d8 <HAL_I2C_Init+0xe8>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <HAL_I2C_Init+0x284>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	3301      	adds	r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	495c      	ldr	r1, [pc, #368]	; (8003664 <HAL_I2C_Init+0x274>)
 80034f4:	428b      	cmp	r3, r1
 80034f6:	d819      	bhi.n	800352c <HAL_I2C_Init+0x13c>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e59      	subs	r1, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fbb1 f3f3 	udiv	r3, r1, r3
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800350c:	400b      	ands	r3, r1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_I2C_Init+0x138>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e59      	subs	r1, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	e051      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003528:	2304      	movs	r3, #4
 800352a:	e04f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <HAL_I2C_Init+0x168>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e012      	b.n	800357e <HAL_I2C_Init+0x18e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e58      	subs	r0, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	0099      	lsls	r1, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Init+0x196>
 8003582:	2301      	movs	r3, #1
 8003584:	e022      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <HAL_I2C_Init+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e58      	subs	r0, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	440b      	add	r3, r1
 800359c:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	e00f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	0099      	lsls	r1, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6809      	ldr	r1, [r1, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6911      	ldr	r1, [r2, #16]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	430b      	orrs	r3, r1
 800360e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	000186a0 	.word	0x000186a0
 8003668:	001e847f 	.word	0x001e847f
 800366c:	003d08ff 	.word	0x003d08ff
 8003670:	431bde83 	.word	0x431bde83
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	460b      	mov	r3, r1
 8003686:	817b      	strh	r3, [r7, #10]
 8003688:	4613      	mov	r3, r2
 800368a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7fe fd2e 	bl	80020ec <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b20      	cmp	r3, #32
 800369c:	f040 80e0 	bne.w	8003860 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2319      	movs	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	4970      	ldr	r1, [pc, #448]	; (800386c <HAL_I2C_Master_Transmit+0x1f4>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f001 ffd0 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	e0d3      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2C_Master_Transmit+0x50>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0cc      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d007      	beq.n	80036ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2221      	movs	r2, #33	; 0x21
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2210      	movs	r2, #16
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a50      	ldr	r2, [pc, #320]	; (8003870 <HAL_I2C_Master_Transmit+0x1f8>)
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003730:	8979      	ldrh	r1, [r7, #10]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f001 fd92 	bl	8005260 <I2C_MasterRequestWrite>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08d      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800375c:	e066      	b.n	800382c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f002 f84a 	bl	80057fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b04      	cmp	r3, #4
 8003774:	d107      	bne.n	8003786 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_I2C_Master_Transmit+0x188>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d017      	beq.n	8003800 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6a39      	ldr	r1, [r7, #32]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f002 f83a 	bl	800587e <I2C_WaitOnBTFFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e01a      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d194      	bne.n	800375e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00100002 	.word	0x00100002
 8003870:	ffff0000 	.word	0xffff0000

08003874 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	460b      	mov	r3, r1
 8003882:	817b      	strh	r3, [r7, #10]
 8003884:	4613      	mov	r3, r2
 8003886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7fe fc30 	bl	80020ec <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b20      	cmp	r3, #32
 8003898:	f040 820b 	bne.w	8003cb2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2319      	movs	r3, #25
 80038a2:	2201      	movs	r2, #1
 80038a4:	497c      	ldr	r1, [pc, #496]	; (8003a98 <HAL_I2C_Master_Receive+0x224>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 fed2 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	e1fe      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_I2C_Master_Receive+0x50>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e1f7      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d007      	beq.n	80038ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2222      	movs	r2, #34	; 0x22
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2210      	movs	r2, #16
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	893a      	ldrh	r2, [r7, #8]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_I2C_Master_Receive+0x228>)
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 fd16 	bl	8005364 <I2C_MasterRequestRead>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1b8      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e18c      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11b      	bne.n	80039b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e16c      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	e14c      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a18:	e138      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	f200 80f1 	bhi.w	8003c06 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d123      	bne.n	8003a74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f001 ff97 	bl	8005964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e139      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a72:	e10b      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d14e      	bne.n	8003b1a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	2200      	movs	r2, #0
 8003a84:	4906      	ldr	r1, [pc, #24]	; (8003aa0 <HAL_I2C_Master_Receive+0x22c>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f001 fde2 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e10e      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
 8003a96:	bf00      	nop
 8003a98:	00100002 	.word	0x00100002
 8003a9c:	ffff0000 	.word	0xffff0000
 8003aa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b18:	e0b8      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	2200      	movs	r2, #0
 8003b22:	4966      	ldr	r1, [pc, #408]	; (8003cbc <HAL_I2C_Master_Receive+0x448>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f001 fd93 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0bf      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	494f      	ldr	r1, [pc, #316]	; (8003cbc <HAL_I2C_Master_Receive+0x448>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f001 fd65 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e091      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c04:	e042      	b.n	8003c8c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f001 feaa 	bl	8005964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04c      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d118      	bne.n	8003c8c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f aec2 	bne.w	8003a1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	00010004 	.word	0x00010004

08003cc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d003      	beq.n	8003cf8 <HAL_I2C_EV_IRQHandler+0x38>
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	f040 80c1 	bne.w	8003e7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <HAL_I2C_EV_IRQHandler+0x6e>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d18:	d003      	beq.n	8003d22 <HAL_I2C_EV_IRQHandler+0x62>
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_EV_IRQHandler+0x66>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_I2C_EV_IRQHandler+0x68>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f000 8132 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_I2C_EV_IRQHandler+0x92>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	0a5b      	lsrs	r3, r3, #9
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fe92 	bl	8005a6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fcdc 	bl	8004708 <I2C_Master_SB>
 8003d50:	e092      	b.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	0a5b      	lsrs	r3, r3, #9
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fd52 	bl	8004814 <I2C_Master_ADD10>
 8003d70:	e082      	b.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fd6c 	bl	8004868 <I2C_Master_ADDR>
 8003d90:	e072      	b.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03b      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	f000 80f3 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	09db      	lsrs	r3, r3, #7
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x11c>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x11c>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f94c 	bl	8004072 <I2C_MasterTransmit_TXE>
 8003dda:	e04d      	b.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80d6 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	0a5b      	lsrs	r3, r3, #9
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80cf 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003df8:	7bbb      	ldrb	r3, [r7, #14]
 8003dfa:	2b21      	cmp	r3, #33	; 0x21
 8003dfc:	d103      	bne.n	8003e06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9d3 	bl	80041aa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e04:	e0c7      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	f040 80c4 	bne.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa41 	bl	8004296 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e14:	e0bf      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e24:	f000 80b7 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00f      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x194>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	0a9b      	lsrs	r3, r3, #10
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x194>
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d103      	bne.n	8003e54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fab6 	bl	80043be <I2C_MasterReceive_RXNE>
 8003e52:	e011      	b.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 809a 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	0a5b      	lsrs	r3, r3, #9
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8093 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fb5f 	bl	8004534 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	e08e      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e78:	e08d      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	e007      	b.n	8003e9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x20e>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	0a5b      	lsrs	r3, r3, #9
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ec4:	69b9      	ldr	r1, [r7, #24]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 ff1d 	bl	8004d06 <I2C_Slave_ADDR>
 8003ecc:	e066      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x22e>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 ff58 	bl	8004d9c <I2C_Slave_STOPF>
 8003eec:	e056      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eee:	7bbb      	ldrb	r3, [r7, #14]
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d002      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0x23a>
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b29      	cmp	r3, #41	; 0x29
 8003ef8:	d125      	bne.n	8003f46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x266>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	0a9b      	lsrs	r3, r3, #10
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x266>
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fe33 	bl	8004b8a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f24:	e039      	b.n	8003f9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d033      	beq.n	8003f9a <HAL_I2C_EV_IRQHandler+0x2da>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02d      	beq.n	8003f9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fe60 	bl	8004c04 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f44:	e029      	b.n	8003f9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	0a9b      	lsrs	r3, r3, #10
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fe6b 	bl	8004c46 <I2C_SlaveReceive_RXNE>
 8003f70:	e014      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	0a5b      	lsrs	r3, r3, #9
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fe99 	bl	8004cc2 <I2C_SlaveReceive_BTF>
 8003f90:	e004      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	70fb      	strb	r3, [r7, #3]
 8003ffe:	4613      	mov	r3, r2
 8004000:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004088:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d150      	bne.n	800413a <I2C_MasterTransmit_TXE+0xc8>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	d14d      	bne.n	800413a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d01d      	beq.n	80040e0 <I2C_MasterTransmit_TXE+0x6e>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d01a      	beq.n	80040e0 <I2C_MasterTransmit_TXE+0x6e>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040b0:	d016      	beq.n	80040e0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2211      	movs	r2, #17
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff62 	bl	8003fa2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040de:	e060      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d107      	bne.n	800412a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ff7d 	bl	8004022 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004128:	e03b      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff35 	bl	8003fa2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004138:	e033      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b21      	cmp	r3, #33	; 0x21
 800413e:	d005      	beq.n	800414c <I2C_MasterTransmit_TXE+0xda>
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d12d      	bne.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b22      	cmp	r3, #34	; 0x22
 800414a:	d12a      	bne.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004166:	e01c      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d103      	bne.n	800417c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f88e 	bl	8004296 <I2C_MemoryTransmit_TXE_BTF>
}
 800417a:	e012      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041a0:	e7ff      	b.n	80041a2 <I2C_MasterTransmit_TXE+0x130>
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b21      	cmp	r3, #33	; 0x21
 80041c2:	d164      	bne.n	800428e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d012      	beq.n	80041f4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041f2:	e04c      	b.n	800428e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d01d      	beq.n	8004236 <I2C_MasterTransmit_BTF+0x8c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d01a      	beq.n	8004236 <I2C_MasterTransmit_BTF+0x8c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004206:	d016      	beq.n	8004236 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004216:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2211      	movs	r2, #17
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff feb7 	bl	8003fa2 <HAL_I2C_MasterTxCpltCallback>
}
 8004234:	e02b      	b.n	800428e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004244:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d107      	bne.n	8004280 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fed2 	bl	8004022 <HAL_I2C_MemTxCpltCallback>
}
 800427e:	e006      	b.n	800428e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fe8a 	bl	8003fa2 <HAL_I2C_MasterTxCpltCallback>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10b      	bne.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042cc:	e073      	b.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	121b      	asrs	r3, r3, #8
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042e8:	e065      	b.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10b      	bne.n	800430a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004308:	e055      	b.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	2b02      	cmp	r3, #2
 8004310:	d151      	bne.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b22      	cmp	r3, #34	; 0x22
 8004316:	d10d      	bne.n	8004334 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004326:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004332:	e040      	b.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d015      	beq.n	800436a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b21      	cmp	r3, #33	; 0x21
 8004342:	d112      	bne.n	800436a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004368:	e025      	b.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d120      	bne.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b21      	cmp	r3, #33	; 0x21
 8004378:	d11d      	bne.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004388:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004398:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fe36 	bl	8004022 <HAL_I2C_MemTxCpltCallback>
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b22      	cmp	r3, #34	; 0x22
 80043d0:	f040 80ac 	bne.w	800452c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d921      	bls.n	8004426 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b03      	cmp	r3, #3
 8004410:	f040 808c 	bne.w	800452c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004424:	e082      	b.n	800452c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	2b02      	cmp	r3, #2
 800442c:	d075      	beq.n	800451a <I2C_MasterReceive_RXNE+0x15c>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <I2C_MasterReceive_RXNE+0x7c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d16f      	bne.n	800451a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f001 fa60 	bl	8005900 <I2C_WaitOnSTOPRequestThroughIT>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d142      	bne.n	80044cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004464:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d10a      	bne.n	80044b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fdc1 	bl	8004036 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044b4:	e03a      	b.n	800452c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2212      	movs	r2, #18
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fd76 	bl	8003fb6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ca:	e02f      	b.n	800452c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fd99 	bl	800404a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004518:	e008      	b.n	800452c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004528:	605a      	str	r2, [r3, #4]
}
 800452a:	e7ff      	b.n	800452c <I2C_MasterReceive_RXNE+0x16e>
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b04      	cmp	r3, #4
 800454a:	d11b      	bne.n	8004584 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004582:	e0bd      	b.n	8004700 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b03      	cmp	r3, #3
 800458c:	d129      	bne.n	80045e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d00a      	beq.n	80045ba <I2C_MasterReceive_BTF+0x86>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d007      	beq.n	80045ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045e0:	e08e      	b.n	8004700 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d176      	bne.n	80046da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d002      	beq.n	80045f8 <I2C_MasterReceive_BTF+0xc4>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d108      	bne.n	800460a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e019      	b.n	800463e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d002      	beq.n	8004616 <I2C_MasterReceive_BTF+0xe2>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d108      	bne.n	8004628 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e00a      	b.n	800463e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b10      	cmp	r3, #16
 800462c:	d007      	beq.n	800463e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004698:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d10a      	bne.n	80046c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fcba 	bl	8004036 <HAL_I2C_MemRxCpltCallback>
}
 80046c2:	e01d      	b.n	8004700 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2212      	movs	r2, #18
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fc6f 	bl	8003fb6 <HAL_I2C_MasterRxCpltCallback>
}
 80046d8:	e012      	b.n	8004700 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d117      	bne.n	800474c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004734:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004736:	e067      	b.n	8004808 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]
}
 800474a:	e05d      	b.n	8004808 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d133      	bne.n	80047be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b21      	cmp	r3, #33	; 0x21
 8004760:	d109      	bne.n	8004776 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004772:	611a      	str	r2, [r3, #16]
 8004774:	e008      	b.n	8004788 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <I2C_Master_SB+0x92>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d032      	beq.n	8004808 <I2C_Master_SB+0x100>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ba:	605a      	str	r2, [r3, #4]
}
 80047bc:	e024      	b.n	8004808 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	11db      	asrs	r3, r3, #7
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 0306 	and.w	r3, r3, #6
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f063 030f 	orn	r3, r3, #15
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]
}
 80047e2:	e011      	b.n	8004808 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10d      	bne.n	8004808 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	11db      	asrs	r3, r3, #7
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f063 030e 	orn	r3, r3, #14
 8004800:	b2da      	uxtb	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	b2da      	uxtb	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <I2C_Master_ADD10+0x26>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <I2C_Master_ADD10+0x48>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485a:	605a      	str	r2, [r3, #4]
  }
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b091      	sub	sp, #68	; 0x44
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004876:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b22      	cmp	r3, #34	; 0x22
 8004890:	f040 8169 	bne.w	8004b66 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10f      	bne.n	80048bc <I2C_Master_ADDR+0x54>
 800489c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d10b      	bne.n	80048bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a4:	2300      	movs	r3, #0
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	e160      	b.n	8004b7e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11d      	bne.n	8004900 <I2C_Master_ADDR+0x98>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048cc:	d118      	bne.n	8004900 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	651a      	str	r2, [r3, #80]	; 0x50
 80048fe:	e13e      	b.n	8004b7e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d113      	bne.n	8004932 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490a:	2300      	movs	r3, #0
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e115      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 808a 	bne.w	8004a52 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004944:	d137      	bne.n	80049b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d113      	bne.n	800498e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	e0e7      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	623b      	str	r3, [r7, #32]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e0d3      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d02e      	beq.n	8004a1a <I2C_Master_ADDR+0x1b2>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d02b      	beq.n	8004a1a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	2b12      	cmp	r3, #18
 80049c6:	d102      	bne.n	80049ce <I2C_Master_ADDR+0x166>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d125      	bne.n	8004a1a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d00e      	beq.n	80049f2 <I2C_Master_ADDR+0x18a>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d00b      	beq.n	80049f2 <I2C_Master_ADDR+0x18a>
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d008      	beq.n	80049f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e007      	b.n	8004a02 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a00:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	e0a1      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a28:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e085      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d14d      	bne.n	8004af8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d016      	beq.n	8004a90 <I2C_Master_ADDR+0x228>
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d013      	beq.n	8004a90 <I2C_Master_ADDR+0x228>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d010      	beq.n	8004a90 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e007      	b.n	8004aa0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d117      	bne.n	8004ae0 <I2C_Master_ADDR+0x278>
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab6:	d00b      	beq.n	8004ad0 <I2C_Master_ADDR+0x268>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d008      	beq.n	8004ad0 <I2C_Master_ADDR+0x268>
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d005      	beq.n	8004ad0 <I2C_Master_ADDR+0x268>
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d002      	beq.n	8004ad0 <I2C_Master_ADDR+0x268>
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d107      	bne.n	8004ae0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ade:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	e032      	b.n	8004b5e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b16:	d117      	bne.n	8004b48 <I2C_Master_ADDR+0x2e0>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b1e:	d00b      	beq.n	8004b38 <I2C_Master_ADDR+0x2d0>
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d008      	beq.n	8004b38 <I2C_Master_ADDR+0x2d0>
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d005      	beq.n	8004b38 <I2C_Master_ADDR+0x2d0>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d002      	beq.n	8004b38 <I2C_Master_ADDR+0x2d0>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d107      	bne.n	8004b48 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b64:	e00b      	b.n	8004b7e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	e7ff      	b.n	8004b7e <I2C_Master_ADDR+0x316>
 8004b7e:	bf00      	nop
 8004b80:	3744      	adds	r7, #68	; 0x44
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d02b      	beq.n	8004bfc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d114      	bne.n	8004bfc <I2C_SlaveTransmit_TXE+0x72>
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b29      	cmp	r3, #41	; 0x29
 8004bd6:	d111      	bne.n	8004bfc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2221      	movs	r2, #33	; 0x21
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2228      	movs	r2, #40	; 0x28
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff f9e7 	bl	8003fca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d011      	beq.n	8004c3a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d02c      	beq.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d114      	bne.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b2a      	cmp	r3, #42	; 0x2a
 8004c94:	d111      	bne.n	8004cba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2222      	movs	r2, #34	; 0x22
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2228      	movs	r2, #40	; 0x28
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff f992 	bl	8003fde <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d012      	beq.n	8004cfa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d20:	2b28      	cmp	r3, #40	; 0x28
 8004d22:	d127      	bne.n	8004d74 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	09db      	lsrs	r3, r3, #7
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	81bb      	strh	r3, [r7, #12]
 8004d56:	e002      	b.n	8004d5e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d66:	89ba      	ldrh	r2, [r7, #12]
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff f940 	bl	8003ff2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d72:	e00e      	b.n	8004d92 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df8:	d172      	bne.n	8004ee0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	2b22      	cmp	r3, #34	; 0x22
 8004dfe:	d002      	beq.n	8004e06 <I2C_Slave_STOPF+0x6a>
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	2b2a      	cmp	r3, #42	; 0x2a
 8004e04:	d135      	bne.n	8004e72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe f919 	bl	8003076 <HAL_DMA_GetState>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d049      	beq.n	8004ede <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	4a69      	ldr	r2, [pc, #420]	; (8004ff4 <I2C_Slave_STOPF+0x258>)
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f8eb 	bl	8003032 <HAL_DMA_Abort_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03d      	beq.n	8004ede <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e70:	e035      	b.n	8004ede <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f043 0204 	orr.w	r2, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe f8e3 	bl	8003076 <HAL_DMA_GetState>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d014      	beq.n	8004ee0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4a4e      	ldr	r2, [pc, #312]	; (8004ff4 <I2C_Slave_STOPF+0x258>)
 8004ebc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe f8b5 	bl	8003032 <HAL_DMA_Abort_IT>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4798      	blx	r3
 8004edc:	e000      	b.n	8004ee0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ede:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d03e      	beq.n	8004f68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d112      	bne.n	8004f1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d112      	bne.n	8004f52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0204 	orr.w	r2, r3, #4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f843 	bl	8004ffc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f76:	e039      	b.n	8004fec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7c:	d109      	bne.n	8004f92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2228      	movs	r2, #40	; 0x28
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff f826 	bl	8003fde <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d111      	bne.n	8004fc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <I2C_Slave_STOPF+0x25c>)
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff f827 	bl	800400e <HAL_I2C_ListenCpltCallback>
}
 8004fc0:	e014      	b.n	8004fec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	2b22      	cmp	r3, #34	; 0x22
 8004fc8:	d002      	beq.n	8004fd0 <I2C_Slave_STOPF+0x234>
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b22      	cmp	r3, #34	; 0x22
 8004fce:	d10d      	bne.n	8004fec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fe fff9 	bl	8003fde <HAL_I2C_SlaveRxCpltCallback>
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08005501 	.word	0x08005501
 8004ff8:	ffff0000 	.word	0xffff0000

08004ffc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005012:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005014:	7bbb      	ldrb	r3, [r7, #14]
 8005016:	2b10      	cmp	r3, #16
 8005018:	d002      	beq.n	8005020 <I2C_ITError+0x24>
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d10a      	bne.n	8005036 <I2C_ITError+0x3a>
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b22      	cmp	r3, #34	; 0x22
 8005024:	d107      	bne.n	8005036 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005034:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800503c:	2b28      	cmp	r3, #40	; 0x28
 800503e:	d107      	bne.n	8005050 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2228      	movs	r2, #40	; 0x28
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800504e:	e015      	b.n	800507c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d00a      	beq.n	8005076 <I2C_ITError+0x7a>
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b60      	cmp	r3, #96	; 0x60
 8005064:	d007      	beq.n	8005076 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508a:	d162      	bne.n	8005152 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d020      	beq.n	80050ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <I2C_ITError+0x25c>)
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fd ffbb 	bl	8003032 <HAL_DMA_Abort_IT>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8089 	beq.w	80051d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050e6:	4610      	mov	r0, r2
 80050e8:	4798      	blx	r3
 80050ea:	e074      	b.n	80051d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	4a59      	ldr	r2, [pc, #356]	; (8005258 <I2C_ITError+0x25c>)
 80050f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fd ff9a 	bl	8003032 <HAL_DMA_Abort_IT>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d068      	beq.n	80051d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d10b      	bne.n	800512a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
 8005150:	e041      	b.n	80051d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b60      	cmp	r3, #96	; 0x60
 800515c:	d125      	bne.n	80051aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10b      	bne.n	8005192 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fe ff5b 	bl	800405e <HAL_I2C_AbortCpltCallback>
 80051a8:	e015      	b.n	80051d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d10b      	bne.n	80051d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fe ff3a 	bl	800404a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10e      	bne.n	8005204 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d113      	bne.n	8005250 <I2C_ITError+0x254>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b28      	cmp	r3, #40	; 0x28
 800522c:	d110      	bne.n	8005250 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <I2C_ITError+0x260>)
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fe fedf 	bl	800400e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08005501 	.word	0x08005501
 800525c:	ffff0000 	.word	0xffff0000

08005260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	460b      	mov	r3, r1
 800526e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d006      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d003      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005288:	d108      	bne.n	800529c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00b      	b.n	80052b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d107      	bne.n	80052b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f9c5 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d103      	bne.n	80052e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e035      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f0:	d108      	bne.n	8005304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e01b      	b.n	800533c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	11db      	asrs	r3, r3, #7
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f063 030f 	orn	r3, r3, #15
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	490e      	ldr	r1, [pc, #56]	; (800535c <I2C_MasterRequestWrite+0xfc>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f9eb 	bl	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e010      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4907      	ldr	r1, [pc, #28]	; (8005360 <I2C_MasterRequestWrite+0x100>)
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f9db 	bl	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00010008 	.word	0x00010008
 8005360:	00010002 	.word	0x00010002

08005364 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	460b      	mov	r3, r1
 8005372:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005388:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d006      	beq.n	800539e <I2C_MasterRequestRead+0x3a>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <I2C_MasterRequestRead+0x3a>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800539c:	d108      	bne.n	80053b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e00b      	b.n	80053c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	2b11      	cmp	r3, #17
 80053b6:	d107      	bne.n	80053c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f93b 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d103      	bne.n	80053f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e079      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005404:	d108      	bne.n	8005418 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]
 8005416:	e05f      	b.n	80054d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	11db      	asrs	r3, r3, #7
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f063 030f 	orn	r3, r3, #15
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4930      	ldr	r1, [pc, #192]	; (80054f8 <I2C_MasterRequestRead+0x194>)
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f961 	bl	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e054      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4929      	ldr	r1, [pc, #164]	; (80054fc <I2C_MasterRequestRead+0x198>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f951 	bl	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e044      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f8d9 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d103      	bne.n	80054bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e017      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054c0:	897b      	ldrh	r3, [r7, #10]
 80054c2:	11db      	asrs	r3, r3, #7
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0306 	and.w	r3, r3, #6
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f063 030e 	orn	r3, r3, #14
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4907      	ldr	r1, [pc, #28]	; (80054fc <I2C_MasterRequestRead+0x198>)
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f90d 	bl	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	00010008 	.word	0x00010008
 80054fc:	00010002 	.word	0x00010002

08005500 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800551a:	4b4b      	ldr	r3, [pc, #300]	; (8005648 <I2C_DMAAbort+0x148>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	4a4a      	ldr	r2, [pc, #296]	; (800564c <I2C_DMAAbort+0x14c>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	0a1a      	lsrs	r2, r3, #8
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00da      	lsls	r2, r3, #3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005546:	e00a      	b.n	800555e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555c:	d0ea      	beq.n	8005534 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	2200      	movs	r2, #0
 800556c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	2200      	movs	r2, #0
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	2200      	movs	r2, #0
 80055a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	2200      	movs	r2, #0
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d10e      	bne.n	80055ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f7fe fd39 	bl	800405e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055ec:	e027      	b.n	800563e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055f4:	2b28      	cmp	r3, #40	; 0x28
 80055f6:	d117      	bne.n	8005628 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005616:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2228      	movs	r2, #40	; 0x28
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005626:	e007      	b.n	8005638 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005638:	6978      	ldr	r0, [r7, #20]
 800563a:	f7fe fd06 	bl	800404a <HAL_I2C_ErrorCallback>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000010 	.word	0x20000010
 800564c:	14f8b589 	.word	0x14f8b589

08005650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005660:	e025      	b.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d021      	beq.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fc fd3f 	bl	80020ec <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d116      	bne.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e023      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10d      	bne.n	80056d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	43da      	mvns	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bf0c      	ite	eq
 80056ca:	2301      	moveq	r3, #1
 80056cc:	2300      	movne	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	e00c      	b.n	80056ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	43da      	mvns	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bf0c      	ite	eq
 80056e6:	2301      	moveq	r3, #1
 80056e8:	2300      	movne	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d0b6      	beq.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800570c:	e051      	b.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d123      	bne.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0204 	orr.w	r2, r3, #4
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e046      	b.n	80057f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d021      	beq.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fc fcbd 	bl	80020ec <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d116      	bne.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f043 0220 	orr.w	r2, r3, #32
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e020      	b.n	80057f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	0c1b      	lsrs	r3, r3, #16
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10c      	bne.n	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e00b      	b.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	43da      	mvns	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4013      	ands	r3, r2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d18d      	bne.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005808:	e02d      	b.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f900 	bl	8005a10 <I2C_IsAcknowledgeFailed>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e02d      	b.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d021      	beq.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fc fc63 	bl	80020ec <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d116      	bne.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0220 	orr.w	r2, r3, #32
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e007      	b.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d1ca      	bne.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800588a:	e02d      	b.n	80058e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f8bf 	bl	8005a10 <I2C_IsAcknowledgeFailed>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e02d      	b.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d021      	beq.n	80058e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a4:	f7fc fc22 	bl	80020ec <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e007      	b.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d1ca      	bne.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	4a13      	ldr	r2, [pc, #76]	; (8005960 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	0a1a      	lsrs	r2, r3, #8
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e008      	b.n	8005950 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d0e9      	beq.n	8005922 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000010 	.word	0x20000010
 8005960:	14f8b589 	.word	0x14f8b589

08005964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005970:	e042      	b.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d119      	bne.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0210 	mvn.w	r2, #16
 8005988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e029      	b.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b4:	f7fc fb9a 	bl	80020ec <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d116      	bne.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e007      	b.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d1b5      	bne.n	8005972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a26:	d11b      	bne.n	8005a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a7e:	d103      	bne.n	8005a88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a86:	e007      	b.n	8005a98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a90:	d102      	bne.n	8005a98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2208      	movs	r2, #8
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	2300      	movs	r3, #0
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6413      	str	r3, [r2, #64]	; 0x40
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005aca:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x94>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ad0:	f7fc fb0c 	bl	80020ec <HAL_GetTick>
 8005ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ad6:	e009      	b.n	8005aec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ad8:	f7fc fb08 	bl	80020ec <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ae6:	d901      	bls.n	8005aec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e01f      	b.n	8005b2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_PWREx_EnableOverDrive+0x98>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d1ee      	bne.n	8005ad8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b00:	f7fc faf4 	bl	80020ec <HAL_GetTick>
 8005b04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b06:	e009      	b.n	8005b1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b08:	f7fc faf0 	bl	80020ec <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b16:	d901      	bls.n	8005b1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e007      	b.n	8005b2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b1c:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <HAL_PWREx_EnableOverDrive+0x98>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b28:	d1ee      	bne.n	8005b08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	420e0040 	.word	0x420e0040
 8005b3c:	40007000 	.word	0x40007000
 8005b40:	420e0044 	.word	0x420e0044

08005b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0cc      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d90c      	bls.n	8005b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b65      	ldr	r3, [pc, #404]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b63      	ldr	r3, [pc, #396]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0b8      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b98:	4b59      	ldr	r3, [pc, #356]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a58      	ldr	r2, [pc, #352]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb0:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a52      	ldr	r2, [pc, #328]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bbc:	4b50      	ldr	r3, [pc, #320]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	494d      	ldr	r1, [pc, #308]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d044      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d107      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d119      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e07f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c02:	4b3f      	ldr	r3, [pc, #252]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e06f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c12:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e067      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c22:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 0203 	bic.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4934      	ldr	r1, [pc, #208]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c34:	f7fc fa5a 	bl	80020ec <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3c:	f7fc fa56 	bl	80020ec <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e04f      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 020c 	and.w	r2, r3, #12
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d1eb      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d20c      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <HAL_RCC_ClockConfig+0x1b8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e032      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4916      	ldr	r1, [pc, #88]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	490e      	ldr	r1, [pc, #56]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cca:	f000 f855 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	490a      	ldr	r1, [pc, #40]	; (8005d04 <HAL_RCC_ClockConfig+0x1c0>)
 8005cdc:	5ccb      	ldrb	r3, [r1, r3]
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc f9ba 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023c00 	.word	0x40023c00
 8005d00:	40023800 	.word	0x40023800
 8005d04:	080097ec 	.word	0x080097ec
 8005d08:	20000010 	.word	0x20000010
 8005d0c:	20000014 	.word	0x20000014

08005d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d16:	681b      	ldr	r3, [r3, #0]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000010 	.word	0x20000010

08005d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d2c:	f7ff fff0 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	0a9b      	lsrs	r3, r3, #10
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	4903      	ldr	r1, [pc, #12]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	080097fc 	.word	0x080097fc

08005d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d54:	f7ff ffdc 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	0b5b      	lsrs	r3, r3, #13
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	4903      	ldr	r1, [pc, #12]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d66:	5ccb      	ldrb	r3, [r1, r3]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40023800 	.word	0x40023800
 8005d74:	080097fc 	.word	0x080097fc

08005d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d7c:	b0ae      	sub	sp, #184	; 0xb8
 8005d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9e:	4bcb      	ldr	r3, [pc, #812]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	f200 8206 	bhi.w	80061b8 <HAL_RCC_GetSysClockFreq+0x440>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005de9 	.word	0x08005de9
 8005db8:	080061b9 	.word	0x080061b9
 8005dbc:	080061b9 	.word	0x080061b9
 8005dc0:	080061b9 	.word	0x080061b9
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	080061b9 	.word	0x080061b9
 8005dcc:	080061b9 	.word	0x080061b9
 8005dd0:	080061b9 	.word	0x080061b9
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	080061b9 	.word	0x080061b9
 8005ddc:	080061b9 	.word	0x080061b9
 8005de0:	080061b9 	.word	0x080061b9
 8005de4:	08005fe9 	.word	0x08005fe9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005de8:	4bb9      	ldr	r3, [pc, #740]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005dee:	e1e7      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df0:	4bb8      	ldr	r3, [pc, #736]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005df6:	e1e3      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005df8:	4bb4      	ldr	r3, [pc, #720]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e04:	4bb1      	ldr	r3, [pc, #708]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d071      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e10:	4bae      	ldr	r3, [pc, #696]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	099b      	lsrs	r3, r3, #6
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	f04f 0000 	mov.w	r0, #0
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	0159      	lsls	r1, r3, #5
 8005e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e48:	0150      	lsls	r0, r2, #5
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4621      	mov	r1, r4
 8005e50:	1a51      	subs	r1, r2, r1
 8005e52:	6439      	str	r1, [r7, #64]	; 0x40
 8005e54:	4629      	mov	r1, r5
 8005e56:	eb63 0301 	sbc.w	r3, r3, r1
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005e68:	4649      	mov	r1, r9
 8005e6a:	018b      	lsls	r3, r1, #6
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e72:	4641      	mov	r1, r8
 8005e74:	018a      	lsls	r2, r1, #6
 8005e76:	4641      	mov	r1, r8
 8005e78:	1a51      	subs	r1, r2, r1
 8005e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005e90:	4649      	mov	r1, r9
 8005e92:	00cb      	lsls	r3, r1, #3
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	00ca      	lsls	r2, r1, #3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eaa:	462b      	mov	r3, r5
 8005eac:	460a      	mov	r2, r1
 8005eae:	eb42 0303 	adc.w	r3, r2, r3
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	024b      	lsls	r3, r1, #9
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eca:	4621      	mov	r1, r4
 8005ecc:	024a      	lsls	r2, r1, #9
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ee0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005ee4:	f7fa f9e4 	bl	80002b0 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ef2:	e067      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef4:	4b75      	ldr	r3, [pc, #468]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f0e:	2300      	movs	r3, #0
 8005f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f04f 0000 	mov.w	r0, #0
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	0159      	lsls	r1, r3, #5
 8005f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f28:	0150      	lsls	r0, r2, #5
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4621      	mov	r1, r4
 8005f30:	1a51      	subs	r1, r2, r1
 8005f32:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f34:	4629      	mov	r1, r5
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005f48:	4649      	mov	r1, r9
 8005f4a:	018b      	lsls	r3, r1, #6
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f52:	4641      	mov	r1, r8
 8005f54:	018a      	lsls	r2, r1, #6
 8005f56:	4641      	mov	r1, r8
 8005f58:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f76:	4692      	mov	sl, r2
 8005f78:	469b      	mov	fp, r3
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	eb1a 0303 	adds.w	r3, sl, r3
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	462b      	mov	r3, r5
 8005f84:	eb4b 0303 	adc.w	r3, fp, r3
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005f96:	4629      	mov	r1, r5
 8005f98:	028b      	lsls	r3, r1, #10
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	028a      	lsls	r2, r1, #10
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fac:	2200      	movs	r2, #0
 8005fae:	673b      	str	r3, [r7, #112]	; 0x70
 8005fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8005fb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005fb6:	f7fa f97b 	bl	80002b0 <__aeabi_uldivmod>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc4:	4b41      	ldr	r3, [pc, #260]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	3301      	adds	r3, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005fe6:	e0eb      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fe8:	4b38      	ldr	r3, [pc, #224]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ff4:	4b35      	ldr	r3, [pc, #212]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d06b      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006000:	4b32      	ldr	r3, [pc, #200]	; (80060cc <HAL_RCC_GetSysClockFreq+0x354>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	2200      	movs	r2, #0
 8006008:	66bb      	str	r3, [r7, #104]	; 0x68
 800600a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800600c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	663b      	str	r3, [r7, #96]	; 0x60
 8006014:	2300      	movs	r3, #0
 8006016:	667b      	str	r3, [r7, #100]	; 0x64
 8006018:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f04f 0000 	mov.w	r0, #0
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	0159      	lsls	r1, r3, #5
 800602a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800602e:	0150      	lsls	r0, r2, #5
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4621      	mov	r1, r4
 8006036:	1a51      	subs	r1, r2, r1
 8006038:	61b9      	str	r1, [r7, #24]
 800603a:	4629      	mov	r1, r5
 800603c:	eb63 0301 	sbc.w	r3, r3, r1
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800604e:	4659      	mov	r1, fp
 8006050:	018b      	lsls	r3, r1, #6
 8006052:	4651      	mov	r1, sl
 8006054:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006058:	4651      	mov	r1, sl
 800605a:	018a      	lsls	r2, r1, #6
 800605c:	4651      	mov	r1, sl
 800605e:	ebb2 0801 	subs.w	r8, r2, r1
 8006062:	4659      	mov	r1, fp
 8006064:	eb63 0901 	sbc.w	r9, r3, r1
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006074:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006078:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800607c:	4690      	mov	r8, r2
 800607e:	4699      	mov	r9, r3
 8006080:	4623      	mov	r3, r4
 8006082:	eb18 0303 	adds.w	r3, r8, r3
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	462b      	mov	r3, r5
 800608a:	eb49 0303 	adc.w	r3, r9, r3
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800609c:	4629      	mov	r1, r5
 800609e:	024b      	lsls	r3, r1, #9
 80060a0:	4621      	mov	r1, r4
 80060a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060a6:	4621      	mov	r1, r4
 80060a8:	024a      	lsls	r2, r1, #9
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b2:	2200      	movs	r2, #0
 80060b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80060b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060bc:	f7fa f8f8 	bl	80002b0 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ca:	e065      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0x420>
 80060cc:	40023800 	.word	0x40023800
 80060d0:	00f42400 	.word	0x00f42400
 80060d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d8:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	2200      	movs	r2, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	4611      	mov	r1, r2
 80060e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060e8:	653b      	str	r3, [r7, #80]	; 0x50
 80060ea:	2300      	movs	r3, #0
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54
 80060ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80060f2:	4642      	mov	r2, r8
 80060f4:	464b      	mov	r3, r9
 80060f6:	f04f 0000 	mov.w	r0, #0
 80060fa:	f04f 0100 	mov.w	r1, #0
 80060fe:	0159      	lsls	r1, r3, #5
 8006100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006104:	0150      	lsls	r0, r2, #5
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4641      	mov	r1, r8
 800610c:	1a51      	subs	r1, r2, r1
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	4649      	mov	r1, r9
 8006112:	eb63 0301 	sbc.w	r3, r3, r1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006124:	4659      	mov	r1, fp
 8006126:	018b      	lsls	r3, r1, #6
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800612e:	4651      	mov	r1, sl
 8006130:	018a      	lsls	r2, r1, #6
 8006132:	4651      	mov	r1, sl
 8006134:	1a54      	subs	r4, r2, r1
 8006136:	4659      	mov	r1, fp
 8006138:	eb63 0501 	sbc.w	r5, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	00eb      	lsls	r3, r5, #3
 8006146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614a:	00e2      	lsls	r2, r4, #3
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	4643      	mov	r3, r8
 8006152:	18e3      	adds	r3, r4, r3
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	464b      	mov	r3, r9
 8006158:	eb45 0303 	adc.w	r3, r5, r3
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800616a:	4629      	mov	r1, r5
 800616c:	028b      	lsls	r3, r1, #10
 800616e:	4621      	mov	r1, r4
 8006170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006174:	4621      	mov	r1, r4
 8006176:	028a      	lsls	r2, r1, #10
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006180:	2200      	movs	r2, #0
 8006182:	64bb      	str	r3, [r7, #72]	; 0x48
 8006184:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006186:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800618a:	f7fa f891 	bl	80002b0 <__aeabi_uldivmod>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4613      	mov	r3, r2
 8006194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	0f1b      	lsrs	r3, r3, #28
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80061b6:	e003      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80061ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80061be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	37b8      	adds	r7, #184	; 0xb8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	00f42400 	.word	0x00f42400

080061d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e28d      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8083 	beq.w	80062fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80061f8:	4b94      	ldr	r3, [pc, #592]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b04      	cmp	r3, #4
 8006202:	d019      	beq.n	8006238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006204:	4b91      	ldr	r3, [pc, #580]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800620c:	2b08      	cmp	r3, #8
 800620e:	d106      	bne.n	800621e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006210:	4b8e      	ldr	r3, [pc, #568]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621c:	d00c      	beq.n	8006238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621e:	4b8b      	ldr	r3, [pc, #556]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d112      	bne.n	8006250 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b88      	ldr	r3, [pc, #544]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006236:	d10b      	bne.n	8006250 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b84      	ldr	r3, [pc, #528]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05b      	beq.n	80062fc <HAL_RCC_OscConfig+0x124>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d157      	bne.n	80062fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e25a      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x90>
 800625a:	4b7c      	ldr	r3, [pc, #496]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a7b      	ldr	r2, [pc, #492]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xcc>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0xb4>
 8006272:	4b76      	ldr	r3, [pc, #472]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a75      	ldr	r2, [pc, #468]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b73      	ldr	r3, [pc, #460]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a72      	ldr	r2, [pc, #456]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xcc>
 800628c:	4b6f      	ldr	r3, [pc, #444]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6e      	ldr	r2, [pc, #440]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b6c      	ldr	r3, [pc, #432]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6b      	ldr	r2, [pc, #428]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fb ff1e 	bl	80020ec <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fb ff1a 	bl	80020ec <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e21f      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b61      	ldr	r3, [pc, #388]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xdc>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fb ff0a 	bl	80020ec <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fb ff06 	bl	80020ec <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e20b      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b57      	ldr	r3, [pc, #348]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x104>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d06f      	beq.n	80063ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800630a:	4b50      	ldr	r3, [pc, #320]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006316:	4b4d      	ldr	r3, [pc, #308]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800631e:	2b08      	cmp	r3, #8
 8006320:	d105      	bne.n	800632e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006322:	4b4a      	ldr	r3, [pc, #296]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b47      	ldr	r3, [pc, #284]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006336:	2b0c      	cmp	r3, #12
 8006338:	d11c      	bne.n	8006374 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633a:	4b44      	ldr	r3, [pc, #272]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d116      	bne.n	8006374 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006346:	4b41      	ldr	r3, [pc, #260]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_RCC_OscConfig+0x186>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d001      	beq.n	800635e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e1d3      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635e:	4b3b      	ldr	r3, [pc, #236]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4937      	ldr	r1, [pc, #220]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800636e:	4313      	orrs	r3, r2
 8006370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	e03a      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800637c:	4b34      	ldr	r3, [pc, #208]	; (8006450 <HAL_RCC_OscConfig+0x278>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fb feb3 	bl	80020ec <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800638a:	f7fb feaf 	bl	80020ec <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e1b4      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639c:	4b2b      	ldr	r3, [pc, #172]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a8:	4b28      	ldr	r3, [pc, #160]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4925      	ldr	r1, [pc, #148]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]
 80063bc:	e015      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <HAL_RCC_OscConfig+0x278>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fb fe92 	bl	80020ec <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fb fe8e 	bl	80020ec <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e193      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063de:	4b1b      	ldr	r3, [pc, #108]	; (800644c <HAL_RCC_OscConfig+0x274>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d036      	beq.n	8006464 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fe:	4b15      	ldr	r3, [pc, #84]	; (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fb fe72 	bl	80020ec <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640c:	f7fb fe6e 	bl	80020ec <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e173      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_RCC_OscConfig+0x274>)
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x234>
 800642a:	e01b      	b.n	8006464 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_RCC_OscConfig+0x27c>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006432:	f7fb fe5b 	bl	80020ec <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006438:	e00e      	b.n	8006458 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800643a:	f7fb fe57 	bl	80020ec <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d907      	bls.n	8006458 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e15c      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
 800644c:	40023800 	.word	0x40023800
 8006450:	42470000 	.word	0x42470000
 8006454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006458:	4b8a      	ldr	r3, [pc, #552]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800645a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1ea      	bne.n	800643a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8097 	beq.w	80065a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006476:	4b83      	ldr	r3, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10f      	bne.n	80064a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	4b7f      	ldr	r3, [pc, #508]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	4a7e      	ldr	r2, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006490:	6413      	str	r3, [r2, #64]	; 0x40
 8006492:	4b7c      	ldr	r3, [pc, #496]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a2:	4b79      	ldr	r3, [pc, #484]	; (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d118      	bne.n	80064e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ae:	4b76      	ldr	r3, [pc, #472]	; (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a75      	ldr	r2, [pc, #468]	; (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ba:	f7fb fe17 	bl	80020ec <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c2:	f7fb fe13 	bl	80020ec <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e118      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d4:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <HAL_RCC_OscConfig+0x31e>
 80064e8:	4b66      	ldr	r3, [pc, #408]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a65      	ldr	r2, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	e01c      	b.n	8006530 <HAL_RCC_OscConfig+0x358>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0x340>
 80064fe:	4b61      	ldr	r3, [pc, #388]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4a60      	ldr	r2, [pc, #384]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006504:	f043 0304 	orr.w	r3, r3, #4
 8006508:	6713      	str	r3, [r2, #112]	; 0x70
 800650a:	4b5e      	ldr	r3, [pc, #376]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	4a5d      	ldr	r2, [pc, #372]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	6713      	str	r3, [r2, #112]	; 0x70
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0x358>
 8006518:	4b5a      	ldr	r3, [pc, #360]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a59      	ldr	r2, [pc, #356]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
 8006524:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	4a56      	ldr	r2, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800652a:	f023 0304 	bic.w	r3, r3, #4
 800652e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fb fdd8 	bl	80020ec <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653e:	e00a      	b.n	8006556 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006540:	f7fb fdd4 	bl	80020ec <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e0d7      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006556:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ee      	beq.n	8006540 <HAL_RCC_OscConfig+0x368>
 8006562:	e014      	b.n	800658e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fb fdc2 	bl	80020ec <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656a:	e00a      	b.n	8006582 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f7fb fdbe 	bl	80020ec <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f241 3288 	movw	r2, #5000	; 0x1388
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e0c1      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006582:	4b40      	ldr	r3, [pc, #256]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1ee      	bne.n	800656c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006594:	4b3b      	ldr	r3, [pc, #236]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	4a3a      	ldr	r2, [pc, #232]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800659a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800659e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80ad 	beq.w	8006704 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	d060      	beq.n	8006678 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d145      	bne.n	800664a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065be:	4b33      	ldr	r3, [pc, #204]	; (800668c <HAL_RCC_OscConfig+0x4b4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fb fd92 	bl	80020ec <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065cc:	f7fb fd8e 	bl	80020ec <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e093      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065de:	4b29      	ldr	r3, [pc, #164]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f0      	bne.n	80065cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	019b      	lsls	r3, r3, #6
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	3b01      	subs	r3, #1
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	491b      	ldr	r1, [pc, #108]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCC_OscConfig+0x4b4>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fb fd63 	bl	80020ec <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800662a:	f7fb fd5f 	bl	80020ec <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e064      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x452>
 8006648:	e05c      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <HAL_RCC_OscConfig+0x4b4>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fb fd4c 	bl	80020ec <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fb fd48 	bl	80020ec <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e04d      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x480>
 8006676:	e045      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e040      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
 8006684:	40023800 	.word	0x40023800
 8006688:	40007000 	.word	0x40007000
 800668c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006690:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <HAL_RCC_OscConfig+0x538>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d030      	beq.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d129      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d122      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d119      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	3b01      	subs	r3, #1
 80066da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d10f      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e041      	b.n	80067aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fb fa56 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 fdc4 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d001      	beq.n	80067cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e04e      	b.n	800686a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a23      	ldr	r2, [pc, #140]	; (8006878 <HAL_TIM_Base_Start_IT+0xc4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d01d      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_TIM_Base_Start_IT+0xc8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_TIM_Base_Start_IT+0xcc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_TIM_Base_Start_IT+0xd0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_TIM_Base_Start_IT+0xd4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_TIM_Base_Start_IT+0xd8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x80>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_TIM_Base_Start_IT+0xdc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d111      	bne.n	8006858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d010      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	e007      	b.n	8006868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40010400 	.word	0x40010400
 800688c:	40014000 	.word	0x40014000
 8006890:	40001800 	.word	0x40001800

08006894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e041      	b.n	800692a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fb f8ca 	bl	8001a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 fd04 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x24>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e022      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d109      	bne.n	8006972 <HAL_TIM_PWM_Start+0x3e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e015      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d109      	bne.n	800698c <HAL_TIM_PWM_Start+0x58>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e008      	b.n	800699e <HAL_TIM_PWM_Start+0x6a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e07c      	b.n	8006aa0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x82>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b4:	e013      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x92>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c4:	e00b      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start+0xa2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d4:	e003      	b.n	80069de <HAL_TIM_PWM_Start+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 ff64 	bl	80078b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2d      	ldr	r2, [pc, #180]	; (8006aa8 <HAL_TIM_PWM_Start+0x174>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_PWM_Start+0xcc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <HAL_TIM_PWM_Start+0x178>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_PWM_Start+0xd0>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_PWM_Start+0xd2>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <HAL_TIM_PWM_Start+0x174>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d01d      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <HAL_TIM_PWM_Start+0x17c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <HAL_TIM_PWM_Start+0x180>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <HAL_TIM_PWM_Start+0x184>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a16      	ldr	r2, [pc, #88]	; (8006aac <HAL_TIM_PWM_Start+0x178>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <HAL_TIM_PWM_Start+0x188>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x136>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_TIM_PWM_Start+0x18c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d111      	bne.n	8006a8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d010      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	e007      	b.n	8006a9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40001800 	.word	0x40001800

08006ac4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e097      	b.n	8006c08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fa ffd3 	bl	8001a98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fbe1 	bl	80072e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	4313      	orrs	r3, r2
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b64:	f023 030c 	bic.w	r3, r3, #12
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	4313      	orrs	r3, r2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	031b      	lsls	r3, r3, #12
 8006b94:	4313      	orrs	r3, r2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006baa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d110      	bne.n	8006c62 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d102      	bne.n	8006c4c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d001      	beq.n	8006c50 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e089      	b.n	8006d64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	e031      	b.n	8006cc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d110      	bne.n	8006c8a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d102      	bne.n	8006c74 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c6e:	7b3b      	ldrb	r3, [r7, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d001      	beq.n	8006c78 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e075      	b.n	8006d64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c88:	e01d      	b.n	8006cc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d108      	bne.n	8006ca2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d105      	bne.n	8006ca2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d102      	bne.n	8006ca2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c9c:	7b3b      	ldrb	r3, [r7, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d001      	beq.n	8006ca6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e05e      	b.n	8006d64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d010      	beq.n	8006cf4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006cd2:	e01f      	b.n	8006d14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fde9 	bl	80078b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0202 	orr.w	r2, r2, #2
 8006cf0:	60da      	str	r2, [r3, #12]
      break;
 8006cf2:	e02e      	b.n	8006d52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fdd9 	bl	80078b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0204 	orr.w	r2, r2, #4
 8006d10:	60da      	str	r2, [r3, #12]
      break;
 8006d12:	e01e      	b.n	8006d52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fdc9 	bl	80078b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	2104      	movs	r1, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fdc2 	bl	80078b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0202 	orr.w	r2, r2, #2
 8006d3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0204 	orr.w	r2, r2, #4
 8006d4e:	60da      	str	r2, [r3, #12]
      break;
 8006d50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d122      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d11b      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0202 	mvn.w	r2, #2
 8006d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa77 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006db4:	e005      	b.n	8006dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa69 	bl	800728e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fa7a 	bl	80072b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d122      	bne.n	8006e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d11b      	bne.n	8006e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0204 	mvn.w	r2, #4
 8006dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa4d 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006e08:	e005      	b.n	8006e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa3f 	bl	800728e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fa50 	bl	80072b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d122      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d11b      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0208 	mvn.w	r2, #8
 8006e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa23 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa15 	bl	800728e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa26 	bl	80072b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0210 	mvn.w	r2, #16
 8006e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9f9 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9eb 	bl	800728e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f9fc 	bl	80072b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d10e      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0201 	mvn.w	r2, #1
 8006ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fa fc2c 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efa:	2b80      	cmp	r3, #128	; 0x80
 8006efc:	d10e      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d107      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fdca 	bl	8007ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d10e      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d107      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9c1 	bl	80072ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d10e      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0220 	mvn.w	r2, #32
 8006f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fd94 	bl	8007a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e0ae      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	f200 809f 	bhi.w	80070e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fe5 	.word	0x08006fe5
 8006fb4:	080070e9 	.word	0x080070e9
 8006fb8:	080070e9 	.word	0x080070e9
 8006fbc:	080070e9 	.word	0x080070e9
 8006fc0:	08007025 	.word	0x08007025
 8006fc4:	080070e9 	.word	0x080070e9
 8006fc8:	080070e9 	.word	0x080070e9
 8006fcc:	080070e9 	.word	0x080070e9
 8006fd0:	08007067 	.word	0x08007067
 8006fd4:	080070e9 	.word	0x080070e9
 8006fd8:	080070e9 	.word	0x080070e9
 8006fdc:	080070e9 	.word	0x080070e9
 8006fe0:	080070a7 	.word	0x080070a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fa18 	bl	8007420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0208 	orr.w	r2, r2, #8
 8006ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0204 	bic.w	r2, r2, #4
 800700e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6999      	ldr	r1, [r3, #24]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	619a      	str	r2, [r3, #24]
      break;
 8007022:	e064      	b.n	80070ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fa68 	bl	8007500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800703e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800704e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	021a      	lsls	r2, r3, #8
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	619a      	str	r2, [r3, #24]
      break;
 8007064:	e043      	b.n	80070ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fabd 	bl	80075ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0208 	orr.w	r2, r2, #8
 8007080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0204 	bic.w	r2, r2, #4
 8007090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	61da      	str	r2, [r3, #28]
      break;
 80070a4:	e023      	b.n	80070ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb11 	bl	80076d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	021a      	lsls	r2, r3, #8
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	61da      	str	r2, [r3, #28]
      break;
 80070e6:	e002      	b.n	80070ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
      break;
 80070ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_TIM_ConfigClockSource+0x1c>
 8007118:	2302      	movs	r3, #2
 800711a:	e0b4      	b.n	8007286 <HAL_TIM_ConfigClockSource+0x186>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800713a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007154:	d03e      	beq.n	80071d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715a:	f200 8087 	bhi.w	800726c <HAL_TIM_ConfigClockSource+0x16c>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	f000 8086 	beq.w	8007272 <HAL_TIM_ConfigClockSource+0x172>
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	d87f      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 800716c:	2b70      	cmp	r3, #112	; 0x70
 800716e:	d01a      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007170:	2b70      	cmp	r3, #112	; 0x70
 8007172:	d87b      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 8007174:	2b60      	cmp	r3, #96	; 0x60
 8007176:	d050      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x11a>
 8007178:	2b60      	cmp	r3, #96	; 0x60
 800717a:	d877      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d03c      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0xfa>
 8007180:	2b50      	cmp	r3, #80	; 0x50
 8007182:	d873      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	d058      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x13a>
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d86f      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d064      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x15a>
 8007190:	2b30      	cmp	r3, #48	; 0x30
 8007192:	d86b      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d060      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x15a>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d867      	bhi.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d05c      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d05a      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x15a>
 80071a4:	e062      	b.n	800726c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6899      	ldr	r1, [r3, #8]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f000 fb5d 	bl	8007874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	609a      	str	r2, [r3, #8]
      break;
 80071d2:	e04f      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6818      	ldr	r0, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f000 fb46 	bl	8007874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f6:	609a      	str	r2, [r3, #8]
      break;
 80071f8:	e03c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	461a      	mov	r2, r3
 8007208:	f000 faba 	bl	8007780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2150      	movs	r1, #80	; 0x50
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fb13 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 8007218:	e02c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	461a      	mov	r2, r3
 8007228:	f000 fad9 	bl	80077de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2160      	movs	r1, #96	; 0x60
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fb03 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 8007238:	e01c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	461a      	mov	r2, r3
 8007248:	f000 fa9a 	bl	8007780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2140      	movs	r1, #64	; 0x40
 8007252:	4618      	mov	r0, r3
 8007254:	f000 faf3 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 8007258:	e00c      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f000 faea 	bl	800783e <TIM_ITRx_SetConfig>
      break;
 800726a:	e003      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
      break;
 8007270:	e000      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a40      	ldr	r2, [pc, #256]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a3d      	ldr	r2, [pc, #244]	; (80073f8 <TIM_Base_SetConfig+0x118>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <TIM_Base_SetConfig+0x11c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a3b      	ldr	r2, [pc, #236]	; (8007400 <TIM_Base_SetConfig+0x120>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a3a      	ldr	r2, [pc, #232]	; (8007404 <TIM_Base_SetConfig+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2f      	ldr	r2, [pc, #188]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d027      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <TIM_Base_SetConfig+0x118>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d023      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2b      	ldr	r2, [pc, #172]	; (80073fc <TIM_Base_SetConfig+0x11c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <TIM_Base_SetConfig+0x120>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a29      	ldr	r2, [pc, #164]	; (8007404 <TIM_Base_SetConfig+0x124>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d017      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a28      	ldr	r2, [pc, #160]	; (8007408 <TIM_Base_SetConfig+0x128>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a27      	ldr	r2, [pc, #156]	; (800740c <TIM_Base_SetConfig+0x12c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a26      	ldr	r2, [pc, #152]	; (8007410 <TIM_Base_SetConfig+0x130>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a25      	ldr	r2, [pc, #148]	; (8007414 <TIM_Base_SetConfig+0x134>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a24      	ldr	r2, [pc, #144]	; (8007418 <TIM_Base_SetConfig+0x138>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a23      	ldr	r2, [pc, #140]	; (800741c <TIM_Base_SetConfig+0x13c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a0a      	ldr	r2, [pc, #40]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <TIM_Base_SetConfig+0x124>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d103      	bne.n	80073e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	615a      	str	r2, [r3, #20]
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40010400 	.word	0x40010400
 8007408:	40014000 	.word	0x40014000
 800740c:	40014400 	.word	0x40014400
 8007410:	40014800 	.word	0x40014800
 8007414:	40001800 	.word	0x40001800
 8007418:	40001c00 	.word	0x40001c00
 800741c:	40002000 	.word	0x40002000

08007420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0302 	bic.w	r3, r3, #2
 8007468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <TIM_OC1_SetConfig+0xd8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC1_SetConfig+0x64>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <TIM_OC1_SetConfig+0xdc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10c      	bne.n	800749e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0308 	bic.w	r3, r3, #8
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f023 0304 	bic.w	r3, r3, #4
 800749c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <TIM_OC1_SetConfig+0xd8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_OC1_SetConfig+0x8e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a14      	ldr	r2, [pc, #80]	; (80074fc <TIM_OC1_SetConfig+0xdc>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d111      	bne.n	80074d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	621a      	str	r2, [r3, #32]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400

08007500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f023 0210 	bic.w	r2, r3, #16
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f023 0320 	bic.w	r3, r3, #32
 800754a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a22      	ldr	r2, [pc, #136]	; (80075e4 <TIM_OC2_SetConfig+0xe4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC2_SetConfig+0x68>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a21      	ldr	r2, [pc, #132]	; (80075e8 <TIM_OC2_SetConfig+0xe8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d10d      	bne.n	8007584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <TIM_OC2_SetConfig+0xe4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC2_SetConfig+0x94>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a16      	ldr	r2, [pc, #88]	; (80075e8 <TIM_OC2_SetConfig+0xe8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d113      	bne.n	80075bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800759a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40010400 	.word	0x40010400

080075ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a21      	ldr	r2, [pc, #132]	; (80076cc <TIM_OC3_SetConfig+0xe0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC3_SetConfig+0x66>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a20      	ldr	r2, [pc, #128]	; (80076d0 <TIM_OC3_SetConfig+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10d      	bne.n	800766e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800766c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <TIM_OC3_SetConfig+0xe0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_OC3_SetConfig+0x92>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <TIM_OC3_SetConfig+0xe4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d113      	bne.n	80076a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800771e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	031b      	lsls	r3, r3, #12
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a12      	ldr	r2, [pc, #72]	; (8007778 <TIM_OC4_SetConfig+0xa4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC4_SetConfig+0x68>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a11      	ldr	r2, [pc, #68]	; (800777c <TIM_OC4_SetConfig+0xa8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d109      	bne.n	8007750 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	019b      	lsls	r3, r3, #6
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	621a      	str	r2, [r3, #32]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400

08007780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f023 0201 	bic.w	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f023 030a 	bic.w	r3, r3, #10
 80077bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077de:	b480      	push	{r7}
 80077e0:	b087      	sub	sp, #28
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f023 0210 	bic.w	r2, r3, #16
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800781a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	f043 0307 	orr.w	r3, r3, #7
 8007860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	609a      	str	r2, [r3, #8]
}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800788e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	021a      	lsls	r2, r3, #8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	431a      	orrs	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4313      	orrs	r3, r2
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 031f 	and.w	r3, r3, #31
 80078c6:	2201      	movs	r2, #1
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	43db      	mvns	r3, r3
 80078d6:	401a      	ands	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a1a      	ldr	r2, [r3, #32]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	431a      	orrs	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
}
 80078f2:	bf00      	nop
 80078f4:	371c      	adds	r7, #28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007914:	2302      	movs	r3, #2
 8007916:	e05a      	b.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a21      	ldr	r2, [pc, #132]	; (80079dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d022      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007964:	d01d      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d018      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1a      	ldr	r2, [pc, #104]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00e      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d009      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d10c      	bne.n	80079bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40001800 	.word	0x40001800

080079f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e03d      	b.n	8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e03f      	b.n	8007b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fa f91c 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2224      	movs	r2, #36	; 0x24
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f929 	bl	8007d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08a      	sub	sp, #40	; 0x28
 8007b62:	af02      	add	r7, sp, #8
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d17c      	bne.n	8007c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_UART_Transmit+0x2c>
 8007b84:	88fb      	ldrh	r3, [r7, #6]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e075      	b.n	8007c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_UART_Transmit+0x3e>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e06e      	b.n	8007c7a <HAL_UART_Transmit+0x11c>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2221      	movs	r2, #33	; 0x21
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb2:	f7fa fa9b 	bl	80020ec <HAL_GetTick>
 8007bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	88fa      	ldrh	r2, [r7, #6]
 8007bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bcc:	d108      	bne.n	8007be0 <HAL_UART_Transmit+0x82>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d104      	bne.n	8007be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	e003      	b.n	8007be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bf0:	e02a      	b.n	8007c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f840 	bl	8007c82 <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e036      	b.n	8007c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10b      	bne.n	8007c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	3302      	adds	r3, #2
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e007      	b.n	8007c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	3301      	adds	r3, #1
 8007c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1cf      	bne.n	8007bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2140      	movs	r1, #64	; 0x40
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f810 	bl	8007c82 <UART_WaitOnFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e006      	b.n	8007c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	e000      	b.n	8007c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3720      	adds	r7, #32
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b090      	sub	sp, #64	; 0x40
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c92:	e050      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9a:	d04c      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ca2:	f7fa fa23 	bl	80020ec <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d241      	bcs.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cd2:	637a      	str	r2, [r7, #52]	; 0x34
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e5      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3314      	adds	r3, #20
 8007d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d06:	623a      	str	r2, [r7, #32]
 8007d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	69f9      	ldr	r1, [r7, #28]
 8007d0c:	6a3a      	ldr	r2, [r7, #32]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e5      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e00f      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d09f      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3740      	adds	r7, #64	; 0x40
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d64:	b0c0      	sub	sp, #256	; 0x100
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	68d9      	ldr	r1, [r3, #12]
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	ea40 0301 	orr.w	r3, r0, r1
 8007d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007db8:	f021 010c 	bic.w	r1, r1, #12
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	6999      	ldr	r1, [r3, #24]
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	ea40 0301 	orr.w	r3, r0, r1
 8007de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b8f      	ldr	r3, [pc, #572]	; (800802c <UART_SetConfig+0x2cc>)
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d005      	beq.n	8007e00 <UART_SetConfig+0xa0>
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b8d      	ldr	r3, [pc, #564]	; (8008030 <UART_SetConfig+0x2d0>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d104      	bne.n	8007e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e00:	f7fd ffa6 	bl	8005d50 <HAL_RCC_GetPCLK2Freq>
 8007e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e08:	e003      	b.n	8007e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e0a:	f7fd ff8d 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 8007e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e1c:	f040 810c 	bne.w	8008038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e32:	4622      	mov	r2, r4
 8007e34:	462b      	mov	r3, r5
 8007e36:	1891      	adds	r1, r2, r2
 8007e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e3a:	415b      	adcs	r3, r3
 8007e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e42:	4621      	mov	r1, r4
 8007e44:	eb12 0801 	adds.w	r8, r2, r1
 8007e48:	4629      	mov	r1, r5
 8007e4a:	eb43 0901 	adc.w	r9, r3, r1
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e62:	4690      	mov	r8, r2
 8007e64:	4699      	mov	r9, r3
 8007e66:	4623      	mov	r3, r4
 8007e68:	eb18 0303 	adds.w	r3, r8, r3
 8007e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e70:	462b      	mov	r3, r5
 8007e72:	eb49 0303 	adc.w	r3, r9, r3
 8007e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e8e:	460b      	mov	r3, r1
 8007e90:	18db      	adds	r3, r3, r3
 8007e92:	653b      	str	r3, [r7, #80]	; 0x50
 8007e94:	4613      	mov	r3, r2
 8007e96:	eb42 0303 	adc.w	r3, r2, r3
 8007e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ea4:	f7f8 fa04 	bl	80002b0 <__aeabi_uldivmod>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4b61      	ldr	r3, [pc, #388]	; (8008034 <UART_SetConfig+0x2d4>)
 8007eae:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	011c      	lsls	r4, r3, #4
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	1891      	adds	r1, r2, r2
 8007ece:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ed0:	415b      	adcs	r3, r3
 8007ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ed8:	4641      	mov	r1, r8
 8007eda:	eb12 0a01 	adds.w	sl, r2, r1
 8007ede:	4649      	mov	r1, r9
 8007ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ef8:	4692      	mov	sl, r2
 8007efa:	469b      	mov	fp, r3
 8007efc:	4643      	mov	r3, r8
 8007efe:	eb1a 0303 	adds.w	r3, sl, r3
 8007f02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f06:	464b      	mov	r3, r9
 8007f08:	eb4b 0303 	adc.w	r3, fp, r3
 8007f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f24:	460b      	mov	r3, r1
 8007f26:	18db      	adds	r3, r3, r3
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	eb42 0303 	adc.w	r3, r2, r3
 8007f30:	647b      	str	r3, [r7, #68]	; 0x44
 8007f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f3a:	f7f8 f9b9 	bl	80002b0 <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	4b3b      	ldr	r3, [pc, #236]	; (8008034 <UART_SetConfig+0x2d4>)
 8007f46:	fba3 2301 	umull	r2, r3, r3, r1
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	2264      	movs	r2, #100	; 0x64
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	1acb      	subs	r3, r1, r3
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f5a:	4b36      	ldr	r3, [pc, #216]	; (8008034 <UART_SetConfig+0x2d4>)
 8007f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f68:	441c      	add	r4, r3
 8007f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	1891      	adds	r1, r2, r2
 8007f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f84:	415b      	adcs	r3, r3
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	1851      	adds	r1, r2, r1
 8007f90:	6339      	str	r1, [r7, #48]	; 0x30
 8007f92:	4649      	mov	r1, r9
 8007f94:	414b      	adcs	r3, r1
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	00cb      	lsls	r3, r1, #3
 8007fa8:	4651      	mov	r1, sl
 8007faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fae:	4651      	mov	r1, sl
 8007fb0:	00ca      	lsls	r2, r1, #3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4642      	mov	r2, r8
 8007fba:	189b      	adds	r3, r3, r2
 8007fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	eb42 0303 	adc.w	r3, r2, r3
 8007fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	18db      	adds	r3, r3, r3
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	eb42 0303 	adc.w	r3, r2, r3
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ff6:	f7f8 f95b 	bl	80002b0 <__aeabi_uldivmod>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <UART_SetConfig+0x2d4>)
 8008000:	fba3 1302 	umull	r1, r3, r3, r2
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	2164      	movs	r1, #100	; 0x64
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	3332      	adds	r3, #50	; 0x32
 8008012:	4a08      	ldr	r2, [pc, #32]	; (8008034 <UART_SetConfig+0x2d4>)
 8008014:	fba2 2303 	umull	r2, r3, r2, r3
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	f003 0207 	and.w	r2, r3, #7
 800801e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4422      	add	r2, r4
 8008026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008028:	e105      	b.n	8008236 <UART_SetConfig+0x4d6>
 800802a:	bf00      	nop
 800802c:	40011000 	.word	0x40011000
 8008030:	40011400 	.word	0x40011400
 8008034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800803c:	2200      	movs	r2, #0
 800803e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008042:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800804a:	4642      	mov	r2, r8
 800804c:	464b      	mov	r3, r9
 800804e:	1891      	adds	r1, r2, r2
 8008050:	6239      	str	r1, [r7, #32]
 8008052:	415b      	adcs	r3, r3
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
 8008056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800805a:	4641      	mov	r1, r8
 800805c:	1854      	adds	r4, r2, r1
 800805e:	4649      	mov	r1, r9
 8008060:	eb43 0501 	adc.w	r5, r3, r1
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	00eb      	lsls	r3, r5, #3
 800806e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008072:	00e2      	lsls	r2, r4, #3
 8008074:	4614      	mov	r4, r2
 8008076:	461d      	mov	r5, r3
 8008078:	4643      	mov	r3, r8
 800807a:	18e3      	adds	r3, r4, r3
 800807c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008080:	464b      	mov	r3, r9
 8008082:	eb45 0303 	adc.w	r3, r5, r3
 8008086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800808a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080a6:	4629      	mov	r1, r5
 80080a8:	008b      	lsls	r3, r1, #2
 80080aa:	4621      	mov	r1, r4
 80080ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b0:	4621      	mov	r1, r4
 80080b2:	008a      	lsls	r2, r1, #2
 80080b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080b8:	f7f8 f8fa 	bl	80002b0 <__aeabi_uldivmod>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4b60      	ldr	r3, [pc, #384]	; (8008244 <UART_SetConfig+0x4e4>)
 80080c2:	fba3 2302 	umull	r2, r3, r3, r2
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	011c      	lsls	r4, r3, #4
 80080ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080dc:	4642      	mov	r2, r8
 80080de:	464b      	mov	r3, r9
 80080e0:	1891      	adds	r1, r2, r2
 80080e2:	61b9      	str	r1, [r7, #24]
 80080e4:	415b      	adcs	r3, r3
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ec:	4641      	mov	r1, r8
 80080ee:	1851      	adds	r1, r2, r1
 80080f0:	6139      	str	r1, [r7, #16]
 80080f2:	4649      	mov	r1, r9
 80080f4:	414b      	adcs	r3, r1
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	f04f 0300 	mov.w	r3, #0
 8008100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008104:	4659      	mov	r1, fp
 8008106:	00cb      	lsls	r3, r1, #3
 8008108:	4651      	mov	r1, sl
 800810a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800810e:	4651      	mov	r1, sl
 8008110:	00ca      	lsls	r2, r1, #3
 8008112:	4610      	mov	r0, r2
 8008114:	4619      	mov	r1, r3
 8008116:	4603      	mov	r3, r0
 8008118:	4642      	mov	r2, r8
 800811a:	189b      	adds	r3, r3, r2
 800811c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008120:	464b      	mov	r3, r9
 8008122:	460a      	mov	r2, r1
 8008124:	eb42 0303 	adc.w	r3, r2, r3
 8008128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	67bb      	str	r3, [r7, #120]	; 0x78
 8008136:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008144:	4649      	mov	r1, r9
 8008146:	008b      	lsls	r3, r1, #2
 8008148:	4641      	mov	r1, r8
 800814a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814e:	4641      	mov	r1, r8
 8008150:	008a      	lsls	r2, r1, #2
 8008152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008156:	f7f8 f8ab 	bl	80002b0 <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4b39      	ldr	r3, [pc, #228]	; (8008244 <UART_SetConfig+0x4e4>)
 8008160:	fba3 1302 	umull	r1, r3, r3, r2
 8008164:	095b      	lsrs	r3, r3, #5
 8008166:	2164      	movs	r1, #100	; 0x64
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	3332      	adds	r3, #50	; 0x32
 8008172:	4a34      	ldr	r2, [pc, #208]	; (8008244 <UART_SetConfig+0x4e4>)
 8008174:	fba2 2303 	umull	r2, r3, r2, r3
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800817e:	441c      	add	r4, r3
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	2200      	movs	r2, #0
 8008186:	673b      	str	r3, [r7, #112]	; 0x70
 8008188:	677a      	str	r2, [r7, #116]	; 0x74
 800818a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800818e:	4642      	mov	r2, r8
 8008190:	464b      	mov	r3, r9
 8008192:	1891      	adds	r1, r2, r2
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	415b      	adcs	r3, r3
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800819e:	4641      	mov	r1, r8
 80081a0:	1851      	adds	r1, r2, r1
 80081a2:	6039      	str	r1, [r7, #0]
 80081a4:	4649      	mov	r1, r9
 80081a6:	414b      	adcs	r3, r1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081b6:	4659      	mov	r1, fp
 80081b8:	00cb      	lsls	r3, r1, #3
 80081ba:	4651      	mov	r1, sl
 80081bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081c0:	4651      	mov	r1, sl
 80081c2:	00ca      	lsls	r2, r1, #3
 80081c4:	4610      	mov	r0, r2
 80081c6:	4619      	mov	r1, r3
 80081c8:	4603      	mov	r3, r0
 80081ca:	4642      	mov	r2, r8
 80081cc:	189b      	adds	r3, r3, r2
 80081ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80081d0:	464b      	mov	r3, r9
 80081d2:	460a      	mov	r2, r1
 80081d4:	eb42 0303 	adc.w	r3, r2, r3
 80081d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	663b      	str	r3, [r7, #96]	; 0x60
 80081e4:	667a      	str	r2, [r7, #100]	; 0x64
 80081e6:	f04f 0200 	mov.w	r2, #0
 80081ea:	f04f 0300 	mov.w	r3, #0
 80081ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081f2:	4649      	mov	r1, r9
 80081f4:	008b      	lsls	r3, r1, #2
 80081f6:	4641      	mov	r1, r8
 80081f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081fc:	4641      	mov	r1, r8
 80081fe:	008a      	lsls	r2, r1, #2
 8008200:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008204:	f7f8 f854 	bl	80002b0 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <UART_SetConfig+0x4e4>)
 800820e:	fba3 1302 	umull	r1, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	2164      	movs	r1, #100	; 0x64
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	3332      	adds	r3, #50	; 0x32
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <UART_SetConfig+0x4e4>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4422      	add	r2, r4
 8008234:	609a      	str	r2, [r3, #8]
}
 8008236:	bf00      	nop
 8008238:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800823c:	46bd      	mov	sp, r7
 800823e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008242:	bf00      	nop
 8008244:	51eb851f 	.word	0x51eb851f

08008248 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	460a      	mov	r2, r1
 8008252:	80fb      	strh	r3, [r7, #6]
 8008254:	4613      	mov	r3, r2
 8008256:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 800825c:	797b      	ldrb	r3, [r7, #5]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f994 	bl	8008594 <VL53L1_WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4313      	orrs	r3, r2
 8008274:	73fb      	strb	r3, [r7, #15]
	return status;
 8008276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8008292:	2300      	movs	r3, #0
 8008294:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8008296:	232d      	movs	r3, #45	; 0x2d
 8008298:	73bb      	strb	r3, [r7, #14]
 800829a:	e011      	b.n	80082c0 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	b299      	uxth	r1, r3
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	3b2d      	subs	r3, #45	; 0x2d
 80082a4:	4a2c      	ldr	r2, [pc, #176]	; (8008358 <VL53L1X_SensorInit+0xd4>)
 80082a6:	5cd2      	ldrb	r2, [r2, r3]
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f972 	bl	8008594 <VL53L1_WrByte>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461a      	mov	r2, r3
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	3301      	adds	r3, #1
 80082be:	73bb      	strb	r3, [r7, #14]
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b87      	cmp	r3, #135	; 0x87
 80082c4:	d9ea      	bls.n	800829c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f889 	bl	80083e0 <VL53L1X_StartRanging>
 80082ce:	4603      	mov	r3, r0
 80082d0:	461a      	mov	r2, r3
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80082dc:	e00b      	b.n	80082f6 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80082de:	f107 020d 	add.w	r2, r7, #13
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f8aa 	bl	8008440 <VL53L1X_CheckForDataReady>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80082f6:	7b7b      	ldrb	r3, [r7, #13]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0f0      	beq.n	80082de <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f82c 	bl	800835c <VL53L1X_ClearInterrupt>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	4313      	orrs	r3, r2
 800830c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f87d 	bl	8008410 <VL53L1X_StopRanging>
 8008316:	4603      	mov	r3, r0
 8008318:	461a      	mov	r2, r3
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	4313      	orrs	r3, r2
 800831e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	2209      	movs	r2, #9
 8008324:	2108      	movs	r1, #8
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f934 	bl	8008594 <VL53L1_WrByte>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	4313      	orrs	r3, r2
 8008334:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	2200      	movs	r2, #0
 800833a:	210b      	movs	r1, #11
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f929 	bl	8008594 <VL53L1_WrByte>
 8008342:	4603      	mov	r3, r0
 8008344:	461a      	mov	r2, r3
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	4313      	orrs	r3, r2
 800834a:	73fb      	strb	r3, [r7, #15]
	return status;
 800834c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08009804 	.word	0x08009804

0800835c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	2201      	movs	r2, #1
 800836e:	2186      	movs	r1, #134	; 0x86
 8008370:	4618      	mov	r0, r3
 8008372:	f000 f90f 	bl	8008594 <VL53L1_WrByte>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	4313      	orrs	r3, r2
 800837e:	73fb      	strb	r3, [r7, #15]
	return status;
 8008380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800839c:	f107 020e 	add.w	r2, r7, #14
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	2130      	movs	r1, #48	; 0x30
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f921 	bl	80085ec <VL53L1_RdByte>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bf0c      	ite	eq
 80083c8:	2301      	moveq	r3, #1
 80083ca:	2300      	movne	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
	return status;
 80083d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	2240      	movs	r2, #64	; 0x40
 80083f2:	2187      	movs	r1, #135	; 0x87
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 f8cd 	bl	8008594 <VL53L1_WrByte>
 80083fa:	4603      	mov	r3, r0
 80083fc:	461a      	mov	r2, r3
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	4313      	orrs	r3, r2
 8008402:	73fb      	strb	r3, [r7, #15]
	return status;
 8008404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	2200      	movs	r2, #0
 8008422:	2187      	movs	r1, #135	; 0x87
 8008424:	4618      	mov	r0, r3
 8008426:	f000 f8b5 	bl	8008594 <VL53L1_WrByte>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	4313      	orrs	r3, r2
 8008432:	73fb      	strb	r3, [r7, #15]
	return status;
 8008434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	6039      	str	r1, [r7, #0]
 800844a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8008450:	f107 020d 	add.w	r2, r7, #13
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff97 	bl	800838c <VL53L1X_GetInterruptPolarity>
 800845e:	4603      	mov	r3, r0
 8008460:	461a      	mov	r2, r3
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	4313      	orrs	r3, r2
 8008466:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8008468:	f107 020e 	add.w	r2, r7, #14
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	2131      	movs	r1, #49	; 0x31
 8008470:	4618      	mov	r0, r3
 8008472:	f000 f8bb 	bl	80085ec <VL53L1_RdByte>
 8008476:	4603      	mov	r3, r0
 8008478:	461a      	mov	r2, r3
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	4313      	orrs	r3, r2
 800847e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8008480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10c      	bne.n	80084a2 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	7b7a      	ldrb	r2, [r7, #13]
 8008490:	4293      	cmp	r3, r2
 8008492:	d103      	bne.n	800849c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2201      	movs	r2, #1
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	e002      	b.n	80084a2 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80084a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	4603      	mov	r3, r0
 80084b6:	6039      	str	r1, [r7, #0]
 80084b8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80084c2:	f107 020e 	add.w	r2, r7, #14
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	21e5      	movs	r1, #229	; 0xe5
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f88e 	bl	80085ec <VL53L1_RdByte>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80084da:	7bba      	ldrb	r2, [r7, #14]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	701a      	strb	r2, [r3, #0]
	return status;
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80084fc:	f107 020c 	add.w	r2, r7, #12
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2196      	movs	r1, #150	; 0x96
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f8a9 	bl	800865c <VL53L1_RdWord>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4313      	orrs	r3, r2
 8008512:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8008514:	89ba      	ldrh	r2, [r7, #12]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	801a      	strh	r2, [r3, #0]
	return status;
 800851a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af02      	add	r7, sp, #8
 800852e:	4603      	mov	r3, r0
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	b29b      	uxth	r3, r3
 800853a:	89f9      	ldrh	r1, [r7, #14]
 800853c:	220a      	movs	r2, #10
 800853e:	9200      	str	r2, [sp, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	4805      	ldr	r0, [pc, #20]	; (8008558 <_I2CWrite+0x30>)
 8008544:	f7fb f898 	bl	8003678 <HAL_I2C_Master_Transmit>
 8008548:	4603      	mov	r3, r0
 800854a:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800854c:	697b      	ldr	r3, [r7, #20]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200000c4 	.word	0x200000c4

0800855c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af02      	add	r7, sp, #8
 8008562:	4603      	mov	r3, r0
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	b299      	uxth	r1, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	b29b      	uxth	r3, r3
 8008576:	220a      	movs	r2, #10
 8008578:	9200      	str	r2, [sp, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4804      	ldr	r0, [pc, #16]	; (8008590 <_I2CRead+0x34>)
 800857e:	f7fb f979 	bl	8003874 <HAL_I2C_Master_Receive>
 8008582:	4603      	mov	r3, r0
 8008584:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008586:	697b      	ldr	r3, [r7, #20]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	200000c4 	.word	0x200000c4

08008594 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	80fb      	strh	r3, [r7, #6]
 800859e:	460b      	mov	r3, r1
 80085a0:	80bb      	strh	r3, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80085aa:	88bb      	ldrh	r3, [r7, #4]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <VL53L1_WrByte+0x54>)
 80085b4:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80085b6:	88bb      	ldrh	r3, [r7, #4]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <VL53L1_WrByte+0x54>)
 80085bc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80085be:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <VL53L1_WrByte+0x54>)
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	2203      	movs	r2, #3
 80085c8:	4907      	ldr	r1, [pc, #28]	; (80085e8 <VL53L1_WrByte+0x54>)
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff ffac 	bl	8008528 <_I2CWrite>
 80085d0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80085d8:	23f3      	movs	r3, #243	; 0xf3
 80085da:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 80085dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	200003ac 	.word	0x200003ac

080085ec <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	80fb      	strh	r3, [r7, #6]
 80085f8:	460b      	mov	r3, r1
 80085fa:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008600:	88bb      	ldrh	r3, [r7, #4]
 8008602:	0a1b      	lsrs	r3, r3, #8
 8008604:	b29b      	uxth	r3, r3
 8008606:	b2da      	uxtb	r2, r3
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <VL53L1_RdByte+0x6c>)
 800860a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800860c:	88bb      	ldrh	r3, [r7, #4]
 800860e:	b2da      	uxtb	r2, r3
 8008610:	4b11      	ldr	r3, [pc, #68]	; (8008658 <VL53L1_RdByte+0x6c>)
 8008612:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	2202      	movs	r2, #2
 8008618:	490f      	ldr	r1, [pc, #60]	; (8008658 <VL53L1_RdByte+0x6c>)
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff ff84 	bl	8008528 <_I2CWrite>
 8008620:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008628:	23f3      	movs	r3, #243	; 0xf3
 800862a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800862c:	e00d      	b.n	800864a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	2201      	movs	r2, #1
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ff91 	bl	800855c <_I2CRead>
 800863a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008642:	23f3      	movs	r3, #243	; 0xf3
 8008644:	73fb      	strb	r3, [r7, #15]
 8008646:	e000      	b.n	800864a <VL53L1_RdByte+0x5e>
    }
done:
 8008648:	bf00      	nop
    return Status;
 800864a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200003ac 	.word	0x200003ac

0800865c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	603a      	str	r2, [r7, #0]
 8008666:	80fb      	strh	r3, [r7, #6]
 8008668:	460b      	mov	r3, r1
 800866a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008670:	88bb      	ldrh	r3, [r7, #4]
 8008672:	0a1b      	lsrs	r3, r3, #8
 8008674:	b29b      	uxth	r3, r3
 8008676:	b2da      	uxtb	r2, r3
 8008678:	4b18      	ldr	r3, [pc, #96]	; (80086dc <VL53L1_RdWord+0x80>)
 800867a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800867c:	88bb      	ldrh	r3, [r7, #4]
 800867e:	b2da      	uxtb	r2, r3
 8008680:	4b16      	ldr	r3, [pc, #88]	; (80086dc <VL53L1_RdWord+0x80>)
 8008682:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	2202      	movs	r2, #2
 8008688:	4914      	ldr	r1, [pc, #80]	; (80086dc <VL53L1_RdWord+0x80>)
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff ff4c 	bl	8008528 <_I2CWrite>
 8008690:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008698:	23f3      	movs	r3, #243	; 0xf3
 800869a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800869c:	e018      	b.n	80086d0 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	2202      	movs	r2, #2
 80086a2:	490e      	ldr	r1, [pc, #56]	; (80086dc <VL53L1_RdWord+0x80>)
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff ff59 	bl	800855c <_I2CRead>
 80086aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80086b2:	23f3      	movs	r3, #243	; 0xf3
 80086b4:	73fb      	strb	r3, [r7, #15]
        goto done;
 80086b6:	e00b      	b.n	80086d0 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80086b8:	4b08      	ldr	r3, [pc, #32]	; (80086dc <VL53L1_RdWord+0x80>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	4b06      	ldr	r3, [pc, #24]	; (80086dc <VL53L1_RdWord+0x80>)
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 80086d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200003ac 	.word	0x200003ac

080086e0 <calloc>:
 80086e0:	4b02      	ldr	r3, [pc, #8]	; (80086ec <calloc+0xc>)
 80086e2:	460a      	mov	r2, r1
 80086e4:	4601      	mov	r1, r0
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	f000 b834 	b.w	8008754 <_calloc_r>
 80086ec:	2000001c 	.word	0x2000001c

080086f0 <__errno>:
 80086f0:	4b01      	ldr	r3, [pc, #4]	; (80086f8 <__errno+0x8>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	2000001c 	.word	0x2000001c

080086fc <__libc_init_array>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4d0d      	ldr	r5, [pc, #52]	; (8008734 <__libc_init_array+0x38>)
 8008700:	4c0d      	ldr	r4, [pc, #52]	; (8008738 <__libc_init_array+0x3c>)
 8008702:	1b64      	subs	r4, r4, r5
 8008704:	10a4      	asrs	r4, r4, #2
 8008706:	2600      	movs	r6, #0
 8008708:	42a6      	cmp	r6, r4
 800870a:	d109      	bne.n	8008720 <__libc_init_array+0x24>
 800870c:	4d0b      	ldr	r5, [pc, #44]	; (800873c <__libc_init_array+0x40>)
 800870e:	4c0c      	ldr	r4, [pc, #48]	; (8008740 <__libc_init_array+0x44>)
 8008710:	f001 f83a 	bl	8009788 <_init>
 8008714:	1b64      	subs	r4, r4, r5
 8008716:	10a4      	asrs	r4, r4, #2
 8008718:	2600      	movs	r6, #0
 800871a:	42a6      	cmp	r6, r4
 800871c:	d105      	bne.n	800872a <__libc_init_array+0x2e>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	f855 3b04 	ldr.w	r3, [r5], #4
 8008724:	4798      	blx	r3
 8008726:	3601      	adds	r6, #1
 8008728:	e7ee      	b.n	8008708 <__libc_init_array+0xc>
 800872a:	f855 3b04 	ldr.w	r3, [r5], #4
 800872e:	4798      	blx	r3
 8008730:	3601      	adds	r6, #1
 8008732:	e7f2      	b.n	800871a <__libc_init_array+0x1e>
 8008734:	08009900 	.word	0x08009900
 8008738:	08009900 	.word	0x08009900
 800873c:	08009900 	.word	0x08009900
 8008740:	08009904 	.word	0x08009904

08008744 <memset>:
 8008744:	4402      	add	r2, r0
 8008746:	4603      	mov	r3, r0
 8008748:	4293      	cmp	r3, r2
 800874a:	d100      	bne.n	800874e <memset+0xa>
 800874c:	4770      	bx	lr
 800874e:	f803 1b01 	strb.w	r1, [r3], #1
 8008752:	e7f9      	b.n	8008748 <memset+0x4>

08008754 <_calloc_r>:
 8008754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008756:	fba1 2402 	umull	r2, r4, r1, r2
 800875a:	b94c      	cbnz	r4, 8008770 <_calloc_r+0x1c>
 800875c:	4611      	mov	r1, r2
 800875e:	9201      	str	r2, [sp, #4]
 8008760:	f000 f82e 	bl	80087c0 <_malloc_r>
 8008764:	9a01      	ldr	r2, [sp, #4]
 8008766:	4605      	mov	r5, r0
 8008768:	b930      	cbnz	r0, 8008778 <_calloc_r+0x24>
 800876a:	4628      	mov	r0, r5
 800876c:	b003      	add	sp, #12
 800876e:	bd30      	pop	{r4, r5, pc}
 8008770:	220c      	movs	r2, #12
 8008772:	6002      	str	r2, [r0, #0]
 8008774:	2500      	movs	r5, #0
 8008776:	e7f8      	b.n	800876a <_calloc_r+0x16>
 8008778:	4621      	mov	r1, r4
 800877a:	f7ff ffe3 	bl	8008744 <memset>
 800877e:	e7f4      	b.n	800876a <_calloc_r+0x16>

08008780 <sbrk_aligned>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4e0e      	ldr	r6, [pc, #56]	; (80087bc <sbrk_aligned+0x3c>)
 8008784:	460c      	mov	r4, r1
 8008786:	6831      	ldr	r1, [r6, #0]
 8008788:	4605      	mov	r5, r0
 800878a:	b911      	cbnz	r1, 8008792 <sbrk_aligned+0x12>
 800878c:	f000 f91a 	bl	80089c4 <_sbrk_r>
 8008790:	6030      	str	r0, [r6, #0]
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f915 	bl	80089c4 <_sbrk_r>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d00a      	beq.n	80087b4 <sbrk_aligned+0x34>
 800879e:	1cc4      	adds	r4, r0, #3
 80087a0:	f024 0403 	bic.w	r4, r4, #3
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d007      	beq.n	80087b8 <sbrk_aligned+0x38>
 80087a8:	1a21      	subs	r1, r4, r0
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f90a 	bl	80089c4 <_sbrk_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d101      	bne.n	80087b8 <sbrk_aligned+0x38>
 80087b4:	f04f 34ff 	mov.w	r4, #4294967295
 80087b8:	4620      	mov	r0, r4
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	200004b0 	.word	0x200004b0

080087c0 <_malloc_r>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	1ccd      	adds	r5, r1, #3
 80087c6:	f025 0503 	bic.w	r5, r5, #3
 80087ca:	3508      	adds	r5, #8
 80087cc:	2d0c      	cmp	r5, #12
 80087ce:	bf38      	it	cc
 80087d0:	250c      	movcc	r5, #12
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	4607      	mov	r7, r0
 80087d6:	db01      	blt.n	80087dc <_malloc_r+0x1c>
 80087d8:	42a9      	cmp	r1, r5
 80087da:	d905      	bls.n	80087e8 <_malloc_r+0x28>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	2600      	movs	r6, #0
 80087e2:	4630      	mov	r0, r6
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	4e2e      	ldr	r6, [pc, #184]	; (80088a4 <_malloc_r+0xe4>)
 80087ea:	f000 fbdb 	bl	8008fa4 <__malloc_lock>
 80087ee:	6833      	ldr	r3, [r6, #0]
 80087f0:	461c      	mov	r4, r3
 80087f2:	bb34      	cbnz	r4, 8008842 <_malloc_r+0x82>
 80087f4:	4629      	mov	r1, r5
 80087f6:	4638      	mov	r0, r7
 80087f8:	f7ff ffc2 	bl	8008780 <sbrk_aligned>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	4604      	mov	r4, r0
 8008800:	d14d      	bne.n	800889e <_malloc_r+0xde>
 8008802:	6834      	ldr	r4, [r6, #0]
 8008804:	4626      	mov	r6, r4
 8008806:	2e00      	cmp	r6, #0
 8008808:	d140      	bne.n	800888c <_malloc_r+0xcc>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	4631      	mov	r1, r6
 800880e:	4638      	mov	r0, r7
 8008810:	eb04 0803 	add.w	r8, r4, r3
 8008814:	f000 f8d6 	bl	80089c4 <_sbrk_r>
 8008818:	4580      	cmp	r8, r0
 800881a:	d13a      	bne.n	8008892 <_malloc_r+0xd2>
 800881c:	6821      	ldr	r1, [r4, #0]
 800881e:	3503      	adds	r5, #3
 8008820:	1a6d      	subs	r5, r5, r1
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	4629      	mov	r1, r5
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff ffa5 	bl	8008780 <sbrk_aligned>
 8008836:	3001      	adds	r0, #1
 8008838:	d02b      	beq.n	8008892 <_malloc_r+0xd2>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	442b      	add	r3, r5
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	e00e      	b.n	8008860 <_malloc_r+0xa0>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	1b52      	subs	r2, r2, r5
 8008846:	d41e      	bmi.n	8008886 <_malloc_r+0xc6>
 8008848:	2a0b      	cmp	r2, #11
 800884a:	d916      	bls.n	800887a <_malloc_r+0xba>
 800884c:	1961      	adds	r1, r4, r5
 800884e:	42a3      	cmp	r3, r4
 8008850:	6025      	str	r5, [r4, #0]
 8008852:	bf18      	it	ne
 8008854:	6059      	strne	r1, [r3, #4]
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	bf08      	it	eq
 800885a:	6031      	streq	r1, [r6, #0]
 800885c:	5162      	str	r2, [r4, r5]
 800885e:	604b      	str	r3, [r1, #4]
 8008860:	4638      	mov	r0, r7
 8008862:	f104 060b 	add.w	r6, r4, #11
 8008866:	f000 fba3 	bl	8008fb0 <__malloc_unlock>
 800886a:	f026 0607 	bic.w	r6, r6, #7
 800886e:	1d23      	adds	r3, r4, #4
 8008870:	1af2      	subs	r2, r6, r3
 8008872:	d0b6      	beq.n	80087e2 <_malloc_r+0x22>
 8008874:	1b9b      	subs	r3, r3, r6
 8008876:	50a3      	str	r3, [r4, r2]
 8008878:	e7b3      	b.n	80087e2 <_malloc_r+0x22>
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	42a3      	cmp	r3, r4
 800887e:	bf0c      	ite	eq
 8008880:	6032      	streq	r2, [r6, #0]
 8008882:	605a      	strne	r2, [r3, #4]
 8008884:	e7ec      	b.n	8008860 <_malloc_r+0xa0>
 8008886:	4623      	mov	r3, r4
 8008888:	6864      	ldr	r4, [r4, #4]
 800888a:	e7b2      	b.n	80087f2 <_malloc_r+0x32>
 800888c:	4634      	mov	r4, r6
 800888e:	6876      	ldr	r6, [r6, #4]
 8008890:	e7b9      	b.n	8008806 <_malloc_r+0x46>
 8008892:	230c      	movs	r3, #12
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	4638      	mov	r0, r7
 8008898:	f000 fb8a 	bl	8008fb0 <__malloc_unlock>
 800889c:	e7a1      	b.n	80087e2 <_malloc_r+0x22>
 800889e:	6025      	str	r5, [r4, #0]
 80088a0:	e7de      	b.n	8008860 <_malloc_r+0xa0>
 80088a2:	bf00      	nop
 80088a4:	200004ac 	.word	0x200004ac

080088a8 <iprintf>:
 80088a8:	b40f      	push	{r0, r1, r2, r3}
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <iprintf+0x2c>)
 80088ac:	b513      	push	{r0, r1, r4, lr}
 80088ae:	681c      	ldr	r4, [r3, #0]
 80088b0:	b124      	cbz	r4, 80088bc <iprintf+0x14>
 80088b2:	69a3      	ldr	r3, [r4, #24]
 80088b4:	b913      	cbnz	r3, 80088bc <iprintf+0x14>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 fa6e 	bl	8008d98 <__sinit>
 80088bc:	ab05      	add	r3, sp, #20
 80088be:	9a04      	ldr	r2, [sp, #16]
 80088c0:	68a1      	ldr	r1, [r4, #8]
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fbef 	bl	80090a8 <_vfiprintf_r>
 80088ca:	b002      	add	sp, #8
 80088cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d0:	b004      	add	sp, #16
 80088d2:	4770      	bx	lr
 80088d4:	2000001c 	.word	0x2000001c

080088d8 <_puts_r>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	460e      	mov	r6, r1
 80088dc:	4605      	mov	r5, r0
 80088de:	b118      	cbz	r0, 80088e8 <_puts_r+0x10>
 80088e0:	6983      	ldr	r3, [r0, #24]
 80088e2:	b90b      	cbnz	r3, 80088e8 <_puts_r+0x10>
 80088e4:	f000 fa58 	bl	8008d98 <__sinit>
 80088e8:	69ab      	ldr	r3, [r5, #24]
 80088ea:	68ac      	ldr	r4, [r5, #8]
 80088ec:	b913      	cbnz	r3, 80088f4 <_puts_r+0x1c>
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 fa52 	bl	8008d98 <__sinit>
 80088f4:	4b2c      	ldr	r3, [pc, #176]	; (80089a8 <_puts_r+0xd0>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d120      	bne.n	800893c <_puts_r+0x64>
 80088fa:	686c      	ldr	r4, [r5, #4]
 80088fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088fe:	07db      	lsls	r3, r3, #31
 8008900:	d405      	bmi.n	800890e <_puts_r+0x36>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	0598      	lsls	r0, r3, #22
 8008906:	d402      	bmi.n	800890e <_puts_r+0x36>
 8008908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800890a:	f000 fae3 	bl	8008ed4 <__retarget_lock_acquire_recursive>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	0719      	lsls	r1, r3, #28
 8008912:	d51d      	bpl.n	8008950 <_puts_r+0x78>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b1db      	cbz	r3, 8008950 <_puts_r+0x78>
 8008918:	3e01      	subs	r6, #1
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008920:	3b01      	subs	r3, #1
 8008922:	60a3      	str	r3, [r4, #8]
 8008924:	bb39      	cbnz	r1, 8008976 <_puts_r+0x9e>
 8008926:	2b00      	cmp	r3, #0
 8008928:	da38      	bge.n	800899c <_puts_r+0xc4>
 800892a:	4622      	mov	r2, r4
 800892c:	210a      	movs	r1, #10
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f858 	bl	80089e4 <__swbuf_r>
 8008934:	3001      	adds	r0, #1
 8008936:	d011      	beq.n	800895c <_puts_r+0x84>
 8008938:	250a      	movs	r5, #10
 800893a:	e011      	b.n	8008960 <_puts_r+0x88>
 800893c:	4b1b      	ldr	r3, [pc, #108]	; (80089ac <_puts_r+0xd4>)
 800893e:	429c      	cmp	r4, r3
 8008940:	d101      	bne.n	8008946 <_puts_r+0x6e>
 8008942:	68ac      	ldr	r4, [r5, #8]
 8008944:	e7da      	b.n	80088fc <_puts_r+0x24>
 8008946:	4b1a      	ldr	r3, [pc, #104]	; (80089b0 <_puts_r+0xd8>)
 8008948:	429c      	cmp	r4, r3
 800894a:	bf08      	it	eq
 800894c:	68ec      	ldreq	r4, [r5, #12]
 800894e:	e7d5      	b.n	80088fc <_puts_r+0x24>
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f898 	bl	8008a88 <__swsetup_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	d0dd      	beq.n	8008918 <_puts_r+0x40>
 800895c:	f04f 35ff 	mov.w	r5, #4294967295
 8008960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008962:	07da      	lsls	r2, r3, #31
 8008964:	d405      	bmi.n	8008972 <_puts_r+0x9a>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059b      	lsls	r3, r3, #22
 800896a:	d402      	bmi.n	8008972 <_puts_r+0x9a>
 800896c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800896e:	f000 fab2 	bl	8008ed6 <__retarget_lock_release_recursive>
 8008972:	4628      	mov	r0, r5
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	2b00      	cmp	r3, #0
 8008978:	da04      	bge.n	8008984 <_puts_r+0xac>
 800897a:	69a2      	ldr	r2, [r4, #24]
 800897c:	429a      	cmp	r2, r3
 800897e:	dc06      	bgt.n	800898e <_puts_r+0xb6>
 8008980:	290a      	cmp	r1, #10
 8008982:	d004      	beq.n	800898e <_puts_r+0xb6>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	6022      	str	r2, [r4, #0]
 800898a:	7019      	strb	r1, [r3, #0]
 800898c:	e7c5      	b.n	800891a <_puts_r+0x42>
 800898e:	4622      	mov	r2, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f827 	bl	80089e4 <__swbuf_r>
 8008996:	3001      	adds	r0, #1
 8008998:	d1bf      	bne.n	800891a <_puts_r+0x42>
 800899a:	e7df      	b.n	800895c <_puts_r+0x84>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	250a      	movs	r5, #10
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	701d      	strb	r5, [r3, #0]
 80089a6:	e7db      	b.n	8008960 <_puts_r+0x88>
 80089a8:	08009884 	.word	0x08009884
 80089ac:	080098a4 	.word	0x080098a4
 80089b0:	08009864 	.word	0x08009864

080089b4 <puts>:
 80089b4:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <puts+0xc>)
 80089b6:	4601      	mov	r1, r0
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f7ff bf8d 	b.w	80088d8 <_puts_r>
 80089be:	bf00      	nop
 80089c0:	2000001c 	.word	0x2000001c

080089c4 <_sbrk_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	; (80089e0 <_sbrk_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7f9 fab4 	bl	8001f3c <_sbrk>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_sbrk_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_sbrk_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	200004b8 	.word	0x200004b8

080089e4 <__swbuf_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	460e      	mov	r6, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	4605      	mov	r5, r0
 80089ec:	b118      	cbz	r0, 80089f6 <__swbuf_r+0x12>
 80089ee:	6983      	ldr	r3, [r0, #24]
 80089f0:	b90b      	cbnz	r3, 80089f6 <__swbuf_r+0x12>
 80089f2:	f000 f9d1 	bl	8008d98 <__sinit>
 80089f6:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <__swbuf_r+0x98>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	d12b      	bne.n	8008a54 <__swbuf_r+0x70>
 80089fc:	686c      	ldr	r4, [r5, #4]
 80089fe:	69a3      	ldr	r3, [r4, #24]
 8008a00:	60a3      	str	r3, [r4, #8]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	071a      	lsls	r2, r3, #28
 8008a06:	d52f      	bpl.n	8008a68 <__swbuf_r+0x84>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	b36b      	cbz	r3, 8008a68 <__swbuf_r+0x84>
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	1ac0      	subs	r0, r0, r3
 8008a12:	6963      	ldr	r3, [r4, #20]
 8008a14:	b2f6      	uxtb	r6, r6
 8008a16:	4283      	cmp	r3, r0
 8008a18:	4637      	mov	r7, r6
 8008a1a:	dc04      	bgt.n	8008a26 <__swbuf_r+0x42>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f926 	bl	8008c70 <_fflush_r>
 8008a24:	bb30      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	60a3      	str	r3, [r4, #8]
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	701e      	strb	r6, [r3, #0]
 8008a34:	6963      	ldr	r3, [r4, #20]
 8008a36:	3001      	adds	r0, #1
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	d004      	beq.n	8008a46 <__swbuf_r+0x62>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d506      	bpl.n	8008a50 <__swbuf_r+0x6c>
 8008a42:	2e0a      	cmp	r6, #10
 8008a44:	d104      	bne.n	8008a50 <__swbuf_r+0x6c>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f911 	bl	8008c70 <_fflush_r>
 8008a4e:	b988      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a50:	4638      	mov	r0, r7
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <__swbuf_r+0x9c>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d101      	bne.n	8008a5e <__swbuf_r+0x7a>
 8008a5a:	68ac      	ldr	r4, [r5, #8]
 8008a5c:	e7cf      	b.n	80089fe <__swbuf_r+0x1a>
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <__swbuf_r+0xa0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	bf08      	it	eq
 8008a64:	68ec      	ldreq	r4, [r5, #12]
 8008a66:	e7ca      	b.n	80089fe <__swbuf_r+0x1a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f80c 	bl	8008a88 <__swsetup_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0cb      	beq.n	8008a0c <__swbuf_r+0x28>
 8008a74:	f04f 37ff 	mov.w	r7, #4294967295
 8008a78:	e7ea      	b.n	8008a50 <__swbuf_r+0x6c>
 8008a7a:	bf00      	nop
 8008a7c:	08009884 	.word	0x08009884
 8008a80:	080098a4 	.word	0x080098a4
 8008a84:	08009864 	.word	0x08009864

08008a88 <__swsetup_r>:
 8008a88:	4b32      	ldr	r3, [pc, #200]	; (8008b54 <__swsetup_r+0xcc>)
 8008a8a:	b570      	push	{r4, r5, r6, lr}
 8008a8c:	681d      	ldr	r5, [r3, #0]
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	b125      	cbz	r5, 8008a9e <__swsetup_r+0x16>
 8008a94:	69ab      	ldr	r3, [r5, #24]
 8008a96:	b913      	cbnz	r3, 8008a9e <__swsetup_r+0x16>
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f000 f97d 	bl	8008d98 <__sinit>
 8008a9e:	4b2e      	ldr	r3, [pc, #184]	; (8008b58 <__swsetup_r+0xd0>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	d10f      	bne.n	8008ac4 <__swsetup_r+0x3c>
 8008aa4:	686c      	ldr	r4, [r5, #4]
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aac:	0719      	lsls	r1, r3, #28
 8008aae:	d42c      	bmi.n	8008b0a <__swsetup_r+0x82>
 8008ab0:	06dd      	lsls	r5, r3, #27
 8008ab2:	d411      	bmi.n	8008ad8 <__swsetup_r+0x50>
 8008ab4:	2309      	movs	r3, #9
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac2:	e03e      	b.n	8008b42 <__swsetup_r+0xba>
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <__swsetup_r+0xd4>)
 8008ac6:	429c      	cmp	r4, r3
 8008ac8:	d101      	bne.n	8008ace <__swsetup_r+0x46>
 8008aca:	68ac      	ldr	r4, [r5, #8]
 8008acc:	e7eb      	b.n	8008aa6 <__swsetup_r+0x1e>
 8008ace:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <__swsetup_r+0xd8>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	bf08      	it	eq
 8008ad4:	68ec      	ldreq	r4, [r5, #12]
 8008ad6:	e7e6      	b.n	8008aa6 <__swsetup_r+0x1e>
 8008ad8:	0758      	lsls	r0, r3, #29
 8008ada:	d512      	bpl.n	8008b02 <__swsetup_r+0x7a>
 8008adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ade:	b141      	cbz	r1, 8008af2 <__swsetup_r+0x6a>
 8008ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d002      	beq.n	8008aee <__swsetup_r+0x66>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 fa67 	bl	8008fbc <_free_r>
 8008aee:	2300      	movs	r3, #0
 8008af0:	6363      	str	r3, [r4, #52]	; 0x34
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	2300      	movs	r3, #0
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f043 0308 	orr.w	r3, r3, #8
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	b94b      	cbnz	r3, 8008b22 <__swsetup_r+0x9a>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b18:	d003      	beq.n	8008b22 <__swsetup_r+0x9a>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 fa01 	bl	8008f24 <__smakebuf_r>
 8008b22:	89a0      	ldrh	r0, [r4, #12]
 8008b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b28:	f010 0301 	ands.w	r3, r0, #1
 8008b2c:	d00a      	beq.n	8008b44 <__swsetup_r+0xbc>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60a3      	str	r3, [r4, #8]
 8008b32:	6963      	ldr	r3, [r4, #20]
 8008b34:	425b      	negs	r3, r3
 8008b36:	61a3      	str	r3, [r4, #24]
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	b943      	cbnz	r3, 8008b4e <__swsetup_r+0xc6>
 8008b3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b40:	d1ba      	bne.n	8008ab8 <__swsetup_r+0x30>
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	0781      	lsls	r1, r0, #30
 8008b46:	bf58      	it	pl
 8008b48:	6963      	ldrpl	r3, [r4, #20]
 8008b4a:	60a3      	str	r3, [r4, #8]
 8008b4c:	e7f4      	b.n	8008b38 <__swsetup_r+0xb0>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e7f7      	b.n	8008b42 <__swsetup_r+0xba>
 8008b52:	bf00      	nop
 8008b54:	2000001c 	.word	0x2000001c
 8008b58:	08009884 	.word	0x08009884
 8008b5c:	080098a4 	.word	0x080098a4
 8008b60:	08009864 	.word	0x08009864

08008b64 <__sflush_r>:
 8008b64:	898a      	ldrh	r2, [r1, #12]
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	0710      	lsls	r0, r2, #28
 8008b6e:	460c      	mov	r4, r1
 8008b70:	d458      	bmi.n	8008c24 <__sflush_r+0xc0>
 8008b72:	684b      	ldr	r3, [r1, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc05      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dc02      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d0f9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b90:	682f      	ldr	r7, [r5, #0]
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	d032      	beq.n	8008bfc <__sflush_r+0x98>
 8008b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	075a      	lsls	r2, r3, #29
 8008b9c:	d505      	bpl.n	8008baa <__sflush_r+0x46>
 8008b9e:	6863      	ldr	r3, [r4, #4]
 8008ba0:	1ac0      	subs	r0, r0, r3
 8008ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba4:	b10b      	cbz	r3, 8008baa <__sflush_r+0x46>
 8008ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba8:	1ac0      	subs	r0, r0, r3
 8008baa:	2300      	movs	r3, #0
 8008bac:	4602      	mov	r2, r0
 8008bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb0:	6a21      	ldr	r1, [r4, #32]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b0      	blx	r6
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	d106      	bne.n	8008bca <__sflush_r+0x66>
 8008bbc:	6829      	ldr	r1, [r5, #0]
 8008bbe:	291d      	cmp	r1, #29
 8008bc0:	d82c      	bhi.n	8008c1c <__sflush_r+0xb8>
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <__sflush_r+0x108>)
 8008bc4:	40ca      	lsrs	r2, r1
 8008bc6:	07d6      	lsls	r6, r2, #31
 8008bc8:	d528      	bpl.n	8008c1c <__sflush_r+0xb8>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	6062      	str	r2, [r4, #4]
 8008bce:	04d9      	lsls	r1, r3, #19
 8008bd0:	6922      	ldr	r2, [r4, #16]
 8008bd2:	6022      	str	r2, [r4, #0]
 8008bd4:	d504      	bpl.n	8008be0 <__sflush_r+0x7c>
 8008bd6:	1c42      	adds	r2, r0, #1
 8008bd8:	d101      	bne.n	8008bde <__sflush_r+0x7a>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	b903      	cbnz	r3, 8008be0 <__sflush_r+0x7c>
 8008bde:	6560      	str	r0, [r4, #84]	; 0x54
 8008be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008be2:	602f      	str	r7, [r5, #0]
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d0ca      	beq.n	8008b7e <__sflush_r+0x1a>
 8008be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bec:	4299      	cmp	r1, r3
 8008bee:	d002      	beq.n	8008bf6 <__sflush_r+0x92>
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 f9e3 	bl	8008fbc <_free_r>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bfa:	e7c1      	b.n	8008b80 <__sflush_r+0x1c>
 8008bfc:	6a21      	ldr	r1, [r4, #32]
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b0      	blx	r6
 8008c04:	1c41      	adds	r1, r0, #1
 8008c06:	d1c7      	bne.n	8008b98 <__sflush_r+0x34>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0c4      	beq.n	8008b98 <__sflush_r+0x34>
 8008c0e:	2b1d      	cmp	r3, #29
 8008c10:	d001      	beq.n	8008c16 <__sflush_r+0xb2>
 8008c12:	2b16      	cmp	r3, #22
 8008c14:	d101      	bne.n	8008c1a <__sflush_r+0xb6>
 8008c16:	602f      	str	r7, [r5, #0]
 8008c18:	e7b1      	b.n	8008b7e <__sflush_r+0x1a>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	e7ad      	b.n	8008b80 <__sflush_r+0x1c>
 8008c24:	690f      	ldr	r7, [r1, #16]
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	d0a9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008c2a:	0793      	lsls	r3, r2, #30
 8008c2c:	680e      	ldr	r6, [r1, #0]
 8008c2e:	bf08      	it	eq
 8008c30:	694b      	ldreq	r3, [r1, #20]
 8008c32:	600f      	str	r7, [r1, #0]
 8008c34:	bf18      	it	ne
 8008c36:	2300      	movne	r3, #0
 8008c38:	eba6 0807 	sub.w	r8, r6, r7
 8008c3c:	608b      	str	r3, [r1, #8]
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	dd9c      	ble.n	8008b7e <__sflush_r+0x1a>
 8008c44:	6a21      	ldr	r1, [r4, #32]
 8008c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c48:	4643      	mov	r3, r8
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dc06      	bgt.n	8008c62 <__sflush_r+0xfe>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e78e      	b.n	8008b80 <__sflush_r+0x1c>
 8008c62:	4407      	add	r7, r0
 8008c64:	eba8 0800 	sub.w	r8, r8, r0
 8008c68:	e7e9      	b.n	8008c3e <__sflush_r+0xda>
 8008c6a:	bf00      	nop
 8008c6c:	20400001 	.word	0x20400001

08008c70 <_fflush_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	4605      	mov	r5, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	b913      	cbnz	r3, 8008c80 <_fflush_r+0x10>
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	b118      	cbz	r0, 8008c8a <_fflush_r+0x1a>
 8008c82:	6983      	ldr	r3, [r0, #24]
 8008c84:	b90b      	cbnz	r3, 8008c8a <_fflush_r+0x1a>
 8008c86:	f000 f887 	bl	8008d98 <__sinit>
 8008c8a:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <_fflush_r+0x6c>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d11b      	bne.n	8008cc8 <_fflush_r+0x58>
 8008c90:	686c      	ldr	r4, [r5, #4]
 8008c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0ef      	beq.n	8008c7a <_fflush_r+0xa>
 8008c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c9c:	07d0      	lsls	r0, r2, #31
 8008c9e:	d404      	bmi.n	8008caa <_fflush_r+0x3a>
 8008ca0:	0599      	lsls	r1, r3, #22
 8008ca2:	d402      	bmi.n	8008caa <_fflush_r+0x3a>
 8008ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca6:	f000 f915 	bl	8008ed4 <__retarget_lock_acquire_recursive>
 8008caa:	4628      	mov	r0, r5
 8008cac:	4621      	mov	r1, r4
 8008cae:	f7ff ff59 	bl	8008b64 <__sflush_r>
 8008cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cb4:	07da      	lsls	r2, r3, #31
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	d4e0      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	059b      	lsls	r3, r3, #22
 8008cbe:	d4dd      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc2:	f000 f908 	bl	8008ed6 <__retarget_lock_release_recursive>
 8008cc6:	e7d9      	b.n	8008c7c <_fflush_r+0xc>
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <_fflush_r+0x70>)
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	d101      	bne.n	8008cd2 <_fflush_r+0x62>
 8008cce:	68ac      	ldr	r4, [r5, #8]
 8008cd0:	e7df      	b.n	8008c92 <_fflush_r+0x22>
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <_fflush_r+0x74>)
 8008cd4:	429c      	cmp	r4, r3
 8008cd6:	bf08      	it	eq
 8008cd8:	68ec      	ldreq	r4, [r5, #12]
 8008cda:	e7da      	b.n	8008c92 <_fflush_r+0x22>
 8008cdc:	08009884 	.word	0x08009884
 8008ce0:	080098a4 	.word	0x080098a4
 8008ce4:	08009864 	.word	0x08009864

08008ce8 <std>:
 8008ce8:	2300      	movs	r3, #0
 8008cea:	b510      	push	{r4, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	e9c0 3300 	strd	r3, r3, [r0]
 8008cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf6:	6083      	str	r3, [r0, #8]
 8008cf8:	8181      	strh	r1, [r0, #12]
 8008cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008cfc:	81c2      	strh	r2, [r0, #14]
 8008cfe:	6183      	str	r3, [r0, #24]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2208      	movs	r2, #8
 8008d04:	305c      	adds	r0, #92	; 0x5c
 8008d06:	f7ff fd1d 	bl	8008744 <memset>
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <std+0x38>)
 8008d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <std+0x3c>)
 8008d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <std+0x40>)
 8008d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <std+0x44>)
 8008d18:	6224      	str	r4, [r4, #32]
 8008d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	bf00      	nop
 8008d20:	08009631 	.word	0x08009631
 8008d24:	08009653 	.word	0x08009653
 8008d28:	0800968b 	.word	0x0800968b
 8008d2c:	080096af 	.word	0x080096af

08008d30 <_cleanup_r>:
 8008d30:	4901      	ldr	r1, [pc, #4]	; (8008d38 <_cleanup_r+0x8>)
 8008d32:	f000 b8af 	b.w	8008e94 <_fwalk_reent>
 8008d36:	bf00      	nop
 8008d38:	08008c71 	.word	0x08008c71

08008d3c <__sfmoreglue>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	2268      	movs	r2, #104	; 0x68
 8008d40:	1e4d      	subs	r5, r1, #1
 8008d42:	4355      	muls	r5, r2
 8008d44:	460e      	mov	r6, r1
 8008d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d4a:	f7ff fd39 	bl	80087c0 <_malloc_r>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	b140      	cbz	r0, 8008d64 <__sfmoreglue+0x28>
 8008d52:	2100      	movs	r1, #0
 8008d54:	e9c0 1600 	strd	r1, r6, [r0]
 8008d58:	300c      	adds	r0, #12
 8008d5a:	60a0      	str	r0, [r4, #8]
 8008d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d60:	f7ff fcf0 	bl	8008744 <memset>
 8008d64:	4620      	mov	r0, r4
 8008d66:	bd70      	pop	{r4, r5, r6, pc}

08008d68 <__sfp_lock_acquire>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__sfp_lock_acquire+0x8>)
 8008d6a:	f000 b8b3 	b.w	8008ed4 <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	200004b5 	.word	0x200004b5

08008d74 <__sfp_lock_release>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__sfp_lock_release+0x8>)
 8008d76:	f000 b8ae 	b.w	8008ed6 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	200004b5 	.word	0x200004b5

08008d80 <__sinit_lock_acquire>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__sinit_lock_acquire+0x8>)
 8008d82:	f000 b8a7 	b.w	8008ed4 <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	200004b6 	.word	0x200004b6

08008d8c <__sinit_lock_release>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__sinit_lock_release+0x8>)
 8008d8e:	f000 b8a2 	b.w	8008ed6 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	200004b6 	.word	0x200004b6

08008d98 <__sinit>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	f7ff fff0 	bl	8008d80 <__sinit_lock_acquire>
 8008da0:	69a3      	ldr	r3, [r4, #24]
 8008da2:	b11b      	cbz	r3, 8008dac <__sinit+0x14>
 8008da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da8:	f7ff bff0 	b.w	8008d8c <__sinit_lock_release>
 8008dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008db0:	6523      	str	r3, [r4, #80]	; 0x50
 8008db2:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <__sinit+0x68>)
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <__sinit+0x6c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	bf04      	itt	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	61a3      	streq	r3, [r4, #24]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f820 	bl	8008e08 <__sfp>
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 f81c 	bl	8008e08 <__sfp>
 8008dd0:	60a0      	str	r0, [r4, #8]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f818 	bl	8008e08 <__sfp>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	60e0      	str	r0, [r4, #12]
 8008ddc:	2104      	movs	r1, #4
 8008dde:	6860      	ldr	r0, [r4, #4]
 8008de0:	f7ff ff82 	bl	8008ce8 <std>
 8008de4:	68a0      	ldr	r0, [r4, #8]
 8008de6:	2201      	movs	r2, #1
 8008de8:	2109      	movs	r1, #9
 8008dea:	f7ff ff7d 	bl	8008ce8 <std>
 8008dee:	68e0      	ldr	r0, [r4, #12]
 8008df0:	2202      	movs	r2, #2
 8008df2:	2112      	movs	r1, #18
 8008df4:	f7ff ff78 	bl	8008ce8 <std>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	e7d2      	b.n	8008da4 <__sinit+0xc>
 8008dfe:	bf00      	nop
 8008e00:	08009860 	.word	0x08009860
 8008e04:	08008d31 	.word	0x08008d31

08008e08 <__sfp>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	f7ff ffac 	bl	8008d68 <__sfp_lock_acquire>
 8008e10:	4b1e      	ldr	r3, [pc, #120]	; (8008e8c <__sfp+0x84>)
 8008e12:	681e      	ldr	r6, [r3, #0]
 8008e14:	69b3      	ldr	r3, [r6, #24]
 8008e16:	b913      	cbnz	r3, 8008e1e <__sfp+0x16>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff ffbd 	bl	8008d98 <__sinit>
 8008e1e:	3648      	adds	r6, #72	; 0x48
 8008e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	d503      	bpl.n	8008e30 <__sfp+0x28>
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	b30b      	cbz	r3, 8008e70 <__sfp+0x68>
 8008e2c:	6836      	ldr	r6, [r6, #0]
 8008e2e:	e7f7      	b.n	8008e20 <__sfp+0x18>
 8008e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e34:	b9d5      	cbnz	r5, 8008e6c <__sfp+0x64>
 8008e36:	4b16      	ldr	r3, [pc, #88]	; (8008e90 <__sfp+0x88>)
 8008e38:	60e3      	str	r3, [r4, #12]
 8008e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e40:	f000 f847 	bl	8008ed2 <__retarget_lock_init_recursive>
 8008e44:	f7ff ff96 	bl	8008d74 <__sfp_lock_release>
 8008e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e50:	6025      	str	r5, [r4, #0]
 8008e52:	61a5      	str	r5, [r4, #24]
 8008e54:	2208      	movs	r2, #8
 8008e56:	4629      	mov	r1, r5
 8008e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e5c:	f7ff fc72 	bl	8008744 <memset>
 8008e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e68:	4620      	mov	r0, r4
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6c:	3468      	adds	r4, #104	; 0x68
 8008e6e:	e7d9      	b.n	8008e24 <__sfp+0x1c>
 8008e70:	2104      	movs	r1, #4
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff62 	bl	8008d3c <__sfmoreglue>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	6030      	str	r0, [r6, #0]
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1d5      	bne.n	8008e2c <__sfp+0x24>
 8008e80:	f7ff ff78 	bl	8008d74 <__sfp_lock_release>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	e7ee      	b.n	8008e68 <__sfp+0x60>
 8008e8a:	bf00      	nop
 8008e8c:	08009860 	.word	0x08009860
 8008e90:	ffff0001 	.word	0xffff0001

08008e94 <_fwalk_reent>:
 8008e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e98:	4606      	mov	r6, r0
 8008e9a:	4688      	mov	r8, r1
 8008e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ea0:	2700      	movs	r7, #0
 8008ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eaa:	d505      	bpl.n	8008eb8 <_fwalk_reent+0x24>
 8008eac:	6824      	ldr	r4, [r4, #0]
 8008eae:	2c00      	cmp	r4, #0
 8008eb0:	d1f7      	bne.n	8008ea2 <_fwalk_reent+0xe>
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb8:	89ab      	ldrh	r3, [r5, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d907      	bls.n	8008ece <_fwalk_reent+0x3a>
 8008ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	d003      	beq.n	8008ece <_fwalk_reent+0x3a>
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	47c0      	blx	r8
 8008ecc:	4307      	orrs	r7, r0
 8008ece:	3568      	adds	r5, #104	; 0x68
 8008ed0:	e7e9      	b.n	8008ea6 <_fwalk_reent+0x12>

08008ed2 <__retarget_lock_init_recursive>:
 8008ed2:	4770      	bx	lr

08008ed4 <__retarget_lock_acquire_recursive>:
 8008ed4:	4770      	bx	lr

08008ed6 <__retarget_lock_release_recursive>:
 8008ed6:	4770      	bx	lr

08008ed8 <__swhatbuf_r>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	460e      	mov	r6, r1
 8008edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	b096      	sub	sp, #88	; 0x58
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	461d      	mov	r5, r3
 8008ee8:	da08      	bge.n	8008efc <__swhatbuf_r+0x24>
 8008eea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	061a      	lsls	r2, r3, #24
 8008ef4:	d410      	bmi.n	8008f18 <__swhatbuf_r+0x40>
 8008ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efa:	e00e      	b.n	8008f1a <__swhatbuf_r+0x42>
 8008efc:	466a      	mov	r2, sp
 8008efe:	f000 fbfd 	bl	80096fc <_fstat_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	dbf1      	blt.n	8008eea <__swhatbuf_r+0x12>
 8008f06:	9a01      	ldr	r2, [sp, #4]
 8008f08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f10:	425a      	negs	r2, r3
 8008f12:	415a      	adcs	r2, r3
 8008f14:	602a      	str	r2, [r5, #0]
 8008f16:	e7ee      	b.n	8008ef6 <__swhatbuf_r+0x1e>
 8008f18:	2340      	movs	r3, #64	; 0x40
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	b016      	add	sp, #88	; 0x58
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f24 <__smakebuf_r>:
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f28:	079d      	lsls	r5, r3, #30
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	d507      	bpl.n	8008f40 <__smakebuf_r+0x1c>
 8008f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	ab01      	add	r3, sp, #4
 8008f42:	466a      	mov	r2, sp
 8008f44:	f7ff ffc8 	bl	8008ed8 <__swhatbuf_r>
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff fc37 	bl	80087c0 <_malloc_r>
 8008f52:	b948      	cbnz	r0, 8008f68 <__smakebuf_r+0x44>
 8008f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d4ef      	bmi.n	8008f3c <__smakebuf_r+0x18>
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	e7e3      	b.n	8008f30 <__smakebuf_r+0xc>
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <__smakebuf_r+0x7c>)
 8008f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	6120      	str	r0, [r4, #16]
 8008f7e:	b15b      	cbz	r3, 8008f98 <__smakebuf_r+0x74>
 8008f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 fbcb 	bl	8009720 <_isatty_r>
 8008f8a:	b128      	cbz	r0, 8008f98 <__smakebuf_r+0x74>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	89a0      	ldrh	r0, [r4, #12]
 8008f9a:	4305      	orrs	r5, r0
 8008f9c:	81a5      	strh	r5, [r4, #12]
 8008f9e:	e7cd      	b.n	8008f3c <__smakebuf_r+0x18>
 8008fa0:	08008d31 	.word	0x08008d31

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff bf95 	b.w	8008ed4 <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	200004b4 	.word	0x200004b4

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff bf90 	b.w	8008ed6 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	200004b4 	.word	0x200004b4

08008fbc <_free_r>:
 8008fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_free_r+0x90>
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	9001      	str	r0, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f1a1 0404 	sub.w	r4, r1, #4
 8008fce:	bfb8      	it	lt
 8008fd0:	18e4      	addlt	r4, r4, r3
 8008fd2:	f7ff ffe7 	bl	8008fa4 <__malloc_lock>
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <_free_r+0x94>)
 8008fd8:	9801      	ldr	r0, [sp, #4]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x30>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	b003      	add	sp, #12
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	f7ff bfe2 	b.w	8008fb0 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x46>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x22>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x50>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x46>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x70>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x26>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x26>
 800902c:	d902      	bls.n	8009034 <_free_r+0x78>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x26>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x26>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	200004ac 	.word	0x200004ac

08009054 <__sfputc_r>:
 8009054:	6893      	ldr	r3, [r2, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	b410      	push	{r4}
 800905c:	6093      	str	r3, [r2, #8]
 800905e:	da08      	bge.n	8009072 <__sfputc_r+0x1e>
 8009060:	6994      	ldr	r4, [r2, #24]
 8009062:	42a3      	cmp	r3, r4
 8009064:	db01      	blt.n	800906a <__sfputc_r+0x16>
 8009066:	290a      	cmp	r1, #10
 8009068:	d103      	bne.n	8009072 <__sfputc_r+0x1e>
 800906a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800906e:	f7ff bcb9 	b.w	80089e4 <__swbuf_r>
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	1c58      	adds	r0, r3, #1
 8009076:	6010      	str	r0, [r2, #0]
 8009078:	7019      	strb	r1, [r3, #0]
 800907a:	4608      	mov	r0, r1
 800907c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009080:	4770      	bx	lr

08009082 <__sfputs_r>:
 8009082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009084:	4606      	mov	r6, r0
 8009086:	460f      	mov	r7, r1
 8009088:	4614      	mov	r4, r2
 800908a:	18d5      	adds	r5, r2, r3
 800908c:	42ac      	cmp	r4, r5
 800908e:	d101      	bne.n	8009094 <__sfputs_r+0x12>
 8009090:	2000      	movs	r0, #0
 8009092:	e007      	b.n	80090a4 <__sfputs_r+0x22>
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	463a      	mov	r2, r7
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff ffda 	bl	8009054 <__sfputc_r>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d1f3      	bne.n	800908c <__sfputs_r+0xa>
 80090a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090a8 <_vfiprintf_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	460d      	mov	r5, r1
 80090ae:	b09d      	sub	sp, #116	; 0x74
 80090b0:	4614      	mov	r4, r2
 80090b2:	4698      	mov	r8, r3
 80090b4:	4606      	mov	r6, r0
 80090b6:	b118      	cbz	r0, 80090c0 <_vfiprintf_r+0x18>
 80090b8:	6983      	ldr	r3, [r0, #24]
 80090ba:	b90b      	cbnz	r3, 80090c0 <_vfiprintf_r+0x18>
 80090bc:	f7ff fe6c 	bl	8008d98 <__sinit>
 80090c0:	4b89      	ldr	r3, [pc, #548]	; (80092e8 <_vfiprintf_r+0x240>)
 80090c2:	429d      	cmp	r5, r3
 80090c4:	d11b      	bne.n	80090fe <_vfiprintf_r+0x56>
 80090c6:	6875      	ldr	r5, [r6, #4]
 80090c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ca:	07d9      	lsls	r1, r3, #31
 80090cc:	d405      	bmi.n	80090da <_vfiprintf_r+0x32>
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	059a      	lsls	r2, r3, #22
 80090d2:	d402      	bmi.n	80090da <_vfiprintf_r+0x32>
 80090d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d6:	f7ff fefd 	bl	8008ed4 <__retarget_lock_acquire_recursive>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	071b      	lsls	r3, r3, #28
 80090de:	d501      	bpl.n	80090e4 <_vfiprintf_r+0x3c>
 80090e0:	692b      	ldr	r3, [r5, #16]
 80090e2:	b9eb      	cbnz	r3, 8009120 <_vfiprintf_r+0x78>
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff fcce 	bl	8008a88 <__swsetup_r>
 80090ec:	b1c0      	cbz	r0, 8009120 <_vfiprintf_r+0x78>
 80090ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f0:	07dc      	lsls	r4, r3, #31
 80090f2:	d50e      	bpl.n	8009112 <_vfiprintf_r+0x6a>
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	b01d      	add	sp, #116	; 0x74
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	4b7b      	ldr	r3, [pc, #492]	; (80092ec <_vfiprintf_r+0x244>)
 8009100:	429d      	cmp	r5, r3
 8009102:	d101      	bne.n	8009108 <_vfiprintf_r+0x60>
 8009104:	68b5      	ldr	r5, [r6, #8]
 8009106:	e7df      	b.n	80090c8 <_vfiprintf_r+0x20>
 8009108:	4b79      	ldr	r3, [pc, #484]	; (80092f0 <_vfiprintf_r+0x248>)
 800910a:	429d      	cmp	r5, r3
 800910c:	bf08      	it	eq
 800910e:	68f5      	ldreq	r5, [r6, #12]
 8009110:	e7da      	b.n	80090c8 <_vfiprintf_r+0x20>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d4ed      	bmi.n	80090f4 <_vfiprintf_r+0x4c>
 8009118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911a:	f7ff fedc 	bl	8008ed6 <__retarget_lock_release_recursive>
 800911e:	e7e9      	b.n	80090f4 <_vfiprintf_r+0x4c>
 8009120:	2300      	movs	r3, #0
 8009122:	9309      	str	r3, [sp, #36]	; 0x24
 8009124:	2320      	movs	r3, #32
 8009126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800912a:	f8cd 800c 	str.w	r8, [sp, #12]
 800912e:	2330      	movs	r3, #48	; 0x30
 8009130:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092f4 <_vfiprintf_r+0x24c>
 8009134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009138:	f04f 0901 	mov.w	r9, #1
 800913c:	4623      	mov	r3, r4
 800913e:	469a      	mov	sl, r3
 8009140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009144:	b10a      	cbz	r2, 800914a <_vfiprintf_r+0xa2>
 8009146:	2a25      	cmp	r2, #37	; 0x25
 8009148:	d1f9      	bne.n	800913e <_vfiprintf_r+0x96>
 800914a:	ebba 0b04 	subs.w	fp, sl, r4
 800914e:	d00b      	beq.n	8009168 <_vfiprintf_r+0xc0>
 8009150:	465b      	mov	r3, fp
 8009152:	4622      	mov	r2, r4
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ff93 	bl	8009082 <__sfputs_r>
 800915c:	3001      	adds	r0, #1
 800915e:	f000 80aa 	beq.w	80092b6 <_vfiprintf_r+0x20e>
 8009162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009164:	445a      	add	r2, fp
 8009166:	9209      	str	r2, [sp, #36]	; 0x24
 8009168:	f89a 3000 	ldrb.w	r3, [sl]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80a2 	beq.w	80092b6 <_vfiprintf_r+0x20e>
 8009172:	2300      	movs	r3, #0
 8009174:	f04f 32ff 	mov.w	r2, #4294967295
 8009178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800917c:	f10a 0a01 	add.w	sl, sl, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	9307      	str	r3, [sp, #28]
 8009184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009188:	931a      	str	r3, [sp, #104]	; 0x68
 800918a:	4654      	mov	r4, sl
 800918c:	2205      	movs	r2, #5
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4858      	ldr	r0, [pc, #352]	; (80092f4 <_vfiprintf_r+0x24c>)
 8009194:	f7f7 f83c 	bl	8000210 <memchr>
 8009198:	9a04      	ldr	r2, [sp, #16]
 800919a:	b9d8      	cbnz	r0, 80091d4 <_vfiprintf_r+0x12c>
 800919c:	06d1      	lsls	r1, r2, #27
 800919e:	bf44      	itt	mi
 80091a0:	2320      	movmi	r3, #32
 80091a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a6:	0713      	lsls	r3, r2, #28
 80091a8:	bf44      	itt	mi
 80091aa:	232b      	movmi	r3, #43	; 0x2b
 80091ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b0:	f89a 3000 	ldrb.w	r3, [sl]
 80091b4:	2b2a      	cmp	r3, #42	; 0x2a
 80091b6:	d015      	beq.n	80091e4 <_vfiprintf_r+0x13c>
 80091b8:	9a07      	ldr	r2, [sp, #28]
 80091ba:	4654      	mov	r4, sl
 80091bc:	2000      	movs	r0, #0
 80091be:	f04f 0c0a 	mov.w	ip, #10
 80091c2:	4621      	mov	r1, r4
 80091c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c8:	3b30      	subs	r3, #48	; 0x30
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d94e      	bls.n	800926c <_vfiprintf_r+0x1c4>
 80091ce:	b1b0      	cbz	r0, 80091fe <_vfiprintf_r+0x156>
 80091d0:	9207      	str	r2, [sp, #28]
 80091d2:	e014      	b.n	80091fe <_vfiprintf_r+0x156>
 80091d4:	eba0 0308 	sub.w	r3, r0, r8
 80091d8:	fa09 f303 	lsl.w	r3, r9, r3
 80091dc:	4313      	orrs	r3, r2
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	46a2      	mov	sl, r4
 80091e2:	e7d2      	b.n	800918a <_vfiprintf_r+0xe2>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	1d19      	adds	r1, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	9103      	str	r1, [sp, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfbb      	ittet	lt
 80091f0:	425b      	neglt	r3, r3
 80091f2:	f042 0202 	orrlt.w	r2, r2, #2
 80091f6:	9307      	strge	r3, [sp, #28]
 80091f8:	9307      	strlt	r3, [sp, #28]
 80091fa:	bfb8      	it	lt
 80091fc:	9204      	strlt	r2, [sp, #16]
 80091fe:	7823      	ldrb	r3, [r4, #0]
 8009200:	2b2e      	cmp	r3, #46	; 0x2e
 8009202:	d10c      	bne.n	800921e <_vfiprintf_r+0x176>
 8009204:	7863      	ldrb	r3, [r4, #1]
 8009206:	2b2a      	cmp	r3, #42	; 0x2a
 8009208:	d135      	bne.n	8009276 <_vfiprintf_r+0x1ce>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	1d1a      	adds	r2, r3, #4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9203      	str	r2, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfb8      	it	lt
 8009216:	f04f 33ff 	movlt.w	r3, #4294967295
 800921a:	3402      	adds	r4, #2
 800921c:	9305      	str	r3, [sp, #20]
 800921e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009304 <_vfiprintf_r+0x25c>
 8009222:	7821      	ldrb	r1, [r4, #0]
 8009224:	2203      	movs	r2, #3
 8009226:	4650      	mov	r0, sl
 8009228:	f7f6 fff2 	bl	8000210 <memchr>
 800922c:	b140      	cbz	r0, 8009240 <_vfiprintf_r+0x198>
 800922e:	2340      	movs	r3, #64	; 0x40
 8009230:	eba0 000a 	sub.w	r0, r0, sl
 8009234:	fa03 f000 	lsl.w	r0, r3, r0
 8009238:	9b04      	ldr	r3, [sp, #16]
 800923a:	4303      	orrs	r3, r0
 800923c:	3401      	adds	r4, #1
 800923e:	9304      	str	r3, [sp, #16]
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	482c      	ldr	r0, [pc, #176]	; (80092f8 <_vfiprintf_r+0x250>)
 8009246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800924a:	2206      	movs	r2, #6
 800924c:	f7f6 ffe0 	bl	8000210 <memchr>
 8009250:	2800      	cmp	r0, #0
 8009252:	d03f      	beq.n	80092d4 <_vfiprintf_r+0x22c>
 8009254:	4b29      	ldr	r3, [pc, #164]	; (80092fc <_vfiprintf_r+0x254>)
 8009256:	bb1b      	cbnz	r3, 80092a0 <_vfiprintf_r+0x1f8>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	3307      	adds	r3, #7
 800925c:	f023 0307 	bic.w	r3, r3, #7
 8009260:	3308      	adds	r3, #8
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	443b      	add	r3, r7
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	e767      	b.n	800913c <_vfiprintf_r+0x94>
 800926c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009270:	460c      	mov	r4, r1
 8009272:	2001      	movs	r0, #1
 8009274:	e7a5      	b.n	80091c2 <_vfiprintf_r+0x11a>
 8009276:	2300      	movs	r3, #0
 8009278:	3401      	adds	r4, #1
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	4619      	mov	r1, r3
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4620      	mov	r0, r4
 8009284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009288:	3a30      	subs	r2, #48	; 0x30
 800928a:	2a09      	cmp	r2, #9
 800928c:	d903      	bls.n	8009296 <_vfiprintf_r+0x1ee>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0c5      	beq.n	800921e <_vfiprintf_r+0x176>
 8009292:	9105      	str	r1, [sp, #20]
 8009294:	e7c3      	b.n	800921e <_vfiprintf_r+0x176>
 8009296:	fb0c 2101 	mla	r1, ip, r1, r2
 800929a:	4604      	mov	r4, r0
 800929c:	2301      	movs	r3, #1
 800929e:	e7f0      	b.n	8009282 <_vfiprintf_r+0x1da>
 80092a0:	ab03      	add	r3, sp, #12
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	462a      	mov	r2, r5
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <_vfiprintf_r+0x258>)
 80092a8:	a904      	add	r1, sp, #16
 80092aa:	4630      	mov	r0, r6
 80092ac:	f3af 8000 	nop.w
 80092b0:	4607      	mov	r7, r0
 80092b2:	1c78      	adds	r0, r7, #1
 80092b4:	d1d6      	bne.n	8009264 <_vfiprintf_r+0x1bc>
 80092b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d405      	bmi.n	80092c8 <_vfiprintf_r+0x220>
 80092bc:	89ab      	ldrh	r3, [r5, #12]
 80092be:	059a      	lsls	r2, r3, #22
 80092c0:	d402      	bmi.n	80092c8 <_vfiprintf_r+0x220>
 80092c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c4:	f7ff fe07 	bl	8008ed6 <__retarget_lock_release_recursive>
 80092c8:	89ab      	ldrh	r3, [r5, #12]
 80092ca:	065b      	lsls	r3, r3, #25
 80092cc:	f53f af12 	bmi.w	80090f4 <_vfiprintf_r+0x4c>
 80092d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d2:	e711      	b.n	80090f8 <_vfiprintf_r+0x50>
 80092d4:	ab03      	add	r3, sp, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	462a      	mov	r2, r5
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <_vfiprintf_r+0x258>)
 80092dc:	a904      	add	r1, sp, #16
 80092de:	4630      	mov	r0, r6
 80092e0:	f000 f880 	bl	80093e4 <_printf_i>
 80092e4:	e7e4      	b.n	80092b0 <_vfiprintf_r+0x208>
 80092e6:	bf00      	nop
 80092e8:	08009884 	.word	0x08009884
 80092ec:	080098a4 	.word	0x080098a4
 80092f0:	08009864 	.word	0x08009864
 80092f4:	080098c4 	.word	0x080098c4
 80092f8:	080098ce 	.word	0x080098ce
 80092fc:	00000000 	.word	0x00000000
 8009300:	08009083 	.word	0x08009083
 8009304:	080098ca 	.word	0x080098ca

08009308 <_printf_common>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	4616      	mov	r6, r2
 800930e:	4699      	mov	r9, r3
 8009310:	688a      	ldr	r2, [r1, #8]
 8009312:	690b      	ldr	r3, [r1, #16]
 8009314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009318:	4293      	cmp	r3, r2
 800931a:	bfb8      	it	lt
 800931c:	4613      	movlt	r3, r2
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009324:	4607      	mov	r7, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b10a      	cbz	r2, 800932e <_printf_common+0x26>
 800932a:	3301      	adds	r3, #1
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	0699      	lsls	r1, r3, #26
 8009332:	bf42      	ittt	mi
 8009334:	6833      	ldrmi	r3, [r6, #0]
 8009336:	3302      	addmi	r3, #2
 8009338:	6033      	strmi	r3, [r6, #0]
 800933a:	6825      	ldr	r5, [r4, #0]
 800933c:	f015 0506 	ands.w	r5, r5, #6
 8009340:	d106      	bne.n	8009350 <_printf_common+0x48>
 8009342:	f104 0a19 	add.w	sl, r4, #25
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc26      	bgt.n	800939e <_printf_common+0x96>
 8009350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009354:	1e13      	subs	r3, r2, #0
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	bf18      	it	ne
 800935a:	2301      	movne	r3, #1
 800935c:	0692      	lsls	r2, r2, #26
 800935e:	d42b      	bmi.n	80093b8 <_printf_common+0xb0>
 8009360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009364:	4649      	mov	r1, r9
 8009366:	4638      	mov	r0, r7
 8009368:	47c0      	blx	r8
 800936a:	3001      	adds	r0, #1
 800936c:	d01e      	beq.n	80093ac <_printf_common+0xa4>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	68e5      	ldr	r5, [r4, #12]
 8009372:	6832      	ldr	r2, [r6, #0]
 8009374:	f003 0306 	and.w	r3, r3, #6
 8009378:	2b04      	cmp	r3, #4
 800937a:	bf08      	it	eq
 800937c:	1aad      	subeq	r5, r5, r2
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	bf0c      	ite	eq
 8009384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009388:	2500      	movne	r5, #0
 800938a:	4293      	cmp	r3, r2
 800938c:	bfc4      	itt	gt
 800938e:	1a9b      	subgt	r3, r3, r2
 8009390:	18ed      	addgt	r5, r5, r3
 8009392:	2600      	movs	r6, #0
 8009394:	341a      	adds	r4, #26
 8009396:	42b5      	cmp	r5, r6
 8009398:	d11a      	bne.n	80093d0 <_printf_common+0xc8>
 800939a:	2000      	movs	r0, #0
 800939c:	e008      	b.n	80093b0 <_printf_common+0xa8>
 800939e:	2301      	movs	r3, #1
 80093a0:	4652      	mov	r2, sl
 80093a2:	4649      	mov	r1, r9
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c0      	blx	r8
 80093a8:	3001      	adds	r0, #1
 80093aa:	d103      	bne.n	80093b4 <_printf_common+0xac>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7c6      	b.n	8009346 <_printf_common+0x3e>
 80093b8:	18e1      	adds	r1, r4, r3
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	2030      	movs	r0, #48	; 0x30
 80093be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c2:	4422      	add	r2, r4
 80093c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093cc:	3302      	adds	r3, #2
 80093ce:	e7c7      	b.n	8009360 <_printf_common+0x58>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4622      	mov	r2, r4
 80093d4:	4649      	mov	r1, r9
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c0      	blx	r8
 80093da:	3001      	adds	r0, #1
 80093dc:	d0e6      	beq.n	80093ac <_printf_common+0xa4>
 80093de:	3601      	adds	r6, #1
 80093e0:	e7d9      	b.n	8009396 <_printf_common+0x8e>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	7e0f      	ldrb	r7, [r1, #24]
 80093ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093ec:	2f78      	cmp	r7, #120	; 0x78
 80093ee:	4691      	mov	r9, r2
 80093f0:	4680      	mov	r8, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	469a      	mov	sl, r3
 80093f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093fa:	d807      	bhi.n	800940c <_printf_i+0x28>
 80093fc:	2f62      	cmp	r7, #98	; 0x62
 80093fe:	d80a      	bhi.n	8009416 <_printf_i+0x32>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f000 80d8 	beq.w	80095b6 <_printf_i+0x1d2>
 8009406:	2f58      	cmp	r7, #88	; 0x58
 8009408:	f000 80a3 	beq.w	8009552 <_printf_i+0x16e>
 800940c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009414:	e03a      	b.n	800948c <_printf_i+0xa8>
 8009416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800941a:	2b15      	cmp	r3, #21
 800941c:	d8f6      	bhi.n	800940c <_printf_i+0x28>
 800941e:	a101      	add	r1, pc, #4	; (adr r1, 8009424 <_printf_i+0x40>)
 8009420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009491 	.word	0x08009491
 800942c:	0800940d 	.word	0x0800940d
 8009430:	0800940d 	.word	0x0800940d
 8009434:	0800940d 	.word	0x0800940d
 8009438:	0800940d 	.word	0x0800940d
 800943c:	08009491 	.word	0x08009491
 8009440:	0800940d 	.word	0x0800940d
 8009444:	0800940d 	.word	0x0800940d
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800959d 	.word	0x0800959d
 8009454:	080094c1 	.word	0x080094c1
 8009458:	0800957f 	.word	0x0800957f
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	080095bf 	.word	0x080095bf
 8009468:	0800940d 	.word	0x0800940d
 800946c:	080094c1 	.word	0x080094c1
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009587 	.word	0x08009587
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	1d1a      	adds	r2, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	602a      	str	r2, [r5, #0]
 8009484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800948c:	2301      	movs	r3, #1
 800948e:	e0a3      	b.n	80095d8 <_printf_i+0x1f4>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	6829      	ldr	r1, [r5, #0]
 8009494:	0606      	lsls	r6, r0, #24
 8009496:	f101 0304 	add.w	r3, r1, #4
 800949a:	d50a      	bpl.n	80094b2 <_printf_i+0xce>
 800949c:	680e      	ldr	r6, [r1, #0]
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	2e00      	cmp	r6, #0
 80094a2:	da03      	bge.n	80094ac <_printf_i+0xc8>
 80094a4:	232d      	movs	r3, #45	; 0x2d
 80094a6:	4276      	negs	r6, r6
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ac:	485e      	ldr	r0, [pc, #376]	; (8009628 <_printf_i+0x244>)
 80094ae:	230a      	movs	r3, #10
 80094b0:	e019      	b.n	80094e6 <_printf_i+0x102>
 80094b2:	680e      	ldr	r6, [r1, #0]
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094ba:	bf18      	it	ne
 80094bc:	b236      	sxthne	r6, r6
 80094be:	e7ef      	b.n	80094a0 <_printf_i+0xbc>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	6820      	ldr	r0, [r4, #0]
 80094c4:	1d19      	adds	r1, r3, #4
 80094c6:	6029      	str	r1, [r5, #0]
 80094c8:	0601      	lsls	r1, r0, #24
 80094ca:	d501      	bpl.n	80094d0 <_printf_i+0xec>
 80094cc:	681e      	ldr	r6, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <_printf_i+0xf2>
 80094d0:	0646      	lsls	r6, r0, #25
 80094d2:	d5fb      	bpl.n	80094cc <_printf_i+0xe8>
 80094d4:	881e      	ldrh	r6, [r3, #0]
 80094d6:	4854      	ldr	r0, [pc, #336]	; (8009628 <_printf_i+0x244>)
 80094d8:	2f6f      	cmp	r7, #111	; 0x6f
 80094da:	bf0c      	ite	eq
 80094dc:	2308      	moveq	r3, #8
 80094de:	230a      	movne	r3, #10
 80094e0:	2100      	movs	r1, #0
 80094e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094e6:	6865      	ldr	r5, [r4, #4]
 80094e8:	60a5      	str	r5, [r4, #8]
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	bfa2      	ittt	ge
 80094ee:	6821      	ldrge	r1, [r4, #0]
 80094f0:	f021 0104 	bicge.w	r1, r1, #4
 80094f4:	6021      	strge	r1, [r4, #0]
 80094f6:	b90e      	cbnz	r6, 80094fc <_printf_i+0x118>
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	d04d      	beq.n	8009598 <_printf_i+0x1b4>
 80094fc:	4615      	mov	r5, r2
 80094fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009502:	fb03 6711 	mls	r7, r3, r1, r6
 8009506:	5dc7      	ldrb	r7, [r0, r7]
 8009508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800950c:	4637      	mov	r7, r6
 800950e:	42bb      	cmp	r3, r7
 8009510:	460e      	mov	r6, r1
 8009512:	d9f4      	bls.n	80094fe <_printf_i+0x11a>
 8009514:	2b08      	cmp	r3, #8
 8009516:	d10b      	bne.n	8009530 <_printf_i+0x14c>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	07de      	lsls	r6, r3, #31
 800951c:	d508      	bpl.n	8009530 <_printf_i+0x14c>
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6861      	ldr	r1, [r4, #4]
 8009522:	4299      	cmp	r1, r3
 8009524:	bfde      	ittt	le
 8009526:	2330      	movle	r3, #48	; 0x30
 8009528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800952c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009530:	1b52      	subs	r2, r2, r5
 8009532:	6122      	str	r2, [r4, #16]
 8009534:	f8cd a000 	str.w	sl, [sp]
 8009538:	464b      	mov	r3, r9
 800953a:	aa03      	add	r2, sp, #12
 800953c:	4621      	mov	r1, r4
 800953e:	4640      	mov	r0, r8
 8009540:	f7ff fee2 	bl	8009308 <_printf_common>
 8009544:	3001      	adds	r0, #1
 8009546:	d14c      	bne.n	80095e2 <_printf_i+0x1fe>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	b004      	add	sp, #16
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	4835      	ldr	r0, [pc, #212]	; (8009628 <_printf_i+0x244>)
 8009554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009558:	6829      	ldr	r1, [r5, #0]
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009560:	6029      	str	r1, [r5, #0]
 8009562:	061d      	lsls	r5, r3, #24
 8009564:	d514      	bpl.n	8009590 <_printf_i+0x1ac>
 8009566:	07df      	lsls	r7, r3, #31
 8009568:	bf44      	itt	mi
 800956a:	f043 0320 	orrmi.w	r3, r3, #32
 800956e:	6023      	strmi	r3, [r4, #0]
 8009570:	b91e      	cbnz	r6, 800957a <_printf_i+0x196>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	f023 0320 	bic.w	r3, r3, #32
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	2310      	movs	r3, #16
 800957c:	e7b0      	b.n	80094e0 <_printf_i+0xfc>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	f043 0320 	orr.w	r3, r3, #32
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	2378      	movs	r3, #120	; 0x78
 8009588:	4828      	ldr	r0, [pc, #160]	; (800962c <_printf_i+0x248>)
 800958a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800958e:	e7e3      	b.n	8009558 <_printf_i+0x174>
 8009590:	0659      	lsls	r1, r3, #25
 8009592:	bf48      	it	mi
 8009594:	b2b6      	uxthmi	r6, r6
 8009596:	e7e6      	b.n	8009566 <_printf_i+0x182>
 8009598:	4615      	mov	r5, r2
 800959a:	e7bb      	b.n	8009514 <_printf_i+0x130>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	6826      	ldr	r6, [r4, #0]
 80095a0:	6961      	ldr	r1, [r4, #20]
 80095a2:	1d18      	adds	r0, r3, #4
 80095a4:	6028      	str	r0, [r5, #0]
 80095a6:	0635      	lsls	r5, r6, #24
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	d501      	bpl.n	80095b0 <_printf_i+0x1cc>
 80095ac:	6019      	str	r1, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <_printf_i+0x1d2>
 80095b0:	0670      	lsls	r0, r6, #25
 80095b2:	d5fb      	bpl.n	80095ac <_printf_i+0x1c8>
 80095b4:	8019      	strh	r1, [r3, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	4615      	mov	r5, r2
 80095bc:	e7ba      	b.n	8009534 <_printf_i+0x150>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	602a      	str	r2, [r5, #0]
 80095c4:	681d      	ldr	r5, [r3, #0]
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7f6 fe20 	bl	8000210 <memchr>
 80095d0:	b108      	cbz	r0, 80095d6 <_printf_i+0x1f2>
 80095d2:	1b40      	subs	r0, r0, r5
 80095d4:	6060      	str	r0, [r4, #4]
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	2300      	movs	r3, #0
 80095dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e0:	e7a8      	b.n	8009534 <_printf_i+0x150>
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	462a      	mov	r2, r5
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	47d0      	blx	sl
 80095ec:	3001      	adds	r0, #1
 80095ee:	d0ab      	beq.n	8009548 <_printf_i+0x164>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	079b      	lsls	r3, r3, #30
 80095f4:	d413      	bmi.n	800961e <_printf_i+0x23a>
 80095f6:	68e0      	ldr	r0, [r4, #12]
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	4298      	cmp	r0, r3
 80095fc:	bfb8      	it	lt
 80095fe:	4618      	movlt	r0, r3
 8009600:	e7a4      	b.n	800954c <_printf_i+0x168>
 8009602:	2301      	movs	r3, #1
 8009604:	4632      	mov	r2, r6
 8009606:	4649      	mov	r1, r9
 8009608:	4640      	mov	r0, r8
 800960a:	47d0      	blx	sl
 800960c:	3001      	adds	r0, #1
 800960e:	d09b      	beq.n	8009548 <_printf_i+0x164>
 8009610:	3501      	adds	r5, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	9903      	ldr	r1, [sp, #12]
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	42ab      	cmp	r3, r5
 800961a:	dcf2      	bgt.n	8009602 <_printf_i+0x21e>
 800961c:	e7eb      	b.n	80095f6 <_printf_i+0x212>
 800961e:	2500      	movs	r5, #0
 8009620:	f104 0619 	add.w	r6, r4, #25
 8009624:	e7f5      	b.n	8009612 <_printf_i+0x22e>
 8009626:	bf00      	nop
 8009628:	080098d5 	.word	0x080098d5
 800962c:	080098e6 	.word	0x080098e6

08009630 <__sread>:
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	f000 f894 	bl	8009764 <_read_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	bfab      	itete	ge
 8009640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009642:	89a3      	ldrhlt	r3, [r4, #12]
 8009644:	181b      	addge	r3, r3, r0
 8009646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800964a:	bfac      	ite	ge
 800964c:	6563      	strge	r3, [r4, #84]	; 0x54
 800964e:	81a3      	strhlt	r3, [r4, #12]
 8009650:	bd10      	pop	{r4, pc}

08009652 <__swrite>:
 8009652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	461f      	mov	r7, r3
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	05db      	lsls	r3, r3, #23
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	4616      	mov	r6, r2
 8009662:	d505      	bpl.n	8009670 <__swrite+0x1e>
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	2302      	movs	r3, #2
 800966a:	2200      	movs	r2, #0
 800966c:	f000 f868 	bl	8009740 <_lseek_r>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	4632      	mov	r2, r6
 800967e:	463b      	mov	r3, r7
 8009680:	4628      	mov	r0, r5
 8009682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	f000 b817 	b.w	80096b8 <_write_r>

0800968a <__sseek>:
 800968a:	b510      	push	{r4, lr}
 800968c:	460c      	mov	r4, r1
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 f855 	bl	8009740 <_lseek_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	bf15      	itete	ne
 800969c:	6560      	strne	r0, [r4, #84]	; 0x54
 800969e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096a6:	81a3      	strheq	r3, [r4, #12]
 80096a8:	bf18      	it	ne
 80096aa:	81a3      	strhne	r3, [r4, #12]
 80096ac:	bd10      	pop	{r4, pc}

080096ae <__sclose>:
 80096ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b2:	f000 b813 	b.w	80096dc <_close_r>
	...

080096b8 <_write_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d07      	ldr	r5, [pc, #28]	; (80096d8 <_write_r+0x20>)
 80096bc:	4604      	mov	r4, r0
 80096be:	4608      	mov	r0, r1
 80096c0:	4611      	mov	r1, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	602a      	str	r2, [r5, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f7f6 ff74 	bl	80005b4 <_write>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_write_r+0x1e>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_write_r+0x1e>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	200004b8 	.word	0x200004b8

080096dc <_close_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d06      	ldr	r5, [pc, #24]	; (80096f8 <_close_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7f8 fbf3 	bl	8001ed2 <_close>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_close_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_close_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	200004b8 	.word	0x200004b8

080096fc <_fstat_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	; (800971c <_fstat_r+0x20>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	f7f8 fbee 	bl	8001eea <_fstat>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	d102      	bne.n	8009718 <_fstat_r+0x1c>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b103      	cbz	r3, 8009718 <_fstat_r+0x1c>
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	bf00      	nop
 800971c:	200004b8 	.word	0x200004b8

08009720 <_isatty_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	; (800973c <_isatty_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f8 fbed 	bl	8001f0a <_isatty>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_isatty_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_isatty_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	200004b8 	.word	0x200004b8

08009740 <_lseek_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_lseek_r+0x20>)
 8009744:	4604      	mov	r4, r0
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f8 fbe6 	bl	8001f20 <_lseek>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_lseek_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_lseek_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	200004b8 	.word	0x200004b8

08009764 <_read_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_read_r+0x20>)
 8009768:	4604      	mov	r4, r0
 800976a:	4608      	mov	r0, r1
 800976c:	4611      	mov	r1, r2
 800976e:	2200      	movs	r2, #0
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	f7f8 fb90 	bl	8001e98 <_read>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_read_r+0x1e>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_read_r+0x1e>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	200004b8 	.word	0x200004b8

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr
