
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800810c  0800810c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008114  08008114  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800811c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000080  0800819c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800819c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002430  00000000  00000000  00030bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00033e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002348e  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011310  00000000  00000000  00057fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0ee4  00000000  00000000  000692de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a1c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  0013a214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fc8 	.word	0x08007fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007fc8 	.word	0x08007fc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:
void PrintAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f005 fb2a 	bl	8005c22 <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000118 	.word	0x20000118

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005e0:	b088      	sub	sp, #32
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fef2 	bl	80013cc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f8dc 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f9d4 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f0:	f000 f97a 	bl	80008e8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f9a6 	bl	8000944 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005f8:	f000 f940 	bl	800087c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <main+0x1a4>)
 80005fe:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000602:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x1a4>)
 8000606:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800060a:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 800060c:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <main+0x1a4>)
 800060e:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000612:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 8000614:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <main+0x1a4>)
 8000616:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800061a:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800061c:	4b58      	ldr	r3, [pc, #352]	; (8000780 <main+0x1a4>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000622:	4b57      	ldr	r3, [pc, #348]	; (8000780 <main+0x1a4>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000628:	4b55      	ldr	r3, [pc, #340]	; (8000780 <main+0x1a4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 800062e:	4b54      	ldr	r3, [pc, #336]	; (8000780 <main+0x1a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 8000634:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x1a4>)
 8000636:	2201      	movs	r2, #1
 8000638:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 800063a:	4951      	ldr	r1, [pc, #324]	; (8000780 <main+0x1a4>)
 800063c:	4851      	ldr	r0, [pc, #324]	; (8000784 <main+0x1a8>)
 800063e:	f001 f857 	bl	80016f0 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000642:	2102      	movs	r1, #2
 8000644:	484f      	ldr	r0, [pc, #316]	; (8000784 <main+0x1a8>)
 8000646:	f001 fa87 	bl	8001b58 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 800064a:	484e      	ldr	r0, [pc, #312]	; (8000784 <main+0x1a8>)
 800064c:	f001 f930 	bl	80018b0 <HAL_CAN_Start>

  VL53L1X_SensorInit(dev);
  //VL53L1X_SetI2CAddress(dev, dev1);
  VL53L1X_StartRanging(dev1);
  */
  uint8_t fail[6] = {70, 65, 73, 76, 10, 0};
 8000650:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <main+0x1ac>)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	8019      	strh	r1, [r3, #0]
  uint8_t succ[6] = {83, 85, 67, 67, 10, 0};
 8000660:	4a4a      	ldr	r2, [pc, #296]	; (800078c <main+0x1b0>)
 8000662:	463b      	mov	r3, r7
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	3304      	adds	r3, #4
 800066c:	8019      	strh	r1, [r3, #0]
  uint8_t suc = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	76fb      	strb	r3, [r7, #27]
  if (!(suc = ChangeAddresses(nof))) {
 8000672:	4b47      	ldr	r3, [pc, #284]	; (8000790 <main+0x1b4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fbb0 	bl	8000ddc <ChangeAddresses>
 800067c:	4603      	mov	r3, r0
 800067e:	76fb      	strb	r3, [r7, #27]
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <main+0xba>
	  HAL_UART_Transmit(&huart2, fail, 6, 10);
 8000686:	f107 0108 	add.w	r1, r7, #8
 800068a:	230a      	movs	r3, #10
 800068c:	2206      	movs	r2, #6
 800068e:	4841      	ldr	r0, [pc, #260]	; (8000794 <main+0x1b8>)
 8000690:	f005 fac7 	bl	8005c22 <HAL_UART_Transmit>
 8000694:	e005      	b.n	80006a2 <main+0xc6>
  }
  else {
	  HAL_UART_Transmit(&huart2, succ, 6, 10);
 8000696:	4639      	mov	r1, r7
 8000698:	230a      	movs	r3, #10
 800069a:	2206      	movs	r2, #6
 800069c:	483d      	ldr	r0, [pc, #244]	; (8000794 <main+0x1b8>)
 800069e:	f005 fac0 	bl	8005c22 <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dis[nof];
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <main+0x1b4>)
 80006a4:	7819      	ldrb	r1, [r3, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	3b01      	subs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	b2cb      	uxtb	r3, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80006c0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80006c4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80006c8:	b2cb      	uxtb	r3, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	461c      	mov	r4, r3
 80006ce:	4615      	mov	r5, r2
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	012b      	lsls	r3, r5, #4
 80006da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80006de:	0122      	lsls	r2, r4, #4
 80006e0:	460b      	mov	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	3307      	adds	r3, #7
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	ebad 0d03 	sub.w	sp, sp, r3
 80006ee:	466b      	mov	r3, sp
 80006f0:	3301      	adds	r3, #1
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  for (int i = 0; i != nof; ++i) dis[i] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	e007      	b.n	800070e <main+0x132>
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	69fa      	ldr	r2, [r7, #28]
 8000702:	2100      	movs	r1, #0
 8000704:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <main+0x1b4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4293      	cmp	r3, r2
 8000718:	d1f1      	bne.n	80006fe <main+0x122>
  while (1)
  {
	GetAllData(nof, dis);
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x1b4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	6939      	ldr	r1, [r7, #16]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fb9d 	bl	8000e60 <GetAllData>
	PrintAllData(nof, dis);
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <main+0x1b4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	6939      	ldr	r1, [r7, #16]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fbdb 	bl	8000ee8 <PrintAllData>

	canTxHeader.StdId = 0x102;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0x1bc>)
 8000734:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000738:	601a      	str	r2, [r3, #0]
	canTxHeader.RTR = CAN_RTR_DATA;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x1bc>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
	canTxHeader.IDE = CAN_ID_STD;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x1bc>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
	canTxHeader.DLC = 8;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <main+0x1bc>)
 8000748:	2208      	movs	r2, #8
 800074a:	611a      	str	r2, [r3, #16]

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <main+0x1a8>)
 800074e:	f001 f9ce 	bl	8001aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8000752:	4603      	mov	r3, r0
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <main+0x1c0>)
 8000756:	6013      	str	r3, [r2, #0]
	can1Tx0Data[0] = (0 & 0xFF00) >> 8;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <main+0x1c4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	can1Tx0Data[1] = (0 & 0x00FF);
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0x1c4>)
 8000760:	2200      	movs	r2, #0
 8000762:	705a      	strb	r2, [r3, #1]
	can1Tx0Data[2] = (0 & 0xFF00) >> 8;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <main+0x1c4>)
 8000766:	2200      	movs	r2, #0
 8000768:	709a      	strb	r2, [r3, #2]
	can1Tx0Data[3] = (0 & 0x00FF);
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <main+0x1c4>)
 800076c:	2200      	movs	r2, #0
 800076e:	70da      	strb	r2, [r3, #3]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0x1c0>)
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <main+0x1c4>)
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <main+0x1bc>)
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <main+0x1a8>)
 8000778:	f001 f8de 	bl	8001938 <HAL_CAN_AddTxMessage>
	GetAllData(nof, dis);
 800077c:	e7cd      	b.n	800071a <main+0x13e>
 800077e:	bf00      	nop
 8000780:	2000015c 	.word	0x2000015c
 8000784:	2000009c 	.word	0x2000009c
 8000788:	08007fe0 	.word	0x08007fe0
 800078c:	08007fe8 	.word	0x08007fe8
 8000790:	20000002 	.word	0x20000002
 8000794:	20000118 	.word	0x20000118
 8000798:	20000184 	.word	0x20000184
 800079c:	2000019c 	.word	0x2000019c
 80007a0:	200001a0 	.word	0x200001a0

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fc72 	bl	800709c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <SystemClock_Config+0xd0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xd4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <SystemClock_Config+0xd4>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000818:	23a8      	movs	r3, #168	; 0xa8
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4618      	mov	r0, r3
 800082e:	f004 ff0d 	bl	800564c <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000838:	f000 fb7a 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2105      	movs	r1, #5
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fbac 	bl	8004fb8 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000866:	f000 fb63 	bl	8000f30 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_CAN1_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000888:	2215      	movs	r2, #21
 800088a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_CAN1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_CAN1_Init+0x64>)
 800089a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800089e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008bc:	2201      	movs	r2, #1
 80008be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008ce:	f000 fe13 	bl	80014f8 <HAL_CAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 fb2a 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	40006400 	.word	0x40006400

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_I2C1_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x50>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_I2C1_Init+0x58>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_I2C1_Init+0x50>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C1_Init+0x50>)
 8000926:	f001 fed7 	bl	80026d8 <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 fafe 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000c4 	.word	0x200000c4
 800093c:	40005400 	.word	0x40005400
 8000940:	00061a80 	.word	0x00061a80

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART2_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800097c:	f005 f904 	bl	8005b88 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 fad3 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000118 	.word	0x20000118
 8000994:	40004400 	.word	0x40004400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f643 411c 	movw	r1, #15388	; 0x3c1c
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <MX_GPIO_Init+0x124>)
 8000a42:	f001 fe2f 	bl	80026a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0x128>)
 8000a4c:	f001 fe2a 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2108      	movs	r1, #8
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x12c>)
 8000a56:	f001 fe25 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a5a:	f643 431c 	movw	r3, #15388	; 0x3c1c
 8000a5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_GPIO_Init+0x124>)
 8000a74:	f001 fc82 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0x128>)
 8000a90:	f001 fc74 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a94:	2308      	movs	r3, #8
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x12c>)
 8000aac:	f001 fc66 	bl	800237c <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <TurnOffAll+0x6c>)
 8000ad4:	f001 fde6 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <TurnOffAll+0x6c>)
 8000ae0:	f001 fde0 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <TurnOffAll+0x6c>)
 8000aec:	f001 fdda 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <TurnOffAll+0x70>)
 8000af6:	f001 fdd5 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <TurnOffAll+0x6c>)
 8000b02:	f001 fdcf 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2104      	movs	r1, #4
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <TurnOffAll+0x6c>)
 8000b0c:	f001 fdca 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2108      	movs	r1, #8
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <TurnOffAll+0x6c>)
 8000b16:	f001 fdc5 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <TurnOffAll+0x6c>)
 8000b20:	f001 fdc0 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <TurnOffAll+0x74>)
 8000b2a:	f001 fdbb 	bl	80026a4 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
	  */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40020400 	.word	0x40020400

08000b40 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t boot[7] = {66, 79, 79, 84, 48, 10, 0};
 8000b4e:	4a9d      	ldr	r2, [pc, #628]	; (8000dc4 <TurnOnAt+0x284>)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b58:	6018      	str	r0, [r3, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	8019      	strh	r1, [r3, #0]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	0c0a      	lsrs	r2, r1, #16
 8000b62:	701a      	strb	r2, [r3, #0]
	switch (i) {
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	f200 8126 	bhi.w	8000db8 <TurnOnAt+0x278>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <TurnOnAt+0x34>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b99 	.word	0x08000b99
 8000b78:	08000bd3 	.word	0x08000bd3
 8000b7c:	08000c11 	.word	0x08000c11
 8000b80:	08000c4f 	.word	0x08000c4f
 8000b84:	08000c8b 	.word	0x08000c8b
 8000b88:	08000cc9 	.word	0x08000cc9
 8000b8c:	08000d05 	.word	0x08000d05
 8000b90:	08000d41 	.word	0x08000d41
 8000b94:	08000d7d 	.word	0x08000d7d
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	488a      	ldr	r0, [pc, #552]	; (8000dc8 <TurnOnAt+0x288>)
 8000ba0:	f001 fd80 	bl	80026a4 <HAL_GPIO_WritePin>
		while(bootState==0){
 8000ba4:	e011      	b.n	8000bca <TurnOnAt+0x8a>
			VL53L1X_BootState(dev, &bootState);
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <TurnOnAt+0x28c>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	f107 020f 	add.w	r2, r7, #15
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f006 f930 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000bb6:	f107 0108 	add.w	r1, r7, #8
 8000bba:	230a      	movs	r3, #10
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	4884      	ldr	r0, [pc, #528]	; (8000dd0 <TurnOnAt+0x290>)
 8000bc0:	f005 f82f 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f000 fc73 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0ea      	beq.n	8000ba6 <TurnOnAt+0x66>
		}
		break;
 8000bd0:	e0f2      	b.n	8000db8 <TurnOnAt+0x278>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd8:	487b      	ldr	r0, [pc, #492]	; (8000dc8 <TurnOnAt+0x288>)
 8000bda:	f001 fd63 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 49;
 8000bde:	2331      	movs	r3, #49	; 0x31
 8000be0:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000be2:	e011      	b.n	8000c08 <TurnOnAt+0xc8>
			VL53L1X_BootState(dev, &bootState);
 8000be4:	4b79      	ldr	r3, [pc, #484]	; (8000dcc <TurnOnAt+0x28c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	f107 020f 	add.w	r2, r7, #15
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f006 f911 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000bf4:	f107 0108 	add.w	r1, r7, #8
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	4874      	ldr	r0, [pc, #464]	; (8000dd0 <TurnOnAt+0x290>)
 8000bfe:	f005 f810 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 fc54 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0ea      	beq.n	8000be4 <TurnOnAt+0xa4>
		}
		break;
 8000c0e:	e0d3      	b.n	8000db8 <TurnOnAt+0x278>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c16:	486c      	ldr	r0, [pc, #432]	; (8000dc8 <TurnOnAt+0x288>)
 8000c18:	f001 fd44 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 50;
 8000c1c:	2332      	movs	r3, #50	; 0x32
 8000c1e:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000c20:	e011      	b.n	8000c46 <TurnOnAt+0x106>
			VL53L1X_BootState(dev, &bootState);
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <TurnOnAt+0x28c>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	f107 020f 	add.w	r2, r7, #15
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 f8f2 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000c32:	f107 0108 	add.w	r1, r7, #8
 8000c36:	230a      	movs	r3, #10
 8000c38:	2207      	movs	r2, #7
 8000c3a:	4865      	ldr	r0, [pc, #404]	; (8000dd0 <TurnOnAt+0x290>)
 8000c3c:	f004 fff1 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c40:	2002      	movs	r0, #2
 8000c42:	f000 fc35 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0ea      	beq.n	8000c22 <TurnOnAt+0xe2>
		}
		break;
 8000c4c:	e0b4      	b.n	8000db8 <TurnOnAt+0x278>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2104      	movs	r1, #4
 8000c52:	4860      	ldr	r0, [pc, #384]	; (8000dd4 <TurnOnAt+0x294>)
 8000c54:	f001 fd26 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 51;
 8000c58:	2333      	movs	r3, #51	; 0x33
 8000c5a:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000c5c:	e011      	b.n	8000c82 <TurnOnAt+0x142>
			VL53L1X_BootState(dev, &bootState);
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <TurnOnAt+0x28c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	f107 020f 	add.w	r2, r7, #15
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f006 f8d4 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000c6e:	f107 0108 	add.w	r1, r7, #8
 8000c72:	230a      	movs	r3, #10
 8000c74:	2207      	movs	r2, #7
 8000c76:	4856      	ldr	r0, [pc, #344]	; (8000dd0 <TurnOnAt+0x290>)
 8000c78:	f004 ffd3 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f000 fc17 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0ea      	beq.n	8000c5e <TurnOnAt+0x11e>
		}
		break;
 8000c88:	e096      	b.n	8000db8 <TurnOnAt+0x278>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	484d      	ldr	r0, [pc, #308]	; (8000dc8 <TurnOnAt+0x288>)
 8000c92:	f001 fd07 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 52;
 8000c96:	2334      	movs	r3, #52	; 0x34
 8000c98:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000c9a:	e011      	b.n	8000cc0 <TurnOnAt+0x180>
			VL53L1X_BootState(dev, &bootState);
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <TurnOnAt+0x28c>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	f107 020f 	add.w	r2, r7, #15
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f006 f8b5 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000cac:	f107 0108 	add.w	r1, r7, #8
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	4846      	ldr	r0, [pc, #280]	; (8000dd0 <TurnOnAt+0x290>)
 8000cb6:	f004 ffb4 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 fbf8 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0ea      	beq.n	8000c9c <TurnOnAt+0x15c>
		}
		break;
 8000cc6:	e077      	b.n	8000db8 <TurnOnAt+0x278>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2104      	movs	r1, #4
 8000ccc:	483e      	ldr	r0, [pc, #248]	; (8000dc8 <TurnOnAt+0x288>)
 8000cce:	f001 fce9 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 53;
 8000cd2:	2335      	movs	r3, #53	; 0x35
 8000cd4:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000cd6:	e011      	b.n	8000cfc <TurnOnAt+0x1bc>
			VL53L1X_BootState(dev, &bootState);
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <TurnOnAt+0x28c>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	f107 020f 	add.w	r2, r7, #15
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 f897 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000ce8:	f107 0108 	add.w	r1, r7, #8
 8000cec:	230a      	movs	r3, #10
 8000cee:	2207      	movs	r2, #7
 8000cf0:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <TurnOnAt+0x290>)
 8000cf2:	f004 ff96 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f000 fbda 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0ea      	beq.n	8000cd8 <TurnOnAt+0x198>
		}
		break;
 8000d02:	e059      	b.n	8000db8 <TurnOnAt+0x278>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2108      	movs	r1, #8
 8000d08:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <TurnOnAt+0x288>)
 8000d0a:	f001 fccb 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 54;
 8000d0e:	2336      	movs	r3, #54	; 0x36
 8000d10:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000d12:	e011      	b.n	8000d38 <TurnOnAt+0x1f8>
			VL53L1X_BootState(dev, &bootState);
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <TurnOnAt+0x28c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	f107 020f 	add.w	r2, r7, #15
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 f879 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d24:	f107 0108 	add.w	r1, r7, #8
 8000d28:	230a      	movs	r3, #10
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <TurnOnAt+0x290>)
 8000d2e:	f004 ff78 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f000 fbbc 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0ea      	beq.n	8000d14 <TurnOnAt+0x1d4>
		}
		break;
 8000d3e:	e03b      	b.n	8000db8 <TurnOnAt+0x278>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <TurnOnAt+0x288>)
 8000d46:	f001 fcad 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 55;
 8000d4a:	2337      	movs	r3, #55	; 0x37
 8000d4c:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000d4e:	e011      	b.n	8000d74 <TurnOnAt+0x234>
			VL53L1X_BootState(dev, &bootState);
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <TurnOnAt+0x28c>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	f107 020f 	add.w	r2, r7, #15
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f006 f85b 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d60:	f107 0108 	add.w	r1, r7, #8
 8000d64:	230a      	movs	r3, #10
 8000d66:	2207      	movs	r2, #7
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <TurnOnAt+0x290>)
 8000d6a:	f004 ff5a 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fb9e 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0ea      	beq.n	8000d50 <TurnOnAt+0x210>
		}
		break;
 8000d7a:	e01d      	b.n	8000db8 <TurnOnAt+0x278>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <TurnOnAt+0x298>)
 8000d82:	f001 fc8f 	bl	80026a4 <HAL_GPIO_WritePin>
		boot[4] = 56;
 8000d86:	2338      	movs	r3, #56	; 0x38
 8000d88:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000d8a:	e011      	b.n	8000db0 <TurnOnAt+0x270>
			VL53L1X_BootState(dev, &bootState);
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <TurnOnAt+0x28c>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	f107 020f 	add.w	r2, r7, #15
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 f83d 	bl	8006e16 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d9c:	f107 0108 	add.w	r1, r7, #8
 8000da0:	230a      	movs	r3, #10
 8000da2:	2207      	movs	r2, #7
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <TurnOnAt+0x290>)
 8000da6:	f004 ff3c 	bl	8005c22 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fb80 	bl	80014b0 <HAL_Delay>
		while(bootState==0){
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0ea      	beq.n	8000d8c <TurnOnAt+0x24c>
		}
		break;
 8000db6:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08007ff0 	.word	0x08007ff0
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000118 	.word	0x20000118
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40020400 	.word	0x40020400

08000ddc <ChangeAddresses>:

uint16_t ChangeAddresses(uint8_t num_of_tof) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
	TurnOffAll();
 8000dea:	f7ff fe6d 	bl	8000ac8 <TurnOffAll>
	HAL_Delay(10);
 8000dee:	200a      	movs	r0, #10
 8000df0:	f000 fb5e 	bl	80014b0 <HAL_Delay>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	e024      	b.n	8000e44 <ChangeAddresses+0x68>
		success *= TurnOnAt(i);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe9f 	bl	8000b40 <TurnOnAt>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	fb12 f303 	smulbb	r3, r2, r3
 8000e0c:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f000 fb4e 	bl	80014b0 <HAL_Delay>
		VL53L1X_SensorInit(dev);
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <ChangeAddresses+0x7c>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f005 fee7 	bl	8006bec <VL53L1X_SensorInit>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <ChangeAddresses+0x7c>)
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	490d      	ldr	r1, [pc, #52]	; (8000e5c <ChangeAddresses+0x80>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f005 fec0 	bl	8006bb0 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <ChangeAddresses+0x80>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 ff85 	bl	8006d48 <VL53L1X_StartRanging>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	7bba      	ldrb	r2, [r7, #14]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d1d6      	bne.n	8000dfa <ChangeAddresses+0x1e>
	}
	return success;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	b29b      	uxth	r3, r3
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <GetAllData>:

uint8_t GetAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73bb      	strb	r3, [r7, #14]
	uint8_t dataReady = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e027      	b.n	8000eca <GetAllData+0x6a>
		dataReady = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	737b      	strb	r3, [r7, #13]
		while (dataReady == 0){
 8000e7e:	e00c      	b.n	8000e9a <GetAllData+0x3a>
			VL53L1X_CheckForDataReady(devs[i], &dataReady);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <GetAllData+0x84>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f107 020d 	add.w	r2, r7, #13
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 ff8a 	bl	8006da8 <VL53L1X_CheckForDataReady>
			//HAL_UART_Transmit(&huart2, getting, 6, 10);
			HAL_Delay(2);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f000 fb0b 	bl	80014b0 <HAL_Delay>
		while (dataReady == 0){
 8000e9a:	7b7b      	ldrb	r3, [r7, #13]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ef      	beq.n	8000e80 <GetAllData+0x20>
		}
		VL53L1X_GetDistance(devs[i], &dis[i]);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <GetAllData+0x84>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f005 ffcf 	bl	8006e54 <VL53L1X_GetDistance>
		VL53L1X_ClearInterrupt(devs[i]);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <GetAllData+0x84>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 ff00 	bl	8006cc4 <VL53L1X_ClearInterrupt>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d1d3      	bne.n	8000e7a <GetAllData+0x1a>
	}
	HAL_Delay(50);
 8000ed2:	2032      	movs	r0, #50	; 0x32
 8000ed4:	f000 faec 	bl	80014b0 <HAL_Delay>
}
 8000ed8:	bf00      	nop
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <PrintAllData>:

void PrintAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i != num_of_tof; ++i) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e00c      	b.n	8000f14 <PrintAllData+0x2c>
		printf("%d:%d\n", i, dis[i]);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	68f9      	ldr	r1, [r7, #12]
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <PrintAllData+0x44>)
 8000f0a:	f006 f8cf 	bl	80070ac <iprintf>
	for (int i = 0; i != num_of_tof; ++i) {
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d1ee      	bne.n	8000efa <PrintAllData+0x12>
	}
	HAL_Delay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f20:	f000 fac6 	bl	80014b0 <HAL_Delay>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08007ff8 	.word	0x08007ff8

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_CAN_MspInit+0xa4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d13c      	bne.n	8001028 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_CAN_MspInit+0xa8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fe6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <HAL_CAN_MspInit+0xac>)
 8001004:	f001 f9ba 	bl	800237c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2013      	movs	r0, #19
 800100e:	f001 f8de 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001012:	2013      	movs	r0, #19
 8001014:	f001 f8f7 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2014      	movs	r0, #20
 800101e:	f001 f8d6 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001022:	2014      	movs	r0, #20
 8001024:	f001 f8ef 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40006400 	.word	0x40006400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_I2C_MspInit+0xa4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d13b      	bne.n	80010d6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107a:	23c0      	movs	r3, #192	; 0xc0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108a:	2304      	movs	r3, #4
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4814      	ldr	r0, [pc, #80]	; (80010e8 <HAL_I2C_MspInit+0xac>)
 8001096:	f001 f971 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_I2C_MspInit+0xa8>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	201f      	movs	r0, #31
 80010bc:	f001 f887 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010c0:	201f      	movs	r0, #31
 80010c2:	f001 f8a0 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2020      	movs	r0, #32
 80010cc:	f001 f87f 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010d0:	2020      	movs	r0, #32
 80010d2:	f001 f898 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_UART_MspInit+0x94>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d133      	bne.n	8001176 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_MspInit+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_UART_MspInit+0x9c>)
 8001162:	f001 f90b 	bl	800237c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2026      	movs	r0, #38	; 0x26
 800116c:	f001 f82f 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001170:	2026      	movs	r0, #38	; 0x26
 8001172:	f001 f848 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004400 	.word	0x40004400
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f94a 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <CAN1_TX_IRQHandler+0x10>)
 80011e6:	f000 fcdd 	bl	8001ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000009c 	.word	0x2000009c

080011f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <CAN1_RX0_IRQHandler+0x10>)
 80011fa:	f000 fcd3 	bl	8001ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000009c 	.word	0x2000009c

08001208 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <I2C1_EV_IRQHandler+0x10>)
 800120e:	f001 fecb 	bl	8002fa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000c4 	.word	0x200000c4

0800121c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <I2C1_ER_IRQHandler+0x10>)
 8001222:	f002 f832 	bl	800328a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000c4 	.word	0x200000c4

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f004 fd87 	bl	8005d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000118 	.word	0x20000118

08001244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
	}

return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:
	}
	return len;
}

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f005 fe96 	bl	8007048 <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20020000 	.word	0x20020000
 8001348:	00000400 	.word	0x00000400
 800134c:	200001a8 	.word	0x200001a8
 8001350:	200002c0 	.word	0x200002c0

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	; (80013c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a2:	f7ff ffd7 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f005 fe55 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff f917 	bl	80005dc <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80013bc:	0800811c 	.word	0x0800811c
  ldr r2, =_sbss
 80013c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80013c4:	200002c0 	.word	0x200002c0

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_Init+0x40>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_Init+0x40>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x40>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fedf 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fd9c 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fef7 	bl	8002222 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 febf 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000010 	.word	0x20000010
 8001468:	20000018 	.word	0x20000018
 800146c:	20000014 	.word	0x20000014

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000018 	.word	0x20000018
 8001494:	200001ac 	.word	0x200001ac

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200001ac 	.word	0x200001ac

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000018 	.word	0x20000018

080014f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0ed      	b.n	80016e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fd38 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800152c:	f7ff ffb4 	bl	8001498 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001532:	e012      	b.n	800155a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001534:	f7ff ffb0 	bl	8001498 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d90b      	bls.n	800155a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2205      	movs	r2, #5
 8001552:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0c5      	b.n	80016e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0e5      	beq.n	8001534 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0202 	bic.w	r2, r2, #2
 8001576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001578:	f7ff ff8e 	bl	8001498 <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001580:	f7ff ff8a 	bl	8001498 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d90b      	bls.n	80015a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2205      	movs	r2, #5
 800159e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e09f      	b.n	80016e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e5      	bne.n	8001580 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e1b      	ldrb	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e007      	b.n	80015de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7e5b      	ldrb	r3, [r3, #25]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d108      	bne.n	80015f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e007      	b.n	8001608 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001606:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e9b      	ldrb	r3, [r3, #26]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0220 	orr.w	r2, r2, #32
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e007      	b.n	8001632 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0220 	bic.w	r2, r2, #32
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7edb      	ldrb	r3, [r3, #27]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0210 	bic.w	r2, r2, #16
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e007      	b.n	800165c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0210 	orr.w	r2, r2, #16
 800165a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7f1b      	ldrb	r3, [r3, #28]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0208 	orr.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e007      	b.n	8001686 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0208 	bic.w	r2, r2, #8
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7f5b      	ldrb	r3, [r3, #29]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0204 	orr.w	r2, r2, #4
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0204 	bic.w	r2, r2, #4
 80016ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	ea42 0103 	orr.w	r1, r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d003      	beq.n	8001716 <HAL_CAN_ConfigFilter+0x26>
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 80be 	bne.w	8001892 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001718:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001730:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d123      	bne.n	80017c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800179a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3248      	adds	r2, #72	; 0x48
 80017a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b6:	6979      	ldr	r1, [r7, #20]
 80017b8:	3348      	adds	r3, #72	; 0x48
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d122      	bne.n	800180e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3248      	adds	r2, #72	; 0x48
 80017ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001802:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	3348      	adds	r3, #72	; 0x48
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001828:	e007      	b.n	800183a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	431a      	orrs	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001854:	e007      	b.n	8001866 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	431a      	orrs	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	431a      	orrs	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001884:	f023 0201 	bic.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e006      	b.n	80018a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40006400 	.word	0x40006400

080018b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d12e      	bne.n	8001922 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fddc 	bl	8001498 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018e2:	e012      	b.n	800190a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e4:	f7ff fdd8 	bl	8001498 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d90b      	bls.n	800190a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2205      	movs	r2, #5
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e012      	b.n	8001930 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e5      	bne.n	80018e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e006      	b.n	8001930 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d003      	beq.n	8001964 <HAL_CAN_AddTxMessage+0x2c>
 800195c:	7ffb      	ldrb	r3, [r7, #31]
 800195e:	2b02      	cmp	r3, #2
 8001960:	f040 80b8 	bne.w	8001ad4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a0 	beq.w	8001ac4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	0e1b      	lsrs	r3, r3, #24
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d907      	bls.n	80019a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e09e      	b.n	8001ae2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019a4:	2201      	movs	r2, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	409a      	lsls	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	6809      	ldr	r1, [r1, #0]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3318      	adds	r3, #24
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	440b      	add	r3, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e00f      	b.n	80019f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3318      	adds	r3, #24
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3318      	adds	r3, #24
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	440b      	add	r3, r1
 8001a02:	3304      	adds	r3, #4
 8001a04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	7d1b      	ldrb	r3, [r3, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d111      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3318      	adds	r3, #24
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	6811      	ldr	r1, [r2, #0]
 8001a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3304      	adds	r3, #4
 8001a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3307      	adds	r3, #7
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	061a      	lsls	r2, r3, #24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3305      	adds	r3, #5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	3204      	adds	r2, #4
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	4610      	mov	r0, r2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	6811      	ldr	r1, [r2, #0]
 8001a5a:	ea43 0200 	orr.w	r2, r3, r0
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061a      	lsls	r2, r3, #24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3302      	adds	r3, #2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4313      	orrs	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	6811      	ldr	r1, [r2, #0]
 8001a90:	ea43 0200 	orr.w	r2, r3, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3318      	adds	r3, #24
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	440b      	add	r3, r1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e00e      	b.n	8001ae2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e006      	b.n	8001ae2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b00:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d002      	beq.n	8001b0e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_ActivateNotification+0x1e>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d109      	bne.n	8001b8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6959      	ldr	r1, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e006      	b.n	8001b98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d07c      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f983 	bl	8001f12 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c0c:	e016      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e00c      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e002      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f989 	bl	8001f4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f963 	bl	8001f26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c60:	e016      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	e00c      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e002      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f969 	bl	8001f62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d024      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f943 	bl	8001f3a <HAL_CAN_TxMailbox2CompleteCallback>
 8001cb4:	e016      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	e00c      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e002      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f949 	bl	8001f76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2208      	movs	r2, #8
 8001d22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f93a 	bl	8001f9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f921 	bl	8001f8a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f91c 	bl	8001fc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f903 	bl	8001fb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f906 	bl	8001fda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8ff 	bl	8001fee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07b      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d072      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d043      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03e      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e72:	2b60      	cmp	r3, #96	; 0x60
 8001e74:	d02b      	beq.n	8001ece <HAL_CAN_IRQHandler+0x32a>
 8001e76:	2b60      	cmp	r3, #96	; 0x60
 8001e78:	d82e      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e7a:	2b50      	cmp	r3, #80	; 0x50
 8001e7c:	d022      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x320>
 8001e7e:	2b50      	cmp	r3, #80	; 0x50
 8001e80:	d82a      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d019      	beq.n	8001eba <HAL_CAN_IRQHandler+0x316>
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d826      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e8a:	2b30      	cmp	r3, #48	; 0x30
 8001e8c:	d010      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x30c>
 8001e8e:	2b30      	cmp	r3, #48	; 0x30
 8001e90:	d822      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d002      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x2f8>
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d005      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e9a:	e01d      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea4:	e019      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eae:	e014      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb8:	e00f      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec2:	e00a      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ecc:	e005      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed6:	e000      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            break;
 8001ed8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ee8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f87c 	bl	8002002 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff29 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff3e 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff31 	bl	800207c <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff f926 	bl	8001498 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d008      	beq.n	800226c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e052      	b.n	8002312 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0216 	bic.w	r2, r2, #22
 800227a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_DMA_Abort+0x62>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0208 	bic.w	r2, r2, #8
 80022aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022bc:	e013      	b.n	80022e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022be:	f7ff f8eb 	bl	8001498 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d90c      	bls.n	80022e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2203      	movs	r2, #3
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e015      	b.n	8002312 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e4      	bne.n	80022be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	223f      	movs	r2, #63	; 0x3f
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d004      	beq.n	8002338 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e00c      	b.n	8002352 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2205      	movs	r2, #5
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236c:	b2db      	uxtb	r3, r3
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e165      	b.n	8002664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8154 	bne.w	800265e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80ae 	beq.w	800265e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_GPIO_Init+0x300>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a5c      	ldr	r2, [pc, #368]	; (800267c <HAL_GPIO_Init+0x300>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b5a      	ldr	r3, [pc, #360]	; (800267c <HAL_GPIO_Init+0x300>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_GPIO_Init+0x308>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d025      	beq.n	8002596 <HAL_GPIO_Init+0x21a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4e      	ldr	r2, [pc, #312]	; (8002688 <HAL_GPIO_Init+0x30c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <HAL_GPIO_Init+0x216>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_GPIO_Init+0x310>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_GPIO_Init+0x212>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_GPIO_Init+0x314>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_GPIO_Init+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x318>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00d      	beq.n	8002586 <HAL_GPIO_Init+0x20a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_GPIO_Init+0x31c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x206>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_GPIO_Init+0x320>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_GPIO_Init+0x202>
 800257a:	2306      	movs	r3, #6
 800257c:	e00c      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 800257e:	2307      	movs	r3, #7
 8002580:	e00a      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 8002582:	2305      	movs	r3, #5
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 8002586:	2304      	movs	r3, #4
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x21c>
 8002596:	2300      	movs	r3, #0
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a8:	4935      	ldr	r1, [pc, #212]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_GPIO_Init+0x324>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <HAL_GPIO_Init+0x324>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_GPIO_Init+0x324>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_GPIO_Init+0x324>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_GPIO_Init+0x324>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	f67f ae96 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400
 800268c:	40020800 	.word	0x40020800
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40021000 	.word	0x40021000
 8002698:	40021400 	.word	0x40021400
 800269c:	40021800 	.word	0x40021800
 80026a0:	40013c00 	.word	0x40013c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e12b      	b.n	8002942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fc9c 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800273c:	f002 fd2e 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a81      	ldr	r2, [pc, #516]	; (800294c <HAL_I2C_Init+0x274>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d807      	bhi.n	800275c <HAL_I2C_Init+0x84>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_I2C_Init+0x278>)
 8002750:	4293      	cmp	r3, r2
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e006      	b.n	800276a <HAL_I2C_Init+0x92>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a7d      	ldr	r2, [pc, #500]	; (8002954 <HAL_I2C_Init+0x27c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e7      	b.n	8002942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a78      	ldr	r2, [pc, #480]	; (8002958 <HAL_I2C_Init+0x280>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_I2C_Init+0x274>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d802      	bhi.n	80027ac <HAL_I2C_Init+0xd4>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	e009      	b.n	80027c0 <HAL_I2C_Init+0xe8>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_I2C_Init+0x284>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	495c      	ldr	r1, [pc, #368]	; (800294c <HAL_I2C_Init+0x274>)
 80027dc:	428b      	cmp	r3, r1
 80027de:	d819      	bhi.n	8002814 <HAL_I2C_Init+0x13c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e59      	subs	r1, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027f4:	400b      	ands	r3, r1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_I2C_Init+0x138>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e59      	subs	r1, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	e051      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002810:	2304      	movs	r3, #4
 8002812:	e04f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <HAL_I2C_Init+0x168>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_I2C_Init+0x18e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x196>
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_I2C_Init+0x1bc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e58      	subs	r0, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6911      	ldr	r1, [r2, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	003d08ff 	.word	0x003d08ff
 8002958:	431bde83 	.word	0x431bde83
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7fe fd90 	bl	8001498 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	f040 80e0 	bne.w	8002b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	4970      	ldr	r1, [pc, #448]	; (8002b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f002 f8e6 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e0d3      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x50>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0cc      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d007      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f001 fea8 	bl	8004774 <I2C_MasterRequestWrite>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e08d      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a44:	e066      	b.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f002 f960 	bl	8004d10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06b      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d017      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6a39      	ldr	r1, [r7, #32]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f002 f950 	bl	8004d92 <I2C_WaitOnBTFFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d107      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e01a      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d194      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	00100002 	.word	0x00100002
 8002b58:	ffff0000 	.word	0xffff0000

08002b5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	817b      	strh	r3, [r7, #10]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7fe fc92 	bl	8001498 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 820b 	bne.w	8002f9a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2319      	movs	r3, #25
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	497c      	ldr	r1, [pc, #496]	; (8002d80 <HAL_I2C_Master_Receive+0x224>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f001 ffe8 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e1fe      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Master_Receive+0x50>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e1f7      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2222      	movs	r2, #34	; 0x22
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2210      	movs	r2, #16
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	893a      	ldrh	r2, [r7, #8]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a5c      	ldr	r2, [pc, #368]	; (8002d84 <HAL_I2C_Master_Receive+0x228>)
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f001 fe2c 	bl	8004878 <I2C_MasterRequestRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1b8      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e18c      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11b      	bne.n	8002c9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e16c      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d11b      	bne.n	8002cda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	e14c      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d00:	e138      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	f200 80f1 	bhi.w	8002eee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d123      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f002 f8ad 	bl	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e139      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5a:	e10b      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d14e      	bne.n	8002e02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4906      	ldr	r1, [pc, #24]	; (8002d88 <HAL_I2C_Master_Receive+0x22c>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f001 fef8 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e10e      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000
 8002d88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e00:	e0b8      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4966      	ldr	r1, [pc, #408]	; (8002fa4 <HAL_I2C_Master_Receive+0x448>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f001 fea9 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0bf      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	494f      	ldr	r1, [pc, #316]	; (8002fa4 <HAL_I2C_Master_Receive+0x448>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f001 fe7b 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e091      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eec:	e042      	b.n	8002f74 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f001 ffc0 	bl	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e04c      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d118      	bne.n	8002f74 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f aec2 	bne.w	8002d02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010004 	.word	0x00010004

08002fa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d003      	beq.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x38>
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	f040 80c1 	bne.w	8003162 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_I2C_EV_IRQHandler+0x6e>
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003000:	d003      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x62>
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003008:	d101      	bne.n	800300e <HAL_I2C_EV_IRQHandler+0x66>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x68>
 800300e:	2300      	movs	r3, #0
 8003010:	2b01      	cmp	r3, #1
 8003012:	f000 8132 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x92>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	0a5b      	lsrs	r3, r3, #9
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f001 ffa8 	bl	8004f82 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd83 	bl	8003b3e <I2C_Master_SB>
 8003038:	e092      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0xb2>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0a5b      	lsrs	r3, r3, #9
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fdf9 	bl	8003c4a <I2C_Master_ADD10>
 8003058:	e082      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0xd2>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	0a5b      	lsrs	r3, r3, #9
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fe13 	bl	8003c9e <I2C_Master_ADDR>
 8003078:	e072      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03b      	beq.n	80030fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003094:	f000 80f3 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	09db      	lsrs	r3, r3, #7
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f9f3 	bl	80034a8 <I2C_MasterTransmit_TXE>
 80030c2:	e04d      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80d6 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	0a5b      	lsrs	r3, r3, #9
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80cf 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	2b21      	cmp	r3, #33	; 0x21
 80030e4:	d103      	bne.n	80030ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa7a 	bl	80035e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ec:	e0c7      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	f040 80c4 	bne.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fae8 	bl	80036cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fc:	e0bf      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	f000 80b7 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	099b      	lsrs	r3, r3, #6
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00f      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x194>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x194>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fb5d 	bl	80037f4 <I2C_MasterReceive_RXNE>
 800313a:	e011      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 809a 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8093 	beq.w	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fc06 	bl	800396a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315e:	e08e      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003160:	e08d      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e007      	b.n	8003184 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 ffc4 	bl	800413c <I2C_Slave_ADDR>
 80031b4:	e066      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0a5b      	lsrs	r3, r3, #9
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fffe 	bl	80041d0 <I2C_Slave_STOPF>
 80031d4:	e056      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	2b21      	cmp	r3, #33	; 0x21
 80031da:	d002      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	2b29      	cmp	r3, #41	; 0x29
 80031e0:	d125      	bne.n	800322e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	09db      	lsrs	r3, r3, #7
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00f      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x266>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0a9b      	lsrs	r3, r3, #10
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x266>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 feda 	bl	8003fc0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800320c:	e039      	b.n	8003282 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d033      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x2da>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	0a5b      	lsrs	r3, r3, #9
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d02d      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ff07 	bl	800403a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800322c:	e029      	b.n	8003282 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00f      	beq.n	800325a <HAL_I2C_EV_IRQHandler+0x2b2>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	0a9b      	lsrs	r3, r3, #10
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 ff12 	bl	800407c <I2C_SlaveReceive_RXNE>
 8003258:	e014      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0a5b      	lsrs	r3, r3, #9
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 ff40 	bl	80040f8 <I2C_SlaveReceive_BTF>
 8003278:	e004      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003282:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08a      	sub	sp, #40	; 0x28
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <HAL_I2C_ER_IRQHandler+0x78>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003300:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	0a9b      	lsrs	r3, r3, #10
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03f      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x104>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d039      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800331a:	7efb      	ldrb	r3, [r7, #27]
 800331c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003334:	7ebb      	ldrb	r3, [r7, #26]
 8003336:	2b20      	cmp	r3, #32
 8003338:	d112      	bne.n	8003360 <HAL_I2C_ER_IRQHandler+0xd6>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10f      	bne.n	8003360 <HAL_I2C_ER_IRQHandler+0xd6>
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b21      	cmp	r3, #33	; 0x21
 8003344:	d008      	beq.n	8003358 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b29      	cmp	r3, #41	; 0x29
 800334a:	d005      	beq.n	8003358 <HAL_I2C_ER_IRQHandler+0xce>
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b28      	cmp	r3, #40	; 0x28
 8003350:	d106      	bne.n	8003360 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b21      	cmp	r3, #33	; 0x21
 8003356:	d103      	bne.n	8003360 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 f869 	bl	8004430 <I2C_Slave_AF>
 800335e:	e016      	b.n	800338e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003368:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003372:	7efb      	ldrb	r3, [r7, #27]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d002      	beq.n	800337e <HAL_I2C_ER_IRQHandler+0xf4>
 8003378:	7efb      	ldrb	r3, [r7, #27]
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d107      	bne.n	800338e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0adb      	lsrs	r3, r3, #11
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f001 f8a0 	bl	8004510 <I2C_ITError>
  }
}
 80033d0:	bf00      	nop
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
 8003434:	4613      	mov	r3, r2
 8003436:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d150      	bne.n	8003570 <I2C_MasterTransmit_TXE+0xc8>
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b21      	cmp	r3, #33	; 0x21
 80034d2:	d14d      	bne.n	8003570 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d01d      	beq.n	8003516 <I2C_MasterTransmit_TXE+0x6e>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d01a      	beq.n	8003516 <I2C_MasterTransmit_TXE+0x6e>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e6:	d016      	beq.n	8003516 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2211      	movs	r2, #17
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff62 	bl	80033d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003514:	e060      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003524:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d107      	bne.n	8003560 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff7d 	bl	8003458 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800355e:	e03b      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff35 	bl	80033d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356e:	e033      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b21      	cmp	r3, #33	; 0x21
 8003574:	d005      	beq.n	8003582 <I2C_MasterTransmit_TXE+0xda>
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d12d      	bne.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b22      	cmp	r3, #34	; 0x22
 8003580:	d12a      	bne.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800359c:	e01c      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d103      	bne.n	80035b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f88e 	bl	80036cc <I2C_MemoryTransmit_TXE_BTF>
}
 80035b0:	e012      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d6:	e7ff      	b.n	80035d8 <I2C_MasterTransmit_TXE+0x130>
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b21      	cmp	r3, #33	; 0x21
 80035f8:	d164      	bne.n	80036c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d012      	beq.n	800362a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003628:	e04c      	b.n	80036c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d01d      	beq.n	800366c <I2C_MasterTransmit_BTF+0x8c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b20      	cmp	r3, #32
 8003634:	d01a      	beq.n	800366c <I2C_MasterTransmit_BTF+0x8c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363c:	d016      	beq.n	800366c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800364c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2211      	movs	r2, #17
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff feb7 	bl	80033d8 <HAL_I2C_MasterTxCpltCallback>
}
 800366a:	e02b      	b.n	80036c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800367a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d107      	bne.n	80036b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fed2 	bl	8003458 <HAL_I2C_MemTxCpltCallback>
}
 80036b4:	e006      	b.n	80036c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe8a 	bl	80033d8 <HAL_I2C_MasterTxCpltCallback>
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11d      	bne.n	8003720 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10b      	bne.n	8003704 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	1c9a      	adds	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003702:	e073      	b.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003708:	b29b      	uxth	r3, r3
 800370a:	121b      	asrs	r3, r3, #8
 800370c:	b2da      	uxtb	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800371e:	e065      	b.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10b      	bne.n	8003740 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800373e:	e055      	b.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	2b02      	cmp	r3, #2
 8003746:	d151      	bne.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b22      	cmp	r3, #34	; 0x22
 800374c:	d10d      	bne.n	800376a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003768:	e040      	b.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b21      	cmp	r3, #33	; 0x21
 8003778:	d112      	bne.n	80037a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800379e:	e025      	b.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d120      	bne.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b21      	cmp	r3, #33	; 0x21
 80037ae:	d11d      	bne.n	80037ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fe36 	bl	8003458 <HAL_I2C_MemTxCpltCallback>
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b22      	cmp	r3, #34	; 0x22
 8003806:	f040 80ac 	bne.w	8003962 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d921      	bls.n	800385c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b03      	cmp	r3, #3
 8003846:	f040 808c 	bne.w	8003962 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003858:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800385a:	e082      	b.n	8003962 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	2b02      	cmp	r3, #2
 8003862:	d075      	beq.n	8003950 <I2C_MasterReceive_RXNE+0x15c>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <I2C_MasterReceive_RXNE+0x7c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d16f      	bne.n	8003950 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 facf 	bl	8004e14 <I2C_WaitOnSTOPRequestThroughIT>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d142      	bne.n	8003902 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d10a      	bne.n	80038ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fdc1 	bl	800346c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038ea:	e03a      	b.n	8003962 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2212      	movs	r2, #18
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fd76 	bl	80033ec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003900:	e02f      	b.n	8003962 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003910:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fd99 	bl	8003480 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800394e:	e008      	b.n	8003962 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395e:	605a      	str	r2, [r3, #4]
}
 8003960:	e7ff      	b.n	8003962 <I2C_MasterReceive_RXNE+0x16e>
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b04      	cmp	r3, #4
 8003980:	d11b      	bne.n	80039ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039b8:	e0bd      	b.n	8003b36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d129      	bne.n	8003a18 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00a      	beq.n	80039f0 <I2C_MasterReceive_BTF+0x86>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d007      	beq.n	80039f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a16:	e08e      	b.n	8003b36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d176      	bne.n	8003b10 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d002      	beq.n	8003a2e <I2C_MasterReceive_BTF+0xc4>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e019      	b.n	8003a74 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d002      	beq.n	8003a4c <I2C_MasterReceive_BTF+0xe2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d108      	bne.n	8003a5e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e00a      	b.n	8003a74 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d007      	beq.n	8003a74 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ace:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d10a      	bne.n	8003afa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fcba 	bl	800346c <HAL_I2C_MemRxCpltCallback>
}
 8003af8:	e01d      	b.n	8003b36 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2212      	movs	r2, #18
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fc6f 	bl	80033ec <HAL_I2C_MasterRxCpltCallback>
}
 8003b0e:	e012      	b.n	8003b36 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d117      	bne.n	8003b82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b6c:	e067      	b.n	8003c3e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
}
 8003b80:	e05d      	b.n	8003c3e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d133      	bne.n	8003bf4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b21      	cmp	r3, #33	; 0x21
 8003b96:	d109      	bne.n	8003bac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	e008      	b.n	8003bbe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <I2C_Master_SB+0x92>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d108      	bne.n	8003be2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d032      	beq.n	8003c3e <I2C_Master_SB+0x100>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d02d      	beq.n	8003c3e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf0:	605a      	str	r2, [r3, #4]
}
 8003bf2:	e024      	b.n	8003c3e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	11db      	asrs	r3, r3, #7
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 0306 	and.w	r3, r3, #6
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f063 030f 	orn	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]
}
 8003c18:	e011      	b.n	8003c3e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	11db      	asrs	r3, r3, #7
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0306 	and.w	r3, r3, #6
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f063 030e 	orn	r3, r3, #14
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <I2C_Master_ADD10+0x26>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <I2C_Master_ADD10+0x48>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c90:	605a      	str	r2, [r3, #4]
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b091      	sub	sp, #68	; 0x44
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b22      	cmp	r3, #34	; 0x22
 8003cc6:	f040 8169 	bne.w	8003f9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <I2C_Master_ADDR+0x54>
 8003cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d10b      	bne.n	8003cf2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	e160      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <I2C_Master_ADDR+0x98>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d02:	d118      	bne.n	8003d36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50
 8003d34:	e13e      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e115      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 808a 	bne.w	8003e88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d7a:	d137      	bne.n	8003dec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d113      	bne.n	8003dc4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	e0e7      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e0d3      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d02e      	beq.n	8003e50 <I2C_Master_ADDR+0x1b2>
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d02b      	beq.n	8003e50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	2b12      	cmp	r3, #18
 8003dfc:	d102      	bne.n	8003e04 <I2C_Master_ADDR+0x166>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d125      	bne.n	8003e50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00e      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d00b      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d008      	beq.n	8003e28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	e0a1      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e085      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d14d      	bne.n	8003f2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d016      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d013      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d010      	beq.n	8003ec6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee4:	d117      	bne.n	8003f16 <I2C_Master_ADDR+0x278>
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eec:	d00b      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d008      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d005      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d002      	beq.n	8003f06 <I2C_Master_ADDR+0x268>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d107      	bne.n	8003f16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	e032      	b.n	8003f94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d117      	bne.n	8003f7e <I2C_Master_ADDR+0x2e0>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f54:	d00b      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d008      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d005      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d002      	beq.n	8003f6e <I2C_Master_ADDR+0x2d0>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d107      	bne.n	8003f7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f9a:	e00b      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	e7ff      	b.n	8003fb4 <I2C_Master_ADDR+0x316>
 8003fb4:	bf00      	nop
 8003fb6:	3744      	adds	r7, #68	; 0x44
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02b      	beq.n	8004032 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d114      	bne.n	8004032 <I2C_SlaveTransmit_TXE+0x72>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b29      	cmp	r3, #41	; 0x29
 800400c:	d111      	bne.n	8004032 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2221      	movs	r2, #33	; 0x21
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2228      	movs	r2, #40	; 0x28
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff f9e7 	bl	8003400 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d011      	beq.n	8004070 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02c      	beq.n	80040f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d114      	bne.n	80040f0 <I2C_SlaveReceive_RXNE+0x74>
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ca:	d111      	bne.n	80040f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2222      	movs	r2, #34	; 0x22
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2228      	movs	r2, #40	; 0x28
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff f992 	bl	8003414 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004156:	2b28      	cmp	r3, #40	; 0x28
 8004158:	d127      	bne.n	80041aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	09db      	lsrs	r3, r3, #7
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	81bb      	strh	r3, [r7, #12]
 800418c:	e002      	b.n	8004194 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800419c:	89ba      	ldrh	r2, [r7, #12]
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff f940 	bl	8003428 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041a8:	e00e      	b.n	80041c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422c:	d172      	bne.n	8004314 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b22      	cmp	r3, #34	; 0x22
 8004232:	d002      	beq.n	800423a <I2C_Slave_STOPF+0x6a>
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b2a      	cmp	r3, #42	; 0x2a
 8004238:	d135      	bne.n	80042a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0204 	orr.w	r2, r3, #4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe f873 	bl	800235e <HAL_DMA_GetState>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d049      	beq.n	8004312 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	4a69      	ldr	r2, [pc, #420]	; (8004428 <I2C_Slave_STOPF+0x258>)
 8004284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f845 	bl	800231a <HAL_DMA_Abort_IT>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03d      	beq.n	8004312 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042a0:	4610      	mov	r0, r2
 80042a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042a4:	e035      	b.n	8004312 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe f83d 	bl	800235e <HAL_DMA_GetState>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d014      	beq.n	8004314 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	4a4e      	ldr	r2, [pc, #312]	; (8004428 <I2C_Slave_STOPF+0x258>)
 80042f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f80f 	bl	800231a <HAL_DMA_Abort_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800430c:	4610      	mov	r0, r2
 800430e:	4798      	blx	r3
 8004310:	e000      	b.n	8004314 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004312:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d03e      	beq.n	800439c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d112      	bne.n	8004352 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d112      	bne.n	8004386 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0204 	orr.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8b3 	bl	8004510 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043aa:	e039      	b.n	8004420 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b2a      	cmp	r3, #42	; 0x2a
 80043b0:	d109      	bne.n	80043c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2228      	movs	r2, #40	; 0x28
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff f827 	bl	8003414 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b28      	cmp	r3, #40	; 0x28
 80043d0:	d111      	bne.n	80043f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <I2C_Slave_STOPF+0x25c>)
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff f828 	bl	8003444 <HAL_I2C_ListenCpltCallback>
}
 80043f4:	e014      	b.n	8004420 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	2b22      	cmp	r3, #34	; 0x22
 80043fc:	d002      	beq.n	8004404 <I2C_Slave_STOPF+0x234>
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b22      	cmp	r3, #34	; 0x22
 8004402:	d10d      	bne.n	8004420 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fe fffa 	bl	8003414 <HAL_I2C_SlaveRxCpltCallback>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	08004a15 	.word	0x08004a15
 800442c:	ffff0000 	.word	0xffff0000

08004430 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d002      	beq.n	8004452 <I2C_Slave_AF+0x22>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b20      	cmp	r3, #32
 8004450:	d129      	bne.n	80044a6 <I2C_Slave_AF+0x76>
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b28      	cmp	r3, #40	; 0x28
 8004456:	d126      	bne.n	80044a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <I2C_Slave_AF+0xdc>)
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800446c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004476:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fe ffd0 	bl	8003444 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044a4:	e02e      	b.n	8004504 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b21      	cmp	r3, #33	; 0x21
 80044aa:	d126      	bne.n	80044fa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <I2C_Slave_AF+0xdc>)
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fe ff84 	bl	8003400 <HAL_I2C_SlaveTxCpltCallback>
}
 80044f8:	e004      	b.n	8004504 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004502:	615a      	str	r2, [r3, #20]
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	ffff0000 	.word	0xffff0000

08004510 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004526:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004528:	7bbb      	ldrb	r3, [r7, #14]
 800452a:	2b10      	cmp	r3, #16
 800452c:	d002      	beq.n	8004534 <I2C_ITError+0x24>
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d10a      	bne.n	800454a <I2C_ITError+0x3a>
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b22      	cmp	r3, #34	; 0x22
 8004538:	d107      	bne.n	800454a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004548:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004550:	2b28      	cmp	r3, #40	; 0x28
 8004552:	d107      	bne.n	8004564 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2228      	movs	r2, #40	; 0x28
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004562:	e015      	b.n	8004590 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004572:	d00a      	beq.n	800458a <I2C_ITError+0x7a>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b60      	cmp	r3, #96	; 0x60
 8004578:	d007      	beq.n	800458a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d162      	bne.n	8004666 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d020      	beq.n	8004600 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	4a6a      	ldr	r2, [pc, #424]	; (800476c <I2C_ITError+0x25c>)
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fea5 	bl	800231a <HAL_DMA_Abort_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8089 	beq.w	80046ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fa:	4610      	mov	r0, r2
 80045fc:	4798      	blx	r3
 80045fe:	e074      	b.n	80046ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	4a59      	ldr	r2, [pc, #356]	; (800476c <I2C_ITError+0x25c>)
 8004606:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd fe84 	bl	800231a <HAL_DMA_Abort_IT>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d068      	beq.n	80046ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d10b      	bne.n	800463e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
 8004664:	e041      	b.n	80046ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b60      	cmp	r3, #96	; 0x60
 8004670:	d125      	bne.n	80046be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d10b      	bne.n	80046a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe feec 	bl	8003494 <HAL_I2C_AbortCpltCallback>
 80046bc:	e015      	b.n	80046ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10b      	bne.n	80046e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fe fecb 	bl	8003480 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10e      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d113      	bne.n	8004764 <I2C_ITError+0x254>
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b28      	cmp	r3, #40	; 0x28
 8004740:	d110      	bne.n	8004764 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <I2C_ITError+0x260>)
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fe70 	bl	8003444 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08004a15 	.word	0x08004a15
 8004770:	ffff0000 	.word	0xffff0000

08004774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	460b      	mov	r3, r1
 8004782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d006      	beq.n	800479e <I2C_MasterRequestWrite+0x2a>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d003      	beq.n	800479e <I2C_MasterRequestWrite+0x2a>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800479c:	d108      	bne.n	80047b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e00b      	b.n	80047c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	2b12      	cmp	r3, #18
 80047b6:	d107      	bne.n	80047c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f9c5 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ee:	d103      	bne.n	80047f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e035      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004804:	d108      	bne.n	8004818 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	e01b      	b.n	8004850 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004818:	897b      	ldrh	r3, [r7, #10]
 800481a:	11db      	asrs	r3, r3, #7
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f063 030f 	orn	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <I2C_MasterRequestWrite+0xfc>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f9eb 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e010      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004846:	897b      	ldrh	r3, [r7, #10]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <I2C_MasterRequestWrite+0x100>)
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f9db 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	00010008 	.word	0x00010008
 8004874:	00010002 	.word	0x00010002

08004878 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	460b      	mov	r3, r1
 8004886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800489c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d006      	beq.n	80048b2 <I2C_MasterRequestRead+0x3a>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d003      	beq.n	80048b2 <I2C_MasterRequestRead+0x3a>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b0:	d108      	bne.n	80048c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e00b      	b.n	80048dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	2b11      	cmp	r3, #17
 80048ca:	d107      	bne.n	80048dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f93b 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d103      	bne.n	800490c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e079      	b.n	8004a04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004918:	d108      	bne.n	800492c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800491a:	897b      	ldrh	r3, [r7, #10]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	611a      	str	r2, [r3, #16]
 800492a:	e05f      	b.n	80049ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	11db      	asrs	r3, r3, #7
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f063 030f 	orn	r3, r3, #15
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4930      	ldr	r1, [pc, #192]	; (8004a0c <I2C_MasterRequestRead+0x194>)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f961 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e054      	b.n	8004a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4929      	ldr	r1, [pc, #164]	; (8004a10 <I2C_MasterRequestRead+0x198>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f951 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e044      	b.n	8004a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800499e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f8d9 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d103      	bne.n	80049d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e017      	b.n	8004a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049d4:	897b      	ldrh	r3, [r7, #10]
 80049d6:	11db      	asrs	r3, r3, #7
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0306 	and.w	r3, r3, #6
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f063 030e 	orn	r3, r3, #14
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4907      	ldr	r1, [pc, #28]	; (8004a10 <I2C_MasterRequestRead+0x198>)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f90d 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	00010008 	.word	0x00010008
 8004a10:	00010002 	.word	0x00010002

08004a14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <I2C_DMAAbort+0x148>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	08db      	lsrs	r3, r3, #3
 8004a34:	4a4a      	ldr	r2, [pc, #296]	; (8004b60 <I2C_DMAAbort+0x14c>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	0a1a      	lsrs	r2, r3, #8
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00da      	lsls	r2, r3, #3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a5a:	e00a      	b.n	8004a72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d0ea      	beq.n	8004a48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	2200      	movs	r2, #0
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	2200      	movs	r2, #0
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b60      	cmp	r3, #96	; 0x60
 8004ae2:	d10e      	bne.n	8004b02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7fe fcca 	bl	8003494 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b00:	e027      	b.n	8004b52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b08:	2b28      	cmp	r3, #40	; 0x28
 8004b0a:	d117      	bne.n	8004b3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2228      	movs	r2, #40	; 0x28
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b3a:	e007      	b.n	8004b4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f7fe fc97 	bl	8003480 <HAL_I2C_ErrorCallback>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000010 	.word	0x20000010
 8004b60:	14f8b589 	.word	0x14f8b589

08004b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b74:	e025      	b.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d021      	beq.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fc fc8b 	bl	8001498 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0220 	orr.w	r2, r3, #32
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e023      	b.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10d      	bne.n	8004be8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	e00c      	b.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d0b6      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c20:	e051      	b.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c30:	d123      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f043 0204 	orr.w	r2, r3, #4
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e046      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d021      	beq.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc fc09 	bl	8001498 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e020      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d10c      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e00b      	b.n	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d18d      	bne.n	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d1c:	e02d      	b.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f900 	bl	8004f24 <I2C_IsAcknowledgeFailed>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e02d      	b.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d021      	beq.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc fbaf 	bl	8001498 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e007      	b.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	d1ca      	bne.n	8004d1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9e:	e02d      	b.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f8bf 	bl	8004f24 <I2C_IsAcknowledgeFailed>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02d      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d021      	beq.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fc fb6e 	bl	8001498 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d116      	bne.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d1ca      	bne.n	8004da0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	0a1a      	lsrs	r2, r3, #8
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e008      	b.n	8004e64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d0e9      	beq.n	8004e36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000010 	.word	0x20000010
 8004e74:	14f8b589 	.word	0x14f8b589

08004e78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e84:	e042      	b.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d119      	bne.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0210 	mvn.w	r2, #16
 8004e9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e029      	b.n	8004f1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fc fae6 	bl	8001498 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d116      	bne.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d1b5      	bne.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d11b      	bne.n	8004f74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0204 	orr.w	r2, r3, #4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f92:	d103      	bne.n	8004f9c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f9a:	e007      	b.n	8004fac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fa4:	d102      	bne.n	8004fac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0cc      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b63      	ldr	r3, [pc, #396]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0b8      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a58      	ldr	r2, [pc, #352]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	494d      	ldr	r1, [pc, #308]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d044      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d119      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e067      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4934      	ldr	r1, [pc, #208]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fc f9f6 	bl	8001498 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fc f9f2 	bl	8001498 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d20c      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4916      	ldr	r1, [pc, #88]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	490e      	ldr	r1, [pc, #56]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800513e:	f000 f855 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc f956 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	08008000 	.word	0x08008000
 800517c:	20000010 	.word	0x20000010
 8005180:	20000014 	.word	0x20000014

08005184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_RCC_GetHCLKFreq+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000010 	.word	0x20000010

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a0:	f7ff fff0 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4903      	ldr	r1, [pc, #12]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40023800 	.word	0x40023800
 80051c0:	08008010 	.word	0x08008010

080051c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051c8:	f7ff ffdc 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0b5b      	lsrs	r3, r3, #13
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4903      	ldr	r1, [pc, #12]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	08008010 	.word	0x08008010

080051ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f0:	b0ae      	sub	sp, #184	; 0xb8
 80051f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005212:	4bcb      	ldr	r3, [pc, #812]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b0c      	cmp	r3, #12
 800521c:	f200 8206 	bhi.w	800562c <HAL_RCC_GetSysClockFreq+0x440>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800562d 	.word	0x0800562d
 8005230:	0800562d 	.word	0x0800562d
 8005234:	0800562d 	.word	0x0800562d
 8005238:	08005265 	.word	0x08005265
 800523c:	0800562d 	.word	0x0800562d
 8005240:	0800562d 	.word	0x0800562d
 8005244:	0800562d 	.word	0x0800562d
 8005248:	0800526d 	.word	0x0800526d
 800524c:	0800562d 	.word	0x0800562d
 8005250:	0800562d 	.word	0x0800562d
 8005254:	0800562d 	.word	0x0800562d
 8005258:	0800545d 	.word	0x0800545d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4bb9      	ldr	r3, [pc, #740]	; (8005544 <HAL_RCC_GetSysClockFreq+0x358>)
 800525e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005262:	e1e7      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005264:	4bb8      	ldr	r3, [pc, #736]	; (8005548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800526a:	e1e3      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800526c:	4bb4      	ldr	r3, [pc, #720]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005278:	4bb1      	ldr	r3, [pc, #708]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d071      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005284:	4bae      	ldr	r3, [pc, #696]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005290:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052aa:	4622      	mov	r2, r4
 80052ac:	462b      	mov	r3, r5
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	0159      	lsls	r1, r3, #5
 80052b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052bc:	0150      	lsls	r0, r2, #5
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4621      	mov	r1, r4
 80052c4:	1a51      	subs	r1, r2, r1
 80052c6:	6439      	str	r1, [r7, #64]	; 0x40
 80052c8:	4629      	mov	r1, r5
 80052ca:	eb63 0301 	sbc.w	r3, r3, r1
 80052ce:	647b      	str	r3, [r7, #68]	; 0x44
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80052dc:	4649      	mov	r1, r9
 80052de:	018b      	lsls	r3, r1, #6
 80052e0:	4641      	mov	r1, r8
 80052e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052e6:	4641      	mov	r1, r8
 80052e8:	018a      	lsls	r2, r1, #6
 80052ea:	4641      	mov	r1, r8
 80052ec:	1a51      	subs	r1, r2, r1
 80052ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f0:	4649      	mov	r1, r9
 80052f2:	eb63 0301 	sbc.w	r3, r3, r1
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005304:	4649      	mov	r1, r9
 8005306:	00cb      	lsls	r3, r1, #3
 8005308:	4641      	mov	r1, r8
 800530a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530e:	4641      	mov	r1, r8
 8005310:	00ca      	lsls	r2, r1, #3
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	4603      	mov	r3, r0
 8005318:	4622      	mov	r2, r4
 800531a:	189b      	adds	r3, r3, r2
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
 800531e:	462b      	mov	r3, r5
 8005320:	460a      	mov	r2, r1
 8005322:	eb42 0303 	adc.w	r3, r2, r3
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005334:	4629      	mov	r1, r5
 8005336:	024b      	lsls	r3, r1, #9
 8005338:	4621      	mov	r1, r4
 800533a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800533e:	4621      	mov	r1, r4
 8005340:	024a      	lsls	r2, r1, #9
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005354:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005358:	f7fa ffaa 	bl	80002b0 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4613      	mov	r3, r2
 8005362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005366:	e067      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005368:	4b75      	ldr	r3, [pc, #468]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	099b      	lsrs	r3, r3, #6
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005374:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	67bb      	str	r3, [r7, #120]	; 0x78
 8005382:	2300      	movs	r3, #0
 8005384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	0159      	lsls	r1, r3, #5
 8005398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539c:	0150      	lsls	r0, r2, #5
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4621      	mov	r1, r4
 80053a4:	1a51      	subs	r1, r2, r1
 80053a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80053a8:	4629      	mov	r1, r5
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80053bc:	4649      	mov	r1, r9
 80053be:	018b      	lsls	r3, r1, #6
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c6:	4641      	mov	r1, r8
 80053c8:	018a      	lsls	r2, r1, #6
 80053ca:	4641      	mov	r1, r8
 80053cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80053d0:	4649      	mov	r1, r9
 80053d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ea:	4692      	mov	sl, r2
 80053ec:	469b      	mov	fp, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	eb1a 0303 	adds.w	r3, sl, r3
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	462b      	mov	r3, r5
 80053f8:	eb4b 0303 	adc.w	r3, fp, r3
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800540a:	4629      	mov	r1, r5
 800540c:	028b      	lsls	r3, r1, #10
 800540e:	4621      	mov	r1, r4
 8005410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005414:	4621      	mov	r1, r4
 8005416:	028a      	lsls	r2, r1, #10
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005420:	2200      	movs	r2, #0
 8005422:	673b      	str	r3, [r7, #112]	; 0x70
 8005424:	677a      	str	r2, [r7, #116]	; 0x74
 8005426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800542a:	f7fa ff41 	bl	80002b0 <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4613      	mov	r3, r2
 8005434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005438:	4b41      	ldr	r3, [pc, #260]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800544a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800544e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800545a:	e0eb      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800545c:	4b38      	ldr	r3, [pc, #224]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005468:	4b35      	ldr	r3, [pc, #212]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d06b      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <HAL_RCC_GetSysClockFreq+0x354>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	099b      	lsrs	r3, r3, #6
 800547a:	2200      	movs	r2, #0
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
 800547e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	663b      	str	r3, [r7, #96]	; 0x60
 8005488:	2300      	movs	r3, #0
 800548a:	667b      	str	r3, [r7, #100]	; 0x64
 800548c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	0159      	lsls	r1, r3, #5
 800549e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a2:	0150      	lsls	r0, r2, #5
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4621      	mov	r1, r4
 80054aa:	1a51      	subs	r1, r2, r1
 80054ac:	61b9      	str	r1, [r7, #24]
 80054ae:	4629      	mov	r1, r5
 80054b0:	eb63 0301 	sbc.w	r3, r3, r1
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80054c2:	4659      	mov	r1, fp
 80054c4:	018b      	lsls	r3, r1, #6
 80054c6:	4651      	mov	r1, sl
 80054c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054cc:	4651      	mov	r1, sl
 80054ce:	018a      	lsls	r2, r1, #6
 80054d0:	4651      	mov	r1, sl
 80054d2:	ebb2 0801 	subs.w	r8, r2, r1
 80054d6:	4659      	mov	r1, fp
 80054d8:	eb63 0901 	sbc.w	r9, r3, r1
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f0:	4690      	mov	r8, r2
 80054f2:	4699      	mov	r9, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	eb18 0303 	adds.w	r3, r8, r3
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	462b      	mov	r3, r5
 80054fe:	eb49 0303 	adc.w	r3, r9, r3
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005510:	4629      	mov	r1, r5
 8005512:	024b      	lsls	r3, r1, #9
 8005514:	4621      	mov	r1, r4
 8005516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800551a:	4621      	mov	r1, r4
 800551c:	024a      	lsls	r2, r1, #9
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005526:	2200      	movs	r2, #0
 8005528:	65bb      	str	r3, [r7, #88]	; 0x58
 800552a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800552c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005530:	f7fa febe 	bl	80002b0 <__aeabi_uldivmod>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4613      	mov	r3, r2
 800553a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800553e:	e065      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x420>
 8005540:	40023800 	.word	0x40023800
 8005544:	00f42400 	.word	0x00f42400
 8005548:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554c:	4b3d      	ldr	r3, [pc, #244]	; (8005644 <HAL_RCC_GetSysClockFreq+0x458>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	2200      	movs	r2, #0
 8005554:	4618      	mov	r0, r3
 8005556:	4611      	mov	r1, r2
 8005558:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800555c:	653b      	str	r3, [r7, #80]	; 0x50
 800555e:	2300      	movs	r3, #0
 8005560:	657b      	str	r3, [r7, #84]	; 0x54
 8005562:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005566:	4642      	mov	r2, r8
 8005568:	464b      	mov	r3, r9
 800556a:	f04f 0000 	mov.w	r0, #0
 800556e:	f04f 0100 	mov.w	r1, #0
 8005572:	0159      	lsls	r1, r3, #5
 8005574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005578:	0150      	lsls	r0, r2, #5
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4641      	mov	r1, r8
 8005580:	1a51      	subs	r1, r2, r1
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4649      	mov	r1, r9
 8005586:	eb63 0301 	sbc.w	r3, r3, r1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005598:	4659      	mov	r1, fp
 800559a:	018b      	lsls	r3, r1, #6
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a2:	4651      	mov	r1, sl
 80055a4:	018a      	lsls	r2, r1, #6
 80055a6:	4651      	mov	r1, sl
 80055a8:	1a54      	subs	r4, r2, r1
 80055aa:	4659      	mov	r1, fp
 80055ac:	eb63 0501 	sbc.w	r5, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	00eb      	lsls	r3, r5, #3
 80055ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055be:	00e2      	lsls	r2, r4, #3
 80055c0:	4614      	mov	r4, r2
 80055c2:	461d      	mov	r5, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	18e3      	adds	r3, r4, r3
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	464b      	mov	r3, r9
 80055cc:	eb45 0303 	adc.w	r3, r5, r3
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055de:	4629      	mov	r1, r5
 80055e0:	028b      	lsls	r3, r1, #10
 80055e2:	4621      	mov	r1, r4
 80055e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055e8:	4621      	mov	r1, r4
 80055ea:	028a      	lsls	r2, r1, #10
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f4:	2200      	movs	r2, #0
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055fe:	f7fa fe57 	bl	80002b0 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4613      	mov	r3, r2
 8005608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <HAL_RCC_GetSysClockFreq+0x458>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	0f1b      	lsrs	r3, r3, #28
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800561a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800561e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800562a:	e003      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_RCC_GetSysClockFreq+0x45c>)
 800562e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005638:	4618      	mov	r0, r3
 800563a:	37b8      	adds	r7, #184	; 0xb8
 800563c:	46bd      	mov	sp, r7
 800563e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
 8005648:	00f42400 	.word	0x00f42400

0800564c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e28d      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8083 	beq.w	8005772 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800566c:	4b94      	ldr	r3, [pc, #592]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b04      	cmp	r3, #4
 8005676:	d019      	beq.n	80056ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005678:	4b91      	ldr	r3, [pc, #580]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005680:	2b08      	cmp	r3, #8
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005684:	4b8e      	ldr	r3, [pc, #568]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005690:	d00c      	beq.n	80056ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005692:	4b8b      	ldr	r3, [pc, #556]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d112      	bne.n	80056c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569e:	4b88      	ldr	r3, [pc, #544]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056aa:	d10b      	bne.n	80056c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ac:	4b84      	ldr	r3, [pc, #528]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d05b      	beq.n	8005770 <HAL_RCC_OscConfig+0x124>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d157      	bne.n	8005770 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e25a      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d106      	bne.n	80056dc <HAL_RCC_OscConfig+0x90>
 80056ce:	4b7c      	ldr	r3, [pc, #496]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7b      	ldr	r2, [pc, #492]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e01d      	b.n	8005718 <HAL_RCC_OscConfig+0xcc>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0xb4>
 80056e6:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a75      	ldr	r2, [pc, #468]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b73      	ldr	r3, [pc, #460]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a72      	ldr	r2, [pc, #456]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e00b      	b.n	8005718 <HAL_RCC_OscConfig+0xcc>
 8005700:	4b6f      	ldr	r3, [pc, #444]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a6e      	ldr	r2, [pc, #440]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4b6c      	ldr	r3, [pc, #432]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6b      	ldr	r2, [pc, #428]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d013      	beq.n	8005748 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fb feba 	bl	8001498 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005728:	f7fb feb6 	bl	8001498 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e21f      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573a:	4b61      	ldr	r3, [pc, #388]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0xdc>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fb fea6 	bl	8001498 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005750:	f7fb fea2 	bl	8001498 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b64      	cmp	r3, #100	; 0x64
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e20b      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005762:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x104>
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d06f      	beq.n	800585e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800577e:	4b50      	ldr	r3, [pc, #320]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800578a:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005792:	2b08      	cmp	r3, #8
 8005794:	d105      	bne.n	80057a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005796:	4b4a      	ldr	r3, [pc, #296]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057a2:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d11c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ae:	4b44      	ldr	r3, [pc, #272]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ba:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_RCC_OscConfig+0x186>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d001      	beq.n	80057d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e1d3      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d2:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4937      	ldr	r1, [pc, #220]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e6:	e03a      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d020      	beq.n	8005832 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f0:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <HAL_RCC_OscConfig+0x278>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fb fe4f 	bl	8001498 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fb fe4b 	bl	8001498 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e1b4      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005810:	4b2b      	ldr	r3, [pc, #172]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4925      	ldr	r1, [pc, #148]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 800582c:	4313      	orrs	r3, r2
 800582e:	600b      	str	r3, [r1, #0]
 8005830:	e015      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_OscConfig+0x278>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fb fe2e 	bl	8001498 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005840:	f7fb fe2a 	bl	8001498 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e193      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d036      	beq.n	80058d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d016      	beq.n	80058a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_RCC_OscConfig+0x27c>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fb fe0e 	bl	8001498 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005880:	f7fb fe0a 	bl	8001498 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e173      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x234>
 800589e:	e01b      	b.n	80058d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fb fdf7 	bl	8001498 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	e00e      	b.n	80058cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ae:	f7fb fdf3 	bl	8001498 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d907      	bls.n	80058cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e15c      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
 80058c0:	40023800 	.word	0x40023800
 80058c4:	42470000 	.word	0x42470000
 80058c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058cc:	4b8a      	ldr	r3, [pc, #552]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 80058ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ea      	bne.n	80058ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8097 	beq.w	8005a14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ea:	4b83      	ldr	r3, [pc, #524]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	4b7f      	ldr	r3, [pc, #508]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	4a7e      	ldr	r2, [pc, #504]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005904:	6413      	str	r3, [r2, #64]	; 0x40
 8005906:	4b7c      	ldr	r3, [pc, #496]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005916:	4b79      	ldr	r3, [pc, #484]	; (8005afc <HAL_RCC_OscConfig+0x4b0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d118      	bne.n	8005954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005922:	4b76      	ldr	r3, [pc, #472]	; (8005afc <HAL_RCC_OscConfig+0x4b0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a75      	ldr	r2, [pc, #468]	; (8005afc <HAL_RCC_OscConfig+0x4b0>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800592e:	f7fb fdb3 	bl	8001498 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005936:	f7fb fdaf 	bl	8001498 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e118      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005948:	4b6c      	ldr	r3, [pc, #432]	; (8005afc <HAL_RCC_OscConfig+0x4b0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <HAL_RCC_OscConfig+0x31e>
 800595c:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
 8005968:	e01c      	b.n	80059a4 <HAL_RCC_OscConfig+0x358>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b05      	cmp	r3, #5
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x340>
 8005972:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	4a60      	ldr	r2, [pc, #384]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005978:	f043 0304 	orr.w	r3, r3, #4
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0x358>
 800598c:	4b5a      	ldr	r3, [pc, #360]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a59      	ldr	r2, [pc, #356]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
 8005998:	4b57      	ldr	r3, [pc, #348]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4a56      	ldr	r2, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 800599e:	f023 0304 	bic.w	r3, r3, #4
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fb fd74 	bl	8001498 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f7fb fd70 	bl	8001498 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e0d7      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	4b4b      	ldr	r3, [pc, #300]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0ee      	beq.n	80059b4 <HAL_RCC_OscConfig+0x368>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fb fd5e 	bl	8001498 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059de:	e00a      	b.n	80059f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e0:	f7fb fd5a 	bl	8001498 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e0c1      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f6:	4b40      	ldr	r3, [pc, #256]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1ee      	bne.n	80059e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a08:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80ad 	beq.w	8005b78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d060      	beq.n	8005aec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d145      	bne.n	8005abe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a32:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <HAL_RCC_OscConfig+0x4b4>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a38:	f7fb fd2e 	bl	8001498 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a40:	f7fb fd2a 	bl	8001498 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e093      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	3b01      	subs	r3, #1
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	491b      	ldr	r1, [pc, #108]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4b4>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fb fcff 	bl	8001498 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9e:	f7fb fcfb 	bl	8001498 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e064      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x452>
 8005abc:	e05c      	b.n	8005b78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_RCC_OscConfig+0x4b4>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fb fce8 	bl	8001498 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005acc:	f7fb fce4 	bl	8001498 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e04d      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_OscConfig+0x4ac>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x480>
 8005aea:	e045      	b.n	8005b78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e040      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40007000 	.word	0x40007000
 8005b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <HAL_RCC_OscConfig+0x538>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d030      	beq.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d129      	bne.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d122      	bne.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d119      	bne.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d10f      	bne.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d107      	bne.n	8005b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d001      	beq.n	8005b78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800

08005b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e03f      	b.n	8005c1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb fa9c 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd7b 	bl	80066c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b08a      	sub	sp, #40	; 0x28
 8005c26:	af02      	add	r7, sp, #8
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d17c      	bne.n	8005d3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_UART_Transmit+0x2c>
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e075      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Transmit+0x3e>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e06e      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2221      	movs	r2, #33	; 0x21
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c76:	f7fb fc0f 	bl	8001498 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d108      	bne.n	8005ca4 <HAL_UART_Transmit+0x82>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e003      	b.n	8005cac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cb4:	e02a      	b.n	8005d0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 faf9 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e036      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e007      	b.n	8005cfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1cf      	bne.n	8005cb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2140      	movs	r1, #64	; 0x40
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fac9 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b0ba      	sub	sp, #232	; 0xe8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10f      	bne.n	8005dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fbd3 	bl	8006552 <UART_Receive_IT>
      return;
 8005dac:	e256      	b.n	800625c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80de 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
 8005db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80d1 	beq.w	8005f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0204 	orr.w	r2, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 81ed 	beq.w	8006252 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fb5e 	bl	8006552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x17a>
 8005eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04f      	beq.n	8005f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa66 	bl	8006394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d141      	bne.n	8005f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1d9      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d013      	beq.n	8005f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4a7d      	ldr	r2, [pc, #500]	; (8006124 <HAL_UART_IRQHandler+0x3dc>)
 8005f30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc f9ef 	bl	800231a <HAL_DMA_Abort_IT>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e00e      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f99a 	bl	800628c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00a      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f996 	bl	800628c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e006      	b.n	8005f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f992 	bl	800628c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f6e:	e170      	b.n	8006252 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	bf00      	nop
    return;
 8005f72:	e16e      	b.n	8006252 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 814a 	bne.w	8006212 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8143 	beq.w	8006212 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 813c 	beq.w	8006212 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	f040 80b4 	bne.w	8006128 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8140 	beq.w	8006256 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f080 8139 	bcs.w	8006256 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	f000 8088 	beq.w	800610a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1d9      	bne.n	8005ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800606a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e1      	bne.n	8006046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e3      	bne.n	80060c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	4618      	mov	r0, r3
 8006106:	f7fc f898 	bl	800223a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006112:	b29b      	uxth	r3, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8c0 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006120:	e099      	b.n	8006256 <HAL_UART_IRQHandler+0x50e>
 8006122:	bf00      	nop
 8006124:	0800645b 	.word	0x0800645b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006130:	b29b      	uxth	r3, r3
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 808b 	beq.w	800625a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8086 	beq.w	800625a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006172:	647a      	str	r2, [r7, #68]	; 0x44
 8006174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	623b      	str	r3, [r7, #32]
   return(result);
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061aa:	633a      	str	r2, [r7, #48]	; 0x30
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e3      	bne.n	8006186 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60fb      	str	r3, [r7, #12]
   return(result);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061f0:	61fa      	str	r2, [r7, #28]
 80061f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	617b      	str	r3, [r7, #20]
   return(result);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e3      	bne.n	80061cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f848 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006210:	e023      	b.n	800625a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_UART_IRQHandler+0x4ea>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f929 	bl	8006482 <UART_Transmit_IT>
    return;
 8006230:	e014      	b.n	800625c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <HAL_UART_IRQHandler+0x514>
 800623e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f969 	bl	8006522 <UART_EndTransmit_IT>
    return;
 8006250:	e004      	b.n	800625c <HAL_UART_IRQHandler+0x514>
    return;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_UART_IRQHandler+0x514>
      return;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_UART_IRQHandler+0x514>
      return;
 800625a:	bf00      	nop
  }
}
 800625c:	37e8      	adds	r7, #232	; 0xe8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b090      	sub	sp, #64	; 0x40
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	e050      	b.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d04c      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d8:	f7fb f8de 	bl	8001498 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d241      	bcs.n	800636c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006308:	637a      	str	r2, [r7, #52]	; 0x34
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	613b      	str	r3, [r7, #16]
   return(result);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	623a      	str	r2, [r7, #32]
 800633e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	69f9      	ldr	r1, [r7, #28]
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	61bb      	str	r3, [r7, #24]
   return(result);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e5      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e00f      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	429a      	cmp	r2, r3
 8006388:	d09f      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3740      	adds	r7, #64	; 0x40
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b095      	sub	sp, #84	; 0x54
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	643a      	str	r2, [r7, #64]	; 0x40
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3314      	adds	r3, #20
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	2b01      	cmp	r3, #1
 800640a:	d119      	bne.n	8006440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60bb      	str	r3, [r7, #8]
   return(result);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	647b      	str	r3, [r7, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642c:	61ba      	str	r2, [r7, #24]
 800642e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800644e:	bf00      	nop
 8006450:	3754      	adds	r7, #84	; 0x54
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff ff09 	bl	800628c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b21      	cmp	r3, #33	; 0x21
 8006494:	d13e      	bne.n	8006514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d114      	bne.n	80064ca <UART_Transmit_IT+0x48>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d110      	bne.n	80064ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	1c9a      	adds	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]
 80064c8:	e008      	b.n	80064dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6211      	str	r1, [r2, #32]
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4619      	mov	r1, r3
 80064ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fe8e 	bl	8006264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b08c      	sub	sp, #48	; 0x30
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b22      	cmp	r3, #34	; 0x22
 8006564:	f040 80ab 	bne.w	80066be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d117      	bne.n	80065a2 <UART_Receive_IT+0x50>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	b29a      	uxth	r2, r3
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	1c9a      	adds	r2, r3, #2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28
 80065a0:	e026      	b.n	80065f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d007      	beq.n	80065c6 <UART_Receive_IT+0x74>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <UART_Receive_IT+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e008      	b.n	80065e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15a      	bne.n	80066ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0220 	bic.w	r2, r2, #32
 8006612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	2b01      	cmp	r3, #1
 8006642:	d135      	bne.n	80066b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f023 0310 	bic.w	r3, r3, #16
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	623a      	str	r2, [r7, #32]
 800666c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69f9      	ldr	r1, [r7, #28]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61bb      	str	r3, [r7, #24]
   return(result);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b10      	cmp	r3, #16
 800668a:	d10a      	bne.n	80066a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fdf9 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
 80066ae:	e002      	b.n	80066b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fde1 	bl	8006278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e002      	b.n	80066c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	; 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066cc:	b0c0      	sub	sp, #256	; 0x100
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	68d9      	ldr	r1, [r3, #12]
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	ea40 0301 	orr.w	r3, r0, r1
 80066f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	431a      	orrs	r2, r3
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006720:	f021 010c 	bic.w	r1, r1, #12
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672e:	430b      	orrs	r3, r1
 8006730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	6999      	ldr	r1, [r3, #24]
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	ea40 0301 	orr.w	r3, r0, r1
 800674e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b8f      	ldr	r3, [pc, #572]	; (8006994 <UART_SetConfig+0x2cc>)
 8006758:	429a      	cmp	r2, r3
 800675a:	d005      	beq.n	8006768 <UART_SetConfig+0xa0>
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b8d      	ldr	r3, [pc, #564]	; (8006998 <UART_SetConfig+0x2d0>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d104      	bne.n	8006772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fe fd2c 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 800676c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006770:	e003      	b.n	800677a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fd13 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8006776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	f040 810c 	bne.w	80069a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	1891      	adds	r1, r2, r2
 80067a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80067a2:	415b      	adcs	r3, r3
 80067a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067aa:	4621      	mov	r1, r4
 80067ac:	eb12 0801 	adds.w	r8, r2, r1
 80067b0:	4629      	mov	r1, r5
 80067b2:	eb43 0901 	adc.w	r9, r3, r1
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	eb18 0303 	adds.w	r3, r8, r3
 80067d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067d8:	462b      	mov	r3, r5
 80067da:	eb49 0303 	adc.w	r3, r9, r3
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067f6:	460b      	mov	r3, r1
 80067f8:	18db      	adds	r3, r3, r3
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
 80067fc:	4613      	mov	r3, r2
 80067fe:	eb42 0303 	adc.w	r3, r2, r3
 8006802:	657b      	str	r3, [r7, #84]	; 0x54
 8006804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800680c:	f7f9 fd50 	bl	80002b0 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4b61      	ldr	r3, [pc, #388]	; (800699c <UART_SetConfig+0x2d4>)
 8006816:	fba3 2302 	umull	r2, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	011c      	lsls	r4, r3, #4
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800682c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	1891      	adds	r1, r2, r2
 8006836:	64b9      	str	r1, [r7, #72]	; 0x48
 8006838:	415b      	adcs	r3, r3
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006840:	4641      	mov	r1, r8
 8006842:	eb12 0a01 	adds.w	sl, r2, r1
 8006846:	4649      	mov	r1, r9
 8006848:	eb43 0b01 	adc.w	fp, r3, r1
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800685c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006860:	4692      	mov	sl, r2
 8006862:	469b      	mov	fp, r3
 8006864:	4643      	mov	r3, r8
 8006866:	eb1a 0303 	adds.w	r3, sl, r3
 800686a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800686e:	464b      	mov	r3, r9
 8006870:	eb4b 0303 	adc.w	r3, fp, r3
 8006874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800688c:	460b      	mov	r3, r1
 800688e:	18db      	adds	r3, r3, r3
 8006890:	643b      	str	r3, [r7, #64]	; 0x40
 8006892:	4613      	mov	r3, r2
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	647b      	str	r3, [r7, #68]	; 0x44
 800689a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800689e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068a2:	f7f9 fd05 	bl	80002b0 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <UART_SetConfig+0x2d4>)
 80068ae:	fba3 2301 	umull	r2, r3, r3, r1
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2264      	movs	r2, #100	; 0x64
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	1acb      	subs	r3, r1, r3
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068c2:	4b36      	ldr	r3, [pc, #216]	; (800699c <UART_SetConfig+0x2d4>)
 80068c4:	fba3 2302 	umull	r2, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068d0:	441c      	add	r4, r3
 80068d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	1891      	adds	r1, r2, r2
 80068ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80068ec:	415b      	adcs	r3, r3
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068f4:	4641      	mov	r1, r8
 80068f6:	1851      	adds	r1, r2, r1
 80068f8:	6339      	str	r1, [r7, #48]	; 0x30
 80068fa:	4649      	mov	r1, r9
 80068fc:	414b      	adcs	r3, r1
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800690c:	4659      	mov	r1, fp
 800690e:	00cb      	lsls	r3, r1, #3
 8006910:	4651      	mov	r1, sl
 8006912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006916:	4651      	mov	r1, sl
 8006918:	00ca      	lsls	r2, r1, #3
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	4603      	mov	r3, r0
 8006920:	4642      	mov	r2, r8
 8006922:	189b      	adds	r3, r3, r2
 8006924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006928:	464b      	mov	r3, r9
 800692a:	460a      	mov	r2, r1
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006948:	460b      	mov	r3, r1
 800694a:	18db      	adds	r3, r3, r3
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
 800694e:	4613      	mov	r3, r2
 8006950:	eb42 0303 	adc.w	r3, r2, r3
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800695a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800695e:	f7f9 fca7 	bl	80002b0 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <UART_SetConfig+0x2d4>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	; 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a08      	ldr	r2, [pc, #32]	; (800699c <UART_SetConfig+0x2d4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 0207 	and.w	r2, r3, #7
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4422      	add	r2, r4
 800698e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006990:	e105      	b.n	8006b9e <UART_SetConfig+0x4d6>
 8006992:	bf00      	nop
 8006994:	40011000 	.word	0x40011000
 8006998:	40011400 	.word	0x40011400
 800699c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069b2:	4642      	mov	r2, r8
 80069b4:	464b      	mov	r3, r9
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	6239      	str	r1, [r7, #32]
 80069ba:	415b      	adcs	r3, r3
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069c2:	4641      	mov	r1, r8
 80069c4:	1854      	adds	r4, r2, r1
 80069c6:	4649      	mov	r1, r9
 80069c8:	eb43 0501 	adc.w	r5, r3, r1
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	00eb      	lsls	r3, r5, #3
 80069d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069da:	00e2      	lsls	r2, r4, #3
 80069dc:	4614      	mov	r4, r2
 80069de:	461d      	mov	r5, r3
 80069e0:	4643      	mov	r3, r8
 80069e2:	18e3      	adds	r3, r4, r3
 80069e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069e8:	464b      	mov	r3, r9
 80069ea:	eb45 0303 	adc.w	r3, r5, r3
 80069ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a0e:	4629      	mov	r1, r5
 8006a10:	008b      	lsls	r3, r1, #2
 8006a12:	4621      	mov	r1, r4
 8006a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a18:	4621      	mov	r1, r4
 8006a1a:	008a      	lsls	r2, r1, #2
 8006a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a20:	f7f9 fc46 	bl	80002b0 <__aeabi_uldivmod>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <UART_SetConfig+0x4e4>)
 8006a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	011c      	lsls	r4, r3, #4
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	61b9      	str	r1, [r7, #24]
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a54:	4641      	mov	r1, r8
 8006a56:	1851      	adds	r1, r2, r1
 8006a58:	6139      	str	r1, [r7, #16]
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	414b      	adcs	r3, r1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	00cb      	lsls	r3, r1, #3
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a76:	4651      	mov	r1, sl
 8006a78:	00ca      	lsls	r2, r1, #3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4642      	mov	r2, r8
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a88:	464b      	mov	r3, r9
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006aac:	4649      	mov	r1, r9
 8006aae:	008b      	lsls	r3, r1, #2
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	008a      	lsls	r2, r1, #2
 8006aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006abe:	f7f9 fbf7 	bl	80002b0 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <UART_SetConfig+0x4e4>)
 8006ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2164      	movs	r1, #100	; 0x64
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	3332      	adds	r3, #50	; 0x32
 8006ada:	4a34      	ldr	r2, [pc, #208]	; (8006bac <UART_SetConfig+0x4e4>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae6:	441c      	add	r4, r3
 8006ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aec:	2200      	movs	r2, #0
 8006aee:	673b      	str	r3, [r7, #112]	; 0x70
 8006af0:	677a      	str	r2, [r7, #116]	; 0x74
 8006af2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006af6:	4642      	mov	r2, r8
 8006af8:	464b      	mov	r3, r9
 8006afa:	1891      	adds	r1, r2, r2
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	415b      	adcs	r3, r3
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b06:	4641      	mov	r1, r8
 8006b08:	1851      	adds	r1, r2, r1
 8006b0a:	6039      	str	r1, [r7, #0]
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	414b      	adcs	r3, r1
 8006b10:	607b      	str	r3, [r7, #4]
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b1e:	4659      	mov	r1, fp
 8006b20:	00cb      	lsls	r3, r1, #3
 8006b22:	4651      	mov	r1, sl
 8006b24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b28:	4651      	mov	r1, sl
 8006b2a:	00ca      	lsls	r2, r1, #3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4603      	mov	r3, r0
 8006b32:	4642      	mov	r2, r8
 8006b34:	189b      	adds	r3, r3, r2
 8006b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b38:	464b      	mov	r3, r9
 8006b3a:	460a      	mov	r2, r1
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b4c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	008b      	lsls	r3, r1, #2
 8006b5e:	4641      	mov	r1, r8
 8006b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b64:	4641      	mov	r1, r8
 8006b66:	008a      	lsls	r2, r1, #2
 8006b68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b6c:	f7f9 fba0 	bl	80002b0 <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <UART_SetConfig+0x4e4>)
 8006b76:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	2164      	movs	r1, #100	; 0x64
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	3332      	adds	r3, #50	; 0x32
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <UART_SetConfig+0x4e4>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4422      	add	r2, r4
 8006b9c:	609a      	str	r2, [r3, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006baa:	bf00      	nop
 8006bac:	51eb851f 	.word	0x51eb851f

08006bb0 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460a      	mov	r2, r1
 8006bba:	80fb      	strh	r3, [r7, #6]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8006bc4:	797b      	ldrb	r3, [r7, #5]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f994 	bl	8006efc <VL53L1_WrByte>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	73fb      	strb	r3, [r7, #15]
	return status;
 8006bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	73bb      	strb	r3, [r7, #14]
 8006c02:	e011      	b.n	8006c28 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	b299      	uxth	r1, r3
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	3b2d      	subs	r3, #45	; 0x2d
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <VL53L1X_SensorInit+0xd4>)
 8006c0e:	5cd2      	ldrb	r2, [r2, r3]
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f972 	bl	8006efc <VL53L1_WrByte>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	3301      	adds	r3, #1
 8006c26:	73bb      	strb	r3, [r7, #14]
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b87      	cmp	r3, #135	; 0x87
 8006c2c:	d9ea      	bls.n	8006c04 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 f889 	bl	8006d48 <VL53L1X_StartRanging>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8006c44:	e00b      	b.n	8006c5e <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8006c46:	f107 020d 	add.w	r2, r7, #13
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f8aa 	bl	8006da8 <VL53L1X_CheckForDataReady>
 8006c54:	4603      	mov	r3, r0
 8006c56:	461a      	mov	r2, r3
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8006c5e:	7b7b      	ldrb	r3, [r7, #13]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f82c 	bl	8006cc4 <VL53L1X_ClearInterrupt>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f87d 	bl	8006d78 <VL53L1X_StopRanging>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	2209      	movs	r2, #9
 8006c8c:	2108      	movs	r1, #8
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f934 	bl	8006efc <VL53L1_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	210b      	movs	r1, #11
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f929 	bl	8006efc <VL53L1_WrByte>
 8006caa:	4603      	mov	r3, r0
 8006cac:	461a      	mov	r2, r3
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	73fb      	strb	r3, [r7, #15]
	return status;
 8006cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	08008018 	.word	0x08008018

08006cc4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	2186      	movs	r1, #134	; 0x86
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f90f 	bl	8006efc <VL53L1_WrByte>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	73fb      	strb	r3, [r7, #15]
	return status;
 8006ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8006d04:	f107 020e 	add.w	r2, r7, #14
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2130      	movs	r1, #48	; 0x30
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f921 	bl	8006f54 <VL53L1_RdByte>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	701a      	strb	r2, [r3, #0]
	return status;
 8006d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2240      	movs	r2, #64	; 0x40
 8006d5a:	2187      	movs	r1, #135	; 0x87
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f8cd 	bl	8006efc <VL53L1_WrByte>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2187      	movs	r1, #135	; 0x87
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f8b5 	bl	8006efc <VL53L1_WrByte>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8006db8:	f107 020d 	add.w	r2, r7, #13
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff97 	bl	8006cf4 <VL53L1X_GetInterruptPolarity>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8006dd0:	f107 020e 	add.w	r2, r7, #14
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	2131      	movs	r1, #49	; 0x31
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f8bb 	bl	8006f54 <VL53L1_RdByte>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8006de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10c      	bne.n	8006e0a <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	7b7a      	ldrb	r2, [r7, #13]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8006e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	6039      	str	r1, [r7, #0]
 8006e20:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8006e2a:	f107 020e 	add.w	r2, r7, #14
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	21e5      	movs	r1, #229	; 0xe5
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f88e 	bl	8006f54 <VL53L1_RdByte>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8006e42:	7bba      	ldrb	r2, [r7, #14]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	701a      	strb	r2, [r3, #0]
	return status;
 8006e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8006e64:	f107 020c 	add.w	r2, r7, #12
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	2196      	movs	r1, #150	; 0x96
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f8a9 	bl	8006fc4 <VL53L1_RdWord>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006e7c:	89ba      	ldrh	r2, [r7, #12]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	801a      	strh	r2, [r3, #0]
	return status;
 8006e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	4603      	mov	r3, r0
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	89f9      	ldrh	r1, [r7, #14]
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	9200      	str	r2, [sp, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <_I2CWrite+0x30>)
 8006eac:	f7fb fd58 	bl	8002960 <HAL_I2C_Master_Transmit>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006eb4:	697b      	ldr	r3, [r7, #20]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200000c4 	.word	0x200000c4

08006ec4 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	4603      	mov	r3, r0
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	b299      	uxth	r1, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	220a      	movs	r2, #10
 8006ee0:	9200      	str	r2, [sp, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4804      	ldr	r0, [pc, #16]	; (8006ef8 <_I2CRead+0x34>)
 8006ee6:	f7fb fe39 	bl	8002b5c <HAL_I2C_Master_Receive>
 8006eea:	4603      	mov	r3, r0
 8006eec:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006eee:	697b      	ldr	r3, [r7, #20]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200000c4 	.word	0x200000c4

08006efc <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	80fb      	strh	r3, [r7, #6]
 8006f06:	460b      	mov	r3, r1
 8006f08:	80bb      	strh	r3, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006f12:	88bb      	ldrh	r3, [r7, #4]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <VL53L1_WrByte+0x54>)
 8006f1c:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <VL53L1_WrByte+0x54>)
 8006f24:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8006f26:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <VL53L1_WrByte+0x54>)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	2203      	movs	r2, #3
 8006f30:	4907      	ldr	r1, [pc, #28]	; (8006f50 <VL53L1_WrByte+0x54>)
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff ffac 	bl	8006e90 <_I2CWrite>
 8006f38:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f40:	23f3      	movs	r3, #243	; 0xf3
 8006f42:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8006f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200001b0 	.word	0x200001b0

08006f54 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	603a      	str	r2, [r7, #0]
 8006f5e:	80fb      	strh	r3, [r7, #6]
 8006f60:	460b      	mov	r3, r1
 8006f62:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006f68:	88bb      	ldrh	r3, [r7, #4]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <VL53L1_RdByte+0x6c>)
 8006f72:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006f74:	88bb      	ldrh	r3, [r7, #4]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <VL53L1_RdByte+0x6c>)
 8006f7a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	490f      	ldr	r1, [pc, #60]	; (8006fc0 <VL53L1_RdByte+0x6c>)
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ff84 	bl	8006e90 <_I2CWrite>
 8006f88:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f90:	23f3      	movs	r3, #243	; 0xf3
 8006f92:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006f94:	e00d      	b.n	8006fb2 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff91 	bl	8006ec4 <_I2CRead>
 8006fa2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006faa:	23f3      	movs	r3, #243	; 0xf3
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	e000      	b.n	8006fb2 <VL53L1_RdByte+0x5e>
    }
done:
 8006fb0:	bf00      	nop
    return Status;
 8006fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200001b0 	.word	0x200001b0

08006fc4 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	603a      	str	r2, [r7, #0]
 8006fce:	80fb      	strh	r3, [r7, #6]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006fd8:	88bb      	ldrh	r3, [r7, #4]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b18      	ldr	r3, [pc, #96]	; (8007044 <VL53L1_RdWord+0x80>)
 8006fe2:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006fe4:	88bb      	ldrh	r3, [r7, #4]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	4b16      	ldr	r3, [pc, #88]	; (8007044 <VL53L1_RdWord+0x80>)
 8006fea:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	4914      	ldr	r1, [pc, #80]	; (8007044 <VL53L1_RdWord+0x80>)
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff4c 	bl	8006e90 <_I2CWrite>
 8006ff8:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007000:	23f3      	movs	r3, #243	; 0xf3
 8007002:	73fb      	strb	r3, [r7, #15]
        goto done;
 8007004:	e018      	b.n	8007038 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	2202      	movs	r2, #2
 800700a:	490e      	ldr	r1, [pc, #56]	; (8007044 <VL53L1_RdWord+0x80>)
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff ff59 	bl	8006ec4 <_I2CRead>
 8007012:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800701a:	23f3      	movs	r3, #243	; 0xf3
 800701c:	73fb      	strb	r3, [r7, #15]
        goto done;
 800701e:	e00b      	b.n	8007038 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007020:	4b08      	ldr	r3, [pc, #32]	; (8007044 <VL53L1_RdWord+0x80>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	b29a      	uxth	r2, r3
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <VL53L1_RdWord+0x80>)
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	b29b      	uxth	r3, r3
 8007030:	4413      	add	r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8007038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200001b0 	.word	0x200001b0

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	; (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2000001c 	.word	0x2000001c

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 ffae 	bl	8007fc8 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	08008114 	.word	0x08008114
 8007090:	08008114 	.word	0x08008114
 8007094:	08008114 	.word	0x08008114
 8007098:	08008118 	.word	0x08008118

0800709c <memset>:
 800709c:	4402      	add	r2, r0
 800709e:	4603      	mov	r3, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>

080070ac <iprintf>:
 80070ac:	b40f      	push	{r0, r1, r2, r3}
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <iprintf+0x2c>)
 80070b0:	b513      	push	{r0, r1, r4, lr}
 80070b2:	681c      	ldr	r4, [r3, #0]
 80070b4:	b124      	cbz	r4, 80070c0 <iprintf+0x14>
 80070b6:	69a3      	ldr	r3, [r4, #24]
 80070b8:	b913      	cbnz	r3, 80070c0 <iprintf+0x14>
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f866 	bl	800718c <__sinit>
 80070c0:	ab05      	add	r3, sp, #20
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	68a1      	ldr	r1, [r4, #8]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f9bd 	bl	8007448 <_vfiprintf_r>
 80070ce:	b002      	add	sp, #8
 80070d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d4:	b004      	add	sp, #16
 80070d6:	4770      	bx	lr
 80070d8:	2000001c 	.word	0x2000001c

080070dc <std>:
 80070dc:	2300      	movs	r3, #0
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	e9c0 3300 	strd	r3, r3, [r0]
 80070e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ea:	6083      	str	r3, [r0, #8]
 80070ec:	8181      	strh	r1, [r0, #12]
 80070ee:	6643      	str	r3, [r0, #100]	; 0x64
 80070f0:	81c2      	strh	r2, [r0, #14]
 80070f2:	6183      	str	r3, [r0, #24]
 80070f4:	4619      	mov	r1, r3
 80070f6:	2208      	movs	r2, #8
 80070f8:	305c      	adds	r0, #92	; 0x5c
 80070fa:	f7ff ffcf 	bl	800709c <memset>
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <std+0x38>)
 8007100:	6263      	str	r3, [r4, #36]	; 0x24
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <std+0x3c>)
 8007104:	62a3      	str	r3, [r4, #40]	; 0x28
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <std+0x40>)
 8007108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <std+0x44>)
 800710c:	6224      	str	r4, [r4, #32]
 800710e:	6323      	str	r3, [r4, #48]	; 0x30
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	080079f1 	.word	0x080079f1
 8007118:	08007a13 	.word	0x08007a13
 800711c:	08007a4b 	.word	0x08007a4b
 8007120:	08007a6f 	.word	0x08007a6f

08007124 <_cleanup_r>:
 8007124:	4901      	ldr	r1, [pc, #4]	; (800712c <_cleanup_r+0x8>)
 8007126:	f000 b8af 	b.w	8007288 <_fwalk_reent>
 800712a:	bf00      	nop
 800712c:	08007d49 	.word	0x08007d49

08007130 <__sfmoreglue>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	2268      	movs	r2, #104	; 0x68
 8007134:	1e4d      	subs	r5, r1, #1
 8007136:	4355      	muls	r5, r2
 8007138:	460e      	mov	r6, r1
 800713a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800713e:	f000 f8e5 	bl	800730c <_malloc_r>
 8007142:	4604      	mov	r4, r0
 8007144:	b140      	cbz	r0, 8007158 <__sfmoreglue+0x28>
 8007146:	2100      	movs	r1, #0
 8007148:	e9c0 1600 	strd	r1, r6, [r0]
 800714c:	300c      	adds	r0, #12
 800714e:	60a0      	str	r0, [r4, #8]
 8007150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007154:	f7ff ffa2 	bl	800709c <memset>
 8007158:	4620      	mov	r0, r4
 800715a:	bd70      	pop	{r4, r5, r6, pc}

0800715c <__sfp_lock_acquire>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sfp_lock_acquire+0x8>)
 800715e:	f000 b8b3 	b.w	80072c8 <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	200002b1 	.word	0x200002b1

08007168 <__sfp_lock_release>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sfp_lock_release+0x8>)
 800716a:	f000 b8ae 	b.w	80072ca <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	200002b1 	.word	0x200002b1

08007174 <__sinit_lock_acquire>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__sinit_lock_acquire+0x8>)
 8007176:	f000 b8a7 	b.w	80072c8 <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	200002b2 	.word	0x200002b2

08007180 <__sinit_lock_release>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__sinit_lock_release+0x8>)
 8007182:	f000 b8a2 	b.w	80072ca <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	200002b2 	.word	0x200002b2

0800718c <__sinit>:
 800718c:	b510      	push	{r4, lr}
 800718e:	4604      	mov	r4, r0
 8007190:	f7ff fff0 	bl	8007174 <__sinit_lock_acquire>
 8007194:	69a3      	ldr	r3, [r4, #24]
 8007196:	b11b      	cbz	r3, 80071a0 <__sinit+0x14>
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	f7ff bff0 	b.w	8007180 <__sinit_lock_release>
 80071a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071a4:	6523      	str	r3, [r4, #80]	; 0x50
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <__sinit+0x68>)
 80071a8:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <__sinit+0x6c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	bf04      	itt	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	61a3      	streq	r3, [r4, #24]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f820 	bl	80071fc <__sfp>
 80071bc:	6060      	str	r0, [r4, #4]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f81c 	bl	80071fc <__sfp>
 80071c4:	60a0      	str	r0, [r4, #8]
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f818 	bl	80071fc <__sfp>
 80071cc:	2200      	movs	r2, #0
 80071ce:	60e0      	str	r0, [r4, #12]
 80071d0:	2104      	movs	r1, #4
 80071d2:	6860      	ldr	r0, [r4, #4]
 80071d4:	f7ff ff82 	bl	80070dc <std>
 80071d8:	68a0      	ldr	r0, [r4, #8]
 80071da:	2201      	movs	r2, #1
 80071dc:	2109      	movs	r1, #9
 80071de:	f7ff ff7d 	bl	80070dc <std>
 80071e2:	68e0      	ldr	r0, [r4, #12]
 80071e4:	2202      	movs	r2, #2
 80071e6:	2112      	movs	r1, #18
 80071e8:	f7ff ff78 	bl	80070dc <std>
 80071ec:	2301      	movs	r3, #1
 80071ee:	61a3      	str	r3, [r4, #24]
 80071f0:	e7d2      	b.n	8007198 <__sinit+0xc>
 80071f2:	bf00      	nop
 80071f4:	08008074 	.word	0x08008074
 80071f8:	08007125 	.word	0x08007125

080071fc <__sfp>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	4607      	mov	r7, r0
 8007200:	f7ff ffac 	bl	800715c <__sfp_lock_acquire>
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <__sfp+0x84>)
 8007206:	681e      	ldr	r6, [r3, #0]
 8007208:	69b3      	ldr	r3, [r6, #24]
 800720a:	b913      	cbnz	r3, 8007212 <__sfp+0x16>
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff ffbd 	bl	800718c <__sinit>
 8007212:	3648      	adds	r6, #72	; 0x48
 8007214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007218:	3b01      	subs	r3, #1
 800721a:	d503      	bpl.n	8007224 <__sfp+0x28>
 800721c:	6833      	ldr	r3, [r6, #0]
 800721e:	b30b      	cbz	r3, 8007264 <__sfp+0x68>
 8007220:	6836      	ldr	r6, [r6, #0]
 8007222:	e7f7      	b.n	8007214 <__sfp+0x18>
 8007224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007228:	b9d5      	cbnz	r5, 8007260 <__sfp+0x64>
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <__sfp+0x88>)
 800722c:	60e3      	str	r3, [r4, #12]
 800722e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007232:	6665      	str	r5, [r4, #100]	; 0x64
 8007234:	f000 f847 	bl	80072c6 <__retarget_lock_init_recursive>
 8007238:	f7ff ff96 	bl	8007168 <__sfp_lock_release>
 800723c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007244:	6025      	str	r5, [r4, #0]
 8007246:	61a5      	str	r5, [r4, #24]
 8007248:	2208      	movs	r2, #8
 800724a:	4629      	mov	r1, r5
 800724c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007250:	f7ff ff24 	bl	800709c <memset>
 8007254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800725c:	4620      	mov	r0, r4
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	3468      	adds	r4, #104	; 0x68
 8007262:	e7d9      	b.n	8007218 <__sfp+0x1c>
 8007264:	2104      	movs	r1, #4
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ff62 	bl	8007130 <__sfmoreglue>
 800726c:	4604      	mov	r4, r0
 800726e:	6030      	str	r0, [r6, #0]
 8007270:	2800      	cmp	r0, #0
 8007272:	d1d5      	bne.n	8007220 <__sfp+0x24>
 8007274:	f7ff ff78 	bl	8007168 <__sfp_lock_release>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	e7ee      	b.n	800725c <__sfp+0x60>
 800727e:	bf00      	nop
 8007280:	08008074 	.word	0x08008074
 8007284:	ffff0001 	.word	0xffff0001

08007288 <_fwalk_reent>:
 8007288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800728c:	4606      	mov	r6, r0
 800728e:	4688      	mov	r8, r1
 8007290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007294:	2700      	movs	r7, #0
 8007296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800729a:	f1b9 0901 	subs.w	r9, r9, #1
 800729e:	d505      	bpl.n	80072ac <_fwalk_reent+0x24>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d1f7      	bne.n	8007296 <_fwalk_reent+0xe>
 80072a6:	4638      	mov	r0, r7
 80072a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ac:	89ab      	ldrh	r3, [r5, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d907      	bls.n	80072c2 <_fwalk_reent+0x3a>
 80072b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072b6:	3301      	adds	r3, #1
 80072b8:	d003      	beq.n	80072c2 <_fwalk_reent+0x3a>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4630      	mov	r0, r6
 80072be:	47c0      	blx	r8
 80072c0:	4307      	orrs	r7, r0
 80072c2:	3568      	adds	r5, #104	; 0x68
 80072c4:	e7e9      	b.n	800729a <_fwalk_reent+0x12>

080072c6 <__retarget_lock_init_recursive>:
 80072c6:	4770      	bx	lr

080072c8 <__retarget_lock_acquire_recursive>:
 80072c8:	4770      	bx	lr

080072ca <__retarget_lock_release_recursive>:
 80072ca:	4770      	bx	lr

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0e      	ldr	r6, [pc, #56]	; (8007308 <sbrk_aligned+0x3c>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fb7a 	bl	80079d0 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fb75 	bl	80079d0 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <sbrk_aligned+0x34>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d007      	beq.n	8007304 <sbrk_aligned+0x38>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fb6a 	bl	80079d0 <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d101      	bne.n	8007304 <sbrk_aligned+0x38>
 8007300:	f04f 34ff 	mov.w	r4, #4294967295
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	200002b8 	.word	0x200002b8

0800730c <_malloc_r>:
 800730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007310:	1ccd      	adds	r5, r1, #3
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	2d00      	cmp	r5, #0
 8007320:	4607      	mov	r7, r0
 8007322:	db01      	blt.n	8007328 <_malloc_r+0x1c>
 8007324:	42a9      	cmp	r1, r5
 8007326:	d905      	bls.n	8007334 <_malloc_r+0x28>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	2600      	movs	r6, #0
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	4e2e      	ldr	r6, [pc, #184]	; (80073f0 <_malloc_r+0xe4>)
 8007336:	f000 fdbb 	bl	8007eb0 <__malloc_lock>
 800733a:	6833      	ldr	r3, [r6, #0]
 800733c:	461c      	mov	r4, r3
 800733e:	bb34      	cbnz	r4, 800738e <_malloc_r+0x82>
 8007340:	4629      	mov	r1, r5
 8007342:	4638      	mov	r0, r7
 8007344:	f7ff ffc2 	bl	80072cc <sbrk_aligned>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	4604      	mov	r4, r0
 800734c:	d14d      	bne.n	80073ea <_malloc_r+0xde>
 800734e:	6834      	ldr	r4, [r6, #0]
 8007350:	4626      	mov	r6, r4
 8007352:	2e00      	cmp	r6, #0
 8007354:	d140      	bne.n	80073d8 <_malloc_r+0xcc>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	4631      	mov	r1, r6
 800735a:	4638      	mov	r0, r7
 800735c:	eb04 0803 	add.w	r8, r4, r3
 8007360:	f000 fb36 	bl	80079d0 <_sbrk_r>
 8007364:	4580      	cmp	r8, r0
 8007366:	d13a      	bne.n	80073de <_malloc_r+0xd2>
 8007368:	6821      	ldr	r1, [r4, #0]
 800736a:	3503      	adds	r5, #3
 800736c:	1a6d      	subs	r5, r5, r1
 800736e:	f025 0503 	bic.w	r5, r5, #3
 8007372:	3508      	adds	r5, #8
 8007374:	2d0c      	cmp	r5, #12
 8007376:	bf38      	it	cc
 8007378:	250c      	movcc	r5, #12
 800737a:	4629      	mov	r1, r5
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <sbrk_aligned>
 8007382:	3001      	adds	r0, #1
 8007384:	d02b      	beq.n	80073de <_malloc_r+0xd2>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	442b      	add	r3, r5
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e00e      	b.n	80073ac <_malloc_r+0xa0>
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	1b52      	subs	r2, r2, r5
 8007392:	d41e      	bmi.n	80073d2 <_malloc_r+0xc6>
 8007394:	2a0b      	cmp	r2, #11
 8007396:	d916      	bls.n	80073c6 <_malloc_r+0xba>
 8007398:	1961      	adds	r1, r4, r5
 800739a:	42a3      	cmp	r3, r4
 800739c:	6025      	str	r5, [r4, #0]
 800739e:	bf18      	it	ne
 80073a0:	6059      	strne	r1, [r3, #4]
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	bf08      	it	eq
 80073a6:	6031      	streq	r1, [r6, #0]
 80073a8:	5162      	str	r2, [r4, r5]
 80073aa:	604b      	str	r3, [r1, #4]
 80073ac:	4638      	mov	r0, r7
 80073ae:	f104 060b 	add.w	r6, r4, #11
 80073b2:	f000 fd83 	bl	8007ebc <__malloc_unlock>
 80073b6:	f026 0607 	bic.w	r6, r6, #7
 80073ba:	1d23      	adds	r3, r4, #4
 80073bc:	1af2      	subs	r2, r6, r3
 80073be:	d0b6      	beq.n	800732e <_malloc_r+0x22>
 80073c0:	1b9b      	subs	r3, r3, r6
 80073c2:	50a3      	str	r3, [r4, r2]
 80073c4:	e7b3      	b.n	800732e <_malloc_r+0x22>
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	bf0c      	ite	eq
 80073cc:	6032      	streq	r2, [r6, #0]
 80073ce:	605a      	strne	r2, [r3, #4]
 80073d0:	e7ec      	b.n	80073ac <_malloc_r+0xa0>
 80073d2:	4623      	mov	r3, r4
 80073d4:	6864      	ldr	r4, [r4, #4]
 80073d6:	e7b2      	b.n	800733e <_malloc_r+0x32>
 80073d8:	4634      	mov	r4, r6
 80073da:	6876      	ldr	r6, [r6, #4]
 80073dc:	e7b9      	b.n	8007352 <_malloc_r+0x46>
 80073de:	230c      	movs	r3, #12
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4638      	mov	r0, r7
 80073e4:	f000 fd6a 	bl	8007ebc <__malloc_unlock>
 80073e8:	e7a1      	b.n	800732e <_malloc_r+0x22>
 80073ea:	6025      	str	r5, [r4, #0]
 80073ec:	e7de      	b.n	80073ac <_malloc_r+0xa0>
 80073ee:	bf00      	nop
 80073f0:	200002b4 	.word	0x200002b4

080073f4 <__sfputc_r>:
 80073f4:	6893      	ldr	r3, [r2, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	b410      	push	{r4}
 80073fc:	6093      	str	r3, [r2, #8]
 80073fe:	da08      	bge.n	8007412 <__sfputc_r+0x1e>
 8007400:	6994      	ldr	r4, [r2, #24]
 8007402:	42a3      	cmp	r3, r4
 8007404:	db01      	blt.n	800740a <__sfputc_r+0x16>
 8007406:	290a      	cmp	r1, #10
 8007408:	d103      	bne.n	8007412 <__sfputc_r+0x1e>
 800740a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800740e:	f000 bb33 	b.w	8007a78 <__swbuf_r>
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	1c58      	adds	r0, r3, #1
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	7019      	strb	r1, [r3, #0]
 800741a:	4608      	mov	r0, r1
 800741c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007420:	4770      	bx	lr

08007422 <__sfputs_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	4614      	mov	r4, r2
 800742a:	18d5      	adds	r5, r2, r3
 800742c:	42ac      	cmp	r4, r5
 800742e:	d101      	bne.n	8007434 <__sfputs_r+0x12>
 8007430:	2000      	movs	r0, #0
 8007432:	e007      	b.n	8007444 <__sfputs_r+0x22>
 8007434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007438:	463a      	mov	r2, r7
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ffda 	bl	80073f4 <__sfputc_r>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d1f3      	bne.n	800742c <__sfputs_r+0xa>
 8007444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007448 <_vfiprintf_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	460d      	mov	r5, r1
 800744e:	b09d      	sub	sp, #116	; 0x74
 8007450:	4614      	mov	r4, r2
 8007452:	4698      	mov	r8, r3
 8007454:	4606      	mov	r6, r0
 8007456:	b118      	cbz	r0, 8007460 <_vfiprintf_r+0x18>
 8007458:	6983      	ldr	r3, [r0, #24]
 800745a:	b90b      	cbnz	r3, 8007460 <_vfiprintf_r+0x18>
 800745c:	f7ff fe96 	bl	800718c <__sinit>
 8007460:	4b89      	ldr	r3, [pc, #548]	; (8007688 <_vfiprintf_r+0x240>)
 8007462:	429d      	cmp	r5, r3
 8007464:	d11b      	bne.n	800749e <_vfiprintf_r+0x56>
 8007466:	6875      	ldr	r5, [r6, #4]
 8007468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800746a:	07d9      	lsls	r1, r3, #31
 800746c:	d405      	bmi.n	800747a <_vfiprintf_r+0x32>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	059a      	lsls	r2, r3, #22
 8007472:	d402      	bmi.n	800747a <_vfiprintf_r+0x32>
 8007474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007476:	f7ff ff27 	bl	80072c8 <__retarget_lock_acquire_recursive>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	071b      	lsls	r3, r3, #28
 800747e:	d501      	bpl.n	8007484 <_vfiprintf_r+0x3c>
 8007480:	692b      	ldr	r3, [r5, #16]
 8007482:	b9eb      	cbnz	r3, 80074c0 <_vfiprintf_r+0x78>
 8007484:	4629      	mov	r1, r5
 8007486:	4630      	mov	r0, r6
 8007488:	f000 fb5a 	bl	8007b40 <__swsetup_r>
 800748c:	b1c0      	cbz	r0, 80074c0 <_vfiprintf_r+0x78>
 800748e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007490:	07dc      	lsls	r4, r3, #31
 8007492:	d50e      	bpl.n	80074b2 <_vfiprintf_r+0x6a>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	b01d      	add	sp, #116	; 0x74
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	4b7b      	ldr	r3, [pc, #492]	; (800768c <_vfiprintf_r+0x244>)
 80074a0:	429d      	cmp	r5, r3
 80074a2:	d101      	bne.n	80074a8 <_vfiprintf_r+0x60>
 80074a4:	68b5      	ldr	r5, [r6, #8]
 80074a6:	e7df      	b.n	8007468 <_vfiprintf_r+0x20>
 80074a8:	4b79      	ldr	r3, [pc, #484]	; (8007690 <_vfiprintf_r+0x248>)
 80074aa:	429d      	cmp	r5, r3
 80074ac:	bf08      	it	eq
 80074ae:	68f5      	ldreq	r5, [r6, #12]
 80074b0:	e7da      	b.n	8007468 <_vfiprintf_r+0x20>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	0598      	lsls	r0, r3, #22
 80074b6:	d4ed      	bmi.n	8007494 <_vfiprintf_r+0x4c>
 80074b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ba:	f7ff ff06 	bl	80072ca <__retarget_lock_release_recursive>
 80074be:	e7e9      	b.n	8007494 <_vfiprintf_r+0x4c>
 80074c0:	2300      	movs	r3, #0
 80074c2:	9309      	str	r3, [sp, #36]	; 0x24
 80074c4:	2320      	movs	r3, #32
 80074c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ce:	2330      	movs	r3, #48	; 0x30
 80074d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007694 <_vfiprintf_r+0x24c>
 80074d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074d8:	f04f 0901 	mov.w	r9, #1
 80074dc:	4623      	mov	r3, r4
 80074de:	469a      	mov	sl, r3
 80074e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e4:	b10a      	cbz	r2, 80074ea <_vfiprintf_r+0xa2>
 80074e6:	2a25      	cmp	r2, #37	; 0x25
 80074e8:	d1f9      	bne.n	80074de <_vfiprintf_r+0x96>
 80074ea:	ebba 0b04 	subs.w	fp, sl, r4
 80074ee:	d00b      	beq.n	8007508 <_vfiprintf_r+0xc0>
 80074f0:	465b      	mov	r3, fp
 80074f2:	4622      	mov	r2, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7ff ff93 	bl	8007422 <__sfputs_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	f000 80aa 	beq.w	8007656 <_vfiprintf_r+0x20e>
 8007502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007504:	445a      	add	r2, fp
 8007506:	9209      	str	r2, [sp, #36]	; 0x24
 8007508:	f89a 3000 	ldrb.w	r3, [sl]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80a2 	beq.w	8007656 <_vfiprintf_r+0x20e>
 8007512:	2300      	movs	r3, #0
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800751c:	f10a 0a01 	add.w	sl, sl, #1
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	9307      	str	r3, [sp, #28]
 8007524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007528:	931a      	str	r3, [sp, #104]	; 0x68
 800752a:	4654      	mov	r4, sl
 800752c:	2205      	movs	r2, #5
 800752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007532:	4858      	ldr	r0, [pc, #352]	; (8007694 <_vfiprintf_r+0x24c>)
 8007534:	f7f8 fe6c 	bl	8000210 <memchr>
 8007538:	9a04      	ldr	r2, [sp, #16]
 800753a:	b9d8      	cbnz	r0, 8007574 <_vfiprintf_r+0x12c>
 800753c:	06d1      	lsls	r1, r2, #27
 800753e:	bf44      	itt	mi
 8007540:	2320      	movmi	r3, #32
 8007542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007546:	0713      	lsls	r3, r2, #28
 8007548:	bf44      	itt	mi
 800754a:	232b      	movmi	r3, #43	; 0x2b
 800754c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007550:	f89a 3000 	ldrb.w	r3, [sl]
 8007554:	2b2a      	cmp	r3, #42	; 0x2a
 8007556:	d015      	beq.n	8007584 <_vfiprintf_r+0x13c>
 8007558:	9a07      	ldr	r2, [sp, #28]
 800755a:	4654      	mov	r4, sl
 800755c:	2000      	movs	r0, #0
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4621      	mov	r1, r4
 8007564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007568:	3b30      	subs	r3, #48	; 0x30
 800756a:	2b09      	cmp	r3, #9
 800756c:	d94e      	bls.n	800760c <_vfiprintf_r+0x1c4>
 800756e:	b1b0      	cbz	r0, 800759e <_vfiprintf_r+0x156>
 8007570:	9207      	str	r2, [sp, #28]
 8007572:	e014      	b.n	800759e <_vfiprintf_r+0x156>
 8007574:	eba0 0308 	sub.w	r3, r0, r8
 8007578:	fa09 f303 	lsl.w	r3, r9, r3
 800757c:	4313      	orrs	r3, r2
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	46a2      	mov	sl, r4
 8007582:	e7d2      	b.n	800752a <_vfiprintf_r+0xe2>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	1d19      	adds	r1, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	9103      	str	r1, [sp, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	bfbb      	ittet	lt
 8007590:	425b      	neglt	r3, r3
 8007592:	f042 0202 	orrlt.w	r2, r2, #2
 8007596:	9307      	strge	r3, [sp, #28]
 8007598:	9307      	strlt	r3, [sp, #28]
 800759a:	bfb8      	it	lt
 800759c:	9204      	strlt	r2, [sp, #16]
 800759e:	7823      	ldrb	r3, [r4, #0]
 80075a0:	2b2e      	cmp	r3, #46	; 0x2e
 80075a2:	d10c      	bne.n	80075be <_vfiprintf_r+0x176>
 80075a4:	7863      	ldrb	r3, [r4, #1]
 80075a6:	2b2a      	cmp	r3, #42	; 0x2a
 80075a8:	d135      	bne.n	8007616 <_vfiprintf_r+0x1ce>
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	1d1a      	adds	r2, r3, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	9203      	str	r2, [sp, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfb8      	it	lt
 80075b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80075ba:	3402      	adds	r4, #2
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076a4 <_vfiprintf_r+0x25c>
 80075c2:	7821      	ldrb	r1, [r4, #0]
 80075c4:	2203      	movs	r2, #3
 80075c6:	4650      	mov	r0, sl
 80075c8:	f7f8 fe22 	bl	8000210 <memchr>
 80075cc:	b140      	cbz	r0, 80075e0 <_vfiprintf_r+0x198>
 80075ce:	2340      	movs	r3, #64	; 0x40
 80075d0:	eba0 000a 	sub.w	r0, r0, sl
 80075d4:	fa03 f000 	lsl.w	r0, r3, r0
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	4303      	orrs	r3, r0
 80075dc:	3401      	adds	r4, #1
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e4:	482c      	ldr	r0, [pc, #176]	; (8007698 <_vfiprintf_r+0x250>)
 80075e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ea:	2206      	movs	r2, #6
 80075ec:	f7f8 fe10 	bl	8000210 <memchr>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d03f      	beq.n	8007674 <_vfiprintf_r+0x22c>
 80075f4:	4b29      	ldr	r3, [pc, #164]	; (800769c <_vfiprintf_r+0x254>)
 80075f6:	bb1b      	cbnz	r3, 8007640 <_vfiprintf_r+0x1f8>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	3307      	adds	r3, #7
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	3308      	adds	r3, #8
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007606:	443b      	add	r3, r7
 8007608:	9309      	str	r3, [sp, #36]	; 0x24
 800760a:	e767      	b.n	80074dc <_vfiprintf_r+0x94>
 800760c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007610:	460c      	mov	r4, r1
 8007612:	2001      	movs	r0, #1
 8007614:	e7a5      	b.n	8007562 <_vfiprintf_r+0x11a>
 8007616:	2300      	movs	r3, #0
 8007618:	3401      	adds	r4, #1
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	4619      	mov	r1, r3
 800761e:	f04f 0c0a 	mov.w	ip, #10
 8007622:	4620      	mov	r0, r4
 8007624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007628:	3a30      	subs	r2, #48	; 0x30
 800762a:	2a09      	cmp	r2, #9
 800762c:	d903      	bls.n	8007636 <_vfiprintf_r+0x1ee>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c5      	beq.n	80075be <_vfiprintf_r+0x176>
 8007632:	9105      	str	r1, [sp, #20]
 8007634:	e7c3      	b.n	80075be <_vfiprintf_r+0x176>
 8007636:	fb0c 2101 	mla	r1, ip, r1, r2
 800763a:	4604      	mov	r4, r0
 800763c:	2301      	movs	r3, #1
 800763e:	e7f0      	b.n	8007622 <_vfiprintf_r+0x1da>
 8007640:	ab03      	add	r3, sp, #12
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462a      	mov	r2, r5
 8007646:	4b16      	ldr	r3, [pc, #88]	; (80076a0 <_vfiprintf_r+0x258>)
 8007648:	a904      	add	r1, sp, #16
 800764a:	4630      	mov	r0, r6
 800764c:	f3af 8000 	nop.w
 8007650:	4607      	mov	r7, r0
 8007652:	1c78      	adds	r0, r7, #1
 8007654:	d1d6      	bne.n	8007604 <_vfiprintf_r+0x1bc>
 8007656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007658:	07d9      	lsls	r1, r3, #31
 800765a:	d405      	bmi.n	8007668 <_vfiprintf_r+0x220>
 800765c:	89ab      	ldrh	r3, [r5, #12]
 800765e:	059a      	lsls	r2, r3, #22
 8007660:	d402      	bmi.n	8007668 <_vfiprintf_r+0x220>
 8007662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007664:	f7ff fe31 	bl	80072ca <__retarget_lock_release_recursive>
 8007668:	89ab      	ldrh	r3, [r5, #12]
 800766a:	065b      	lsls	r3, r3, #25
 800766c:	f53f af12 	bmi.w	8007494 <_vfiprintf_r+0x4c>
 8007670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007672:	e711      	b.n	8007498 <_vfiprintf_r+0x50>
 8007674:	ab03      	add	r3, sp, #12
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	462a      	mov	r2, r5
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <_vfiprintf_r+0x258>)
 800767c:	a904      	add	r1, sp, #16
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f880 	bl	8007784 <_printf_i>
 8007684:	e7e4      	b.n	8007650 <_vfiprintf_r+0x208>
 8007686:	bf00      	nop
 8007688:	08008098 	.word	0x08008098
 800768c:	080080b8 	.word	0x080080b8
 8007690:	08008078 	.word	0x08008078
 8007694:	080080d8 	.word	0x080080d8
 8007698:	080080e2 	.word	0x080080e2
 800769c:	00000000 	.word	0x00000000
 80076a0:	08007423 	.word	0x08007423
 80076a4:	080080de 	.word	0x080080de

080076a8 <_printf_common>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	4616      	mov	r6, r2
 80076ae:	4699      	mov	r9, r3
 80076b0:	688a      	ldr	r2, [r1, #8]
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfb8      	it	lt
 80076bc:	4613      	movlt	r3, r2
 80076be:	6033      	str	r3, [r6, #0]
 80076c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c4:	4607      	mov	r7, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b10a      	cbz	r2, 80076ce <_printf_common+0x26>
 80076ca:	3301      	adds	r3, #1
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	6833      	ldrmi	r3, [r6, #0]
 80076d6:	3302      	addmi	r3, #2
 80076d8:	6033      	strmi	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	f015 0506 	ands.w	r5, r5, #6
 80076e0:	d106      	bne.n	80076f0 <_printf_common+0x48>
 80076e2:	f104 0a19 	add.w	sl, r4, #25
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	6832      	ldr	r2, [r6, #0]
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc26      	bgt.n	800773e <_printf_common+0x96>
 80076f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f4:	1e13      	subs	r3, r2, #0
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	0692      	lsls	r2, r2, #26
 80076fe:	d42b      	bmi.n	8007758 <_printf_common+0xb0>
 8007700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007704:	4649      	mov	r1, r9
 8007706:	4638      	mov	r0, r7
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d01e      	beq.n	800774c <_printf_common+0xa4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	68e5      	ldr	r5, [r4, #12]
 8007712:	6832      	ldr	r2, [r6, #0]
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	2b04      	cmp	r3, #4
 800771a:	bf08      	it	eq
 800771c:	1aad      	subeq	r5, r5, r2
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	6922      	ldr	r2, [r4, #16]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	2600      	movs	r6, #0
 8007734:	341a      	adds	r4, #26
 8007736:	42b5      	cmp	r5, r6
 8007738:	d11a      	bne.n	8007770 <_printf_common+0xc8>
 800773a:	2000      	movs	r0, #0
 800773c:	e008      	b.n	8007750 <_printf_common+0xa8>
 800773e:	2301      	movs	r3, #1
 8007740:	4652      	mov	r2, sl
 8007742:	4649      	mov	r1, r9
 8007744:	4638      	mov	r0, r7
 8007746:	47c0      	blx	r8
 8007748:	3001      	adds	r0, #1
 800774a:	d103      	bne.n	8007754 <_printf_common+0xac>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	3501      	adds	r5, #1
 8007756:	e7c6      	b.n	80076e6 <_printf_common+0x3e>
 8007758:	18e1      	adds	r1, r4, r3
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	2030      	movs	r0, #48	; 0x30
 800775e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007762:	4422      	add	r2, r4
 8007764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776c:	3302      	adds	r3, #2
 800776e:	e7c7      	b.n	8007700 <_printf_common+0x58>
 8007770:	2301      	movs	r3, #1
 8007772:	4622      	mov	r2, r4
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d0e6      	beq.n	800774c <_printf_common+0xa4>
 800777e:	3601      	adds	r6, #1
 8007780:	e7d9      	b.n	8007736 <_printf_common+0x8e>
	...

08007784 <_printf_i>:
 8007784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	7e0f      	ldrb	r7, [r1, #24]
 800778a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800778c:	2f78      	cmp	r7, #120	; 0x78
 800778e:	4691      	mov	r9, r2
 8007790:	4680      	mov	r8, r0
 8007792:	460c      	mov	r4, r1
 8007794:	469a      	mov	sl, r3
 8007796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800779a:	d807      	bhi.n	80077ac <_printf_i+0x28>
 800779c:	2f62      	cmp	r7, #98	; 0x62
 800779e:	d80a      	bhi.n	80077b6 <_printf_i+0x32>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f000 80d8 	beq.w	8007956 <_printf_i+0x1d2>
 80077a6:	2f58      	cmp	r7, #88	; 0x58
 80077a8:	f000 80a3 	beq.w	80078f2 <_printf_i+0x16e>
 80077ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b4:	e03a      	b.n	800782c <_printf_i+0xa8>
 80077b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ba:	2b15      	cmp	r3, #21
 80077bc:	d8f6      	bhi.n	80077ac <_printf_i+0x28>
 80077be:	a101      	add	r1, pc, #4	; (adr r1, 80077c4 <_printf_i+0x40>)
 80077c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080077ad 	.word	0x080077ad
 80077d0:	080077ad 	.word	0x080077ad
 80077d4:	080077ad 	.word	0x080077ad
 80077d8:	080077ad 	.word	0x080077ad
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	080077ad 	.word	0x080077ad
 80077f0:	0800793d 	.word	0x0800793d
 80077f4:	08007861 	.word	0x08007861
 80077f8:	0800791f 	.word	0x0800791f
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	0800795f 	.word	0x0800795f
 8007808:	080077ad 	.word	0x080077ad
 800780c:	08007861 	.word	0x08007861
 8007810:	080077ad 	.word	0x080077ad
 8007814:	080077ad 	.word	0x080077ad
 8007818:	08007927 	.word	0x08007927
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	602a      	str	r2, [r5, #0]
 8007824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800782c:	2301      	movs	r3, #1
 800782e:	e0a3      	b.n	8007978 <_printf_i+0x1f4>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	6829      	ldr	r1, [r5, #0]
 8007834:	0606      	lsls	r6, r0, #24
 8007836:	f101 0304 	add.w	r3, r1, #4
 800783a:	d50a      	bpl.n	8007852 <_printf_i+0xce>
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	2e00      	cmp	r6, #0
 8007842:	da03      	bge.n	800784c <_printf_i+0xc8>
 8007844:	232d      	movs	r3, #45	; 0x2d
 8007846:	4276      	negs	r6, r6
 8007848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784c:	485e      	ldr	r0, [pc, #376]	; (80079c8 <_printf_i+0x244>)
 800784e:	230a      	movs	r3, #10
 8007850:	e019      	b.n	8007886 <_printf_i+0x102>
 8007852:	680e      	ldr	r6, [r1, #0]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800785a:	bf18      	it	ne
 800785c:	b236      	sxthne	r6, r6
 800785e:	e7ef      	b.n	8007840 <_printf_i+0xbc>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	6029      	str	r1, [r5, #0]
 8007868:	0601      	lsls	r1, r0, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xec>
 800786c:	681e      	ldr	r6, [r3, #0]
 800786e:	e002      	b.n	8007876 <_printf_i+0xf2>
 8007870:	0646      	lsls	r6, r0, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xe8>
 8007874:	881e      	ldrh	r6, [r3, #0]
 8007876:	4854      	ldr	r0, [pc, #336]	; (80079c8 <_printf_i+0x244>)
 8007878:	2f6f      	cmp	r7, #111	; 0x6f
 800787a:	bf0c      	ite	eq
 800787c:	2308      	moveq	r3, #8
 800787e:	230a      	movne	r3, #10
 8007880:	2100      	movs	r1, #0
 8007882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007886:	6865      	ldr	r5, [r4, #4]
 8007888:	60a5      	str	r5, [r4, #8]
 800788a:	2d00      	cmp	r5, #0
 800788c:	bfa2      	ittt	ge
 800788e:	6821      	ldrge	r1, [r4, #0]
 8007890:	f021 0104 	bicge.w	r1, r1, #4
 8007894:	6021      	strge	r1, [r4, #0]
 8007896:	b90e      	cbnz	r6, 800789c <_printf_i+0x118>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d04d      	beq.n	8007938 <_printf_i+0x1b4>
 800789c:	4615      	mov	r5, r2
 800789e:	fbb6 f1f3 	udiv	r1, r6, r3
 80078a2:	fb03 6711 	mls	r7, r3, r1, r6
 80078a6:	5dc7      	ldrb	r7, [r0, r7]
 80078a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078ac:	4637      	mov	r7, r6
 80078ae:	42bb      	cmp	r3, r7
 80078b0:	460e      	mov	r6, r1
 80078b2:	d9f4      	bls.n	800789e <_printf_i+0x11a>
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d10b      	bne.n	80078d0 <_printf_i+0x14c>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	07de      	lsls	r6, r3, #31
 80078bc:	d508      	bpl.n	80078d0 <_printf_i+0x14c>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4299      	cmp	r1, r3
 80078c4:	bfde      	ittt	le
 80078c6:	2330      	movle	r3, #48	; 0x30
 80078c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078d0:	1b52      	subs	r2, r2, r5
 80078d2:	6122      	str	r2, [r4, #16]
 80078d4:	f8cd a000 	str.w	sl, [sp]
 80078d8:	464b      	mov	r3, r9
 80078da:	aa03      	add	r2, sp, #12
 80078dc:	4621      	mov	r1, r4
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fee2 	bl	80076a8 <_printf_common>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d14c      	bne.n	8007982 <_printf_i+0x1fe>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b004      	add	sp, #16
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	4835      	ldr	r0, [pc, #212]	; (80079c8 <_printf_i+0x244>)
 80078f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078f8:	6829      	ldr	r1, [r5, #0]
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007900:	6029      	str	r1, [r5, #0]
 8007902:	061d      	lsls	r5, r3, #24
 8007904:	d514      	bpl.n	8007930 <_printf_i+0x1ac>
 8007906:	07df      	lsls	r7, r3, #31
 8007908:	bf44      	itt	mi
 800790a:	f043 0320 	orrmi.w	r3, r3, #32
 800790e:	6023      	strmi	r3, [r4, #0]
 8007910:	b91e      	cbnz	r6, 800791a <_printf_i+0x196>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	f023 0320 	bic.w	r3, r3, #32
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	2310      	movs	r3, #16
 800791c:	e7b0      	b.n	8007880 <_printf_i+0xfc>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f043 0320 	orr.w	r3, r3, #32
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2378      	movs	r3, #120	; 0x78
 8007928:	4828      	ldr	r0, [pc, #160]	; (80079cc <_printf_i+0x248>)
 800792a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800792e:	e7e3      	b.n	80078f8 <_printf_i+0x174>
 8007930:	0659      	lsls	r1, r3, #25
 8007932:	bf48      	it	mi
 8007934:	b2b6      	uxthmi	r6, r6
 8007936:	e7e6      	b.n	8007906 <_printf_i+0x182>
 8007938:	4615      	mov	r5, r2
 800793a:	e7bb      	b.n	80078b4 <_printf_i+0x130>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	6826      	ldr	r6, [r4, #0]
 8007940:	6961      	ldr	r1, [r4, #20]
 8007942:	1d18      	adds	r0, r3, #4
 8007944:	6028      	str	r0, [r5, #0]
 8007946:	0635      	lsls	r5, r6, #24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	d501      	bpl.n	8007950 <_printf_i+0x1cc>
 800794c:	6019      	str	r1, [r3, #0]
 800794e:	e002      	b.n	8007956 <_printf_i+0x1d2>
 8007950:	0670      	lsls	r0, r6, #25
 8007952:	d5fb      	bpl.n	800794c <_printf_i+0x1c8>
 8007954:	8019      	strh	r1, [r3, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	4615      	mov	r5, r2
 800795c:	e7ba      	b.n	80078d4 <_printf_i+0x150>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	1d1a      	adds	r2, r3, #4
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	681d      	ldr	r5, [r3, #0]
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	2100      	movs	r1, #0
 800796a:	4628      	mov	r0, r5
 800796c:	f7f8 fc50 	bl	8000210 <memchr>
 8007970:	b108      	cbz	r0, 8007976 <_printf_i+0x1f2>
 8007972:	1b40      	subs	r0, r0, r5
 8007974:	6060      	str	r0, [r4, #4]
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	2300      	movs	r3, #0
 800797c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007980:	e7a8      	b.n	80078d4 <_printf_i+0x150>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	462a      	mov	r2, r5
 8007986:	4649      	mov	r1, r9
 8007988:	4640      	mov	r0, r8
 800798a:	47d0      	blx	sl
 800798c:	3001      	adds	r0, #1
 800798e:	d0ab      	beq.n	80078e8 <_printf_i+0x164>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	079b      	lsls	r3, r3, #30
 8007994:	d413      	bmi.n	80079be <_printf_i+0x23a>
 8007996:	68e0      	ldr	r0, [r4, #12]
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	4298      	cmp	r0, r3
 800799c:	bfb8      	it	lt
 800799e:	4618      	movlt	r0, r3
 80079a0:	e7a4      	b.n	80078ec <_printf_i+0x168>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4632      	mov	r2, r6
 80079a6:	4649      	mov	r1, r9
 80079a8:	4640      	mov	r0, r8
 80079aa:	47d0      	blx	sl
 80079ac:	3001      	adds	r0, #1
 80079ae:	d09b      	beq.n	80078e8 <_printf_i+0x164>
 80079b0:	3501      	adds	r5, #1
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	1a5b      	subs	r3, r3, r1
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	dcf2      	bgt.n	80079a2 <_printf_i+0x21e>
 80079bc:	e7eb      	b.n	8007996 <_printf_i+0x212>
 80079be:	2500      	movs	r5, #0
 80079c0:	f104 0619 	add.w	r6, r4, #25
 80079c4:	e7f5      	b.n	80079b2 <_printf_i+0x22e>
 80079c6:	bf00      	nop
 80079c8:	080080e9 	.word	0x080080e9
 80079cc:	080080fa 	.word	0x080080fa

080079d0 <_sbrk_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d06      	ldr	r5, [pc, #24]	; (80079ec <_sbrk_r+0x1c>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7f9 fc84 	bl	80012e8 <_sbrk>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_sbrk_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_sbrk_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	200002bc 	.word	0x200002bc

080079f0 <__sread>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	460c      	mov	r4, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	f000 fab2 	bl	8007f60 <_read_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	bfab      	itete	ge
 8007a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a02:	89a3      	ldrhlt	r3, [r4, #12]
 8007a04:	181b      	addge	r3, r3, r0
 8007a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a0a:	bfac      	ite	ge
 8007a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a0e:	81a3      	strhlt	r3, [r4, #12]
 8007a10:	bd10      	pop	{r4, pc}

08007a12 <__swrite>:
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	461f      	mov	r7, r3
 8007a18:	898b      	ldrh	r3, [r1, #12]
 8007a1a:	05db      	lsls	r3, r3, #23
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4616      	mov	r6, r2
 8007a22:	d505      	bpl.n	8007a30 <__swrite+0x1e>
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2302      	movs	r3, #2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f000 f9c8 	bl	8007dc0 <_lseek_r>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a46:	f000 b869 	b.w	8007b1c <_write_r>

08007a4a <__sseek>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a52:	f000 f9b5 	bl	8007dc0 <_lseek_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	bf15      	itete	ne
 8007a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a66:	81a3      	strheq	r3, [r4, #12]
 8007a68:	bf18      	it	ne
 8007a6a:	81a3      	strhne	r3, [r4, #12]
 8007a6c:	bd10      	pop	{r4, pc}

08007a6e <__sclose>:
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 b8d3 	b.w	8007c1c <_close_r>
	...

08007a78 <__swbuf_r>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	460e      	mov	r6, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4605      	mov	r5, r0
 8007a80:	b118      	cbz	r0, 8007a8a <__swbuf_r+0x12>
 8007a82:	6983      	ldr	r3, [r0, #24]
 8007a84:	b90b      	cbnz	r3, 8007a8a <__swbuf_r+0x12>
 8007a86:	f7ff fb81 	bl	800718c <__sinit>
 8007a8a:	4b21      	ldr	r3, [pc, #132]	; (8007b10 <__swbuf_r+0x98>)
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d12b      	bne.n	8007ae8 <__swbuf_r+0x70>
 8007a90:	686c      	ldr	r4, [r5, #4]
 8007a92:	69a3      	ldr	r3, [r4, #24]
 8007a94:	60a3      	str	r3, [r4, #8]
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	071a      	lsls	r2, r3, #28
 8007a9a:	d52f      	bpl.n	8007afc <__swbuf_r+0x84>
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	b36b      	cbz	r3, 8007afc <__swbuf_r+0x84>
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	6820      	ldr	r0, [r4, #0]
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	6963      	ldr	r3, [r4, #20]
 8007aa8:	b2f6      	uxtb	r6, r6
 8007aaa:	4283      	cmp	r3, r0
 8007aac:	4637      	mov	r7, r6
 8007aae:	dc04      	bgt.n	8007aba <__swbuf_r+0x42>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 f948 	bl	8007d48 <_fflush_r>
 8007ab8:	bb30      	cbnz	r0, 8007b08 <__swbuf_r+0x90>
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	701e      	strb	r6, [r3, #0]
 8007ac8:	6963      	ldr	r3, [r4, #20]
 8007aca:	3001      	adds	r0, #1
 8007acc:	4283      	cmp	r3, r0
 8007ace:	d004      	beq.n	8007ada <__swbuf_r+0x62>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	07db      	lsls	r3, r3, #31
 8007ad4:	d506      	bpl.n	8007ae4 <__swbuf_r+0x6c>
 8007ad6:	2e0a      	cmp	r6, #10
 8007ad8:	d104      	bne.n	8007ae4 <__swbuf_r+0x6c>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4628      	mov	r0, r5
 8007ade:	f000 f933 	bl	8007d48 <_fflush_r>
 8007ae2:	b988      	cbnz	r0, 8007b08 <__swbuf_r+0x90>
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <__swbuf_r+0x9c>)
 8007aea:	429c      	cmp	r4, r3
 8007aec:	d101      	bne.n	8007af2 <__swbuf_r+0x7a>
 8007aee:	68ac      	ldr	r4, [r5, #8]
 8007af0:	e7cf      	b.n	8007a92 <__swbuf_r+0x1a>
 8007af2:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <__swbuf_r+0xa0>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	bf08      	it	eq
 8007af8:	68ec      	ldreq	r4, [r5, #12]
 8007afa:	e7ca      	b.n	8007a92 <__swbuf_r+0x1a>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 f81e 	bl	8007b40 <__swsetup_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d0cb      	beq.n	8007aa0 <__swbuf_r+0x28>
 8007b08:	f04f 37ff 	mov.w	r7, #4294967295
 8007b0c:	e7ea      	b.n	8007ae4 <__swbuf_r+0x6c>
 8007b0e:	bf00      	nop
 8007b10:	08008098 	.word	0x08008098
 8007b14:	080080b8 	.word	0x080080b8
 8007b18:	08008078 	.word	0x08008078

08007b1c <_write_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_write_r+0x20>)
 8007b20:	4604      	mov	r4, r0
 8007b22:	4608      	mov	r0, r1
 8007b24:	4611      	mov	r1, r2
 8007b26:	2200      	movs	r2, #0
 8007b28:	602a      	str	r2, [r5, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f7f8 fd42 	bl	80005b4 <_write>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_write_r+0x1e>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_write_r+0x1e>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	200002bc 	.word	0x200002bc

08007b40 <__swsetup_r>:
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <__swsetup_r+0xcc>)
 8007b42:	b570      	push	{r4, r5, r6, lr}
 8007b44:	681d      	ldr	r5, [r3, #0]
 8007b46:	4606      	mov	r6, r0
 8007b48:	460c      	mov	r4, r1
 8007b4a:	b125      	cbz	r5, 8007b56 <__swsetup_r+0x16>
 8007b4c:	69ab      	ldr	r3, [r5, #24]
 8007b4e:	b913      	cbnz	r3, 8007b56 <__swsetup_r+0x16>
 8007b50:	4628      	mov	r0, r5
 8007b52:	f7ff fb1b 	bl	800718c <__sinit>
 8007b56:	4b2e      	ldr	r3, [pc, #184]	; (8007c10 <__swsetup_r+0xd0>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d10f      	bne.n	8007b7c <__swsetup_r+0x3c>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b64:	0719      	lsls	r1, r3, #28
 8007b66:	d42c      	bmi.n	8007bc2 <__swsetup_r+0x82>
 8007b68:	06dd      	lsls	r5, r3, #27
 8007b6a:	d411      	bmi.n	8007b90 <__swsetup_r+0x50>
 8007b6c:	2309      	movs	r3, #9
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	e03e      	b.n	8007bfa <__swsetup_r+0xba>
 8007b7c:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <__swsetup_r+0xd4>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d101      	bne.n	8007b86 <__swsetup_r+0x46>
 8007b82:	68ac      	ldr	r4, [r5, #8]
 8007b84:	e7eb      	b.n	8007b5e <__swsetup_r+0x1e>
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <__swsetup_r+0xd8>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	bf08      	it	eq
 8007b8c:	68ec      	ldreq	r4, [r5, #12]
 8007b8e:	e7e6      	b.n	8007b5e <__swsetup_r+0x1e>
 8007b90:	0758      	lsls	r0, r3, #29
 8007b92:	d512      	bpl.n	8007bba <__swsetup_r+0x7a>
 8007b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b96:	b141      	cbz	r1, 8007baa <__swsetup_r+0x6a>
 8007b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d002      	beq.n	8007ba6 <__swsetup_r+0x66>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 f991 	bl	8007ec8 <_free_r>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f043 0308 	orr.w	r3, r3, #8
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	b94b      	cbnz	r3, 8007bda <__swsetup_r+0x9a>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd0:	d003      	beq.n	8007bda <__swsetup_r+0x9a>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f92b 	bl	8007e30 <__smakebuf_r>
 8007bda:	89a0      	ldrh	r0, [r4, #12]
 8007bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be0:	f010 0301 	ands.w	r3, r0, #1
 8007be4:	d00a      	beq.n	8007bfc <__swsetup_r+0xbc>
 8007be6:	2300      	movs	r3, #0
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	6963      	ldr	r3, [r4, #20]
 8007bec:	425b      	negs	r3, r3
 8007bee:	61a3      	str	r3, [r4, #24]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	b943      	cbnz	r3, 8007c06 <__swsetup_r+0xc6>
 8007bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bf8:	d1ba      	bne.n	8007b70 <__swsetup_r+0x30>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	0781      	lsls	r1, r0, #30
 8007bfe:	bf58      	it	pl
 8007c00:	6963      	ldrpl	r3, [r4, #20]
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	e7f4      	b.n	8007bf0 <__swsetup_r+0xb0>
 8007c06:	2000      	movs	r0, #0
 8007c08:	e7f7      	b.n	8007bfa <__swsetup_r+0xba>
 8007c0a:	bf00      	nop
 8007c0c:	2000001c 	.word	0x2000001c
 8007c10:	08008098 	.word	0x08008098
 8007c14:	080080b8 	.word	0x080080b8
 8007c18:	08008078 	.word	0x08008078

08007c1c <_close_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d06      	ldr	r5, [pc, #24]	; (8007c38 <_close_r+0x1c>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	f7f9 fb29 	bl	800127e <_close>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_close_r+0x1a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_close_r+0x1a>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200002bc 	.word	0x200002bc

08007c3c <__sflush_r>:
 8007c3c:	898a      	ldrh	r2, [r1, #12]
 8007c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c42:	4605      	mov	r5, r0
 8007c44:	0710      	lsls	r0, r2, #28
 8007c46:	460c      	mov	r4, r1
 8007c48:	d458      	bmi.n	8007cfc <__sflush_r+0xc0>
 8007c4a:	684b      	ldr	r3, [r1, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dc05      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dc02      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	d0f9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c68:	682f      	ldr	r7, [r5, #0]
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	d032      	beq.n	8007cd4 <__sflush_r+0x98>
 8007c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	075a      	lsls	r2, r3, #29
 8007c74:	d505      	bpl.n	8007c82 <__sflush_r+0x46>
 8007c76:	6863      	ldr	r3, [r4, #4]
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c7c:	b10b      	cbz	r3, 8007c82 <__sflush_r+0x46>
 8007c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c80:	1ac0      	subs	r0, r0, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	4602      	mov	r2, r0
 8007c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c88:	6a21      	ldr	r1, [r4, #32]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b0      	blx	r6
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	d106      	bne.n	8007ca2 <__sflush_r+0x66>
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	291d      	cmp	r1, #29
 8007c98:	d82c      	bhi.n	8007cf4 <__sflush_r+0xb8>
 8007c9a:	4a2a      	ldr	r2, [pc, #168]	; (8007d44 <__sflush_r+0x108>)
 8007c9c:	40ca      	lsrs	r2, r1
 8007c9e:	07d6      	lsls	r6, r2, #31
 8007ca0:	d528      	bpl.n	8007cf4 <__sflush_r+0xb8>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6062      	str	r2, [r4, #4]
 8007ca6:	04d9      	lsls	r1, r3, #19
 8007ca8:	6922      	ldr	r2, [r4, #16]
 8007caa:	6022      	str	r2, [r4, #0]
 8007cac:	d504      	bpl.n	8007cb8 <__sflush_r+0x7c>
 8007cae:	1c42      	adds	r2, r0, #1
 8007cb0:	d101      	bne.n	8007cb6 <__sflush_r+0x7a>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b903      	cbnz	r3, 8007cb8 <__sflush_r+0x7c>
 8007cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8007cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cba:	602f      	str	r7, [r5, #0]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d0ca      	beq.n	8007c56 <__sflush_r+0x1a>
 8007cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	d002      	beq.n	8007cce <__sflush_r+0x92>
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f000 f8fd 	bl	8007ec8 <_free_r>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd2:	e7c1      	b.n	8007c58 <__sflush_r+0x1c>
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b0      	blx	r6
 8007cdc:	1c41      	adds	r1, r0, #1
 8007cde:	d1c7      	bne.n	8007c70 <__sflush_r+0x34>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0c4      	beq.n	8007c70 <__sflush_r+0x34>
 8007ce6:	2b1d      	cmp	r3, #29
 8007ce8:	d001      	beq.n	8007cee <__sflush_r+0xb2>
 8007cea:	2b16      	cmp	r3, #22
 8007cec:	d101      	bne.n	8007cf2 <__sflush_r+0xb6>
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	e7b1      	b.n	8007c56 <__sflush_r+0x1a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7ad      	b.n	8007c58 <__sflush_r+0x1c>
 8007cfc:	690f      	ldr	r7, [r1, #16]
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d0a9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007d02:	0793      	lsls	r3, r2, #30
 8007d04:	680e      	ldr	r6, [r1, #0]
 8007d06:	bf08      	it	eq
 8007d08:	694b      	ldreq	r3, [r1, #20]
 8007d0a:	600f      	str	r7, [r1, #0]
 8007d0c:	bf18      	it	ne
 8007d0e:	2300      	movne	r3, #0
 8007d10:	eba6 0807 	sub.w	r8, r6, r7
 8007d14:	608b      	str	r3, [r1, #8]
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	dd9c      	ble.n	8007c56 <__sflush_r+0x1a>
 8007d1c:	6a21      	ldr	r1, [r4, #32]
 8007d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d20:	4643      	mov	r3, r8
 8007d22:	463a      	mov	r2, r7
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b0      	blx	r6
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dc06      	bgt.n	8007d3a <__sflush_r+0xfe>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	e78e      	b.n	8007c58 <__sflush_r+0x1c>
 8007d3a:	4407      	add	r7, r0
 8007d3c:	eba8 0800 	sub.w	r8, r8, r0
 8007d40:	e7e9      	b.n	8007d16 <__sflush_r+0xda>
 8007d42:	bf00      	nop
 8007d44:	20400001 	.word	0x20400001

08007d48 <_fflush_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	b913      	cbnz	r3, 8007d58 <_fflush_r+0x10>
 8007d52:	2500      	movs	r5, #0
 8007d54:	4628      	mov	r0, r5
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	b118      	cbz	r0, 8007d62 <_fflush_r+0x1a>
 8007d5a:	6983      	ldr	r3, [r0, #24]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <_fflush_r+0x1a>
 8007d5e:	f7ff fa15 	bl	800718c <__sinit>
 8007d62:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <_fflush_r+0x6c>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d11b      	bne.n	8007da0 <_fflush_r+0x58>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ef      	beq.n	8007d52 <_fflush_r+0xa>
 8007d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d74:	07d0      	lsls	r0, r2, #31
 8007d76:	d404      	bmi.n	8007d82 <_fflush_r+0x3a>
 8007d78:	0599      	lsls	r1, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_fflush_r+0x3a>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f7ff faa3 	bl	80072c8 <__retarget_lock_acquire_recursive>
 8007d82:	4628      	mov	r0, r5
 8007d84:	4621      	mov	r1, r4
 8007d86:	f7ff ff59 	bl	8007c3c <__sflush_r>
 8007d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d8c:	07da      	lsls	r2, r3, #31
 8007d8e:	4605      	mov	r5, r0
 8007d90:	d4e0      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	059b      	lsls	r3, r3, #22
 8007d96:	d4dd      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9a:	f7ff fa96 	bl	80072ca <__retarget_lock_release_recursive>
 8007d9e:	e7d9      	b.n	8007d54 <_fflush_r+0xc>
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <_fflush_r+0x70>)
 8007da2:	429c      	cmp	r4, r3
 8007da4:	d101      	bne.n	8007daa <_fflush_r+0x62>
 8007da6:	68ac      	ldr	r4, [r5, #8]
 8007da8:	e7df      	b.n	8007d6a <_fflush_r+0x22>
 8007daa:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <_fflush_r+0x74>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	bf08      	it	eq
 8007db0:	68ec      	ldreq	r4, [r5, #12]
 8007db2:	e7da      	b.n	8007d6a <_fflush_r+0x22>
 8007db4:	08008098 	.word	0x08008098
 8007db8:	080080b8 	.word	0x080080b8
 8007dbc:	08008078 	.word	0x08008078

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_lseek_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fa7c 	bl	80012cc <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200002bc 	.word	0x200002bc

08007de4 <__swhatbuf_r>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	460e      	mov	r6, r1
 8007de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dec:	2900      	cmp	r1, #0
 8007dee:	b096      	sub	sp, #88	; 0x58
 8007df0:	4614      	mov	r4, r2
 8007df2:	461d      	mov	r5, r3
 8007df4:	da08      	bge.n	8007e08 <__swhatbuf_r+0x24>
 8007df6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	602a      	str	r2, [r5, #0]
 8007dfe:	061a      	lsls	r2, r3, #24
 8007e00:	d410      	bmi.n	8007e24 <__swhatbuf_r+0x40>
 8007e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e06:	e00e      	b.n	8007e26 <__swhatbuf_r+0x42>
 8007e08:	466a      	mov	r2, sp
 8007e0a:	f000 f8bb 	bl	8007f84 <_fstat_r>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dbf1      	blt.n	8007df6 <__swhatbuf_r+0x12>
 8007e12:	9a01      	ldr	r2, [sp, #4]
 8007e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e1c:	425a      	negs	r2, r3
 8007e1e:	415a      	adcs	r2, r3
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	e7ee      	b.n	8007e02 <__swhatbuf_r+0x1e>
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	2000      	movs	r0, #0
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	b016      	add	sp, #88	; 0x58
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e30 <__smakebuf_r>:
 8007e30:	898b      	ldrh	r3, [r1, #12]
 8007e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e34:	079d      	lsls	r5, r3, #30
 8007e36:	4606      	mov	r6, r0
 8007e38:	460c      	mov	r4, r1
 8007e3a:	d507      	bpl.n	8007e4c <__smakebuf_r+0x1c>
 8007e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	2301      	movs	r3, #1
 8007e46:	6163      	str	r3, [r4, #20]
 8007e48:	b002      	add	sp, #8
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	ab01      	add	r3, sp, #4
 8007e4e:	466a      	mov	r2, sp
 8007e50:	f7ff ffc8 	bl	8007de4 <__swhatbuf_r>
 8007e54:	9900      	ldr	r1, [sp, #0]
 8007e56:	4605      	mov	r5, r0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff fa57 	bl	800730c <_malloc_r>
 8007e5e:	b948      	cbnz	r0, 8007e74 <__smakebuf_r+0x44>
 8007e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e64:	059a      	lsls	r2, r3, #22
 8007e66:	d4ef      	bmi.n	8007e48 <__smakebuf_r+0x18>
 8007e68:	f023 0303 	bic.w	r3, r3, #3
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	e7e3      	b.n	8007e3c <__smakebuf_r+0xc>
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <__smakebuf_r+0x7c>)
 8007e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	6020      	str	r0, [r4, #0]
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	9b00      	ldr	r3, [sp, #0]
 8007e84:	6163      	str	r3, [r4, #20]
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	6120      	str	r0, [r4, #16]
 8007e8a:	b15b      	cbz	r3, 8007ea4 <__smakebuf_r+0x74>
 8007e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f889 	bl	8007fa8 <_isatty_r>
 8007e96:	b128      	cbz	r0, 8007ea4 <__smakebuf_r+0x74>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	89a0      	ldrh	r0, [r4, #12]
 8007ea6:	4305      	orrs	r5, r0
 8007ea8:	81a5      	strh	r5, [r4, #12]
 8007eaa:	e7cd      	b.n	8007e48 <__smakebuf_r+0x18>
 8007eac:	08007125 	.word	0x08007125

08007eb0 <__malloc_lock>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__malloc_lock+0x8>)
 8007eb2:	f7ff ba09 	b.w	80072c8 <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	200002b0 	.word	0x200002b0

08007ebc <__malloc_unlock>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__malloc_unlock+0x8>)
 8007ebe:	f7ff ba04 	b.w	80072ca <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	200002b0 	.word	0x200002b0

08007ec8 <_free_r>:
 8007ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d044      	beq.n	8007f58 <_free_r+0x90>
 8007ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed2:	9001      	str	r0, [sp, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eda:	bfb8      	it	lt
 8007edc:	18e4      	addlt	r4, r4, r3
 8007ede:	f7ff ffe7 	bl	8007eb0 <__malloc_lock>
 8007ee2:	4a1e      	ldr	r2, [pc, #120]	; (8007f5c <_free_r+0x94>)
 8007ee4:	9801      	ldr	r0, [sp, #4]
 8007ee6:	6813      	ldr	r3, [r2, #0]
 8007ee8:	b933      	cbnz	r3, 8007ef8 <_free_r+0x30>
 8007eea:	6063      	str	r3, [r4, #4]
 8007eec:	6014      	str	r4, [r2, #0]
 8007eee:	b003      	add	sp, #12
 8007ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef4:	f7ff bfe2 	b.w	8007ebc <__malloc_unlock>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d908      	bls.n	8007f0e <_free_r+0x46>
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	1961      	adds	r1, r4, r5
 8007f00:	428b      	cmp	r3, r1
 8007f02:	bf01      	itttt	eq
 8007f04:	6819      	ldreq	r1, [r3, #0]
 8007f06:	685b      	ldreq	r3, [r3, #4]
 8007f08:	1949      	addeq	r1, r1, r5
 8007f0a:	6021      	streq	r1, [r4, #0]
 8007f0c:	e7ed      	b.n	8007eea <_free_r+0x22>
 8007f0e:	461a      	mov	r2, r3
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	b10b      	cbz	r3, 8007f18 <_free_r+0x50>
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	d9fa      	bls.n	8007f0e <_free_r+0x46>
 8007f18:	6811      	ldr	r1, [r2, #0]
 8007f1a:	1855      	adds	r5, r2, r1
 8007f1c:	42a5      	cmp	r5, r4
 8007f1e:	d10b      	bne.n	8007f38 <_free_r+0x70>
 8007f20:	6824      	ldr	r4, [r4, #0]
 8007f22:	4421      	add	r1, r4
 8007f24:	1854      	adds	r4, r2, r1
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	6011      	str	r1, [r2, #0]
 8007f2a:	d1e0      	bne.n	8007eee <_free_r+0x26>
 8007f2c:	681c      	ldr	r4, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	6053      	str	r3, [r2, #4]
 8007f32:	4421      	add	r1, r4
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	e7da      	b.n	8007eee <_free_r+0x26>
 8007f38:	d902      	bls.n	8007f40 <_free_r+0x78>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	6003      	str	r3, [r0, #0]
 8007f3e:	e7d6      	b.n	8007eee <_free_r+0x26>
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf04      	itt	eq
 8007f48:	6819      	ldreq	r1, [r3, #0]
 8007f4a:	685b      	ldreq	r3, [r3, #4]
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	bf04      	itt	eq
 8007f50:	1949      	addeq	r1, r1, r5
 8007f52:	6021      	streq	r1, [r4, #0]
 8007f54:	6054      	str	r4, [r2, #4]
 8007f56:	e7ca      	b.n	8007eee <_free_r+0x26>
 8007f58:	b003      	add	sp, #12
 8007f5a:	bd30      	pop	{r4, r5, pc}
 8007f5c:	200002b4 	.word	0x200002b4

08007f60 <_read_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_read_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 f968 	bl	8001244 <_read>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_read_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_read_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200002bc 	.word	0x200002bc

08007f84 <_fstat_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_fstat_r+0x20>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	f7f9 f980 	bl	8001296 <_fstat>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	d102      	bne.n	8007fa0 <_fstat_r+0x1c>
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	b103      	cbz	r3, 8007fa0 <_fstat_r+0x1c>
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200002bc 	.word	0x200002bc

08007fa8 <_isatty_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d06      	ldr	r5, [pc, #24]	; (8007fc4 <_isatty_r+0x1c>)
 8007fac:	2300      	movs	r3, #0
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	602b      	str	r3, [r5, #0]
 8007fb4:	f7f9 f97f 	bl	80012b6 <_isatty>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_isatty_r+0x1a>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_isatty_r+0x1a>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	200002bc 	.word	0x200002bc

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
