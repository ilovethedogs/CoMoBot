
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008170  08008170  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008178  08008178  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000080  08008200  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08008200  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002430  00000000  00000000  00030bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00033e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002348e  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112ec  00000000  00000000  00057fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0ee4  00000000  00000000  000692ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a19e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  0013a1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800802c 	.word	0x0800802c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800802c 	.word	0x0800802c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:
void PrintAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f005 fb5c 	bl	8005c86 <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000118 	.word	0x20000118

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005e0:	b088      	sub	sp, #32
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 ff24 	bl	8001430 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f8dc 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f9d4 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f0:	f000 f97a 	bl	80008e8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f9a6 	bl	8000944 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005f8:	f000 f940 	bl	800087c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  canFilter1.FilterMaskIdHigh = 0x7F3 << 5;
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <main+0x1a4>)
 80005fe:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000602:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x106 << 5;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x1a4>)
 8000606:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800060a:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x7F3 << 5;
 800060c:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <main+0x1a4>)
 800060e:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000612:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x106 << 5;
 8000614:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <main+0x1a4>)
 8000616:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800061a:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800061c:	4b58      	ldr	r3, [pc, #352]	; (8000780 <main+0x1a4>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000622:	4b57      	ldr	r3, [pc, #348]	; (8000780 <main+0x1a4>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000628:	4b55      	ldr	r3, [pc, #340]	; (8000780 <main+0x1a4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 800062e:	4b54      	ldr	r3, [pc, #336]	; (8000780 <main+0x1a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 8000634:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x1a4>)
 8000636:	2201      	movs	r2, #1
 8000638:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 800063a:	4951      	ldr	r1, [pc, #324]	; (8000780 <main+0x1a4>)
 800063c:	4851      	ldr	r0, [pc, #324]	; (8000784 <main+0x1a8>)
 800063e:	f001 f889 	bl	8001754 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000642:	2102      	movs	r1, #2
 8000644:	484f      	ldr	r0, [pc, #316]	; (8000784 <main+0x1a8>)
 8000646:	f001 fab9 	bl	8001bbc <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 800064a:	484e      	ldr	r0, [pc, #312]	; (8000784 <main+0x1a8>)
 800064c:	f001 f962 	bl	8001914 <HAL_CAN_Start>

  VL53L1X_SensorInit(dev);
  //VL53L1X_SetI2CAddress(dev, dev1);
  VL53L1X_StartRanging(dev1);
  */
  uint8_t fail[6] = {70, 65, 73, 76, 10, 0};
 8000650:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <main+0x1ac>)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	8019      	strh	r1, [r3, #0]
  uint8_t succ[6] = {83, 85, 67, 67, 10, 0};
 8000660:	4a4a      	ldr	r2, [pc, #296]	; (800078c <main+0x1b0>)
 8000662:	463b      	mov	r3, r7
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	3304      	adds	r3, #4
 800066c:	8019      	strh	r1, [r3, #0]
  uint8_t suc = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	76fb      	strb	r3, [r7, #27]
  if (!(suc = ChangeAddresses(nof))) {
 8000672:	4b47      	ldr	r3, [pc, #284]	; (8000790 <main+0x1b4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fbe2 	bl	8000e40 <ChangeAddresses>
 800067c:	4603      	mov	r3, r0
 800067e:	76fb      	strb	r3, [r7, #27]
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <main+0xba>
	  HAL_UART_Transmit(&huart2, fail, 6, 10);
 8000686:	f107 0108 	add.w	r1, r7, #8
 800068a:	230a      	movs	r3, #10
 800068c:	2206      	movs	r2, #6
 800068e:	4841      	ldr	r0, [pc, #260]	; (8000794 <main+0x1b8>)
 8000690:	f005 faf9 	bl	8005c86 <HAL_UART_Transmit>
 8000694:	e005      	b.n	80006a2 <main+0xc6>
  }
  else {
	  HAL_UART_Transmit(&huart2, succ, 6, 10);
 8000696:	4639      	mov	r1, r7
 8000698:	230a      	movs	r3, #10
 800069a:	2206      	movs	r2, #6
 800069c:	483d      	ldr	r0, [pc, #244]	; (8000794 <main+0x1b8>)
 800069e:	f005 faf2 	bl	8005c86 <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dis[nof];
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <main+0x1b4>)
 80006a4:	7819      	ldrb	r1, [r3, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	3b01      	subs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	b2cb      	uxtb	r3, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	4691      	mov	r9, r2
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80006c0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80006c4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80006c8:	b2cb      	uxtb	r3, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	461c      	mov	r4, r3
 80006ce:	4615      	mov	r5, r2
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	012b      	lsls	r3, r5, #4
 80006da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80006de:	0122      	lsls	r2, r4, #4
 80006e0:	460b      	mov	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	3307      	adds	r3, #7
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	ebad 0d03 	sub.w	sp, sp, r3
 80006ee:	466b      	mov	r3, sp
 80006f0:	3301      	adds	r3, #1
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  for (int i = 0; i != nof; ++i) dis[i] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	e007      	b.n	800070e <main+0x132>
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	69fa      	ldr	r2, [r7, #28]
 8000702:	2100      	movs	r1, #0
 8000704:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <main+0x1b4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4293      	cmp	r3, r2
 8000718:	d1f1      	bne.n	80006fe <main+0x122>
  while (1)
  {
	GetAllData(nof, dis);
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x1b4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	6939      	ldr	r1, [r7, #16]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fbcf 	bl	8000ec4 <GetAllData>
	PrintAllData(nof, dis);
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <main+0x1b4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	6939      	ldr	r1, [r7, #16]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fc0d 	bl	8000f4c <PrintAllData>

	canTxHeader.StdId = 0x102;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0x1bc>)
 8000734:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000738:	601a      	str	r2, [r3, #0]
	canTxHeader.RTR = CAN_RTR_DATA;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x1bc>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
	canTxHeader.IDE = CAN_ID_STD;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x1bc>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
	canTxHeader.DLC = 8;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <main+0x1bc>)
 8000748:	2208      	movs	r2, #8
 800074a:	611a      	str	r2, [r3, #16]

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <main+0x1a8>)
 800074e:	f001 fa00 	bl	8001b52 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000752:	4603      	mov	r3, r0
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <main+0x1c0>)
 8000756:	6013      	str	r3, [r2, #0]
	can1Tx0Data[0] = (0 & 0xFF00) >> 8;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <main+0x1c4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	can1Tx0Data[1] = (0 & 0x00FF);
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <main+0x1c4>)
 8000760:	2200      	movs	r2, #0
 8000762:	705a      	strb	r2, [r3, #1]
	can1Tx0Data[2] = (0 & 0xFF00) >> 8;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <main+0x1c4>)
 8000766:	2200      	movs	r2, #0
 8000768:	709a      	strb	r2, [r3, #2]
	can1Tx0Data[3] = (0 & 0x00FF);
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <main+0x1c4>)
 800076c:	2200      	movs	r2, #0
 800076e:	70da      	strb	r2, [r3, #3]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0x1c0>)
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <main+0x1c4>)
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <main+0x1bc>)
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <main+0x1a8>)
 8000778:	f001 f910 	bl	800199c <HAL_CAN_AddTxMessage>
	GetAllData(nof, dis);
 800077c:	e7cd      	b.n	800071a <main+0x13e>
 800077e:	bf00      	nop
 8000780:	2000015c 	.word	0x2000015c
 8000784:	2000009c 	.word	0x2000009c
 8000788:	08008044 	.word	0x08008044
 800078c:	0800804c 	.word	0x0800804c
 8000790:	20000002 	.word	0x20000002
 8000794:	20000118 	.word	0x20000118
 8000798:	20000184 	.word	0x20000184
 800079c:	2000019c 	.word	0x2000019c
 80007a0:	200001a0 	.word	0x200001a0

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fca4 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <SystemClock_Config+0xd0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xd4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <SystemClock_Config+0xd4>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000818:	23a8      	movs	r3, #168	; 0xa8
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4618      	mov	r0, r3
 800082e:	f004 ff3f 	bl	80056b0 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000838:	f000 fbac 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2105      	movs	r1, #5
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fbde 	bl	800501c <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000866:	f000 fb95 	bl	8000f94 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_CAN1_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000888:	2215      	movs	r2, #21
 800088a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_CAN1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_CAN1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_CAN1_Init+0x64>)
 800089a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800089e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008bc:	2201      	movs	r2, #1
 80008be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_CAN1_Init+0x64>)
 80008ce:	f000 fe45 	bl	800155c <HAL_CAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 fb5c 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	40006400 	.word	0x40006400

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_I2C1_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x50>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_I2C1_Init+0x58>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_I2C1_Init+0x50>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C1_Init+0x50>)
 8000926:	f001 ff09 	bl	800273c <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 fb30 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000c4 	.word	0x200000c4
 800093c:	40005400 	.word	0x40005400
 8000940:	00061a80 	.word	0x00061a80

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART2_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART2_UART_Init+0x4c>)
 800097c:	f005 f936 	bl	8005bec <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 fb05 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000118 	.word	0x20000118
 8000994:	40004400 	.word	0x40004400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0x120>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f643 411c 	movw	r1, #15388	; 0x3c1c
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <MX_GPIO_Init+0x124>)
 8000a42:	f001 fe61 	bl	8002708 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0x128>)
 8000a4c:	f001 fe5c 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2108      	movs	r1, #8
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x12c>)
 8000a56:	f001 fe57 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a5a:	f643 431c 	movw	r3, #15388	; 0x3c1c
 8000a5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_GPIO_Init+0x124>)
 8000a74:	f001 fcb4 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0x128>)
 8000a90:	f001 fca6 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a94:	2308      	movs	r3, #8
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x12c>)
 8000aac:	f001 fc98 	bl	80023e0 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <TurnOffAll+0x6c>)
 8000ad4:	f001 fe18 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <TurnOffAll+0x6c>)
 8000ae0:	f001 fe12 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <TurnOffAll+0x6c>)
 8000aec:	f001 fe0c 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <TurnOffAll+0x70>)
 8000af6:	f001 fe07 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <TurnOffAll+0x6c>)
 8000b02:	f001 fe01 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2104      	movs	r1, #4
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <TurnOffAll+0x6c>)
 8000b0c:	f001 fdfc 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2108      	movs	r1, #8
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <TurnOffAll+0x6c>)
 8000b16:	f001 fdf7 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <TurnOffAll+0x6c>)
 8000b20:	f001 fdf2 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <TurnOffAll+0x74>)
 8000b2a:	f001 fded 	bl	8002708 <HAL_GPIO_WritePin>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
	  */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40020400 	.word	0x40020400

08000b40 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t boot[7] = {66, 79, 79, 84, 48, 10, 0};
 8000b4e:	4ab6      	ldr	r2, [pc, #728]	; (8000e28 <TurnOnAt+0x2e8>)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b58:	6018      	str	r0, [r3, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	8019      	strh	r1, [r3, #0]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	0c0a      	lsrs	r2, r1, #16
 8000b62:	701a      	strb	r2, [r3, #0]
	switch (i) {
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	f200 8158 	bhi.w	8000e1c <TurnOnAt+0x2dc>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <TurnOnAt+0x34>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b99 	.word	0x08000b99
 8000b78:	08000c05 	.word	0x08000c05
 8000b7c:	08000c75 	.word	0x08000c75
 8000b80:	08000cb3 	.word	0x08000cb3
 8000b84:	08000cef 	.word	0x08000cef
 8000b88:	08000d2d 	.word	0x08000d2d
 8000b8c:	08000d69 	.word	0x08000d69
 8000b90:	08000da5 	.word	0x08000da5
 8000b94:	08000de1 	.word	0x08000de1
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	48a3      	ldr	r0, [pc, #652]	; (8000e2c <TurnOnAt+0x2ec>)
 8000ba0:	f001 fdb2 	bl	8002708 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f000 fcb5 	bl	8001514 <HAL_Delay>
		VL53L1X_BootState(dev, &bootState);
 8000baa:	4ba1      	ldr	r3, [pc, #644]	; (8000e30 <TurnOnAt+0x2f0>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	f107 020f 	add.w	r2, r7, #15
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 f960 	bl	8006e7a <VL53L1X_BootState>
		while(bootState==0){
 8000bba:	e01f      	b.n	8000bfc <TurnOnAt+0xbc>
			TurnOffAll();
 8000bbc:	f7ff ff84 	bl	8000ac8 <TurnOffAll>
			HAL_Delay(10);
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f000 fca7 	bl	8001514 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bcc:	4897      	ldr	r0, [pc, #604]	; (8000e2c <TurnOnAt+0x2ec>)
 8000bce:	f001 fd9b 	bl	8002708 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f000 fc9e 	bl	8001514 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000bd8:	4b95      	ldr	r3, [pc, #596]	; (8000e30 <TurnOnAt+0x2f0>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	f107 020f 	add.w	r2, r7, #15
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 f949 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000be8:	f107 0108 	add.w	r1, r7, #8
 8000bec:	230a      	movs	r3, #10
 8000bee:	2207      	movs	r2, #7
 8000bf0:	4890      	ldr	r0, [pc, #576]	; (8000e34 <TurnOnAt+0x2f4>)
 8000bf2:	f005 f848 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 fc8c 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0dc      	beq.n	8000bbc <TurnOnAt+0x7c>
		}
		break;
 8000c02:	e10b      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 1:
		boot[4] = 49;
 8000c04:	2331      	movs	r3, #49	; 0x31
 8000c06:	733b      	strb	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	4887      	ldr	r0, [pc, #540]	; (8000e2c <TurnOnAt+0x2ec>)
 8000c10:	f001 fd7a 	bl	8002708 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000c14:	200a      	movs	r0, #10
 8000c16:	f000 fc7d 	bl	8001514 <HAL_Delay>
		VL53L1X_BootState(dev, &bootState);
 8000c1a:	4b85      	ldr	r3, [pc, #532]	; (8000e30 <TurnOnAt+0x2f0>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	f107 020f 	add.w	r2, r7, #15
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f006 f928 	bl	8006e7a <VL53L1X_BootState>
		while(bootState==0){
 8000c2a:	e01f      	b.n	8000c6c <TurnOnAt+0x12c>
			TurnOffAll();
 8000c2c:	f7ff ff4c 	bl	8000ac8 <TurnOffAll>
			HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fc6f 	bl	8001514 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	487b      	ldr	r0, [pc, #492]	; (8000e2c <TurnOnAt+0x2ec>)
 8000c3e:	f001 fd63 	bl	8002708 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 fc66 	bl	8001514 <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000c48:	4b79      	ldr	r3, [pc, #484]	; (8000e30 <TurnOnAt+0x2f0>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	f107 020f 	add.w	r2, r7, #15
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f006 f911 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000c58:	f107 0108 	add.w	r1, r7, #8
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	2207      	movs	r2, #7
 8000c60:	4874      	ldr	r0, [pc, #464]	; (8000e34 <TurnOnAt+0x2f4>)
 8000c62:	f005 f810 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 fc54 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0dc      	beq.n	8000c2c <TurnOnAt+0xec>
		}
		break;
 8000c72:	e0d3      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7a:	486c      	ldr	r0, [pc, #432]	; (8000e2c <TurnOnAt+0x2ec>)
 8000c7c:	f001 fd44 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 50;
 8000c80:	2332      	movs	r3, #50	; 0x32
 8000c82:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000c84:	e011      	b.n	8000caa <TurnOnAt+0x16a>
			VL53L1X_BootState(dev, &bootState);
 8000c86:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <TurnOnAt+0x2f0>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	f107 020f 	add.w	r2, r7, #15
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 f8f2 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000c96:	f107 0108 	add.w	r1, r7, #8
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	4865      	ldr	r0, [pc, #404]	; (8000e34 <TurnOnAt+0x2f4>)
 8000ca0:	f004 fff1 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f000 fc35 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0ea      	beq.n	8000c86 <TurnOnAt+0x146>
		}
		break;
 8000cb0:	e0b4      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4860      	ldr	r0, [pc, #384]	; (8000e38 <TurnOnAt+0x2f8>)
 8000cb8:	f001 fd26 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 51;
 8000cbc:	2333      	movs	r3, #51	; 0x33
 8000cbe:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000cc0:	e011      	b.n	8000ce6 <TurnOnAt+0x1a6>
			VL53L1X_BootState(dev, &bootState);
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <TurnOnAt+0x2f0>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	f107 020f 	add.w	r2, r7, #15
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 f8d4 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000cd2:	f107 0108 	add.w	r1, r7, #8
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	2207      	movs	r2, #7
 8000cda:	4856      	ldr	r0, [pc, #344]	; (8000e34 <TurnOnAt+0x2f4>)
 8000cdc:	f004 ffd3 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fc17 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0ea      	beq.n	8000cc2 <TurnOnAt+0x182>
		}
		break;
 8000cec:	e096      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	484d      	ldr	r0, [pc, #308]	; (8000e2c <TurnOnAt+0x2ec>)
 8000cf6:	f001 fd07 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 52;
 8000cfa:	2334      	movs	r3, #52	; 0x34
 8000cfc:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000cfe:	e011      	b.n	8000d24 <TurnOnAt+0x1e4>
			VL53L1X_BootState(dev, &bootState);
 8000d00:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <TurnOnAt+0x2f0>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	f107 020f 	add.w	r2, r7, #15
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f006 f8b5 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d10:	f107 0108 	add.w	r1, r7, #8
 8000d14:	230a      	movs	r3, #10
 8000d16:	2207      	movs	r2, #7
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <TurnOnAt+0x2f4>)
 8000d1a:	f004 ffb4 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f000 fbf8 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0ea      	beq.n	8000d00 <TurnOnAt+0x1c0>
		}
		break;
 8000d2a:	e077      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2104      	movs	r1, #4
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <TurnOnAt+0x2ec>)
 8000d32:	f001 fce9 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 53;
 8000d36:	2335      	movs	r3, #53	; 0x35
 8000d38:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000d3a:	e011      	b.n	8000d60 <TurnOnAt+0x220>
			VL53L1X_BootState(dev, &bootState);
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <TurnOnAt+0x2f0>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	f107 020f 	add.w	r2, r7, #15
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f006 f897 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d4c:	f107 0108 	add.w	r1, r7, #8
 8000d50:	230a      	movs	r3, #10
 8000d52:	2207      	movs	r2, #7
 8000d54:	4837      	ldr	r0, [pc, #220]	; (8000e34 <TurnOnAt+0x2f4>)
 8000d56:	f004 ff96 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f000 fbda 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0ea      	beq.n	8000d3c <TurnOnAt+0x1fc>
		}
		break;
 8000d66:	e059      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <TurnOnAt+0x2ec>)
 8000d6e:	f001 fccb 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 54;
 8000d72:	2336      	movs	r3, #54	; 0x36
 8000d74:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000d76:	e011      	b.n	8000d9c <TurnOnAt+0x25c>
			VL53L1X_BootState(dev, &bootState);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <TurnOnAt+0x2f0>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	f107 020f 	add.w	r2, r7, #15
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 f879 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000d88:	f107 0108 	add.w	r1, r7, #8
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	2207      	movs	r2, #7
 8000d90:	4828      	ldr	r0, [pc, #160]	; (8000e34 <TurnOnAt+0x2f4>)
 8000d92:	f004 ff78 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 fbbc 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0ea      	beq.n	8000d78 <TurnOnAt+0x238>
		}
		break;
 8000da2:	e03b      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	4820      	ldr	r0, [pc, #128]	; (8000e2c <TurnOnAt+0x2ec>)
 8000daa:	f001 fcad 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 55;
 8000dae:	2337      	movs	r3, #55	; 0x37
 8000db0:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000db2:	e011      	b.n	8000dd8 <TurnOnAt+0x298>
			VL53L1X_BootState(dev, &bootState);
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <TurnOnAt+0x2f0>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	f107 020f 	add.w	r2, r7, #15
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 f85b 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000dc4:	f107 0108 	add.w	r1, r7, #8
 8000dc8:	230a      	movs	r3, #10
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <TurnOnAt+0x2f4>)
 8000dce:	f004 ff5a 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 fb9e 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0ea      	beq.n	8000db4 <TurnOnAt+0x274>
		}
		break;
 8000dde:	e01d      	b.n	8000e1c <TurnOnAt+0x2dc>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2108      	movs	r1, #8
 8000de4:	4815      	ldr	r0, [pc, #84]	; (8000e3c <TurnOnAt+0x2fc>)
 8000de6:	f001 fc8f 	bl	8002708 <HAL_GPIO_WritePin>
		boot[4] = 56;
 8000dea:	2338      	movs	r3, #56	; 0x38
 8000dec:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000dee:	e011      	b.n	8000e14 <TurnOnAt+0x2d4>
			VL53L1X_BootState(dev, &bootState);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <TurnOnAt+0x2f0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	f107 020f 	add.w	r2, r7, #15
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 f83d 	bl	8006e7a <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	230a      	movs	r3, #10
 8000e06:	2207      	movs	r2, #7
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <TurnOnAt+0x2f4>)
 8000e0a:	f004 ff3c 	bl	8005c86 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f000 fb80 	bl	8001514 <HAL_Delay>
		while(bootState==0){
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0ea      	beq.n	8000df0 <TurnOnAt+0x2b0>
		}
		break;
 8000e1a:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08008054 	.word	0x08008054
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000118 	.word	0x20000118
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40020400 	.word	0x40020400

08000e40 <ChangeAddresses>:

uint16_t ChangeAddresses(uint8_t num_of_tof) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
	TurnOffAll();
 8000e4e:	f7ff fe3b 	bl	8000ac8 <TurnOffAll>
	HAL_Delay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 fb5e 	bl	8001514 <HAL_Delay>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73bb      	strb	r3, [r7, #14]
 8000e5c:	e024      	b.n	8000ea8 <ChangeAddresses+0x68>
		success *= TurnOnAt(i);
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe6d 	bl	8000b40 <TurnOnAt>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	fb12 f303 	smulbb	r3, r2, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8000e72:	2005      	movs	r0, #5
 8000e74:	f000 fb4e 	bl	8001514 <HAL_Delay>
		VL53L1X_SensorInit(dev);
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <ChangeAddresses+0x7c>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 fee7 	bl	8006c50 <VL53L1X_SensorInit>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <ChangeAddresses+0x7c>)
 8000e84:	881a      	ldrh	r2, [r3, #0]
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <ChangeAddresses+0x80>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f005 fec0 	bl	8006c14 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <ChangeAddresses+0x80>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 ff85 	bl	8006dac <VL53L1X_StartRanging>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	73bb      	strb	r3, [r7, #14]
 8000ea8:	7bba      	ldrb	r2, [r7, #14]
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d1d6      	bne.n	8000e5e <ChangeAddresses+0x1e>
	}
	return success;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	b29b      	uxth	r3, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <GetAllData>:

uint8_t GetAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73bb      	strb	r3, [r7, #14]
	uint8_t dataReady = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e027      	b.n	8000f2e <GetAllData+0x6a>
		dataReady = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	737b      	strb	r3, [r7, #13]
		while (dataReady == 0){
 8000ee2:	e00c      	b.n	8000efe <GetAllData+0x3a>
			VL53L1X_CheckForDataReady(devs[i], &dataReady);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <GetAllData+0x84>)
 8000ee8:	5cd3      	ldrb	r3, [r2, r3]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f107 020d 	add.w	r2, r7, #13
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 ff8a 	bl	8006e0c <VL53L1X_CheckForDataReady>
			//HAL_UART_Transmit(&huart2, getting, 6, 10);
			HAL_Delay(2);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f000 fb0b 	bl	8001514 <HAL_Delay>
		while (dataReady == 0){
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0ef      	beq.n	8000ee4 <GetAllData+0x20>
		}
		VL53L1X_GetDistance(devs[i], &dis[i]);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <GetAllData+0x84>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f005 ffcf 	bl	8006eb8 <VL53L1X_GetDistance>
		VL53L1X_ClearInterrupt(devs[i]);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <GetAllData+0x84>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 ff00 	bl	8006d28 <VL53L1X_ClearInterrupt>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d1d3      	bne.n	8000ede <GetAllData+0x1a>
	}
	HAL_Delay(50);
 8000f36:	2032      	movs	r0, #50	; 0x32
 8000f38:	f000 faec 	bl	8001514 <HAL_Delay>
}
 8000f3c:	bf00      	nop
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000004 	.word	0x20000004

08000f4c <PrintAllData>:

void PrintAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i != num_of_tof; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e00c      	b.n	8000f78 <PrintAllData+0x2c>
		printf("%d:%d\n", i, dis[i]);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <PrintAllData+0x44>)
 8000f6e:	f006 f8cf 	bl	8007110 <iprintf>
	for (int i = 0; i != num_of_tof; ++i) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1ee      	bne.n	8000f5e <PrintAllData+0x12>
	}
	HAL_Delay(500);
 8000f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f84:	f000 fac6 	bl	8001514 <HAL_Delay>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800805c 	.word	0x0800805c

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <HAL_CAN_MspInit+0xa4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d13c      	bne.n	800108c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 800101c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_CAN_MspInit+0xa8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800105c:	2309      	movs	r3, #9
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <HAL_CAN_MspInit+0xac>)
 8001068:	f001 f9ba 	bl	80023e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2013      	movs	r0, #19
 8001072:	f001 f8de 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001076:	2013      	movs	r0, #19
 8001078:	f001 f8f7 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2014      	movs	r0, #20
 8001082:	f001 f8d6 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001086:	2014      	movs	r0, #20
 8001088:	f001 f8ef 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40006400 	.word	0x40006400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_I2C_MspInit+0xa4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13c      	bne.n	800113c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <HAL_I2C_MspInit+0xac>)
 80010fc:	f001 f970 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 800110a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	201f      	movs	r0, #31
 8001122:	f001 f886 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001126:	201f      	movs	r0, #31
 8001128:	f001 f89f 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2020      	movs	r0, #32
 8001132:	f001 f87e 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001136:	2020      	movs	r0, #32
 8001138:	f001 f897 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40005400 	.word	0x40005400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0x94>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d133      	bne.n	80011da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_UART_MspInit+0x98>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x98>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0x98>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x98>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0x98>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x98>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230c      	movs	r3, #12
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ba:	2307      	movs	r3, #7
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_UART_MspInit+0x9c>)
 80011c6:	f001 f90b 	bl	80023e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2026      	movs	r0, #38	; 0x26
 80011d0:	f001 f82f 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d4:	2026      	movs	r0, #38	; 0x26
 80011d6:	f001 f848 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40004400 	.word	0x40004400
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f94a 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <CAN1_TX_IRQHandler+0x10>)
 800124a:	f000 fcdd 	bl	8001c08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000009c 	.word	0x2000009c

08001258 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <CAN1_RX0_IRQHandler+0x10>)
 800125e:	f000 fcd3 	bl	8001c08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000009c 	.word	0x2000009c

0800126c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <I2C1_EV_IRQHandler+0x10>)
 8001272:	f001 fecb 	bl	800300c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000c4 	.word	0x200000c4

08001280 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <I2C1_ER_IRQHandler+0x10>)
 8001286:	f002 f832 	bl	80032ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000c4 	.word	0x200000c4

08001294 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <USART2_IRQHandler+0x10>)
 800129a:	f004 fd87 	bl	8005dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000118 	.word	0x20000118

080012a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
	}

return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	605a      	str	r2, [r3, #4]
	return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f005 fe96 	bl	80070ac <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20020000 	.word	0x20020000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	200001a8 	.word	0x200001a8
 80013b4:	200002c0 	.word	0x200002c0

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001406:	f7ff ffd7 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f005 fe55 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff f8e5 	bl	80005dc <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001420:	08008180 	.word	0x08008180
  ldr r2, =_sbss
 8001424:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001428:	200002c0 	.word	0x200002c0

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 fedf 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fd9c 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fef7 	bl	8002286 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 febf 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000010 	.word	0x20000010
 80014cc:	20000018 	.word	0x20000018
 80014d0:	20000014 	.word	0x20000014

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000018 	.word	0x20000018
 80014f8:	200001ac 	.word	0x200001ac

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200001ac 	.word	0x200001ac

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000018 	.word	0x20000018

0800155c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0ed      	b.n	800174a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fd38 	bl	8000ff0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001590:	f7ff ffb4 	bl	80014fc <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001596:	e012      	b.n	80015be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001598:	f7ff ffb0 	bl	80014fc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b0a      	cmp	r3, #10
 80015a4:	d90b      	bls.n	80015be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2205      	movs	r2, #5
 80015b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0c5      	b.n	800174a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0e5      	beq.n	8001598 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0202 	bic.w	r2, r2, #2
 80015da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff ff8e 	bl	80014fc <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e2:	e012      	b.n	800160a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e4:	f7ff ff8a 	bl	80014fc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b0a      	cmp	r3, #10
 80015f0:	d90b      	bls.n	800160a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2205      	movs	r2, #5
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e09f      	b.n	800174a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e5      	bne.n	80015e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e1b      	ldrb	r3, [r3, #24]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d108      	bne.n	8001632 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e007      	b.n	8001642 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e007      	b.n	800166c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e9b      	ldrb	r3, [r3, #26]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e007      	b.n	8001696 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0220 	bic.w	r2, r2, #32
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7edb      	ldrb	r3, [r3, #27]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0210 	bic.w	r2, r2, #16
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0210 	orr.w	r2, r2, #16
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7f1b      	ldrb	r3, [r3, #28]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0208 	orr.w	r2, r2, #8
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e007      	b.n	80016ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0208 	bic.w	r2, r2, #8
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7f5b      	ldrb	r3, [r3, #29]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0204 	orr.w	r2, r2, #4
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e007      	b.n	8001714 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0204 	bic.w	r2, r2, #4
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	ea42 0103 	orr.w	r1, r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800176c:	7cfb      	ldrb	r3, [r7, #19]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d003      	beq.n	800177a <HAL_CAN_ConfigFilter+0x26>
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	2b02      	cmp	r3, #2
 8001776:	f040 80be 	bne.w	80018f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_CAN_ConfigFilter+0x1bc>)
 800177c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001794:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	431a      	orrs	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2201      	movs	r2, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d123      	bne.n	8001824 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3248      	adds	r2, #72	; 0x48
 8001804:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001818:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181a:	6979      	ldr	r1, [r7, #20]
 800181c:	3348      	adds	r3, #72	; 0x48
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d122      	bne.n	8001872 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3248      	adds	r2, #72	; 0x48
 8001852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001866:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	3348      	adds	r3, #72	; 0x48
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	401a      	ands	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800188c:	e007      	b.n	800189e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	431a      	orrs	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018b8:	e007      	b.n	80018ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e8:	f023 0201 	bic.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e006      	b.n	8001904 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
  }
}
 8001904:	4618      	mov	r0, r3
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40006400 	.word	0x40006400

08001914 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d12e      	bne.n	8001986 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fddc 	bl	80014fc <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001946:	e012      	b.n	800196e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001948:	f7ff fdd8 	bl	80014fc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d90b      	bls.n	800196e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2205      	movs	r2, #5
 8001966:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e012      	b.n	8001994 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e5      	bne.n	8001948 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e006      	b.n	8001994 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d003      	beq.n	80019c8 <HAL_CAN_AddTxMessage+0x2c>
 80019c0:	7ffb      	ldrb	r3, [r7, #31]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f040 80b8 	bne.w	8001b38 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80a0 	beq.w	8001b28 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	0e1b      	lsrs	r3, r3, #24
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d907      	bls.n	8001a08 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e09e      	b.n	8001b46 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6809      	ldr	r1, [r1, #0]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e00f      	b.n	8001a56 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	440b      	add	r3, r1
 8001a54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3318      	adds	r3, #24
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	3304      	adds	r3, #4
 8001a68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	7d1b      	ldrb	r3, [r3, #20]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d111      	bne.n	8001a96 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	440b      	add	r3, r1
 8001a92:	3304      	adds	r3, #4
 8001a94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3307      	adds	r3, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	061a      	lsls	r2, r3, #24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3305      	adds	r3, #5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	3204      	adds	r2, #4
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	4610      	mov	r0, r2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	6811      	ldr	r1, [r2, #0]
 8001abe:	ea43 0200 	orr.w	r2, r3, r0
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001acc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3303      	adds	r3, #3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	061a      	lsls	r2, r3, #24
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3302      	adds	r3, #2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	7812      	ldrb	r2, [r2, #0]
 8001aee:	4610      	mov	r0, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	ea43 0200 	orr.w	r2, r3, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	440b      	add	r3, r1
 8001afe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3318      	adds	r3, #24
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	6811      	ldr	r1, [r2, #0]
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	440b      	add	r3, r1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e00e      	b.n	8001b46 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e006      	b.n	8001b46 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d11d      	bne.n	8001bae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d002      	beq.n	8001bda <HAL_CAN_ActivateNotification+0x1e>
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d109      	bne.n	8001bee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6959      	ldr	r1, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e006      	b.n	8001bfc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d07c      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f983 	bl	8001f76 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c70:	e016      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e00c      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e002      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f989 	bl	8001fb2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f963 	bl	8001f8a <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc4:	e016      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	e00c      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e002      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f969 	bl	8001fc6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f943 	bl	8001f9e <HAL_CAN_TxMailbox2CompleteCallback>
 8001d18:	e016      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e00c      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e002      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f949 	bl	8001fda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f93a 	bl	8002002 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f921 	bl	8001fee <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f91c 	bl	800202a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f903 	bl	8002016 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f906 	bl	800203e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8ff 	bl	8002052 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d07b      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d072      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d043      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d03e      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed6:	2b60      	cmp	r3, #96	; 0x60
 8001ed8:	d02b      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x32a>
 8001eda:	2b60      	cmp	r3, #96	; 0x60
 8001edc:	d82e      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ede:	2b50      	cmp	r3, #80	; 0x50
 8001ee0:	d022      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x320>
 8001ee2:	2b50      	cmp	r3, #80	; 0x50
 8001ee4:	d82a      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d019      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x316>
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d826      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001eee:	2b30      	cmp	r3, #48	; 0x30
 8001ef0:	d010      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x30c>
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d822      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d002      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x2f8>
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d005      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001efe:	e01d      	b.n	8001f3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f08:	e019      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f12:	e014      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f043 0320 	orr.w	r3, r3, #32
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1c:	e00f      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f26:	e00a      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f30:	e005      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f3a:	e000      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2204      	movs	r2, #4
 8001f54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f87c 	bl	8002066 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff f926 	bl	80014fc <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d008      	beq.n	80022d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e052      	b.n	8002376 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0216 	bic.w	r2, r2, #22
 80022de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <HAL_DMA_Abort+0x62>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	e013      	b.n	800234a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff f8eb 	bl	80014fc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	d90c      	bls.n	800234a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e015      	b.n	8002376 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e4      	bne.n	8002322 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e00c      	b.n	80023b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2205      	movs	r2, #5
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e165      	b.n	80026c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 8154 	bne.w	80026c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	2b02      	cmp	r3, #2
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b03      	cmp	r3, #3
 800249e:	d017      	beq.n	80024d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d123      	bne.n	8002524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80ae 	beq.w	80026c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <HAL_GPIO_Init+0x300>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_GPIO_Init+0x300>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_GPIO_Init+0x300>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_GPIO_Init+0x304>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <HAL_GPIO_Init+0x308>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d025      	beq.n	80025fa <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_GPIO_Init+0x30c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_GPIO_Init+0x310>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_GPIO_Init+0x314>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_GPIO_Init+0x318>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x20a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <HAL_GPIO_Init+0x31c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x206>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_GPIO_Init+0x320>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x202>
 80025de:	2306      	movs	r3, #6
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x304>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_GPIO_Init+0x324>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_GPIO_Init+0x324>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_GPIO_Init+0x324>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_GPIO_Init+0x324>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae96 	bls.w	80023fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40013c00 	.word	0x40013c00

08002708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
 8002714:	4613      	mov	r3, r2
 8002716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002724:	e003      	b.n	800272e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	041a      	lsls	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12b      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fc9c 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f002 fd2e 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a81      	ldr	r2, [pc, #516]	; (80029b0 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x84>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a80      	ldr	r2, [pc, #512]	; (80029b4 <HAL_I2C_Init+0x278>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x92>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_I2C_Init+0x27c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e7      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <HAL_I2C_Init+0x280>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0xd4>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0xe8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a69      	ldr	r2, [pc, #420]	; (80029c0 <HAL_I2C_Init+0x284>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	495c      	ldr	r1, [pc, #368]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x13c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x138>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e051      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002874:	2304      	movs	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x168>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x18e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x196>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	461a      	mov	r2, r3
 80029d0:	460b      	mov	r3, r1
 80029d2:	817b      	strh	r3, [r7, #10]
 80029d4:	4613      	mov	r3, r2
 80029d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7fe fd90 	bl	80014fc <HAL_GetTick>
 80029dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f040 80e0 	bne.w	8002bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2319      	movs	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	4970      	ldr	r1, [pc, #448]	; (8002bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f002 f8e6 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0d3      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2C_Master_Transmit+0x50>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0cc      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d007      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2210      	movs	r2, #16
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f001 fea8 	bl	80047d8 <I2C_MasterRequestWrite>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08d      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002aa8:	e066      	b.n	8002b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f002 f960 	bl	8004d74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_I2C_Master_Transmit+0x188>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6a39      	ldr	r1, [r7, #32]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f002 f950 	bl	8004df6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01a      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d194      	bne.n	8002aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000

08002bc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7fe fc92 	bl	80014fc <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	f040 820b 	bne.w	8002ffe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2319      	movs	r3, #25
 8002bee:	2201      	movs	r2, #1
 8002bf0:	497c      	ldr	r1, [pc, #496]	; (8002de4 <HAL_I2C_Master_Receive+0x224>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f001 ffe8 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e1fe      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_I2C_Master_Receive+0x50>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e1f7      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d007      	beq.n	8002c36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2222      	movs	r2, #34	; 0x22
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2210      	movs	r2, #16
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	893a      	ldrh	r2, [r7, #8]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_I2C_Master_Receive+0x228>)
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 fe2c 	bl	80048dc <I2C_MasterRequestRead>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1b8      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e18c      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11b      	bne.n	8002cfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e16c      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d11b      	bne.n	8002d3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	e14c      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d64:	e138      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	f200 80f1 	bhi.w	8002f52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d123      	bne.n	8002dc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f002 f8ad 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e139      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dbe:	e10b      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d14e      	bne.n	8002e66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4906      	ldr	r1, [pc, #24]	; (8002dec <HAL_I2C_Master_Receive+0x22c>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f001 fef8 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e10e      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000
 8002dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e64:	e0b8      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4966      	ldr	r1, [pc, #408]	; (8003008 <HAL_I2C_Master_Receive+0x448>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f001 fea9 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0bf      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2200      	movs	r2, #0
 8002eca:	494f      	ldr	r1, [pc, #316]	; (8003008 <HAL_I2C_Master_Receive+0x448>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f001 fe7b 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e091      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f50:	e042      	b.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f001 ffc0 	bl	8004edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04c      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d118      	bne.n	8002fd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f aec2 	bne.w	8002d66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	00010004 	.word	0x00010004

0800300c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800302c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b10      	cmp	r3, #16
 800303a:	d003      	beq.n	8003044 <HAL_I2C_EV_IRQHandler+0x38>
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	f040 80c1 	bne.w	80031c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <HAL_I2C_EV_IRQHandler+0x6e>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003064:	d003      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0x62>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800306c:	d101      	bne.n	8003072 <HAL_I2C_EV_IRQHandler+0x66>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_I2C_EV_IRQHandler+0x68>
 8003072:	2300      	movs	r3, #0
 8003074:	2b01      	cmp	r3, #1
 8003076:	f000 8132 	beq.w	80032de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x92>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	0a5b      	lsrs	r3, r3, #9
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f001 ffa8 	bl	8004fe6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fd83 	bl	8003ba2 <I2C_Master_SB>
 800309c:	e092      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0xb2>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	0a5b      	lsrs	r3, r3, #9
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fdf9 	bl	8003cae <I2C_Master_ADD10>
 80030bc:	e082      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0xd2>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	0a5b      	lsrs	r3, r3, #9
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fe13 	bl	8003d02 <I2C_Master_ADDR>
 80030dc:	e072      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d03b      	beq.n	8003162 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f8:	f000 80f3 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	09db      	lsrs	r3, r3, #7
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00f      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x11c>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x11c>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9f3 	bl	800350c <I2C_MasterTransmit_TXE>
 8003126:	e04d      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80d6 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0a5b      	lsrs	r3, r3, #9
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80cf 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	2b21      	cmp	r3, #33	; 0x21
 8003148:	d103      	bne.n	8003152 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa7a 	bl	8003644 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003150:	e0c7      	b.n	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	f040 80c4 	bne.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fae8 	bl	8003730 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003160:	e0bf      	b.n	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	f000 80b7 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x194>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x194>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb5d 	bl	8003858 <I2C_MasterReceive_RXNE>
 800319e:	e011      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 809a 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8093 	beq.w	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fc06 	bl	80039ce <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c2:	e08e      	b.n	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80031c4:	e08d      	b.n	80032e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e007      	b.n	80031e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x20e>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	0a5b      	lsrs	r3, r3, #9
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 ffc4 	bl	80041a0 <I2C_Slave_ADDR>
 8003218:	e066      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x22e>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	0a5b      	lsrs	r3, r3, #9
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fffe 	bl	8004234 <I2C_Slave_STOPF>
 8003238:	e056      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	2b21      	cmp	r3, #33	; 0x21
 800323e:	d002      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x23a>
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	2b29      	cmp	r3, #41	; 0x29
 8003244:	d125      	bne.n	8003292 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	09db      	lsrs	r3, r3, #7
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00f      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x266>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	0a9b      	lsrs	r3, r3, #10
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x266>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 feda 	bl	8004024 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003270:	e039      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d033      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	0a5b      	lsrs	r3, r3, #9
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d02d      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ff07 	bl	800409e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003290:	e029      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00f      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x2b2>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	0a9b      	lsrs	r3, r3, #10
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x2b2>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 ff12 	bl	80040e0 <I2C_SlaveReceive_RXNE>
 80032bc:	e014      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 ff40 	bl	800415c <I2C_SlaveReceive_BTF>
 80032dc:	e004      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08a      	sub	sp, #40	; 0x28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003310:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <HAL_I2C_ER_IRQHandler+0x4e>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x78>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003364:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	0a9b      	lsrs	r3, r3, #10
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d03f      	beq.n	80033f2 <HAL_I2C_ER_IRQHandler+0x104>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d039      	beq.n	80033f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800337e:	7efb      	ldrb	r3, [r7, #27]
 8003380:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003398:	7ebb      	ldrb	r3, [r7, #26]
 800339a:	2b20      	cmp	r3, #32
 800339c:	d112      	bne.n	80033c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10f      	bne.n	80033c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b21      	cmp	r3, #33	; 0x21
 80033a8:	d008      	beq.n	80033bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b29      	cmp	r3, #41	; 0x29
 80033ae:	d005      	beq.n	80033bc <HAL_I2C_ER_IRQHandler+0xce>
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b28      	cmp	r3, #40	; 0x28
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b21      	cmp	r3, #33	; 0x21
 80033ba:	d103      	bne.n	80033c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 f869 	bl	8004494 <I2C_Slave_AF>
 80033c2:	e016      	b.n	80033f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033d6:	7efb      	ldrb	r3, [r7, #27]
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d002      	beq.n	80033e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80033dc:	7efb      	ldrb	r3, [r7, #27]
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d107      	bne.n	80033f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	0adb      	lsrs	r3, r3, #11
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x12e>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800341a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f001 f8a0 	bl	8004574 <I2C_ITError>
  }
}
 8003434:	bf00      	nop
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
 8003498:	4613      	mov	r3, r2
 800349a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d150      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0xc8>
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b21      	cmp	r3, #33	; 0x21
 8003536:	d14d      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d01d      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d01a      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800354a:	d016      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800355a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2211      	movs	r2, #17
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff62 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003578:	e060      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003588:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d107      	bne.n	80035c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff7d 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035c2:	e03b      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff35 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035d2:	e033      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b21      	cmp	r3, #33	; 0x21
 80035d8:	d005      	beq.n	80035e6 <I2C_MasterTransmit_TXE+0xda>
 80035da:	7bbb      	ldrb	r3, [r7, #14]
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d12d      	bne.n	800363c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b22      	cmp	r3, #34	; 0x22
 80035e4:	d12a      	bne.n	800363c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003600:	e01c      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d103      	bne.n	8003616 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f88e 	bl	8003730 <I2C_MemoryTransmit_TXE_BTF>
}
 8003614:	e012      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800363a:	e7ff      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b21      	cmp	r3, #33	; 0x21
 800365c:	d164      	bne.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800368c:	e04c      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d01d      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b20      	cmp	r3, #32
 8003698:	d01a      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036a0:	d016      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2211      	movs	r2, #17
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff feb7 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
}
 80036ce:	e02b      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d107      	bne.n	800371a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fed2 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
}
 8003718:	e006      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fe8a 	bl	800343c <HAL_I2C_MasterTxCpltCallback>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11d      	bne.n	8003784 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10b      	bne.n	8003768 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	b2da      	uxtb	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003766:	e073      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376c:	b29b      	uxth	r3, r3
 800376e:	121b      	asrs	r3, r3, #8
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003782:	e065      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10b      	bne.n	80037a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	b2da      	uxtb	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037a2:	e055      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d151      	bne.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	d10d      	bne.n	80037ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037cc:	e040      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d015      	beq.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b21      	cmp	r3, #33	; 0x21
 80037dc:	d112      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003802:	e025      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d120      	bne.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b21      	cmp	r3, #33	; 0x21
 8003812:	d11d      	bne.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003822:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe36 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b22      	cmp	r3, #34	; 0x22
 800386a:	f040 80ac 	bne.w	80039c6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d921      	bls.n	80038c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	f040 808c 	bne.w	80039c6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038be:	e082      	b.n	80039c6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d075      	beq.n	80039b4 <I2C_MasterReceive_RXNE+0x15c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d002      	beq.n	80038d4 <I2C_MasterReceive_RXNE+0x7c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d16f      	bne.n	80039b4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f001 facf 	bl	8004e78 <I2C_WaitOnSTOPRequestThroughIT>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d142      	bne.n	8003966 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d10a      	bne.n	8003950 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fdc1 	bl	80034d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800394e:	e03a      	b.n	80039c6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2212      	movs	r2, #18
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fd76 	bl	8003450 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003964:	e02f      	b.n	80039c6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003974:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fd99 	bl	80034e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039b2:	e008      	b.n	80039c6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	605a      	str	r2, [r3, #4]
}
 80039c4:	e7ff      	b.n	80039c6 <I2C_MasterReceive_RXNE+0x16e>
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d11b      	bne.n	8003a1e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a1c:	e0bd      	b.n	8003b9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d129      	bne.n	8003a7c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a36:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d00a      	beq.n	8003a54 <I2C_MasterReceive_BTF+0x86>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d007      	beq.n	8003a54 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a7a:	e08e      	b.n	8003b9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d176      	bne.n	8003b74 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d002      	beq.n	8003a92 <I2C_MasterReceive_BTF+0xc4>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d108      	bne.n	8003aa4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e019      	b.n	8003ad8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <I2C_MasterReceive_BTF+0xe2>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d108      	bne.n	8003ac2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e00a      	b.n	8003ad8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d007      	beq.n	8003ad8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d10a      	bne.n	8003b5e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fcba 	bl	80034d0 <HAL_I2C_MemRxCpltCallback>
}
 8003b5c:	e01d      	b.n	8003b9a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2212      	movs	r2, #18
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fc6f 	bl	8003450 <HAL_I2C_MasterRxCpltCallback>
}
 8003b72:	e012      	b.n	8003b9a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d117      	bne.n	8003be6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bd0:	e067      	b.n	8003ca2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]
}
 8003be4:	e05d      	b.n	8003ca2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bee:	d133      	bne.n	8003c58 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d109      	bne.n	8003c10 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e008      	b.n	8003c22 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <I2C_Master_SB+0x92>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d032      	beq.n	8003ca2 <I2C_Master_SB+0x100>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02d      	beq.n	8003ca2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c54:	605a      	str	r2, [r3, #4]
}
 8003c56:	e024      	b.n	8003ca2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	11db      	asrs	r3, r3, #7
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f063 030f 	orn	r3, r3, #15
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
}
 8003c7c:	e011      	b.n	8003ca2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	11db      	asrs	r3, r3, #7
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 0306 	and.w	r3, r3, #6
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f063 030e 	orn	r3, r3, #14
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <I2C_Master_ADD10+0x26>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <I2C_Master_ADD10+0x48>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf4:	605a      	str	r2, [r3, #4]
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b091      	sub	sp, #68	; 0x44
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b22      	cmp	r3, #34	; 0x22
 8003d2a:	f040 8169 	bne.w	8004000 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <I2C_Master_ADDR+0x54>
 8003d36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d10b      	bne.n	8003d56 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	e160      	b.n	8004018 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11d      	bne.n	8003d9a <I2C_Master_ADDR+0x98>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d66:	d118      	bne.n	8003d9a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	651a      	str	r2, [r3, #80]	; 0x50
 8003d98:	e13e      	b.n	8004018 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da4:	2300      	movs	r3, #0
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e115      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 808a 	bne.w	8003eec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dde:	d137      	bne.n	8003e50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d113      	bne.n	8003e28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	e0e7      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e0d3      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d02e      	beq.n	8003eb4 <I2C_Master_ADDR+0x1b2>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d02b      	beq.n	8003eb4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	2b12      	cmp	r3, #18
 8003e60:	d102      	bne.n	8003e68 <I2C_Master_ADDR+0x166>
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d125      	bne.n	8003eb4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d00e      	beq.n	8003e8c <I2C_Master_ADDR+0x18a>
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d00b      	beq.n	8003e8c <I2C_Master_ADDR+0x18a>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d008      	beq.n	8003e8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e007      	b.n	8003e9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	e0a1      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e085      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d14d      	bne.n	8003f92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d016      	beq.n	8003f2a <I2C_Master_ADDR+0x228>
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d013      	beq.n	8003f2a <I2C_Master_ADDR+0x228>
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d010      	beq.n	8003f2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e007      	b.n	8003f3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d117      	bne.n	8003f7a <I2C_Master_ADDR+0x278>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f50:	d00b      	beq.n	8003f6a <I2C_Master_ADDR+0x268>
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d008      	beq.n	8003f6a <I2C_Master_ADDR+0x268>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d005      	beq.n	8003f6a <I2C_Master_ADDR+0x268>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d002      	beq.n	8003f6a <I2C_Master_ADDR+0x268>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	e032      	b.n	8003ff8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d117      	bne.n	8003fe2 <I2C_Master_ADDR+0x2e0>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb8:	d00b      	beq.n	8003fd2 <I2C_Master_ADDR+0x2d0>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d008      	beq.n	8003fd2 <I2C_Master_ADDR+0x2d0>
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d005      	beq.n	8003fd2 <I2C_Master_ADDR+0x2d0>
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d002      	beq.n	8003fd2 <I2C_Master_ADDR+0x2d0>
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d107      	bne.n	8003fe2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fe0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ffe:	e00b      	b.n	8004018 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	e7ff      	b.n	8004018 <I2C_Master_ADDR+0x316>
 8004018:	bf00      	nop
 800401a:	3744      	adds	r7, #68	; 0x44
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02b      	beq.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b29      	cmp	r3, #41	; 0x29
 8004070:	d111      	bne.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004080:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2221      	movs	r2, #33	; 0x21
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2228      	movs	r2, #40	; 0x28
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff f9e7 	bl	8003464 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d011      	beq.n	80040d4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02c      	beq.n	8004154 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d114      	bne.n	8004154 <I2C_SlaveReceive_RXNE+0x74>
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b2a      	cmp	r3, #42	; 0x2a
 800412e:	d111      	bne.n	8004154 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2222      	movs	r2, #34	; 0x22
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2228      	movs	r2, #40	; 0x28
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff f992 	bl	8003478 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d012      	beq.n	8004194 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041ba:	2b28      	cmp	r3, #40	; 0x28
 80041bc:	d127      	bne.n	800420e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	81bb      	strh	r3, [r7, #12]
 80041f0:	e002      	b.n	80041f8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004200:	89ba      	ldrh	r2, [r7, #12]
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff f940 	bl	800348c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800420c:	e00e      	b.n	800422c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004252:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004290:	d172      	bne.n	8004378 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b22      	cmp	r3, #34	; 0x22
 8004296:	d002      	beq.n	800429e <I2C_Slave_STOPF+0x6a>
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d135      	bne.n	800430a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f873 	bl	80023c2 <HAL_DMA_GetState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d049      	beq.n	8004376 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	4a69      	ldr	r2, [pc, #420]	; (800448c <I2C_Slave_STOPF+0x258>)
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe f845 	bl	800237e <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03d      	beq.n	8004376 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004304:	4610      	mov	r0, r2
 8004306:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004308:	e035      	b.n	8004376 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe f83d 	bl	80023c2 <HAL_DMA_GetState>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d014      	beq.n	8004378 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	4a4e      	ldr	r2, [pc, #312]	; (800448c <I2C_Slave_STOPF+0x258>)
 8004354:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe f80f 	bl	800237e <HAL_DMA_Abort_IT>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004370:	4610      	mov	r0, r2
 8004372:	4798      	blx	r3
 8004374:	e000      	b.n	8004378 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004376:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d03e      	beq.n	8004400 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d112      	bne.n	80043b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d112      	bne.n	80043ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0204 	orr.w	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8b3 	bl	8004574 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800440e:	e039      	b.n	8004484 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b2a      	cmp	r3, #42	; 0x2a
 8004414:	d109      	bne.n	800442a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2228      	movs	r2, #40	; 0x28
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff f827 	bl	8003478 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d111      	bne.n	800445a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <I2C_Slave_STOPF+0x25c>)
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff f828 	bl	80034a8 <HAL_I2C_ListenCpltCallback>
}
 8004458:	e014      	b.n	8004484 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	2b22      	cmp	r3, #34	; 0x22
 8004460:	d002      	beq.n	8004468 <I2C_Slave_STOPF+0x234>
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b22      	cmp	r3, #34	; 0x22
 8004466:	d10d      	bne.n	8004484 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fe fffa 	bl	8003478 <HAL_I2C_SlaveRxCpltCallback>
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	08004a79 	.word	0x08004a79
 8004490:	ffff0000 	.word	0xffff0000

08004494 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d002      	beq.n	80044b6 <I2C_Slave_AF+0x22>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d129      	bne.n	800450a <I2C_Slave_AF+0x76>
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b28      	cmp	r3, #40	; 0x28
 80044ba:	d126      	bne.n	800450a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <I2C_Slave_AF+0xdc>)
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe ffd0 	bl	80034a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004508:	e02e      	b.n	8004568 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b21      	cmp	r3, #33	; 0x21
 800450e:	d126      	bne.n	800455e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <I2C_Slave_AF+0xdc>)
 8004514:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2221      	movs	r2, #33	; 0x21
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004544:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe ff84 	bl	8003464 <HAL_I2C_SlaveTxCpltCallback>
}
 800455c:	e004      	b.n	8004568 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004566:	615a      	str	r2, [r3, #20]
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	ffff0000 	.word	0xffff0000

08004574 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800458c:	7bbb      	ldrb	r3, [r7, #14]
 800458e:	2b10      	cmp	r3, #16
 8004590:	d002      	beq.n	8004598 <I2C_ITError+0x24>
 8004592:	7bbb      	ldrb	r3, [r7, #14]
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10a      	bne.n	80045ae <I2C_ITError+0x3a>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b22      	cmp	r3, #34	; 0x22
 800459c:	d107      	bne.n	80045ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045b4:	2b28      	cmp	r3, #40	; 0x28
 80045b6:	d107      	bne.n	80045c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2228      	movs	r2, #40	; 0x28
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045c6:	e015      	b.n	80045f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d00a      	beq.n	80045ee <I2C_ITError+0x7a>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b60      	cmp	r3, #96	; 0x60
 80045dc:	d007      	beq.n	80045ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004602:	d162      	bne.n	80046ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004612:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d020      	beq.n	8004664 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	4a6a      	ldr	r2, [pc, #424]	; (80047d0 <I2C_ITError+0x25c>)
 8004628:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd fea5 	bl	800237e <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8089 	beq.w	800474e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800465e:	4610      	mov	r0, r2
 8004660:	4798      	blx	r3
 8004662:	e074      	b.n	800474e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	4a59      	ldr	r2, [pc, #356]	; (80047d0 <I2C_ITError+0x25c>)
 800466a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd fe84 	bl	800237e <HAL_DMA_Abort_IT>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d068      	beq.n	800474e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10b      	bne.n	80046a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c4:	4610      	mov	r0, r2
 80046c6:	4798      	blx	r3
 80046c8:	e041      	b.n	800474e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b60      	cmp	r3, #96	; 0x60
 80046d4:	d125      	bne.n	8004722 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10b      	bne.n	800470a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe feec 	bl	80034f8 <HAL_I2C_AbortCpltCallback>
 8004720:	e015      	b.n	800474e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d10b      	bne.n	8004748 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fe fecb 	bl	80034e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d113      	bne.n	80047c8 <I2C_ITError+0x254>
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b28      	cmp	r3, #40	; 0x28
 80047a4:	d110      	bne.n	80047c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <I2C_ITError+0x260>)
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fe fe70 	bl	80034a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	08004a79 	.word	0x08004a79
 80047d4:	ffff0000 	.word	0xffff0000

080047d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	460b      	mov	r3, r1
 80047e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d006      	beq.n	8004802 <I2C_MasterRequestWrite+0x2a>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d003      	beq.n	8004802 <I2C_MasterRequestWrite+0x2a>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004800:	d108      	bne.n	8004814 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e00b      	b.n	800482c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2b12      	cmp	r3, #18
 800481a:	d107      	bne.n	800482c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f9c5 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	d103      	bne.n	800485c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e035      	b.n	80048cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004868:	d108      	bne.n	800487c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	e01b      	b.n	80048b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	11db      	asrs	r3, r3, #7
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0306 	and.w	r3, r3, #6
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f063 030f 	orn	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	490e      	ldr	r1, [pc, #56]	; (80048d4 <I2C_MasterRequestWrite+0xfc>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f9eb 	bl	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e010      	b.n	80048cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4907      	ldr	r1, [pc, #28]	; (80048d8 <I2C_MasterRequestWrite+0x100>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f9db 	bl	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00010008 	.word	0x00010008
 80048d8:	00010002 	.word	0x00010002

080048dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	460b      	mov	r3, r1
 80048ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d006      	beq.n	8004916 <I2C_MasterRequestRead+0x3a>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d003      	beq.n	8004916 <I2C_MasterRequestRead+0x3a>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004914:	d108      	bne.n	8004928 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e00b      	b.n	8004940 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	2b11      	cmp	r3, #17
 800492e:	d107      	bne.n	8004940 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f93b 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d103      	bne.n	8004970 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e079      	b.n	8004a68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497c:	d108      	bne.n	8004990 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]
 800498e:	e05f      	b.n	8004a50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	11db      	asrs	r3, r3, #7
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0306 	and.w	r3, r3, #6
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f063 030f 	orn	r3, r3, #15
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4930      	ldr	r1, [pc, #192]	; (8004a70 <I2C_MasterRequestRead+0x194>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f961 	bl	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e054      	b.n	8004a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4929      	ldr	r1, [pc, #164]	; (8004a74 <I2C_MasterRequestRead+0x198>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f951 	bl	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e044      	b.n	8004a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8d9 	bl	8004bc8 <I2C_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	d103      	bne.n	8004a34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e017      	b.n	8004a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a38:	897b      	ldrh	r3, [r7, #10]
 8004a3a:	11db      	asrs	r3, r3, #7
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f063 030e 	orn	r3, r3, #14
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <I2C_MasterRequestRead+0x198>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f90d 	bl	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00010008 	.word	0x00010008
 8004a74:	00010002 	.word	0x00010002

08004a78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a92:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <I2C_DMAAbort+0x148>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	4a4a      	ldr	r2, [pc, #296]	; (8004bc4 <I2C_DMAAbort+0x14c>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0a1a      	lsrs	r2, r3, #8
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00da      	lsls	r2, r3, #3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004abe:	e00a      	b.n	8004ad6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d0ea      	beq.n	8004aac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	2200      	movs	r2, #0
 8004af4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	2200      	movs	r2, #0
 8004b1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	2200      	movs	r2, #0
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d10e      	bne.n	8004b66 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7fe fcca 	bl	80034f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b64:	e027      	b.n	8004bb6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	d117      	bne.n	8004ba0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2228      	movs	r2, #40	; 0x28
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b9e:	e007      	b.n	8004bb0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f7fe fc97 	bl	80034e4 <HAL_I2C_ErrorCallback>
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000010 	.word	0x20000010
 8004bc4:	14f8b589 	.word	0x14f8b589

08004bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd8:	e025      	b.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d021      	beq.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fc fc8b 	bl	80014fc <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d116      	bne.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e023      	b.n	8004c6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10d      	bne.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	e00c      	b.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d0b6      	beq.n	8004bda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c84:	e051      	b.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c94:	d123      	bne.n	8004cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e046      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d021      	beq.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc fc09 	bl	80014fc <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e020      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10c      	bne.n	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e00b      	b.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	43da      	mvns	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d18d      	bne.n	8004c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d80:	e02d      	b.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f900 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e02d      	b.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d021      	beq.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fc fbaf 	bl	80014fc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d116      	bne.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e007      	b.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d1ca      	bne.n	8004d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e02:	e02d      	b.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8bf 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e02d      	b.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d021      	beq.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	f7fc fb6e 	bl	80014fc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d302      	bcc.n	8004e32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d116      	bne.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e007      	b.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d1ca      	bne.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	0a1a      	lsrs	r2, r3, #8
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e008      	b.n	8004ec8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec4:	d0e9      	beq.n	8004e9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20000010 	.word	0x20000010
 8004ed8:	14f8b589 	.word	0x14f8b589

08004edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee8:	e042      	b.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d119      	bne.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0210 	mvn.w	r2, #16
 8004f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e029      	b.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fc fae6 	bl	80014fc <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d1b5      	bne.n	8004eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d11b      	bne.n	8004fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ff6:	d103      	bne.n	8005000 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ffe:	e007      	b.n	8005010 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005008:	d102      	bne.n	8005010 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2208      	movs	r2, #8
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0cc      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d90c      	bls.n	8005058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b63      	ldr	r3, [pc, #396]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0b8      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a58      	ldr	r2, [pc, #352]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800507a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005088:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	494d      	ldr	r1, [pc, #308]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d044      	beq.n	800513c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d119      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d003      	beq.n	80050da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	4b3f      	ldr	r3, [pc, #252]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e06f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e067      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f023 0203 	bic.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4934      	ldr	r1, [pc, #208]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800510c:	f7fc f9f6 	bl	80014fc <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	e00a      	b.n	800512a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005114:	f7fc f9f2 	bl	80014fc <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e04f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 020c 	and.w	r2, r3, #12
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	429a      	cmp	r2, r3
 800513a:	d1eb      	bne.n	8005114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d20c      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4916      	ldr	r1, [pc, #88]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051a2:	f000 f855 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490a      	ldr	r1, [pc, #40]	; (80051dc <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fc f956 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023c00 	.word	0x40023c00
 80051d8:	40023800 	.word	0x40023800
 80051dc:	08008064 	.word	0x08008064
 80051e0:	20000010 	.word	0x20000010
 80051e4:	20000014 	.word	0x20000014

080051e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000010 	.word	0x20000010

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a9b      	lsrs	r3, r3, #10
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	08008074 	.word	0x08008074

08005228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800522c:	f7ff ffdc 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0b5b      	lsrs	r3, r3, #13
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4903      	ldr	r1, [pc, #12]	; (800524c <HAL_RCC_GetPCLK2Freq+0x24>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	08008074 	.word	0x08008074

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b0ae      	sub	sp, #184	; 0xb8
 8005256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005276:	4bcb      	ldr	r3, [pc, #812]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b0c      	cmp	r3, #12
 8005280:	f200 8206 	bhi.w	8005690 <HAL_RCC_GetSysClockFreq+0x440>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052c1 	.word	0x080052c1
 8005290:	08005691 	.word	0x08005691
 8005294:	08005691 	.word	0x08005691
 8005298:	08005691 	.word	0x08005691
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	08005691 	.word	0x08005691
 80052a4:	08005691 	.word	0x08005691
 80052a8:	08005691 	.word	0x08005691
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	08005691 	.word	0x08005691
 80052b4:	08005691 	.word	0x08005691
 80052b8:	08005691 	.word	0x08005691
 80052bc:	080054c1 	.word	0x080054c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4bb9      	ldr	r3, [pc, #740]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80052c6:	e1e7      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c8:	4bb8      	ldr	r3, [pc, #736]	; (80055ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80052ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052ce:	e1e3      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d0:	4bb4      	ldr	r3, [pc, #720]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052dc:	4bb1      	ldr	r3, [pc, #708]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d071      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e8:	4bae      	ldr	r3, [pc, #696]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80052f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005300:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800530a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	0159      	lsls	r1, r3, #5
 800531c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005320:	0150      	lsls	r0, r2, #5
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4621      	mov	r1, r4
 8005328:	1a51      	subs	r1, r2, r1
 800532a:	6439      	str	r1, [r7, #64]	; 0x40
 800532c:	4629      	mov	r1, r5
 800532e:	eb63 0301 	sbc.w	r3, r3, r1
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005340:	4649      	mov	r1, r9
 8005342:	018b      	lsls	r3, r1, #6
 8005344:	4641      	mov	r1, r8
 8005346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800534a:	4641      	mov	r1, r8
 800534c:	018a      	lsls	r2, r1, #6
 800534e:	4641      	mov	r1, r8
 8005350:	1a51      	subs	r1, r2, r1
 8005352:	63b9      	str	r1, [r7, #56]	; 0x38
 8005354:	4649      	mov	r1, r9
 8005356:	eb63 0301 	sbc.w	r3, r3, r1
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005368:	4649      	mov	r1, r9
 800536a:	00cb      	lsls	r3, r1, #3
 800536c:	4641      	mov	r1, r8
 800536e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005372:	4641      	mov	r1, r8
 8005374:	00ca      	lsls	r2, r1, #3
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	4603      	mov	r3, r0
 800537c:	4622      	mov	r2, r4
 800537e:	189b      	adds	r3, r3, r2
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	462b      	mov	r3, r5
 8005384:	460a      	mov	r2, r1
 8005386:	eb42 0303 	adc.w	r3, r2, r3
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005398:	4629      	mov	r1, r5
 800539a:	024b      	lsls	r3, r1, #9
 800539c:	4621      	mov	r1, r4
 800539e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053a2:	4621      	mov	r1, r4
 80053a4:	024a      	lsls	r2, r1, #9
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80053bc:	f7fa ff78 	bl	80002b0 <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4613      	mov	r3, r2
 80053c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ca:	e067      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053cc:	4b75      	ldr	r3, [pc, #468]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	099b      	lsrs	r3, r3, #6
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053e6:	2300      	movs	r3, #0
 80053e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	0159      	lsls	r1, r3, #5
 80053fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005400:	0150      	lsls	r0, r2, #5
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4621      	mov	r1, r4
 8005408:	1a51      	subs	r1, r2, r1
 800540a:	62b9      	str	r1, [r7, #40]	; 0x28
 800540c:	4629      	mov	r1, r5
 800540e:	eb63 0301 	sbc.w	r3, r3, r1
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005420:	4649      	mov	r1, r9
 8005422:	018b      	lsls	r3, r1, #6
 8005424:	4641      	mov	r1, r8
 8005426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800542a:	4641      	mov	r1, r8
 800542c:	018a      	lsls	r2, r1, #6
 800542e:	4641      	mov	r1, r8
 8005430:	ebb2 0a01 	subs.w	sl, r2, r1
 8005434:	4649      	mov	r1, r9
 8005436:	eb63 0b01 	sbc.w	fp, r3, r1
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005446:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800544a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800544e:	4692      	mov	sl, r2
 8005450:	469b      	mov	fp, r3
 8005452:	4623      	mov	r3, r4
 8005454:	eb1a 0303 	adds.w	r3, sl, r3
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	462b      	mov	r3, r5
 800545c:	eb4b 0303 	adc.w	r3, fp, r3
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005484:	2200      	movs	r2, #0
 8005486:	673b      	str	r3, [r7, #112]	; 0x70
 8005488:	677a      	str	r2, [r7, #116]	; 0x74
 800548a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800548e:	f7fa ff0f 	bl	80002b0 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4613      	mov	r3, r2
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800549c:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	3301      	adds	r3, #1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80054ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054be:	e0eb      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c0:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054cc:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d06b      	beq.n	80055b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	2200      	movs	r2, #0
 80054e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	663b      	str	r3, [r7, #96]	; 0x60
 80054ec:	2300      	movs	r3, #0
 80054ee:	667b      	str	r3, [r7, #100]	; 0x64
 80054f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005506:	0150      	lsls	r0, r2, #5
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4621      	mov	r1, r4
 800550e:	1a51      	subs	r1, r2, r1
 8005510:	61b9      	str	r1, [r7, #24]
 8005512:	4629      	mov	r1, r5
 8005514:	eb63 0301 	sbc.w	r3, r3, r1
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005526:	4659      	mov	r1, fp
 8005528:	018b      	lsls	r3, r1, #6
 800552a:	4651      	mov	r1, sl
 800552c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005530:	4651      	mov	r1, sl
 8005532:	018a      	lsls	r2, r1, #6
 8005534:	4651      	mov	r1, sl
 8005536:	ebb2 0801 	subs.w	r8, r2, r1
 800553a:	4659      	mov	r1, fp
 800553c:	eb63 0901 	sbc.w	r9, r3, r1
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005550:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005554:	4690      	mov	r8, r2
 8005556:	4699      	mov	r9, r3
 8005558:	4623      	mov	r3, r4
 800555a:	eb18 0303 	adds.w	r3, r8, r3
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	462b      	mov	r3, r5
 8005562:	eb49 0303 	adc.w	r3, r9, r3
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005574:	4629      	mov	r1, r5
 8005576:	024b      	lsls	r3, r1, #9
 8005578:	4621      	mov	r1, r4
 800557a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800557e:	4621      	mov	r1, r4
 8005580:	024a      	lsls	r2, r1, #9
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800558a:	2200      	movs	r2, #0
 800558c:	65bb      	str	r3, [r7, #88]	; 0x58
 800558e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005590:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005594:	f7fa fe8c 	bl	80002b0 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a2:	e065      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x420>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	00f42400 	.word	0x00f42400
 80055ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	2200      	movs	r2, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	4611      	mov	r1, r2
 80055bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055c0:	653b      	str	r3, [r7, #80]	; 0x50
 80055c2:	2300      	movs	r3, #0
 80055c4:	657b      	str	r3, [r7, #84]	; 0x54
 80055c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80055ca:	4642      	mov	r2, r8
 80055cc:	464b      	mov	r3, r9
 80055ce:	f04f 0000 	mov.w	r0, #0
 80055d2:	f04f 0100 	mov.w	r1, #0
 80055d6:	0159      	lsls	r1, r3, #5
 80055d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055dc:	0150      	lsls	r0, r2, #5
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4641      	mov	r1, r8
 80055e4:	1a51      	subs	r1, r2, r1
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	4649      	mov	r1, r9
 80055ea:	eb63 0301 	sbc.w	r3, r3, r1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80055fc:	4659      	mov	r1, fp
 80055fe:	018b      	lsls	r3, r1, #6
 8005600:	4651      	mov	r1, sl
 8005602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005606:	4651      	mov	r1, sl
 8005608:	018a      	lsls	r2, r1, #6
 800560a:	4651      	mov	r1, sl
 800560c:	1a54      	subs	r4, r2, r1
 800560e:	4659      	mov	r1, fp
 8005610:	eb63 0501 	sbc.w	r5, r3, r1
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	00eb      	lsls	r3, r5, #3
 800561e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005622:	00e2      	lsls	r2, r4, #3
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	4643      	mov	r3, r8
 800562a:	18e3      	adds	r3, r4, r3
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	464b      	mov	r3, r9
 8005630:	eb45 0303 	adc.w	r3, r5, r3
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005642:	4629      	mov	r1, r5
 8005644:	028b      	lsls	r3, r1, #10
 8005646:	4621      	mov	r1, r4
 8005648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800564c:	4621      	mov	r1, r4
 800564e:	028a      	lsls	r2, r1, #10
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005658:	2200      	movs	r2, #0
 800565a:	64bb      	str	r3, [r7, #72]	; 0x48
 800565c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800565e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005662:	f7fa fe25 	bl	80002b0 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4613      	mov	r3, r2
 800566c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	0f1b      	lsrs	r3, r3, #28
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800567e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800568e:	e003      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8005692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800569c:	4618      	mov	r0, r3
 800569e:	37b8      	adds	r7, #184	; 0xb8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	00f42400 	.word	0x00f42400

080056b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e28d      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8083 	beq.w	80057d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056d0:	4b94      	ldr	r3, [pc, #592]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d019      	beq.n	8005710 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056dc:	4b91      	ldr	r3, [pc, #580]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d106      	bne.n	80056f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056e8:	4b8e      	ldr	r3, [pc, #568]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f4:	d00c      	beq.n	8005710 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056f6:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d112      	bne.n	8005728 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005702:	4b88      	ldr	r3, [pc, #544]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800570e:	d10b      	bne.n	8005728 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d05b      	beq.n	80057d4 <HAL_RCC_OscConfig+0x124>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d157      	bne.n	80057d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e25a      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d106      	bne.n	8005740 <HAL_RCC_OscConfig+0x90>
 8005732:	4b7c      	ldr	r3, [pc, #496]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a7b      	ldr	r2, [pc, #492]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e01d      	b.n	800577c <HAL_RCC_OscConfig+0xcc>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005748:	d10c      	bne.n	8005764 <HAL_RCC_OscConfig+0xb4>
 800574a:	4b76      	ldr	r3, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a75      	ldr	r2, [pc, #468]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	4b73      	ldr	r3, [pc, #460]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a72      	ldr	r2, [pc, #456]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0xcc>
 8005764:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 800576a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4b6c      	ldr	r3, [pc, #432]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a6b      	ldr	r2, [pc, #428]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fb feba 	bl	80014fc <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800578c:	f7fb feb6 	bl	80014fc <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	; 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e21f      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	4b61      	ldr	r3, [pc, #388]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0xdc>
 80057aa:	e014      	b.n	80057d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fb fea6 	bl	80014fc <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fb fea2 	bl	80014fc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e20b      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c6:	4b57      	ldr	r3, [pc, #348]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x104>
 80057d2:	e000      	b.n	80057d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d06f      	beq.n	80058c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057e2:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ee:	4b4d      	ldr	r3, [pc, #308]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d105      	bne.n	8005806 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057fa:	4b4a      	ldr	r3, [pc, #296]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d11c      	bne.n	800584c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005812:	4b44      	ldr	r3, [pc, #272]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d116      	bne.n	800584c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	4b41      	ldr	r3, [pc, #260]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_RCC_OscConfig+0x186>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e1d3      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4937      	ldr	r1, [pc, #220]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005846:	4313      	orrs	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584a:	e03a      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005854:	4b34      	ldr	r3, [pc, #208]	; (8005928 <HAL_RCC_OscConfig+0x278>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fb fe4f 	bl	80014fc <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005862:	f7fb fe4b 	bl	80014fc <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e1b4      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005874:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005880:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4925      	ldr	r1, [pc, #148]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]
 8005894:	e015      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005896:	4b24      	ldr	r3, [pc, #144]	; (8005928 <HAL_RCC_OscConfig+0x278>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fb fe2e 	bl	80014fc <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a4:	f7fb fe2a 	bl	80014fc <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e193      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b6:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d036      	beq.n	800593c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <HAL_RCC_OscConfig+0x27c>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fb fe0e 	bl	80014fc <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fb fe0a 	bl	80014fc <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e173      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_OscConfig+0x274>)
 80058f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x234>
 8005902:	e01b      	b.n	800593c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_RCC_OscConfig+0x27c>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fb fdf7 	bl	80014fc <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005910:	e00e      	b.n	8005930 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005912:	f7fb fdf3 	bl	80014fc <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d907      	bls.n	8005930 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e15c      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
 8005924:	40023800 	.word	0x40023800
 8005928:	42470000 	.word	0x42470000
 800592c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005930:	4b8a      	ldr	r3, [pc, #552]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ea      	bne.n	8005912 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8097 	beq.w	8005a78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594e:	4b83      	ldr	r3, [pc, #524]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	4b7f      	ldr	r3, [pc, #508]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	4a7e      	ldr	r2, [pc, #504]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6413      	str	r3, [r2, #64]	; 0x40
 800596a:	4b7c      	ldr	r3, [pc, #496]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597a:	4b79      	ldr	r3, [pc, #484]	; (8005b60 <HAL_RCC_OscConfig+0x4b0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d118      	bne.n	80059b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005986:	4b76      	ldr	r3, [pc, #472]	; (8005b60 <HAL_RCC_OscConfig+0x4b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a75      	ldr	r2, [pc, #468]	; (8005b60 <HAL_RCC_OscConfig+0x4b0>)
 800598c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005992:	f7fb fdb3 	bl	80014fc <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599a:	f7fb fdaf 	bl	80014fc <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e118      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ac:	4b6c      	ldr	r3, [pc, #432]	; (8005b60 <HAL_RCC_OscConfig+0x4b0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d106      	bne.n	80059ce <HAL_RCC_OscConfig+0x31e>
 80059c0:	4b66      	ldr	r3, [pc, #408]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	4a65      	ldr	r2, [pc, #404]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
 80059cc:	e01c      	b.n	8005a08 <HAL_RCC_OscConfig+0x358>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x340>
 80059d6:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a60      	ldr	r2, [pc, #384]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059dc:	f043 0304 	orr.w	r3, r3, #4
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
 80059e2:	4b5e      	ldr	r3, [pc, #376]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	4a5d      	ldr	r2, [pc, #372]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	6713      	str	r3, [r2, #112]	; 0x70
 80059ee:	e00b      	b.n	8005a08 <HAL_RCC_OscConfig+0x358>
 80059f0:	4b5a      	ldr	r3, [pc, #360]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a59      	ldr	r2, [pc, #356]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
 80059fc:	4b57      	ldr	r3, [pc, #348]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a00:	4a56      	ldr	r2, [pc, #344]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a02:	f023 0304 	bic.w	r3, r3, #4
 8005a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fb fd74 	bl	80014fc <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fb fd70 	bl	80014fc <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0d7      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2e:	4b4b      	ldr	r3, [pc, #300]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0ee      	beq.n	8005a18 <HAL_RCC_OscConfig+0x368>
 8005a3a:	e014      	b.n	8005a66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fb fd5e 	bl	80014fc <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fb fd5a 	bl	80014fc <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0c1      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5a:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ee      	bne.n	8005a44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6c:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	4a3a      	ldr	r2, [pc, #232]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80ad 	beq.w	8005bdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d060      	beq.n	8005b50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d145      	bne.n	8005b22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a96:	4b33      	ldr	r3, [pc, #204]	; (8005b64 <HAL_RCC_OscConfig+0x4b4>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fb fd2e 	bl	80014fc <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa4:	f7fb fd2a 	bl	80014fc <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e093      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab6:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	3b01      	subs	r3, #1
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	071b      	lsls	r3, r3, #28
 8005aee:	491b      	ldr	r1, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005af4:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <HAL_RCC_OscConfig+0x4b4>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fb fcff 	bl	80014fc <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b02:	f7fb fcfb 	bl	80014fc <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e064      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x452>
 8005b20:	e05c      	b.n	8005bdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_RCC_OscConfig+0x4b4>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fb fce8 	bl	80014fc <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fb fce4 	bl	80014fc <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04d      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_RCC_OscConfig+0x4ac>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x480>
 8005b4e:	e045      	b.n	8005bdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e040      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40007000 	.word	0x40007000
 8005b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <HAL_RCC_OscConfig+0x538>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d030      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d129      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d122      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b98:	4013      	ands	r3, r2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d119      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800

08005bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e03f      	b.n	8005c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fa9c 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fd7b 	bl	800672c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08a      	sub	sp, #40	; 0x28
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d17c      	bne.n	8005da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_Transmit+0x2c>
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e075      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Transmit+0x3e>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e06e      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2221      	movs	r2, #33	; 0x21
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cda:	f7fb fc0f 	bl	80014fc <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d108      	bne.n	8005d08 <HAL_UART_Transmit+0x82>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e003      	b.n	8005d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d18:	e02a      	b.n	8005d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 faf9 	bl	800631c <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e036      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e007      	b.n	8005d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1cf      	bne.n	8005d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2140      	movs	r1, #64	; 0x40
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fac9 	bl	800631c <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e006      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b0ba      	sub	sp, #232	; 0xe8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fbd3 	bl	80065b6 <UART_Receive_IT>
      return;
 8005e10:	e256      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80de 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80d1 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
 8005e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 81ed 	beq.w	80062b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fb5e 	bl	80065b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_UART_IRQHandler+0x17a>
 8005f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04f      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa66 	bl	80063f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d141      	bne.n	8005fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1d9      	bne.n	8005f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d013      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	4a7d      	ldr	r2, [pc, #500]	; (8006188 <HAL_UART_IRQHandler+0x3dc>)
 8005f94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fc f9ef 	bl	800237e <HAL_DMA_Abort_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e00e      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f99a 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e00a      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f996 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e006      	b.n	8005fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f992 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fd2:	e170      	b.n	80062b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	bf00      	nop
    return;
 8005fd6:	e16e      	b.n	80062b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 814a 	bne.w	8006276 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8143 	beq.w	8006276 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 813c 	beq.w	8006276 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	f040 80b4 	bne.w	800618c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8140 	beq.w	80062ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006042:	429a      	cmp	r2, r3
 8006044:	f080 8139 	bcs.w	80062ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800604e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605a:	f000 8088 	beq.w	800616e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800608a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e1      	bne.n	80060aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800610a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800610c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e3      	bne.n	80060e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	f023 0310 	bic.w	r3, r3, #16
 8006142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006150:	65ba      	str	r2, [r7, #88]	; 0x58
 8006152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800615e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e3      	bne.n	800612c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	4618      	mov	r0, r3
 800616a:	f7fc f898 	bl	800229e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006176:	b29b      	uxth	r3, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8c0 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006184:	e099      	b.n	80062ba <HAL_UART_IRQHandler+0x50e>
 8006186:	bf00      	nop
 8006188:	080064bf 	.word	0x080064bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808b 	beq.w	80062be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8086 	beq.w	80062be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061d6:	647a      	str	r2, [r7, #68]	; 0x44
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800620e:	633a      	str	r2, [r7, #48]	; 0x30
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	617b      	str	r3, [r7, #20]
   return(result);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f848 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006274:	e023      	b.n	80062be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_UART_IRQHandler+0x4ea>
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f929 	bl	80064e6 <UART_Transmit_IT>
    return;
 8006294:	e014      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <HAL_UART_IRQHandler+0x514>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f969 	bl	8006586 <UART_EndTransmit_IT>
    return;
 80062b4:	e004      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
    return;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
      return;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_UART_IRQHandler+0x514>
      return;
 80062be:	bf00      	nop
  }
}
 80062c0:	37e8      	adds	r7, #232	; 0xe8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b090      	sub	sp, #64	; 0x40
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632c:	e050      	b.n	80063d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d04c      	beq.n	80063d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <UART_WaitOnFlagUntilTimeout+0x30>
 800633c:	f7fb f8de 	bl	80014fc <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006348:	429a      	cmp	r2, r3
 800634a:	d241      	bcs.n	80063d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636c:	637a      	str	r2, [r7, #52]	; 0x34
 800636e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	613b      	str	r3, [r7, #16]
   return(result);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	63bb      	str	r3, [r7, #56]	; 0x38
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3314      	adds	r3, #20
 800639e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a0:	623a      	str	r2, [r7, #32]
 80063a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e00f      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d09f      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3740      	adds	r7, #64	; 0x40
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b095      	sub	sp, #84	; 0x54
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006420:	643a      	str	r2, [r7, #64]	; 0x40
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e5      	bne.n	8006400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3314      	adds	r3, #20
 800643a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	61fb      	str	r3, [r7, #28]
   return(result);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800645a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	d119      	bne.n	80064a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f023 0310 	bic.w	r3, r3, #16
 8006486:	647b      	str	r3, [r7, #68]	; 0x44
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006490:	61ba      	str	r2, [r7, #24]
 8006492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6979      	ldr	r1, [r7, #20]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	613b      	str	r3, [r7, #16]
   return(result);
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064b2:	bf00      	nop
 80064b4:	3754      	adds	r7, #84	; 0x54
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff ff09 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b21      	cmp	r3, #33	; 0x21
 80064f8:	d13e      	bne.n	8006578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006502:	d114      	bne.n	800652e <UART_Transmit_IT+0x48>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	1c9a      	adds	r2, r3, #2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]
 800652c:	e008      	b.n	8006540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6211      	str	r1, [r2, #32]
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	4619      	mov	r1, r3
 800654e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10f      	bne.n	8006574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800659c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fe8e 	bl	80062c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b08c      	sub	sp, #48	; 0x30
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b22      	cmp	r3, #34	; 0x22
 80065c8:	f040 80ab 	bne.w	8006722 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d117      	bne.n	8006606 <UART_Receive_IT+0x50>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	1c9a      	adds	r2, r3, #2
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28
 8006604:	e026      	b.n	8006654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006618:	d007      	beq.n	800662a <UART_Receive_IT+0x74>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <UART_Receive_IT+0x82>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e008      	b.n	800664a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006644:	b2da      	uxtb	r2, r3
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4619      	mov	r1, r3
 8006662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006664:	2b00      	cmp	r3, #0
 8006666:	d15a      	bne.n	800671e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0220 	bic.w	r2, r2, #32
 8006676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d135      	bne.n	8006714 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	613b      	str	r3, [r7, #16]
   return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ce:	623a      	str	r2, [r7, #32]
 80066d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	69f9      	ldr	r1, [r7, #28]
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	61bb      	str	r3, [r7, #24]
   return(result);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d10a      	bne.n	8006706 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fdf9 	bl	8006304 <HAL_UARTEx_RxEventCallback>
 8006712:	e002      	b.n	800671a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fde1 	bl	80062dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e002      	b.n	8006724 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3730      	adds	r7, #48	; 0x30
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800672c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006730:	b0c0      	sub	sp, #256	; 0x100
 8006732:	af00      	add	r7, sp, #0
 8006734:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	68d9      	ldr	r1, [r3, #12]
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	ea40 0301 	orr.w	r3, r0, r1
 8006754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	431a      	orrs	r2, r3
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006784:	f021 010c 	bic.w	r1, r1, #12
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006792:	430b      	orrs	r3, r1
 8006794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a6:	6999      	ldr	r1, [r3, #24]
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	ea40 0301 	orr.w	r3, r0, r1
 80067b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b8f      	ldr	r3, [pc, #572]	; (80069f8 <UART_SetConfig+0x2cc>)
 80067bc:	429a      	cmp	r2, r3
 80067be:	d005      	beq.n	80067cc <UART_SetConfig+0xa0>
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b8d      	ldr	r3, [pc, #564]	; (80069fc <UART_SetConfig+0x2d0>)
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d104      	bne.n	80067d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe fd2c 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 80067d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067d4:	e003      	b.n	80067de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067d6:	f7fe fd13 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 80067da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	f040 810c 	bne.w	8006a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067fe:	4622      	mov	r2, r4
 8006800:	462b      	mov	r3, r5
 8006802:	1891      	adds	r1, r2, r2
 8006804:	65b9      	str	r1, [r7, #88]	; 0x58
 8006806:	415b      	adcs	r3, r3
 8006808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800680a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800680e:	4621      	mov	r1, r4
 8006810:	eb12 0801 	adds.w	r8, r2, r1
 8006814:	4629      	mov	r1, r5
 8006816:	eb43 0901 	adc.w	r9, r3, r1
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800682a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800682e:	4690      	mov	r8, r2
 8006830:	4699      	mov	r9, r3
 8006832:	4623      	mov	r3, r4
 8006834:	eb18 0303 	adds.w	r3, r8, r3
 8006838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800683c:	462b      	mov	r3, r5
 800683e:	eb49 0303 	adc.w	r3, r9, r3
 8006842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006852:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800685a:	460b      	mov	r3, r1
 800685c:	18db      	adds	r3, r3, r3
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
 8006860:	4613      	mov	r3, r2
 8006862:	eb42 0303 	adc.w	r3, r2, r3
 8006866:	657b      	str	r3, [r7, #84]	; 0x54
 8006868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800686c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006870:	f7f9 fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <UART_SetConfig+0x2d4>)
 800687a:	fba3 2302 	umull	r2, r3, r3, r2
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	011c      	lsls	r4, r3, #4
 8006882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006886:	2200      	movs	r2, #0
 8006888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800688c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006894:	4642      	mov	r2, r8
 8006896:	464b      	mov	r3, r9
 8006898:	1891      	adds	r1, r2, r2
 800689a:	64b9      	str	r1, [r7, #72]	; 0x48
 800689c:	415b      	adcs	r3, r3
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068a4:	4641      	mov	r1, r8
 80068a6:	eb12 0a01 	adds.w	sl, r2, r1
 80068aa:	4649      	mov	r1, r9
 80068ac:	eb43 0b01 	adc.w	fp, r3, r1
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c4:	4692      	mov	sl, r2
 80068c6:	469b      	mov	fp, r3
 80068c8:	4643      	mov	r3, r8
 80068ca:	eb1a 0303 	adds.w	r3, sl, r3
 80068ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068d2:	464b      	mov	r3, r9
 80068d4:	eb4b 0303 	adc.w	r3, fp, r3
 80068d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068f0:	460b      	mov	r3, r1
 80068f2:	18db      	adds	r3, r3, r3
 80068f4:	643b      	str	r3, [r7, #64]	; 0x40
 80068f6:	4613      	mov	r3, r2
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006906:	f7f9 fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4611      	mov	r1, r2
 8006910:	4b3b      	ldr	r3, [pc, #236]	; (8006a00 <UART_SetConfig+0x2d4>)
 8006912:	fba3 2301 	umull	r2, r3, r3, r1
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2264      	movs	r2, #100	; 0x64
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	1acb      	subs	r3, r1, r3
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006926:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <UART_SetConfig+0x2d4>)
 8006928:	fba3 2302 	umull	r2, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006934:	441c      	add	r4, r3
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006940:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	1891      	adds	r1, r2, r2
 800694e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006950:	415b      	adcs	r3, r3
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006958:	4641      	mov	r1, r8
 800695a:	1851      	adds	r1, r2, r1
 800695c:	6339      	str	r1, [r7, #48]	; 0x30
 800695e:	4649      	mov	r1, r9
 8006960:	414b      	adcs	r3, r1
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006970:	4659      	mov	r1, fp
 8006972:	00cb      	lsls	r3, r1, #3
 8006974:	4651      	mov	r1, sl
 8006976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697a:	4651      	mov	r1, sl
 800697c:	00ca      	lsls	r2, r1, #3
 800697e:	4610      	mov	r0, r2
 8006980:	4619      	mov	r1, r3
 8006982:	4603      	mov	r3, r0
 8006984:	4642      	mov	r2, r8
 8006986:	189b      	adds	r3, r3, r2
 8006988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800698c:	464b      	mov	r3, r9
 800698e:	460a      	mov	r2, r1
 8006990:	eb42 0303 	adc.w	r3, r2, r3
 8006994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069ac:	460b      	mov	r3, r1
 80069ae:	18db      	adds	r3, r3, r3
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b2:	4613      	mov	r3, r2
 80069b4:	eb42 0303 	adc.w	r3, r2, r3
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069c2:	f7f9 fc75 	bl	80002b0 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <UART_SetConfig+0x2d4>)
 80069cc:	fba3 1302 	umull	r1, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2164      	movs	r1, #100	; 0x64
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	3332      	adds	r3, #50	; 0x32
 80069de:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <UART_SetConfig+0x2d4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f003 0207 	and.w	r2, r3, #7
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4422      	add	r2, r4
 80069f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069f4:	e105      	b.n	8006c02 <UART_SetConfig+0x4d6>
 80069f6:	bf00      	nop
 80069f8:	40011000 	.word	0x40011000
 80069fc:	40011400 	.word	0x40011400
 8006a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a16:	4642      	mov	r2, r8
 8006a18:	464b      	mov	r3, r9
 8006a1a:	1891      	adds	r1, r2, r2
 8006a1c:	6239      	str	r1, [r7, #32]
 8006a1e:	415b      	adcs	r3, r3
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
 8006a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a26:	4641      	mov	r1, r8
 8006a28:	1854      	adds	r4, r2, r1
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	eb43 0501 	adc.w	r5, r3, r1
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	00eb      	lsls	r3, r5, #3
 8006a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3e:	00e2      	lsls	r2, r4, #3
 8006a40:	4614      	mov	r4, r2
 8006a42:	461d      	mov	r5, r3
 8006a44:	4643      	mov	r3, r8
 8006a46:	18e3      	adds	r3, r4, r3
 8006a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	eb45 0303 	adc.w	r3, r5, r3
 8006a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a72:	4629      	mov	r1, r5
 8006a74:	008b      	lsls	r3, r1, #2
 8006a76:	4621      	mov	r1, r4
 8006a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	008a      	lsls	r2, r1, #2
 8006a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a84:	f7f9 fc14 	bl	80002b0 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <UART_SetConfig+0x4e4>)
 8006a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	011c      	lsls	r4, r3, #4
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	61b9      	str	r1, [r7, #24]
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ab8:	4641      	mov	r1, r8
 8006aba:	1851      	adds	r1, r2, r1
 8006abc:	6139      	str	r1, [r7, #16]
 8006abe:	4649      	mov	r1, r9
 8006ac0:	414b      	adcs	r3, r1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	00cb      	lsls	r3, r1, #3
 8006ad4:	4651      	mov	r1, sl
 8006ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ada:	4651      	mov	r1, sl
 8006adc:	00ca      	lsls	r2, r1, #3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aec:	464b      	mov	r3, r9
 8006aee:	460a      	mov	r2, r1
 8006af0:	eb42 0303 	adc.w	r3, r2, r3
 8006af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b10:	4649      	mov	r1, r9
 8006b12:	008b      	lsls	r3, r1, #2
 8006b14:	4641      	mov	r1, r8
 8006b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	008a      	lsls	r2, r1, #2
 8006b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b22:	f7f9 fbc5 	bl	80002b0 <__aeabi_uldivmod>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <UART_SetConfig+0x4e4>)
 8006b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2164      	movs	r1, #100	; 0x64
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	3332      	adds	r3, #50	; 0x32
 8006b3e:	4a34      	ldr	r2, [pc, #208]	; (8006c10 <UART_SetConfig+0x4e4>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4a:	441c      	add	r4, r3
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b50:	2200      	movs	r2, #0
 8006b52:	673b      	str	r3, [r7, #112]	; 0x70
 8006b54:	677a      	str	r2, [r7, #116]	; 0x74
 8006b56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	1891      	adds	r1, r2, r2
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	415b      	adcs	r3, r3
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	1851      	adds	r1, r2, r1
 8006b6e:	6039      	str	r1, [r7, #0]
 8006b70:	4649      	mov	r1, r9
 8006b72:	414b      	adcs	r3, r1
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b82:	4659      	mov	r1, fp
 8006b84:	00cb      	lsls	r3, r1, #3
 8006b86:	4651      	mov	r1, sl
 8006b88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	00ca      	lsls	r2, r1, #3
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	4603      	mov	r3, r0
 8006b96:	4642      	mov	r2, r8
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	eb42 0303 	adc.w	r3, r2, r3
 8006ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb0:	667a      	str	r2, [r7, #100]	; 0x64
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	008b      	lsls	r3, r1, #2
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc8:	4641      	mov	r1, r8
 8006bca:	008a      	lsls	r2, r1, #2
 8006bcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bd0:	f7f9 fb6e 	bl	80002b0 <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <UART_SetConfig+0x4e4>)
 8006bda:	fba3 1302 	umull	r1, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <UART_SetConfig+0x4e4>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4422      	add	r2, r4
 8006c00:	609a      	str	r2, [r3, #8]
}
 8006c02:	bf00      	nop
 8006c04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0e:	bf00      	nop
 8006c10:	51eb851f 	.word	0x51eb851f

08006c14 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	460a      	mov	r2, r1
 8006c1e:	80fb      	strh	r3, [r7, #6]
 8006c20:	4613      	mov	r3, r2
 8006c22:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8006c28:	797b      	ldrb	r3, [r7, #5]
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 f994 	bl	8006f60 <VL53L1_WrByte>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	73fb      	strb	r3, [r7, #15]
	return status;
 8006c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006c62:	232d      	movs	r3, #45	; 0x2d
 8006c64:	73bb      	strb	r3, [r7, #14]
 8006c66:	e011      	b.n	8006c8c <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	b299      	uxth	r1, r3
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	3b2d      	subs	r3, #45	; 0x2d
 8006c70:	4a2c      	ldr	r2, [pc, #176]	; (8006d24 <VL53L1X_SensorInit+0xd4>)
 8006c72:	5cd2      	ldrb	r2, [r2, r3]
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f972 	bl	8006f60 <VL53L1_WrByte>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	73bb      	strb	r3, [r7, #14]
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b87      	cmp	r3, #135	; 0x87
 8006c90:	d9ea      	bls.n	8006c68 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 f889 	bl	8006dac <VL53L1X_StartRanging>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8006ca8:	e00b      	b.n	8006cc2 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8006caa:	f107 020d 	add.w	r2, r7, #13
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f8aa 	bl	8006e0c <VL53L1X_CheckForDataReady>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8006cc2:	7b7b      	ldrb	r3, [r7, #13]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f82c 	bl	8006d28 <VL53L1X_ClearInterrupt>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f87d 	bl	8006ddc <VL53L1X_StopRanging>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	2209      	movs	r2, #9
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f934 	bl	8006f60 <VL53L1_WrByte>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2200      	movs	r2, #0
 8006d06:	210b      	movs	r1, #11
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f929 	bl	8006f60 <VL53L1_WrByte>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	0800807c 	.word	0x0800807c

08006d28 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2186      	movs	r1, #134	; 0x86
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f90f 	bl	8006f60 <VL53L1_WrByte>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8006d68:	f107 020e 	add.w	r2, r7, #14
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2130      	movs	r1, #48	; 0x30
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f921 	bl	8006fb8 <VL53L1_RdByte>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf0c      	ite	eq
 8006d94:	2301      	moveq	r3, #1
 8006d96:	2300      	movne	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	701a      	strb	r2, [r3, #0]
	return status;
 8006da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8006dba:	88fb      	ldrh	r3, [r7, #6]
 8006dbc:	2240      	movs	r2, #64	; 0x40
 8006dbe:	2187      	movs	r1, #135	; 0x87
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f8cd 	bl	8006f60 <VL53L1_WrByte>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	73fb      	strb	r3, [r7, #15]
	return status;
 8006dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2187      	movs	r1, #135	; 0x87
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f8b5 	bl	8006f60 <VL53L1_WrByte>
 8006df6:	4603      	mov	r3, r0
 8006df8:	461a      	mov	r2, r3
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	73fb      	strb	r3, [r7, #15]
	return status;
 8006e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8006e1c:	f107 020d 	add.w	r2, r7, #13
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff ff97 	bl	8006d58 <VL53L1X_GetInterruptPolarity>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8006e34:	f107 020e 	add.w	r2, r7, #14
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2131      	movs	r1, #49	; 0x31
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f8bb 	bl	8006fb8 <VL53L1_RdByte>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8006e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10c      	bne.n	8006e6e <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	7b7a      	ldrb	r2, [r7, #13]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d103      	bne.n	8006e68 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8006e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	4603      	mov	r3, r0
 8006e82:	6039      	str	r1, [r7, #0]
 8006e84:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8006e8e:	f107 020e 	add.w	r2, r7, #14
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	21e5      	movs	r1, #229	; 0xe5
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f88e 	bl	8006fb8 <VL53L1_RdByte>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8006ea6:	7bba      	ldrb	r2, [r7, #14]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	701a      	strb	r2, [r3, #0]
	return status;
 8006eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8006ec8:	f107 020c 	add.w	r2, r7, #12
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2196      	movs	r1, #150	; 0x96
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f8a9 	bl	8007028 <VL53L1_RdWord>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006ee0:	89ba      	ldrh	r2, [r7, #12]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	801a      	strh	r2, [r3, #0]
	return status;
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	4603      	mov	r3, r0
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	89f9      	ldrh	r1, [r7, #14]
 8006f08:	220a      	movs	r2, #10
 8006f0a:	9200      	str	r2, [sp, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	4805      	ldr	r0, [pc, #20]	; (8006f24 <_I2CWrite+0x30>)
 8006f10:	f7fb fd58 	bl	80029c4 <HAL_I2C_Master_Transmit>
 8006f14:	4603      	mov	r3, r0
 8006f16:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006f18:	697b      	ldr	r3, [r7, #20]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200000c4 	.word	0x200000c4

08006f28 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	4603      	mov	r3, r0
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8006f36:	89fb      	ldrh	r3, [r7, #14]
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	220a      	movs	r2, #10
 8006f44:	9200      	str	r2, [sp, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4804      	ldr	r0, [pc, #16]	; (8006f5c <_I2CRead+0x34>)
 8006f4a:	f7fb fe39 	bl	8002bc0 <HAL_I2C_Master_Receive>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200000c4 	.word	0x200000c4

08006f60 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	80fb      	strh	r3, [r7, #6]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	80bb      	strh	r3, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006f76:	88bb      	ldrh	r3, [r7, #4]
 8006f78:	0a1b      	lsrs	r3, r3, #8
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <VL53L1_WrByte+0x54>)
 8006f80:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006f82:	88bb      	ldrh	r3, [r7, #4]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <VL53L1_WrByte+0x54>)
 8006f88:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <VL53L1_WrByte+0x54>)
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	2203      	movs	r2, #3
 8006f94:	4907      	ldr	r1, [pc, #28]	; (8006fb4 <VL53L1_WrByte+0x54>)
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff ffac 	bl	8006ef4 <_I2CWrite>
 8006f9c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006fa4:	23f3      	movs	r3, #243	; 0xf3
 8006fa6:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8006fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	200001b0 	.word	0x200001b0

08006fb8 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	603a      	str	r2, [r7, #0]
 8006fc2:	80fb      	strh	r3, [r7, #6]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006fcc:	88bb      	ldrh	r3, [r7, #4]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <VL53L1_RdByte+0x6c>)
 8006fd6:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006fd8:	88bb      	ldrh	r3, [r7, #4]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <VL53L1_RdByte+0x6c>)
 8006fde:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	490f      	ldr	r1, [pc, #60]	; (8007024 <VL53L1_RdByte+0x6c>)
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff ff84 	bl	8006ef4 <_I2CWrite>
 8006fec:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006ff4:	23f3      	movs	r3, #243	; 0xf3
 8006ff6:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006ff8:	e00d      	b.n	8007016 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ff91 	bl	8006f28 <_I2CRead>
 8007006:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800700e:	23f3      	movs	r3, #243	; 0xf3
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	e000      	b.n	8007016 <VL53L1_RdByte+0x5e>
    }
done:
 8007014:	bf00      	nop
    return Status;
 8007016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	200001b0 	.word	0x200001b0

08007028 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	603a      	str	r2, [r7, #0]
 8007032:	80fb      	strh	r3, [r7, #6]
 8007034:	460b      	mov	r3, r1
 8007036:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800703c:	88bb      	ldrh	r3, [r7, #4]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	b29b      	uxth	r3, r3
 8007042:	b2da      	uxtb	r2, r3
 8007044:	4b18      	ldr	r3, [pc, #96]	; (80070a8 <VL53L1_RdWord+0x80>)
 8007046:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8007048:	88bb      	ldrh	r3, [r7, #4]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <VL53L1_RdWord+0x80>)
 800704e:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2202      	movs	r2, #2
 8007054:	4914      	ldr	r1, [pc, #80]	; (80070a8 <VL53L1_RdWord+0x80>)
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff ff4c 	bl	8006ef4 <_I2CWrite>
 800705c:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007064:	23f3      	movs	r3, #243	; 0xf3
 8007066:	73fb      	strb	r3, [r7, #15]
        goto done;
 8007068:	e018      	b.n	800709c <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	2202      	movs	r2, #2
 800706e:	490e      	ldr	r1, [pc, #56]	; (80070a8 <VL53L1_RdWord+0x80>)
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff ff59 	bl	8006f28 <_I2CRead>
 8007076:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800707e:	23f3      	movs	r3, #243	; 0xf3
 8007080:	73fb      	strb	r3, [r7, #15]
        goto done;
 8007082:	e00b      	b.n	800709c <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007084:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <VL53L1_RdWord+0x80>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	b29a      	uxth	r2, r3
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <VL53L1_RdWord+0x80>)
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	b29b      	uxth	r3, r3
 8007094:	4413      	add	r3, r2
 8007096:	b29a      	uxth	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800709c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200001b0 	.word	0x200001b0

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000001c 	.word	0x2000001c

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4d0d      	ldr	r5, [pc, #52]	; (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2600      	movs	r6, #0
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4d0b      	ldr	r5, [pc, #44]	; (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	; (80070fc <__libc_init_array+0x44>)
 80070cc:	f000 ffae 	bl	800802c <_init>
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2600      	movs	r6, #0
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	08008178 	.word	0x08008178
 80070f4:	08008178 	.word	0x08008178
 80070f8:	08008178 	.word	0x08008178
 80070fc:	0800817c 	.word	0x0800817c

08007100 <memset>:
 8007100:	4402      	add	r2, r0
 8007102:	4603      	mov	r3, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <iprintf>:
 8007110:	b40f      	push	{r0, r1, r2, r3}
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <iprintf+0x2c>)
 8007114:	b513      	push	{r0, r1, r4, lr}
 8007116:	681c      	ldr	r4, [r3, #0]
 8007118:	b124      	cbz	r4, 8007124 <iprintf+0x14>
 800711a:	69a3      	ldr	r3, [r4, #24]
 800711c:	b913      	cbnz	r3, 8007124 <iprintf+0x14>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f866 	bl	80071f0 <__sinit>
 8007124:	ab05      	add	r3, sp, #20
 8007126:	9a04      	ldr	r2, [sp, #16]
 8007128:	68a1      	ldr	r1, [r4, #8]
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f9bd 	bl	80074ac <_vfiprintf_r>
 8007132:	b002      	add	sp, #8
 8007134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr
 800713c:	2000001c 	.word	0x2000001c

08007140 <std>:
 8007140:	2300      	movs	r3, #0
 8007142:	b510      	push	{r4, lr}
 8007144:	4604      	mov	r4, r0
 8007146:	e9c0 3300 	strd	r3, r3, [r0]
 800714a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714e:	6083      	str	r3, [r0, #8]
 8007150:	8181      	strh	r1, [r0, #12]
 8007152:	6643      	str	r3, [r0, #100]	; 0x64
 8007154:	81c2      	strh	r2, [r0, #14]
 8007156:	6183      	str	r3, [r0, #24]
 8007158:	4619      	mov	r1, r3
 800715a:	2208      	movs	r2, #8
 800715c:	305c      	adds	r0, #92	; 0x5c
 800715e:	f7ff ffcf 	bl	8007100 <memset>
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x38>)
 8007164:	6263      	str	r3, [r4, #36]	; 0x24
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <std+0x3c>)
 8007168:	62a3      	str	r3, [r4, #40]	; 0x28
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <std+0x40>)
 800716c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <std+0x44>)
 8007170:	6224      	str	r4, [r4, #32]
 8007172:	6323      	str	r3, [r4, #48]	; 0x30
 8007174:	bd10      	pop	{r4, pc}
 8007176:	bf00      	nop
 8007178:	08007a55 	.word	0x08007a55
 800717c:	08007a77 	.word	0x08007a77
 8007180:	08007aaf 	.word	0x08007aaf
 8007184:	08007ad3 	.word	0x08007ad3

08007188 <_cleanup_r>:
 8007188:	4901      	ldr	r1, [pc, #4]	; (8007190 <_cleanup_r+0x8>)
 800718a:	f000 b8af 	b.w	80072ec <_fwalk_reent>
 800718e:	bf00      	nop
 8007190:	08007dad 	.word	0x08007dad

08007194 <__sfmoreglue>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	2268      	movs	r2, #104	; 0x68
 8007198:	1e4d      	subs	r5, r1, #1
 800719a:	4355      	muls	r5, r2
 800719c:	460e      	mov	r6, r1
 800719e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071a2:	f000 f8e5 	bl	8007370 <_malloc_r>
 80071a6:	4604      	mov	r4, r0
 80071a8:	b140      	cbz	r0, 80071bc <__sfmoreglue+0x28>
 80071aa:	2100      	movs	r1, #0
 80071ac:	e9c0 1600 	strd	r1, r6, [r0]
 80071b0:	300c      	adds	r0, #12
 80071b2:	60a0      	str	r0, [r4, #8]
 80071b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071b8:	f7ff ffa2 	bl	8007100 <memset>
 80071bc:	4620      	mov	r0, r4
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <__sfp_lock_acquire>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sfp_lock_acquire+0x8>)
 80071c2:	f000 b8b3 	b.w	800732c <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	200002b1 	.word	0x200002b1

080071cc <__sfp_lock_release>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__sfp_lock_release+0x8>)
 80071ce:	f000 b8ae 	b.w	800732e <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	200002b1 	.word	0x200002b1

080071d8 <__sinit_lock_acquire>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sinit_lock_acquire+0x8>)
 80071da:	f000 b8a7 	b.w	800732c <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	200002b2 	.word	0x200002b2

080071e4 <__sinit_lock_release>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__sinit_lock_release+0x8>)
 80071e6:	f000 b8a2 	b.w	800732e <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	200002b2 	.word	0x200002b2

080071f0 <__sinit>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	f7ff fff0 	bl	80071d8 <__sinit_lock_acquire>
 80071f8:	69a3      	ldr	r3, [r4, #24]
 80071fa:	b11b      	cbz	r3, 8007204 <__sinit+0x14>
 80071fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007200:	f7ff bff0 	b.w	80071e4 <__sinit_lock_release>
 8007204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007208:	6523      	str	r3, [r4, #80]	; 0x50
 800720a:	4b13      	ldr	r3, [pc, #76]	; (8007258 <__sinit+0x68>)
 800720c:	4a13      	ldr	r2, [pc, #76]	; (800725c <__sinit+0x6c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	62a2      	str	r2, [r4, #40]	; 0x28
 8007212:	42a3      	cmp	r3, r4
 8007214:	bf04      	itt	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	61a3      	streq	r3, [r4, #24]
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f820 	bl	8007260 <__sfp>
 8007220:	6060      	str	r0, [r4, #4]
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f81c 	bl	8007260 <__sfp>
 8007228:	60a0      	str	r0, [r4, #8]
 800722a:	4620      	mov	r0, r4
 800722c:	f000 f818 	bl	8007260 <__sfp>
 8007230:	2200      	movs	r2, #0
 8007232:	60e0      	str	r0, [r4, #12]
 8007234:	2104      	movs	r1, #4
 8007236:	6860      	ldr	r0, [r4, #4]
 8007238:	f7ff ff82 	bl	8007140 <std>
 800723c:	68a0      	ldr	r0, [r4, #8]
 800723e:	2201      	movs	r2, #1
 8007240:	2109      	movs	r1, #9
 8007242:	f7ff ff7d 	bl	8007140 <std>
 8007246:	68e0      	ldr	r0, [r4, #12]
 8007248:	2202      	movs	r2, #2
 800724a:	2112      	movs	r1, #18
 800724c:	f7ff ff78 	bl	8007140 <std>
 8007250:	2301      	movs	r3, #1
 8007252:	61a3      	str	r3, [r4, #24]
 8007254:	e7d2      	b.n	80071fc <__sinit+0xc>
 8007256:	bf00      	nop
 8007258:	080080d8 	.word	0x080080d8
 800725c:	08007189 	.word	0x08007189

08007260 <__sfp>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	4607      	mov	r7, r0
 8007264:	f7ff ffac 	bl	80071c0 <__sfp_lock_acquire>
 8007268:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <__sfp+0x84>)
 800726a:	681e      	ldr	r6, [r3, #0]
 800726c:	69b3      	ldr	r3, [r6, #24]
 800726e:	b913      	cbnz	r3, 8007276 <__sfp+0x16>
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ffbd 	bl	80071f0 <__sinit>
 8007276:	3648      	adds	r6, #72	; 0x48
 8007278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800727c:	3b01      	subs	r3, #1
 800727e:	d503      	bpl.n	8007288 <__sfp+0x28>
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	b30b      	cbz	r3, 80072c8 <__sfp+0x68>
 8007284:	6836      	ldr	r6, [r6, #0]
 8007286:	e7f7      	b.n	8007278 <__sfp+0x18>
 8007288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800728c:	b9d5      	cbnz	r5, 80072c4 <__sfp+0x64>
 800728e:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <__sfp+0x88>)
 8007290:	60e3      	str	r3, [r4, #12]
 8007292:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007296:	6665      	str	r5, [r4, #100]	; 0x64
 8007298:	f000 f847 	bl	800732a <__retarget_lock_init_recursive>
 800729c:	f7ff ff96 	bl	80071cc <__sfp_lock_release>
 80072a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	61a5      	str	r5, [r4, #24]
 80072ac:	2208      	movs	r2, #8
 80072ae:	4629      	mov	r1, r5
 80072b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b4:	f7ff ff24 	bl	8007100 <memset>
 80072b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072c0:	4620      	mov	r0, r4
 80072c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c4:	3468      	adds	r4, #104	; 0x68
 80072c6:	e7d9      	b.n	800727c <__sfp+0x1c>
 80072c8:	2104      	movs	r1, #4
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ff62 	bl	8007194 <__sfmoreglue>
 80072d0:	4604      	mov	r4, r0
 80072d2:	6030      	str	r0, [r6, #0]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1d5      	bne.n	8007284 <__sfp+0x24>
 80072d8:	f7ff ff78 	bl	80071cc <__sfp_lock_release>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	e7ee      	b.n	80072c0 <__sfp+0x60>
 80072e2:	bf00      	nop
 80072e4:	080080d8 	.word	0x080080d8
 80072e8:	ffff0001 	.word	0xffff0001

080072ec <_fwalk_reent>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4606      	mov	r6, r0
 80072f2:	4688      	mov	r8, r1
 80072f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072f8:	2700      	movs	r7, #0
 80072fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007302:	d505      	bpl.n	8007310 <_fwalk_reent+0x24>
 8007304:	6824      	ldr	r4, [r4, #0]
 8007306:	2c00      	cmp	r4, #0
 8007308:	d1f7      	bne.n	80072fa <_fwalk_reent+0xe>
 800730a:	4638      	mov	r0, r7
 800730c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007310:	89ab      	ldrh	r3, [r5, #12]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d907      	bls.n	8007326 <_fwalk_reent+0x3a>
 8007316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800731a:	3301      	adds	r3, #1
 800731c:	d003      	beq.n	8007326 <_fwalk_reent+0x3a>
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	47c0      	blx	r8
 8007324:	4307      	orrs	r7, r0
 8007326:	3568      	adds	r5, #104	; 0x68
 8007328:	e7e9      	b.n	80072fe <_fwalk_reent+0x12>

0800732a <__retarget_lock_init_recursive>:
 800732a:	4770      	bx	lr

0800732c <__retarget_lock_acquire_recursive>:
 800732c:	4770      	bx	lr

0800732e <__retarget_lock_release_recursive>:
 800732e:	4770      	bx	lr

08007330 <sbrk_aligned>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	4e0e      	ldr	r6, [pc, #56]	; (800736c <sbrk_aligned+0x3c>)
 8007334:	460c      	mov	r4, r1
 8007336:	6831      	ldr	r1, [r6, #0]
 8007338:	4605      	mov	r5, r0
 800733a:	b911      	cbnz	r1, 8007342 <sbrk_aligned+0x12>
 800733c:	f000 fb7a 	bl	8007a34 <_sbrk_r>
 8007340:	6030      	str	r0, [r6, #0]
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	f000 fb75 	bl	8007a34 <_sbrk_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d00a      	beq.n	8007364 <sbrk_aligned+0x34>
 800734e:	1cc4      	adds	r4, r0, #3
 8007350:	f024 0403 	bic.w	r4, r4, #3
 8007354:	42a0      	cmp	r0, r4
 8007356:	d007      	beq.n	8007368 <sbrk_aligned+0x38>
 8007358:	1a21      	subs	r1, r4, r0
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fb6a 	bl	8007a34 <_sbrk_r>
 8007360:	3001      	adds	r0, #1
 8007362:	d101      	bne.n	8007368 <sbrk_aligned+0x38>
 8007364:	f04f 34ff 	mov.w	r4, #4294967295
 8007368:	4620      	mov	r0, r4
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	200002b8 	.word	0x200002b8

08007370 <_malloc_r>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	1ccd      	adds	r5, r1, #3
 8007376:	f025 0503 	bic.w	r5, r5, #3
 800737a:	3508      	adds	r5, #8
 800737c:	2d0c      	cmp	r5, #12
 800737e:	bf38      	it	cc
 8007380:	250c      	movcc	r5, #12
 8007382:	2d00      	cmp	r5, #0
 8007384:	4607      	mov	r7, r0
 8007386:	db01      	blt.n	800738c <_malloc_r+0x1c>
 8007388:	42a9      	cmp	r1, r5
 800738a:	d905      	bls.n	8007398 <_malloc_r+0x28>
 800738c:	230c      	movs	r3, #12
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	2600      	movs	r6, #0
 8007392:	4630      	mov	r0, r6
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	4e2e      	ldr	r6, [pc, #184]	; (8007454 <_malloc_r+0xe4>)
 800739a:	f000 fdbb 	bl	8007f14 <__malloc_lock>
 800739e:	6833      	ldr	r3, [r6, #0]
 80073a0:	461c      	mov	r4, r3
 80073a2:	bb34      	cbnz	r4, 80073f2 <_malloc_r+0x82>
 80073a4:	4629      	mov	r1, r5
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7ff ffc2 	bl	8007330 <sbrk_aligned>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	4604      	mov	r4, r0
 80073b0:	d14d      	bne.n	800744e <_malloc_r+0xde>
 80073b2:	6834      	ldr	r4, [r6, #0]
 80073b4:	4626      	mov	r6, r4
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	d140      	bne.n	800743c <_malloc_r+0xcc>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	4631      	mov	r1, r6
 80073be:	4638      	mov	r0, r7
 80073c0:	eb04 0803 	add.w	r8, r4, r3
 80073c4:	f000 fb36 	bl	8007a34 <_sbrk_r>
 80073c8:	4580      	cmp	r8, r0
 80073ca:	d13a      	bne.n	8007442 <_malloc_r+0xd2>
 80073cc:	6821      	ldr	r1, [r4, #0]
 80073ce:	3503      	adds	r5, #3
 80073d0:	1a6d      	subs	r5, r5, r1
 80073d2:	f025 0503 	bic.w	r5, r5, #3
 80073d6:	3508      	adds	r5, #8
 80073d8:	2d0c      	cmp	r5, #12
 80073da:	bf38      	it	cc
 80073dc:	250c      	movcc	r5, #12
 80073de:	4629      	mov	r1, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ffa5 	bl	8007330 <sbrk_aligned>
 80073e6:	3001      	adds	r0, #1
 80073e8:	d02b      	beq.n	8007442 <_malloc_r+0xd2>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	442b      	add	r3, r5
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	e00e      	b.n	8007410 <_malloc_r+0xa0>
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	1b52      	subs	r2, r2, r5
 80073f6:	d41e      	bmi.n	8007436 <_malloc_r+0xc6>
 80073f8:	2a0b      	cmp	r2, #11
 80073fa:	d916      	bls.n	800742a <_malloc_r+0xba>
 80073fc:	1961      	adds	r1, r4, r5
 80073fe:	42a3      	cmp	r3, r4
 8007400:	6025      	str	r5, [r4, #0]
 8007402:	bf18      	it	ne
 8007404:	6059      	strne	r1, [r3, #4]
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	bf08      	it	eq
 800740a:	6031      	streq	r1, [r6, #0]
 800740c:	5162      	str	r2, [r4, r5]
 800740e:	604b      	str	r3, [r1, #4]
 8007410:	4638      	mov	r0, r7
 8007412:	f104 060b 	add.w	r6, r4, #11
 8007416:	f000 fd83 	bl	8007f20 <__malloc_unlock>
 800741a:	f026 0607 	bic.w	r6, r6, #7
 800741e:	1d23      	adds	r3, r4, #4
 8007420:	1af2      	subs	r2, r6, r3
 8007422:	d0b6      	beq.n	8007392 <_malloc_r+0x22>
 8007424:	1b9b      	subs	r3, r3, r6
 8007426:	50a3      	str	r3, [r4, r2]
 8007428:	e7b3      	b.n	8007392 <_malloc_r+0x22>
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	42a3      	cmp	r3, r4
 800742e:	bf0c      	ite	eq
 8007430:	6032      	streq	r2, [r6, #0]
 8007432:	605a      	strne	r2, [r3, #4]
 8007434:	e7ec      	b.n	8007410 <_malloc_r+0xa0>
 8007436:	4623      	mov	r3, r4
 8007438:	6864      	ldr	r4, [r4, #4]
 800743a:	e7b2      	b.n	80073a2 <_malloc_r+0x32>
 800743c:	4634      	mov	r4, r6
 800743e:	6876      	ldr	r6, [r6, #4]
 8007440:	e7b9      	b.n	80073b6 <_malloc_r+0x46>
 8007442:	230c      	movs	r3, #12
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4638      	mov	r0, r7
 8007448:	f000 fd6a 	bl	8007f20 <__malloc_unlock>
 800744c:	e7a1      	b.n	8007392 <_malloc_r+0x22>
 800744e:	6025      	str	r5, [r4, #0]
 8007450:	e7de      	b.n	8007410 <_malloc_r+0xa0>
 8007452:	bf00      	nop
 8007454:	200002b4 	.word	0x200002b4

08007458 <__sfputc_r>:
 8007458:	6893      	ldr	r3, [r2, #8]
 800745a:	3b01      	subs	r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	b410      	push	{r4}
 8007460:	6093      	str	r3, [r2, #8]
 8007462:	da08      	bge.n	8007476 <__sfputc_r+0x1e>
 8007464:	6994      	ldr	r4, [r2, #24]
 8007466:	42a3      	cmp	r3, r4
 8007468:	db01      	blt.n	800746e <__sfputc_r+0x16>
 800746a:	290a      	cmp	r1, #10
 800746c:	d103      	bne.n	8007476 <__sfputc_r+0x1e>
 800746e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007472:	f000 bb33 	b.w	8007adc <__swbuf_r>
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	1c58      	adds	r0, r3, #1
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	7019      	strb	r1, [r3, #0]
 800747e:	4608      	mov	r0, r1
 8007480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007484:	4770      	bx	lr

08007486 <__sfputs_r>:
 8007486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	4614      	mov	r4, r2
 800748e:	18d5      	adds	r5, r2, r3
 8007490:	42ac      	cmp	r4, r5
 8007492:	d101      	bne.n	8007498 <__sfputs_r+0x12>
 8007494:	2000      	movs	r0, #0
 8007496:	e007      	b.n	80074a8 <__sfputs_r+0x22>
 8007498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749c:	463a      	mov	r2, r7
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffda 	bl	8007458 <__sfputc_r>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d1f3      	bne.n	8007490 <__sfputs_r+0xa>
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074ac <_vfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460d      	mov	r5, r1
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4614      	mov	r4, r2
 80074b6:	4698      	mov	r8, r3
 80074b8:	4606      	mov	r6, r0
 80074ba:	b118      	cbz	r0, 80074c4 <_vfiprintf_r+0x18>
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	b90b      	cbnz	r3, 80074c4 <_vfiprintf_r+0x18>
 80074c0:	f7ff fe96 	bl	80071f0 <__sinit>
 80074c4:	4b89      	ldr	r3, [pc, #548]	; (80076ec <_vfiprintf_r+0x240>)
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d11b      	bne.n	8007502 <_vfiprintf_r+0x56>
 80074ca:	6875      	ldr	r5, [r6, #4]
 80074cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ce:	07d9      	lsls	r1, r3, #31
 80074d0:	d405      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	059a      	lsls	r2, r3, #22
 80074d6:	d402      	bmi.n	80074de <_vfiprintf_r+0x32>
 80074d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074da:	f7ff ff27 	bl	800732c <__retarget_lock_acquire_recursive>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	071b      	lsls	r3, r3, #28
 80074e2:	d501      	bpl.n	80074e8 <_vfiprintf_r+0x3c>
 80074e4:	692b      	ldr	r3, [r5, #16]
 80074e6:	b9eb      	cbnz	r3, 8007524 <_vfiprintf_r+0x78>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4630      	mov	r0, r6
 80074ec:	f000 fb5a 	bl	8007ba4 <__swsetup_r>
 80074f0:	b1c0      	cbz	r0, 8007524 <_vfiprintf_r+0x78>
 80074f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f4:	07dc      	lsls	r4, r3, #31
 80074f6:	d50e      	bpl.n	8007516 <_vfiprintf_r+0x6a>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	b01d      	add	sp, #116	; 0x74
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <_vfiprintf_r+0x244>)
 8007504:	429d      	cmp	r5, r3
 8007506:	d101      	bne.n	800750c <_vfiprintf_r+0x60>
 8007508:	68b5      	ldr	r5, [r6, #8]
 800750a:	e7df      	b.n	80074cc <_vfiprintf_r+0x20>
 800750c:	4b79      	ldr	r3, [pc, #484]	; (80076f4 <_vfiprintf_r+0x248>)
 800750e:	429d      	cmp	r5, r3
 8007510:	bf08      	it	eq
 8007512:	68f5      	ldreq	r5, [r6, #12]
 8007514:	e7da      	b.n	80074cc <_vfiprintf_r+0x20>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	0598      	lsls	r0, r3, #22
 800751a:	d4ed      	bmi.n	80074f8 <_vfiprintf_r+0x4c>
 800751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800751e:	f7ff ff06 	bl	800732e <__retarget_lock_release_recursive>
 8007522:	e7e9      	b.n	80074f8 <_vfiprintf_r+0x4c>
 8007524:	2300      	movs	r3, #0
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007532:	2330      	movs	r3, #48	; 0x30
 8007534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076f8 <_vfiprintf_r+0x24c>
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753c:	f04f 0901 	mov.w	r9, #1
 8007540:	4623      	mov	r3, r4
 8007542:	469a      	mov	sl, r3
 8007544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007548:	b10a      	cbz	r2, 800754e <_vfiprintf_r+0xa2>
 800754a:	2a25      	cmp	r2, #37	; 0x25
 800754c:	d1f9      	bne.n	8007542 <_vfiprintf_r+0x96>
 800754e:	ebba 0b04 	subs.w	fp, sl, r4
 8007552:	d00b      	beq.n	800756c <_vfiprintf_r+0xc0>
 8007554:	465b      	mov	r3, fp
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ff93 	bl	8007486 <__sfputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	f000 80aa 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007568:	445a      	add	r2, fp
 800756a:	9209      	str	r2, [sp, #36]	; 0x24
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80a2 	beq.w	80076ba <_vfiprintf_r+0x20e>
 8007576:	2300      	movs	r3, #0
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007580:	f10a 0a01 	add.w	sl, sl, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800758c:	931a      	str	r3, [sp, #104]	; 0x68
 800758e:	4654      	mov	r4, sl
 8007590:	2205      	movs	r2, #5
 8007592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007596:	4858      	ldr	r0, [pc, #352]	; (80076f8 <_vfiprintf_r+0x24c>)
 8007598:	f7f8 fe3a 	bl	8000210 <memchr>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	b9d8      	cbnz	r0, 80075d8 <_vfiprintf_r+0x12c>
 80075a0:	06d1      	lsls	r1, r2, #27
 80075a2:	bf44      	itt	mi
 80075a4:	2320      	movmi	r3, #32
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075aa:	0713      	lsls	r3, r2, #28
 80075ac:	bf44      	itt	mi
 80075ae:	232b      	movmi	r3, #43	; 0x2b
 80075b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b4:	f89a 3000 	ldrb.w	r3, [sl]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d015      	beq.n	80075e8 <_vfiprintf_r+0x13c>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	4654      	mov	r4, sl
 80075c0:	2000      	movs	r0, #0
 80075c2:	f04f 0c0a 	mov.w	ip, #10
 80075c6:	4621      	mov	r1, r4
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	; 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94e      	bls.n	8007670 <_vfiprintf_r+0x1c4>
 80075d2:	b1b0      	cbz	r0, 8007602 <_vfiprintf_r+0x156>
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	e014      	b.n	8007602 <_vfiprintf_r+0x156>
 80075d8:	eba0 0308 	sub.w	r3, r0, r8
 80075dc:	fa09 f303 	lsl.w	r3, r9, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	46a2      	mov	sl, r4
 80075e6:	e7d2      	b.n	800758e <_vfiprintf_r+0xe2>
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	1d19      	adds	r1, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbb      	ittet	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	f042 0202 	orrlt.w	r2, r2, #2
 80075fa:	9307      	strge	r3, [sp, #28]
 80075fc:	9307      	strlt	r3, [sp, #28]
 80075fe:	bfb8      	it	lt
 8007600:	9204      	strlt	r2, [sp, #16]
 8007602:	7823      	ldrb	r3, [r4, #0]
 8007604:	2b2e      	cmp	r3, #46	; 0x2e
 8007606:	d10c      	bne.n	8007622 <_vfiprintf_r+0x176>
 8007608:	7863      	ldrb	r3, [r4, #1]
 800760a:	2b2a      	cmp	r3, #42	; 0x2a
 800760c:	d135      	bne.n	800767a <_vfiprintf_r+0x1ce>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9203      	str	r2, [sp, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfb8      	it	lt
 800761a:	f04f 33ff 	movlt.w	r3, #4294967295
 800761e:	3402      	adds	r4, #2
 8007620:	9305      	str	r3, [sp, #20]
 8007622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007708 <_vfiprintf_r+0x25c>
 8007626:	7821      	ldrb	r1, [r4, #0]
 8007628:	2203      	movs	r2, #3
 800762a:	4650      	mov	r0, sl
 800762c:	f7f8 fdf0 	bl	8000210 <memchr>
 8007630:	b140      	cbz	r0, 8007644 <_vfiprintf_r+0x198>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	eba0 000a 	sub.w	r0, r0, sl
 8007638:	fa03 f000 	lsl.w	r0, r3, r0
 800763c:	9b04      	ldr	r3, [sp, #16]
 800763e:	4303      	orrs	r3, r0
 8007640:	3401      	adds	r4, #1
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	482c      	ldr	r0, [pc, #176]	; (80076fc <_vfiprintf_r+0x250>)
 800764a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764e:	2206      	movs	r2, #6
 8007650:	f7f8 fdde 	bl	8000210 <memchr>
 8007654:	2800      	cmp	r0, #0
 8007656:	d03f      	beq.n	80076d8 <_vfiprintf_r+0x22c>
 8007658:	4b29      	ldr	r3, [pc, #164]	; (8007700 <_vfiprintf_r+0x254>)
 800765a:	bb1b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x1f8>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	3308      	adds	r3, #8
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	443b      	add	r3, r7
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	e767      	b.n	8007540 <_vfiprintf_r+0x94>
 8007670:	fb0c 3202 	mla	r2, ip, r2, r3
 8007674:	460c      	mov	r4, r1
 8007676:	2001      	movs	r0, #1
 8007678:	e7a5      	b.n	80075c6 <_vfiprintf_r+0x11a>
 800767a:	2300      	movs	r3, #0
 800767c:	3401      	adds	r4, #1
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	4619      	mov	r1, r3
 8007682:	f04f 0c0a 	mov.w	ip, #10
 8007686:	4620      	mov	r0, r4
 8007688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768c:	3a30      	subs	r2, #48	; 0x30
 800768e:	2a09      	cmp	r2, #9
 8007690:	d903      	bls.n	800769a <_vfiprintf_r+0x1ee>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <_vfiprintf_r+0x176>
 8007696:	9105      	str	r1, [sp, #20]
 8007698:	e7c3      	b.n	8007622 <_vfiprintf_r+0x176>
 800769a:	fb0c 2101 	mla	r1, ip, r1, r2
 800769e:	4604      	mov	r4, r0
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f0      	b.n	8007686 <_vfiprintf_r+0x1da>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4b16      	ldr	r3, [pc, #88]	; (8007704 <_vfiprintf_r+0x258>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4630      	mov	r0, r6
 80076b0:	f3af 8000 	nop.w
 80076b4:	4607      	mov	r7, r0
 80076b6:	1c78      	adds	r0, r7, #1
 80076b8:	d1d6      	bne.n	8007668 <_vfiprintf_r+0x1bc>
 80076ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076bc:	07d9      	lsls	r1, r3, #31
 80076be:	d405      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c0:	89ab      	ldrh	r3, [r5, #12]
 80076c2:	059a      	lsls	r2, r3, #22
 80076c4:	d402      	bmi.n	80076cc <_vfiprintf_r+0x220>
 80076c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c8:	f7ff fe31 	bl	800732e <__retarget_lock_release_recursive>
 80076cc:	89ab      	ldrh	r3, [r5, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af12 	bmi.w	80074f8 <_vfiprintf_r+0x4c>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	e711      	b.n	80074fc <_vfiprintf_r+0x50>
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	462a      	mov	r2, r5
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <_vfiprintf_r+0x258>)
 80076e0:	a904      	add	r1, sp, #16
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f880 	bl	80077e8 <_printf_i>
 80076e8:	e7e4      	b.n	80076b4 <_vfiprintf_r+0x208>
 80076ea:	bf00      	nop
 80076ec:	080080fc 	.word	0x080080fc
 80076f0:	0800811c 	.word	0x0800811c
 80076f4:	080080dc 	.word	0x080080dc
 80076f8:	0800813c 	.word	0x0800813c
 80076fc:	08008146 	.word	0x08008146
 8007700:	00000000 	.word	0x00000000
 8007704:	08007487 	.word	0x08007487
 8007708:	08008142 	.word	0x08008142

0800770c <_printf_common>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	4616      	mov	r6, r2
 8007712:	4699      	mov	r9, r3
 8007714:	688a      	ldr	r2, [r1, #8]
 8007716:	690b      	ldr	r3, [r1, #16]
 8007718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800771c:	4293      	cmp	r3, r2
 800771e:	bfb8      	it	lt
 8007720:	4613      	movlt	r3, r2
 8007722:	6033      	str	r3, [r6, #0]
 8007724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007728:	4607      	mov	r7, r0
 800772a:	460c      	mov	r4, r1
 800772c:	b10a      	cbz	r2, 8007732 <_printf_common+0x26>
 800772e:	3301      	adds	r3, #1
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	0699      	lsls	r1, r3, #26
 8007736:	bf42      	ittt	mi
 8007738:	6833      	ldrmi	r3, [r6, #0]
 800773a:	3302      	addmi	r3, #2
 800773c:	6033      	strmi	r3, [r6, #0]
 800773e:	6825      	ldr	r5, [r4, #0]
 8007740:	f015 0506 	ands.w	r5, r5, #6
 8007744:	d106      	bne.n	8007754 <_printf_common+0x48>
 8007746:	f104 0a19 	add.w	sl, r4, #25
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	6832      	ldr	r2, [r6, #0]
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	42ab      	cmp	r3, r5
 8007752:	dc26      	bgt.n	80077a2 <_printf_common+0x96>
 8007754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007758:	1e13      	subs	r3, r2, #0
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	bf18      	it	ne
 800775e:	2301      	movne	r3, #1
 8007760:	0692      	lsls	r2, r2, #26
 8007762:	d42b      	bmi.n	80077bc <_printf_common+0xb0>
 8007764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007768:	4649      	mov	r1, r9
 800776a:	4638      	mov	r0, r7
 800776c:	47c0      	blx	r8
 800776e:	3001      	adds	r0, #1
 8007770:	d01e      	beq.n	80077b0 <_printf_common+0xa4>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	68e5      	ldr	r5, [r4, #12]
 8007776:	6832      	ldr	r2, [r6, #0]
 8007778:	f003 0306 	and.w	r3, r3, #6
 800777c:	2b04      	cmp	r3, #4
 800777e:	bf08      	it	eq
 8007780:	1aad      	subeq	r5, r5, r2
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	6922      	ldr	r2, [r4, #16]
 8007786:	bf0c      	ite	eq
 8007788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800778c:	2500      	movne	r5, #0
 800778e:	4293      	cmp	r3, r2
 8007790:	bfc4      	itt	gt
 8007792:	1a9b      	subgt	r3, r3, r2
 8007794:	18ed      	addgt	r5, r5, r3
 8007796:	2600      	movs	r6, #0
 8007798:	341a      	adds	r4, #26
 800779a:	42b5      	cmp	r5, r6
 800779c:	d11a      	bne.n	80077d4 <_printf_common+0xc8>
 800779e:	2000      	movs	r0, #0
 80077a0:	e008      	b.n	80077b4 <_printf_common+0xa8>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4652      	mov	r2, sl
 80077a6:	4649      	mov	r1, r9
 80077a8:	4638      	mov	r0, r7
 80077aa:	47c0      	blx	r8
 80077ac:	3001      	adds	r0, #1
 80077ae:	d103      	bne.n	80077b8 <_printf_common+0xac>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	3501      	adds	r5, #1
 80077ba:	e7c6      	b.n	800774a <_printf_common+0x3e>
 80077bc:	18e1      	adds	r1, r4, r3
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	2030      	movs	r0, #48	; 0x30
 80077c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077c6:	4422      	add	r2, r4
 80077c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d0:	3302      	adds	r3, #2
 80077d2:	e7c7      	b.n	8007764 <_printf_common+0x58>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4622      	mov	r2, r4
 80077d8:	4649      	mov	r1, r9
 80077da:	4638      	mov	r0, r7
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d0e6      	beq.n	80077b0 <_printf_common+0xa4>
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7d9      	b.n	800779a <_printf_common+0x8e>
	...

080077e8 <_printf_i>:
 80077e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	7e0f      	ldrb	r7, [r1, #24]
 80077ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f0:	2f78      	cmp	r7, #120	; 0x78
 80077f2:	4691      	mov	r9, r2
 80077f4:	4680      	mov	r8, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	469a      	mov	sl, r3
 80077fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077fe:	d807      	bhi.n	8007810 <_printf_i+0x28>
 8007800:	2f62      	cmp	r7, #98	; 0x62
 8007802:	d80a      	bhi.n	800781a <_printf_i+0x32>
 8007804:	2f00      	cmp	r7, #0
 8007806:	f000 80d8 	beq.w	80079ba <_printf_i+0x1d2>
 800780a:	2f58      	cmp	r7, #88	; 0x58
 800780c:	f000 80a3 	beq.w	8007956 <_printf_i+0x16e>
 8007810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007818:	e03a      	b.n	8007890 <_printf_i+0xa8>
 800781a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800781e:	2b15      	cmp	r3, #21
 8007820:	d8f6      	bhi.n	8007810 <_printf_i+0x28>
 8007822:	a101      	add	r1, pc, #4	; (adr r1, 8007828 <_printf_i+0x40>)
 8007824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007828:	08007881 	.word	0x08007881
 800782c:	08007895 	.word	0x08007895
 8007830:	08007811 	.word	0x08007811
 8007834:	08007811 	.word	0x08007811
 8007838:	08007811 	.word	0x08007811
 800783c:	08007811 	.word	0x08007811
 8007840:	08007895 	.word	0x08007895
 8007844:	08007811 	.word	0x08007811
 8007848:	08007811 	.word	0x08007811
 800784c:	08007811 	.word	0x08007811
 8007850:	08007811 	.word	0x08007811
 8007854:	080079a1 	.word	0x080079a1
 8007858:	080078c5 	.word	0x080078c5
 800785c:	08007983 	.word	0x08007983
 8007860:	08007811 	.word	0x08007811
 8007864:	08007811 	.word	0x08007811
 8007868:	080079c3 	.word	0x080079c3
 800786c:	08007811 	.word	0x08007811
 8007870:	080078c5 	.word	0x080078c5
 8007874:	08007811 	.word	0x08007811
 8007878:	08007811 	.word	0x08007811
 800787c:	0800798b 	.word	0x0800798b
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	602a      	str	r2, [r5, #0]
 8007888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800788c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007890:	2301      	movs	r3, #1
 8007892:	e0a3      	b.n	80079dc <_printf_i+0x1f4>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	0606      	lsls	r6, r0, #24
 800789a:	f101 0304 	add.w	r3, r1, #4
 800789e:	d50a      	bpl.n	80078b6 <_printf_i+0xce>
 80078a0:	680e      	ldr	r6, [r1, #0]
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	da03      	bge.n	80078b0 <_printf_i+0xc8>
 80078a8:	232d      	movs	r3, #45	; 0x2d
 80078aa:	4276      	negs	r6, r6
 80078ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b0:	485e      	ldr	r0, [pc, #376]	; (8007a2c <_printf_i+0x244>)
 80078b2:	230a      	movs	r3, #10
 80078b4:	e019      	b.n	80078ea <_printf_i+0x102>
 80078b6:	680e      	ldr	r6, [r1, #0]
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078be:	bf18      	it	ne
 80078c0:	b236      	sxthne	r6, r6
 80078c2:	e7ef      	b.n	80078a4 <_printf_i+0xbc>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1d19      	adds	r1, r3, #4
 80078ca:	6029      	str	r1, [r5, #0]
 80078cc:	0601      	lsls	r1, r0, #24
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0xec>
 80078d0:	681e      	ldr	r6, [r3, #0]
 80078d2:	e002      	b.n	80078da <_printf_i+0xf2>
 80078d4:	0646      	lsls	r6, r0, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0xe8>
 80078d8:	881e      	ldrh	r6, [r3, #0]
 80078da:	4854      	ldr	r0, [pc, #336]	; (8007a2c <_printf_i+0x244>)
 80078dc:	2f6f      	cmp	r7, #111	; 0x6f
 80078de:	bf0c      	ite	eq
 80078e0:	2308      	moveq	r3, #8
 80078e2:	230a      	movne	r3, #10
 80078e4:	2100      	movs	r1, #0
 80078e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ea:	6865      	ldr	r5, [r4, #4]
 80078ec:	60a5      	str	r5, [r4, #8]
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	bfa2      	ittt	ge
 80078f2:	6821      	ldrge	r1, [r4, #0]
 80078f4:	f021 0104 	bicge.w	r1, r1, #4
 80078f8:	6021      	strge	r1, [r4, #0]
 80078fa:	b90e      	cbnz	r6, 8007900 <_printf_i+0x118>
 80078fc:	2d00      	cmp	r5, #0
 80078fe:	d04d      	beq.n	800799c <_printf_i+0x1b4>
 8007900:	4615      	mov	r5, r2
 8007902:	fbb6 f1f3 	udiv	r1, r6, r3
 8007906:	fb03 6711 	mls	r7, r3, r1, r6
 800790a:	5dc7      	ldrb	r7, [r0, r7]
 800790c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007910:	4637      	mov	r7, r6
 8007912:	42bb      	cmp	r3, r7
 8007914:	460e      	mov	r6, r1
 8007916:	d9f4      	bls.n	8007902 <_printf_i+0x11a>
 8007918:	2b08      	cmp	r3, #8
 800791a:	d10b      	bne.n	8007934 <_printf_i+0x14c>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	07de      	lsls	r6, r3, #31
 8007920:	d508      	bpl.n	8007934 <_printf_i+0x14c>
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4299      	cmp	r1, r3
 8007928:	bfde      	ittt	le
 800792a:	2330      	movle	r3, #48	; 0x30
 800792c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007934:	1b52      	subs	r2, r2, r5
 8007936:	6122      	str	r2, [r4, #16]
 8007938:	f8cd a000 	str.w	sl, [sp]
 800793c:	464b      	mov	r3, r9
 800793e:	aa03      	add	r2, sp, #12
 8007940:	4621      	mov	r1, r4
 8007942:	4640      	mov	r0, r8
 8007944:	f7ff fee2 	bl	800770c <_printf_common>
 8007948:	3001      	adds	r0, #1
 800794a:	d14c      	bne.n	80079e6 <_printf_i+0x1fe>
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	b004      	add	sp, #16
 8007952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007956:	4835      	ldr	r0, [pc, #212]	; (8007a2c <_printf_i+0x244>)
 8007958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800795c:	6829      	ldr	r1, [r5, #0]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	f851 6b04 	ldr.w	r6, [r1], #4
 8007964:	6029      	str	r1, [r5, #0]
 8007966:	061d      	lsls	r5, r3, #24
 8007968:	d514      	bpl.n	8007994 <_printf_i+0x1ac>
 800796a:	07df      	lsls	r7, r3, #31
 800796c:	bf44      	itt	mi
 800796e:	f043 0320 	orrmi.w	r3, r3, #32
 8007972:	6023      	strmi	r3, [r4, #0]
 8007974:	b91e      	cbnz	r6, 800797e <_printf_i+0x196>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	f023 0320 	bic.w	r3, r3, #32
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	2310      	movs	r3, #16
 8007980:	e7b0      	b.n	80078e4 <_printf_i+0xfc>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f043 0320 	orr.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	2378      	movs	r3, #120	; 0x78
 800798c:	4828      	ldr	r0, [pc, #160]	; (8007a30 <_printf_i+0x248>)
 800798e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007992:	e7e3      	b.n	800795c <_printf_i+0x174>
 8007994:	0659      	lsls	r1, r3, #25
 8007996:	bf48      	it	mi
 8007998:	b2b6      	uxthmi	r6, r6
 800799a:	e7e6      	b.n	800796a <_printf_i+0x182>
 800799c:	4615      	mov	r5, r2
 800799e:	e7bb      	b.n	8007918 <_printf_i+0x130>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6826      	ldr	r6, [r4, #0]
 80079a4:	6961      	ldr	r1, [r4, #20]
 80079a6:	1d18      	adds	r0, r3, #4
 80079a8:	6028      	str	r0, [r5, #0]
 80079aa:	0635      	lsls	r5, r6, #24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0x1cc>
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e002      	b.n	80079ba <_printf_i+0x1d2>
 80079b4:	0670      	lsls	r0, r6, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0x1c8>
 80079b8:	8019      	strh	r1, [r3, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	4615      	mov	r5, r2
 80079c0:	e7ba      	b.n	8007938 <_printf_i+0x150>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	602a      	str	r2, [r5, #0]
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7f8 fc1e 	bl	8000210 <memchr>
 80079d4:	b108      	cbz	r0, 80079da <_printf_i+0x1f2>
 80079d6:	1b40      	subs	r0, r0, r5
 80079d8:	6060      	str	r0, [r4, #4]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e4:	e7a8      	b.n	8007938 <_printf_i+0x150>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	47d0      	blx	sl
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0ab      	beq.n	800794c <_printf_i+0x164>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	d413      	bmi.n	8007a22 <_printf_i+0x23a>
 80079fa:	68e0      	ldr	r0, [r4, #12]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	4298      	cmp	r0, r3
 8007a00:	bfb8      	it	lt
 8007a02:	4618      	movlt	r0, r3
 8007a04:	e7a4      	b.n	8007950 <_printf_i+0x168>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d09b      	beq.n	800794c <_printf_i+0x164>
 8007a14:	3501      	adds	r5, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dcf2      	bgt.n	8007a06 <_printf_i+0x21e>
 8007a20:	e7eb      	b.n	80079fa <_printf_i+0x212>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f104 0619 	add.w	r6, r4, #25
 8007a28:	e7f5      	b.n	8007a16 <_printf_i+0x22e>
 8007a2a:	bf00      	nop
 8007a2c:	0800814d 	.word	0x0800814d
 8007a30:	0800815e 	.word	0x0800815e

08007a34 <_sbrk_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_sbrk_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7f9 fc84 	bl	800134c <_sbrk>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_sbrk_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_sbrk_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	200002bc 	.word	0x200002bc

08007a54 <__sread>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	460c      	mov	r4, r1
 8007a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5c:	f000 fab2 	bl	8007fc4 <_read_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	bfab      	itete	ge
 8007a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a66:	89a3      	ldrhlt	r3, [r4, #12]
 8007a68:	181b      	addge	r3, r3, r0
 8007a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a6e:	bfac      	ite	ge
 8007a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a72:	81a3      	strhlt	r3, [r4, #12]
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <__swrite>:
 8007a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	05db      	lsls	r3, r3, #23
 8007a80:	4605      	mov	r5, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4616      	mov	r6, r2
 8007a86:	d505      	bpl.n	8007a94 <__swrite+0x1e>
 8007a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f000 f9c8 	bl	8007e24 <_lseek_r>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aaa:	f000 b869 	b.w	8007b80 <_write_r>

08007aae <__sseek>:
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab6:	f000 f9b5 	bl	8007e24 <_lseek_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	bf15      	itete	ne
 8007ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aca:	81a3      	strheq	r3, [r4, #12]
 8007acc:	bf18      	it	ne
 8007ace:	81a3      	strhne	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__sclose>:
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	f000 b8d3 	b.w	8007c80 <_close_r>
	...

08007adc <__swbuf_r>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	b118      	cbz	r0, 8007aee <__swbuf_r+0x12>
 8007ae6:	6983      	ldr	r3, [r0, #24]
 8007ae8:	b90b      	cbnz	r3, 8007aee <__swbuf_r+0x12>
 8007aea:	f7ff fb81 	bl	80071f0 <__sinit>
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <__swbuf_r+0x98>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d12b      	bne.n	8007b4c <__swbuf_r+0x70>
 8007af4:	686c      	ldr	r4, [r5, #4]
 8007af6:	69a3      	ldr	r3, [r4, #24]
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	071a      	lsls	r2, r3, #28
 8007afe:	d52f      	bpl.n	8007b60 <__swbuf_r+0x84>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b36b      	cbz	r3, 8007b60 <__swbuf_r+0x84>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1ac0      	subs	r0, r0, r3
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	b2f6      	uxtb	r6, r6
 8007b0e:	4283      	cmp	r3, r0
 8007b10:	4637      	mov	r7, r6
 8007b12:	dc04      	bgt.n	8007b1e <__swbuf_r+0x42>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f948 	bl	8007dac <_fflush_r>
 8007b1c:	bb30      	cbnz	r0, 8007b6c <__swbuf_r+0x90>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	60a3      	str	r3, [r4, #8]
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	6022      	str	r2, [r4, #0]
 8007b2a:	701e      	strb	r6, [r3, #0]
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	3001      	adds	r0, #1
 8007b30:	4283      	cmp	r3, r0
 8007b32:	d004      	beq.n	8007b3e <__swbuf_r+0x62>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d506      	bpl.n	8007b48 <__swbuf_r+0x6c>
 8007b3a:	2e0a      	cmp	r6, #10
 8007b3c:	d104      	bne.n	8007b48 <__swbuf_r+0x6c>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 f933 	bl	8007dac <_fflush_r>
 8007b46:	b988      	cbnz	r0, 8007b6c <__swbuf_r+0x90>
 8007b48:	4638      	mov	r0, r7
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <__swbuf_r+0x9c>)
 8007b4e:	429c      	cmp	r4, r3
 8007b50:	d101      	bne.n	8007b56 <__swbuf_r+0x7a>
 8007b52:	68ac      	ldr	r4, [r5, #8]
 8007b54:	e7cf      	b.n	8007af6 <__swbuf_r+0x1a>
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <__swbuf_r+0xa0>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	bf08      	it	eq
 8007b5c:	68ec      	ldreq	r4, [r5, #12]
 8007b5e:	e7ca      	b.n	8007af6 <__swbuf_r+0x1a>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f81e 	bl	8007ba4 <__swsetup_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0cb      	beq.n	8007b04 <__swbuf_r+0x28>
 8007b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b70:	e7ea      	b.n	8007b48 <__swbuf_r+0x6c>
 8007b72:	bf00      	nop
 8007b74:	080080fc 	.word	0x080080fc
 8007b78:	0800811c 	.word	0x0800811c
 8007b7c:	080080dc 	.word	0x080080dc

08007b80 <_write_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	; (8007ba0 <_write_r+0x20>)
 8007b84:	4604      	mov	r4, r0
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	602a      	str	r2, [r5, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7f8 fd10 	bl	80005b4 <_write>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_write_r+0x1e>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_write_r+0x1e>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200002bc 	.word	0x200002bc

08007ba4 <__swsetup_r>:
 8007ba4:	4b32      	ldr	r3, [pc, #200]	; (8007c70 <__swsetup_r+0xcc>)
 8007ba6:	b570      	push	{r4, r5, r6, lr}
 8007ba8:	681d      	ldr	r5, [r3, #0]
 8007baa:	4606      	mov	r6, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	b125      	cbz	r5, 8007bba <__swsetup_r+0x16>
 8007bb0:	69ab      	ldr	r3, [r5, #24]
 8007bb2:	b913      	cbnz	r3, 8007bba <__swsetup_r+0x16>
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f7ff fb1b 	bl	80071f0 <__sinit>
 8007bba:	4b2e      	ldr	r3, [pc, #184]	; (8007c74 <__swsetup_r+0xd0>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d10f      	bne.n	8007be0 <__swsetup_r+0x3c>
 8007bc0:	686c      	ldr	r4, [r5, #4]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bc8:	0719      	lsls	r1, r3, #28
 8007bca:	d42c      	bmi.n	8007c26 <__swsetup_r+0x82>
 8007bcc:	06dd      	lsls	r5, r3, #27
 8007bce:	d411      	bmi.n	8007bf4 <__swsetup_r+0x50>
 8007bd0:	2309      	movs	r3, #9
 8007bd2:	6033      	str	r3, [r6, #0]
 8007bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295
 8007bde:	e03e      	b.n	8007c5e <__swsetup_r+0xba>
 8007be0:	4b25      	ldr	r3, [pc, #148]	; (8007c78 <__swsetup_r+0xd4>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d101      	bne.n	8007bea <__swsetup_r+0x46>
 8007be6:	68ac      	ldr	r4, [r5, #8]
 8007be8:	e7eb      	b.n	8007bc2 <__swsetup_r+0x1e>
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <__swsetup_r+0xd8>)
 8007bec:	429c      	cmp	r4, r3
 8007bee:	bf08      	it	eq
 8007bf0:	68ec      	ldreq	r4, [r5, #12]
 8007bf2:	e7e6      	b.n	8007bc2 <__swsetup_r+0x1e>
 8007bf4:	0758      	lsls	r0, r3, #29
 8007bf6:	d512      	bpl.n	8007c1e <__swsetup_r+0x7a>
 8007bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bfa:	b141      	cbz	r1, 8007c0e <__swsetup_r+0x6a>
 8007bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d002      	beq.n	8007c0a <__swsetup_r+0x66>
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f991 	bl	8007f2c <_free_r>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	2300      	movs	r3, #0
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f043 0308 	orr.w	r3, r3, #8
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	b94b      	cbnz	r3, 8007c3e <__swsetup_r+0x9a>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c34:	d003      	beq.n	8007c3e <__swsetup_r+0x9a>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f92b 	bl	8007e94 <__smakebuf_r>
 8007c3e:	89a0      	ldrh	r0, [r4, #12]
 8007c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c44:	f010 0301 	ands.w	r3, r0, #1
 8007c48:	d00a      	beq.n	8007c60 <__swsetup_r+0xbc>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60a3      	str	r3, [r4, #8]
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	425b      	negs	r3, r3
 8007c52:	61a3      	str	r3, [r4, #24]
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	b943      	cbnz	r3, 8007c6a <__swsetup_r+0xc6>
 8007c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c5c:	d1ba      	bne.n	8007bd4 <__swsetup_r+0x30>
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	0781      	lsls	r1, r0, #30
 8007c62:	bf58      	it	pl
 8007c64:	6963      	ldrpl	r3, [r4, #20]
 8007c66:	60a3      	str	r3, [r4, #8]
 8007c68:	e7f4      	b.n	8007c54 <__swsetup_r+0xb0>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e7f7      	b.n	8007c5e <__swsetup_r+0xba>
 8007c6e:	bf00      	nop
 8007c70:	2000001c 	.word	0x2000001c
 8007c74:	080080fc 	.word	0x080080fc
 8007c78:	0800811c 	.word	0x0800811c
 8007c7c:	080080dc 	.word	0x080080dc

08007c80 <_close_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_close_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f9 fb29 	bl	80012e2 <_close>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_close_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_close_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200002bc 	.word	0x200002bc

08007ca0 <__sflush_r>:
 8007ca0:	898a      	ldrh	r2, [r1, #12]
 8007ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	0710      	lsls	r0, r2, #28
 8007caa:	460c      	mov	r4, r1
 8007cac:	d458      	bmi.n	8007d60 <__sflush_r+0xc0>
 8007cae:	684b      	ldr	r3, [r1, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dc05      	bgt.n	8007cc0 <__sflush_r+0x20>
 8007cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dc02      	bgt.n	8007cc0 <__sflush_r+0x20>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	d0f9      	beq.n	8007cba <__sflush_r+0x1a>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ccc:	682f      	ldr	r7, [r5, #0]
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	d032      	beq.n	8007d38 <__sflush_r+0x98>
 8007cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	075a      	lsls	r2, r3, #29
 8007cd8:	d505      	bpl.n	8007ce6 <__sflush_r+0x46>
 8007cda:	6863      	ldr	r3, [r4, #4]
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ce0:	b10b      	cbz	r3, 8007ce6 <__sflush_r+0x46>
 8007ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ce4:	1ac0      	subs	r0, r0, r3
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cec:	6a21      	ldr	r1, [r4, #32]
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b0      	blx	r6
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	d106      	bne.n	8007d06 <__sflush_r+0x66>
 8007cf8:	6829      	ldr	r1, [r5, #0]
 8007cfa:	291d      	cmp	r1, #29
 8007cfc:	d82c      	bhi.n	8007d58 <__sflush_r+0xb8>
 8007cfe:	4a2a      	ldr	r2, [pc, #168]	; (8007da8 <__sflush_r+0x108>)
 8007d00:	40ca      	lsrs	r2, r1
 8007d02:	07d6      	lsls	r6, r2, #31
 8007d04:	d528      	bpl.n	8007d58 <__sflush_r+0xb8>
 8007d06:	2200      	movs	r2, #0
 8007d08:	6062      	str	r2, [r4, #4]
 8007d0a:	04d9      	lsls	r1, r3, #19
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	d504      	bpl.n	8007d1c <__sflush_r+0x7c>
 8007d12:	1c42      	adds	r2, r0, #1
 8007d14:	d101      	bne.n	8007d1a <__sflush_r+0x7a>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	b903      	cbnz	r3, 8007d1c <__sflush_r+0x7c>
 8007d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1e:	602f      	str	r7, [r5, #0]
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d0ca      	beq.n	8007cba <__sflush_r+0x1a>
 8007d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d28:	4299      	cmp	r1, r3
 8007d2a:	d002      	beq.n	8007d32 <__sflush_r+0x92>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f000 f8fd 	bl	8007f2c <_free_r>
 8007d32:	2000      	movs	r0, #0
 8007d34:	6360      	str	r0, [r4, #52]	; 0x34
 8007d36:	e7c1      	b.n	8007cbc <__sflush_r+0x1c>
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b0      	blx	r6
 8007d40:	1c41      	adds	r1, r0, #1
 8007d42:	d1c7      	bne.n	8007cd4 <__sflush_r+0x34>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0c4      	beq.n	8007cd4 <__sflush_r+0x34>
 8007d4a:	2b1d      	cmp	r3, #29
 8007d4c:	d001      	beq.n	8007d52 <__sflush_r+0xb2>
 8007d4e:	2b16      	cmp	r3, #22
 8007d50:	d101      	bne.n	8007d56 <__sflush_r+0xb6>
 8007d52:	602f      	str	r7, [r5, #0]
 8007d54:	e7b1      	b.n	8007cba <__sflush_r+0x1a>
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	e7ad      	b.n	8007cbc <__sflush_r+0x1c>
 8007d60:	690f      	ldr	r7, [r1, #16]
 8007d62:	2f00      	cmp	r7, #0
 8007d64:	d0a9      	beq.n	8007cba <__sflush_r+0x1a>
 8007d66:	0793      	lsls	r3, r2, #30
 8007d68:	680e      	ldr	r6, [r1, #0]
 8007d6a:	bf08      	it	eq
 8007d6c:	694b      	ldreq	r3, [r1, #20]
 8007d6e:	600f      	str	r7, [r1, #0]
 8007d70:	bf18      	it	ne
 8007d72:	2300      	movne	r3, #0
 8007d74:	eba6 0807 	sub.w	r8, r6, r7
 8007d78:	608b      	str	r3, [r1, #8]
 8007d7a:	f1b8 0f00 	cmp.w	r8, #0
 8007d7e:	dd9c      	ble.n	8007cba <__sflush_r+0x1a>
 8007d80:	6a21      	ldr	r1, [r4, #32]
 8007d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d84:	4643      	mov	r3, r8
 8007d86:	463a      	mov	r2, r7
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b0      	blx	r6
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	dc06      	bgt.n	8007d9e <__sflush_r+0xfe>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e78e      	b.n	8007cbc <__sflush_r+0x1c>
 8007d9e:	4407      	add	r7, r0
 8007da0:	eba8 0800 	sub.w	r8, r8, r0
 8007da4:	e7e9      	b.n	8007d7a <__sflush_r+0xda>
 8007da6:	bf00      	nop
 8007da8:	20400001 	.word	0x20400001

08007dac <_fflush_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	690b      	ldr	r3, [r1, #16]
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	b913      	cbnz	r3, 8007dbc <_fflush_r+0x10>
 8007db6:	2500      	movs	r5, #0
 8007db8:	4628      	mov	r0, r5
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	b118      	cbz	r0, 8007dc6 <_fflush_r+0x1a>
 8007dbe:	6983      	ldr	r3, [r0, #24]
 8007dc0:	b90b      	cbnz	r3, 8007dc6 <_fflush_r+0x1a>
 8007dc2:	f7ff fa15 	bl	80071f0 <__sinit>
 8007dc6:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <_fflush_r+0x6c>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	d11b      	bne.n	8007e04 <_fflush_r+0x58>
 8007dcc:	686c      	ldr	r4, [r5, #4]
 8007dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0ef      	beq.n	8007db6 <_fflush_r+0xa>
 8007dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd8:	07d0      	lsls	r0, r2, #31
 8007dda:	d404      	bmi.n	8007de6 <_fflush_r+0x3a>
 8007ddc:	0599      	lsls	r1, r3, #22
 8007dde:	d402      	bmi.n	8007de6 <_fflush_r+0x3a>
 8007de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de2:	f7ff faa3 	bl	800732c <__retarget_lock_acquire_recursive>
 8007de6:	4628      	mov	r0, r5
 8007de8:	4621      	mov	r1, r4
 8007dea:	f7ff ff59 	bl	8007ca0 <__sflush_r>
 8007dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df0:	07da      	lsls	r2, r3, #31
 8007df2:	4605      	mov	r5, r0
 8007df4:	d4e0      	bmi.n	8007db8 <_fflush_r+0xc>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	059b      	lsls	r3, r3, #22
 8007dfa:	d4dd      	bmi.n	8007db8 <_fflush_r+0xc>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfe:	f7ff fa96 	bl	800732e <__retarget_lock_release_recursive>
 8007e02:	e7d9      	b.n	8007db8 <_fflush_r+0xc>
 8007e04:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <_fflush_r+0x70>)
 8007e06:	429c      	cmp	r4, r3
 8007e08:	d101      	bne.n	8007e0e <_fflush_r+0x62>
 8007e0a:	68ac      	ldr	r4, [r5, #8]
 8007e0c:	e7df      	b.n	8007dce <_fflush_r+0x22>
 8007e0e:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <_fflush_r+0x74>)
 8007e10:	429c      	cmp	r4, r3
 8007e12:	bf08      	it	eq
 8007e14:	68ec      	ldreq	r4, [r5, #12]
 8007e16:	e7da      	b.n	8007dce <_fflush_r+0x22>
 8007e18:	080080fc 	.word	0x080080fc
 8007e1c:	0800811c 	.word	0x0800811c
 8007e20:	080080dc 	.word	0x080080dc

08007e24 <_lseek_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_lseek_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7f9 fa7c 	bl	8001330 <_lseek>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_lseek_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_lseek_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	200002bc 	.word	0x200002bc

08007e48 <__swhatbuf_r>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	460e      	mov	r6, r1
 8007e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	b096      	sub	sp, #88	; 0x58
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	da08      	bge.n	8007e6c <__swhatbuf_r+0x24>
 8007e5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	061a      	lsls	r2, r3, #24
 8007e64:	d410      	bmi.n	8007e88 <__swhatbuf_r+0x40>
 8007e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e6a:	e00e      	b.n	8007e8a <__swhatbuf_r+0x42>
 8007e6c:	466a      	mov	r2, sp
 8007e6e:	f000 f8bb 	bl	8007fe8 <_fstat_r>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	dbf1      	blt.n	8007e5a <__swhatbuf_r+0x12>
 8007e76:	9a01      	ldr	r2, [sp, #4]
 8007e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e80:	425a      	negs	r2, r3
 8007e82:	415a      	adcs	r2, r3
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	e7ee      	b.n	8007e66 <__swhatbuf_r+0x1e>
 8007e88:	2340      	movs	r3, #64	; 0x40
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	b016      	add	sp, #88	; 0x58
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e94 <__smakebuf_r>:
 8007e94:	898b      	ldrh	r3, [r1, #12]
 8007e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e98:	079d      	lsls	r5, r3, #30
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	d507      	bpl.n	8007eb0 <__smakebuf_r+0x1c>
 8007ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	6163      	str	r3, [r4, #20]
 8007eac:	b002      	add	sp, #8
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	ab01      	add	r3, sp, #4
 8007eb2:	466a      	mov	r2, sp
 8007eb4:	f7ff ffc8 	bl	8007e48 <__swhatbuf_r>
 8007eb8:	9900      	ldr	r1, [sp, #0]
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff fa57 	bl	8007370 <_malloc_r>
 8007ec2:	b948      	cbnz	r0, 8007ed8 <__smakebuf_r+0x44>
 8007ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec8:	059a      	lsls	r2, r3, #22
 8007eca:	d4ef      	bmi.n	8007eac <__smakebuf_r+0x18>
 8007ecc:	f023 0303 	bic.w	r3, r3, #3
 8007ed0:	f043 0302 	orr.w	r3, r3, #2
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	e7e3      	b.n	8007ea0 <__smakebuf_r+0xc>
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <__smakebuf_r+0x7c>)
 8007eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	6020      	str	r0, [r4, #0]
 8007ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	9b00      	ldr	r3, [sp, #0]
 8007ee8:	6163      	str	r3, [r4, #20]
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	6120      	str	r0, [r4, #16]
 8007eee:	b15b      	cbz	r3, 8007f08 <__smakebuf_r+0x74>
 8007ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f000 f889 	bl	800800c <_isatty_r>
 8007efa:	b128      	cbz	r0, 8007f08 <__smakebuf_r+0x74>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	89a0      	ldrh	r0, [r4, #12]
 8007f0a:	4305      	orrs	r5, r0
 8007f0c:	81a5      	strh	r5, [r4, #12]
 8007f0e:	e7cd      	b.n	8007eac <__smakebuf_r+0x18>
 8007f10:	08007189 	.word	0x08007189

08007f14 <__malloc_lock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__malloc_lock+0x8>)
 8007f16:	f7ff ba09 	b.w	800732c <__retarget_lock_acquire_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	200002b0 	.word	0x200002b0

08007f20 <__malloc_unlock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__malloc_unlock+0x8>)
 8007f22:	f7ff ba04 	b.w	800732e <__retarget_lock_release_recursive>
 8007f26:	bf00      	nop
 8007f28:	200002b0 	.word	0x200002b0

08007f2c <_free_r>:
 8007f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	d044      	beq.n	8007fbc <_free_r+0x90>
 8007f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f36:	9001      	str	r0, [sp, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f3e:	bfb8      	it	lt
 8007f40:	18e4      	addlt	r4, r4, r3
 8007f42:	f7ff ffe7 	bl	8007f14 <__malloc_lock>
 8007f46:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <_free_r+0x94>)
 8007f48:	9801      	ldr	r0, [sp, #4]
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	b933      	cbnz	r3, 8007f5c <_free_r+0x30>
 8007f4e:	6063      	str	r3, [r4, #4]
 8007f50:	6014      	str	r4, [r2, #0]
 8007f52:	b003      	add	sp, #12
 8007f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f58:	f7ff bfe2 	b.w	8007f20 <__malloc_unlock>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d908      	bls.n	8007f72 <_free_r+0x46>
 8007f60:	6825      	ldr	r5, [r4, #0]
 8007f62:	1961      	adds	r1, r4, r5
 8007f64:	428b      	cmp	r3, r1
 8007f66:	bf01      	itttt	eq
 8007f68:	6819      	ldreq	r1, [r3, #0]
 8007f6a:	685b      	ldreq	r3, [r3, #4]
 8007f6c:	1949      	addeq	r1, r1, r5
 8007f6e:	6021      	streq	r1, [r4, #0]
 8007f70:	e7ed      	b.n	8007f4e <_free_r+0x22>
 8007f72:	461a      	mov	r2, r3
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b10b      	cbz	r3, 8007f7c <_free_r+0x50>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d9fa      	bls.n	8007f72 <_free_r+0x46>
 8007f7c:	6811      	ldr	r1, [r2, #0]
 8007f7e:	1855      	adds	r5, r2, r1
 8007f80:	42a5      	cmp	r5, r4
 8007f82:	d10b      	bne.n	8007f9c <_free_r+0x70>
 8007f84:	6824      	ldr	r4, [r4, #0]
 8007f86:	4421      	add	r1, r4
 8007f88:	1854      	adds	r4, r2, r1
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	d1e0      	bne.n	8007f52 <_free_r+0x26>
 8007f90:	681c      	ldr	r4, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	6053      	str	r3, [r2, #4]
 8007f96:	4421      	add	r1, r4
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	e7da      	b.n	8007f52 <_free_r+0x26>
 8007f9c:	d902      	bls.n	8007fa4 <_free_r+0x78>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	e7d6      	b.n	8007f52 <_free_r+0x26>
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf04      	itt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	6063      	str	r3, [r4, #4]
 8007fb2:	bf04      	itt	eq
 8007fb4:	1949      	addeq	r1, r1, r5
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	6054      	str	r4, [r2, #4]
 8007fba:	e7ca      	b.n	8007f52 <_free_r+0x26>
 8007fbc:	b003      	add	sp, #12
 8007fbe:	bd30      	pop	{r4, r5, pc}
 8007fc0:	200002b4 	.word	0x200002b4

08007fc4 <_read_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_read_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7f9 f968 	bl	80012a8 <_read>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_read_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_read_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200002bc 	.word	0x200002bc

08007fe8 <_fstat_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_fstat_r+0x20>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	f7f9 f980 	bl	80012fa <_fstat>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d102      	bne.n	8008004 <_fstat_r+0x1c>
 8007ffe:	682b      	ldr	r3, [r5, #0]
 8008000:	b103      	cbz	r3, 8008004 <_fstat_r+0x1c>
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	200002bc 	.word	0x200002bc

0800800c <_isatty_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d06      	ldr	r5, [pc, #24]	; (8008028 <_isatty_r+0x1c>)
 8008010:	2300      	movs	r3, #0
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	f7f9 f97f 	bl	800131a <_isatty>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_isatty_r+0x1a>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_isatty_r+0x1a>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	200002bc 	.word	0x200002bc

0800802c <_init>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	bf00      	nop
 8008030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008032:	bc08      	pop	{r3}
 8008034:	469e      	mov	lr, r3
 8008036:	4770      	bx	lr

08008038 <_fini>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	bf00      	nop
 800803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803e:	bc08      	pop	{r3}
 8008040:	469e      	mov	lr, r3
 8008042:	4770      	bx	lr
