
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c60  08005c60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08005c74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005c74  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e33f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  0002e37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220fc  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f046  00000000  00000000  00053934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccee9  00000000  00000000  0006297a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f863  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  0012f8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005bb4 	.word	0x08005bb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005bb4 	.word	0x08005bb4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 faeb 	bl	8000ae8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f861 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f923 	bl	8000760 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8c9 	bl	80006b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8f5 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sensorState = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	75fb      	strb	r3, [r7, #23]
  uint8_t boot[6] = {66, 79, 79, 84, 10, 0};
 8000526:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <main+0xc0>)
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000530:	6018      	str	r0, [r3, #0]
 8000532:	3304      	adds	r3, #4
 8000534:	8019      	strh	r1, [r3, #0]
  while(sensorState==0){
 8000536:	e00f      	b.n	8000558 <main+0x50>
		VL53L1X_BootState(dev, &sensorState);
 8000538:	f107 0317 	add.w	r3, r7, #23
 800053c:	4619      	mov	r1, r3
 800053e:	2052      	movs	r0, #82	; 0x52
 8000540:	f005 fa53 	bl	80059ea <VL53L1X_BootState>
		HAL_UART_Transmit(&huart2, boot, 6, 10);
 8000544:	f107 0110 	add.w	r1, r7, #16
 8000548:	230a      	movs	r3, #10
 800054a:	2206      	movs	r2, #6
 800054c:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xc4>)
 800054e:	f004 f970 	bl	8004832 <HAL_UART_Transmit>
		HAL_Delay(2);
 8000552:	2002      	movs	r0, #2
 8000554:	f000 fb3a 	bl	8000bcc <HAL_Delay>
  while(sensorState==0){
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0ec      	beq.n	8000538 <main+0x30>
  }

  VL53L1X_SensorInit(dev);
 800055e:	2052      	movs	r0, #82	; 0x52
 8000560:	f005 f92e 	bl	80057c0 <VL53L1X_SensorInit>
  VL53L1X_StartRanging(dev);
 8000564:	2052      	movs	r0, #82	; 0x52
 8000566:	f005 f9d9 	bl	800591c <VL53L1X_StartRanging>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dataReady = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
  uint8_t getting[6] = {71, 69, 84, 83, 10, 0};
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <main+0xc8>)
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000578:	6018      	str	r0, [r3, #0]
 800057a:	3304      	adds	r3, #4
 800057c:	8019      	strh	r1, [r3, #0]
  uint8_t data[6] = {68, 65, 84, 65, 10, 0};
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <main+0xcc>)
 8000580:	463b      	mov	r3, r7
 8000582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000586:	6018      	str	r0, [r3, #0]
 8000588:	3304      	adds	r3, #4
 800058a:	8019      	strh	r1, [r3, #0]
  while (1)
  {
	  while (dataReady == 0){
 800058c:	e00f      	b.n	80005ae <main+0xa6>
		  VL53L1X_CheckForDataReady(dev, &dataReady);
 800058e:	f107 030f 	add.w	r3, r7, #15
 8000592:	4619      	mov	r1, r3
 8000594:	2052      	movs	r0, #82	; 0x52
 8000596:	f005 f9f1 	bl	800597c <VL53L1X_CheckForDataReady>
		  HAL_UART_Transmit(&huart2, getting, 6, 10);
 800059a:	f107 0108 	add.w	r1, r7, #8
 800059e:	230a      	movs	r3, #10
 80005a0:	2206      	movs	r2, #6
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <main+0xc4>)
 80005a4:	f004 f945 	bl	8004832 <HAL_UART_Transmit>
		  HAL_Delay(2);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 fb0f 	bl	8000bcc <HAL_Delay>
	  while (dataReady == 0){
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0ec      	beq.n	800058e <main+0x86>
	  }
	  HAL_UART_Transmit(&huart2, data, 6, 10);
 80005b4:	4639      	mov	r1, r7
 80005b6:	230a      	movs	r3, #10
 80005b8:	2206      	movs	r2, #6
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <main+0xc4>)
 80005bc:	f004 f939 	bl	8004832 <HAL_UART_Transmit>
	  dataReady = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
	  while (dataReady == 0){
 80005c4:	e7f3      	b.n	80005ae <main+0xa6>
 80005c6:	bf00      	nop
 80005c8:	08005bcc 	.word	0x08005bcc
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	08005bd4 	.word	0x08005bd4
 80005d4:	08005bdc 	.word	0x08005bdc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fadc 	bl	8005ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a22      	ldr	r2, [pc, #136]	; (80006ac <SystemClock_Config+0xd4>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	; 0xa8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fdfb 	bl	800425c <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 f8da 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fa9a 	bl	8003bc8 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 f8c3 	bl	8000824 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f000 fdfb 	bl	80012e8 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f894 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028
 8000704:	40005400 	.word	0x40005400
 8000708:	00061a80 	.word	0x00061a80

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f004 f828 	bl	8004798 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f869 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000007c 	.word	0x2000007c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xbc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a27      	ldr	r2, [pc, #156]	; (800081c <MX_GPIO_Init+0xbc>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xbc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_GPIO_Init+0xbc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a20      	ldr	r2, [pc, #128]	; (800081c <MX_GPIO_Init+0xbc>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_GPIO_Init+0xbc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_GPIO_Init+0xbc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <MX_GPIO_Init+0xbc>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_GPIO_Init+0xbc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_GPIO_Init+0xbc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_GPIO_Init+0xbc>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_GPIO_Init+0xbc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <MX_GPIO_Init+0xc0>)
 80007fe:	f000 fbbb 	bl	8000f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2017      	movs	r0, #23
 8000808:	f000 fadf 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800080c:	2017      	movs	r0, #23
 800080e:	f000 faf8 	bl	8000e02 <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <HAL_I2C_MspInit+0xa4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d13b      	bne.n	800091a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ce:	2304      	movs	r3, #4
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4814      	ldr	r0, [pc, #80]	; (800092c <HAL_I2C_MspInit+0xac>)
 80008da:	f000 fb4d 	bl	8000f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_I2C_MspInit+0xa8>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	201f      	movs	r0, #31
 8000900:	f000 fa63 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000904:	201f      	movs	r0, #31
 8000906:	f000 fa7c 	bl	8000e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2020      	movs	r0, #32
 8000910:	f000 fa5b 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000914:	2020      	movs	r0, #32
 8000916:	f000 fa74 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_UART_MspInit+0x94>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d133      	bne.n	80009ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_UART_MspInit+0x98>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_UART_MspInit+0x98>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_UART_MspInit+0x98>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x98>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <HAL_UART_MspInit+0x98>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_UART_MspInit+0x98>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_MspInit+0x9c>)
 80009a6:	f000 fae7 	bl	8000f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2026      	movs	r0, #38	; 0x26
 80009b0:	f000 fa0b 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b4:	2026      	movs	r0, #38	; 0x26
 80009b6:	f000 fa24 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8b6 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a2c:	f000 fc38 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <I2C1_EV_IRQHandler+0x10>)
 8000a3a:	f001 f8bd 	bl	8001bb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028

08000a48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <I2C1_ER_IRQHandler+0x10>)
 8000a4e:	f001 fa24 	bl	8001e9a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000028 	.word	0x20000028

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART2_IRQHandler+0x10>)
 8000a62:	f003 ff79 	bl	8004958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000007c 	.word	0x2000007c

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f005 f84b 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd1f 	bl	8000508 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08005c68 	.word	0x08005c68
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	200001c4 	.word	0x200001c4

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f94f 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe88 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f967 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f92f 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000c0 	.word	0x200000c0

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000c0 	.word	0x200000c0

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff3e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff31 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff feb6 	bl	8000bb4 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d008      	beq.n	8000e68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e052      	b.n	8000f0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0216 	bic.w	r2, r2, #22
 8000e76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <HAL_DMA_Abort+0x62>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0208 	bic.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb8:	e013      	b.n	8000ee2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eba:	f7ff fe7b 	bl	8000bb4 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d90c      	bls.n	8000ee2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e015      	b.n	8000f0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e4      	bne.n	8000eba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef4:	223f      	movs	r2, #63	; 0x3f
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00c      	b.n	8000f4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2205      	movs	r2, #5
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e165      	b.n	8001260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8154 	bne.w	800125a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80ae 	beq.w	800125a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a5c      	ldr	r2, [pc, #368]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_GPIO_Init+0x304>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <HAL_GPIO_Init+0x308>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x21a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <HAL_GPIO_Init+0x30c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x216>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <HAL_GPIO_Init+0x310>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x212>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4c      	ldr	r2, [pc, #304]	; (800128c <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x20e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x20a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x206>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x202>
 8001176:	2306      	movs	r3, #6
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800117a:	2307      	movs	r3, #7
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x304>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_GPIO_Init+0x324>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a31      	ldr	r2, [pc, #196]	; (800129c <HAL_GPIO_Init+0x324>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_GPIO_Init+0x324>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_GPIO_Init+0x324>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_GPIO_Init+0x324>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_GPIO_Init+0x324>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_GPIO_Init+0x324>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_GPIO_Init+0x324>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae96 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f806 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12b      	b.n	8001552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fab6 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134c:	f002 fd2e 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	; (800155c <HAL_I2C_Init+0x274>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d807      	bhi.n	800136c <HAL_I2C_Init+0x84>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <HAL_I2C_Init+0x278>)
 8001360:	4293      	cmp	r3, r2
 8001362:	bf94      	ite	ls
 8001364:	2301      	movls	r3, #1
 8001366:	2300      	movhi	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e006      	b.n	800137a <HAL_I2C_Init+0x92>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_I2C_Init+0x27c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0e7      	b.n	8001552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a78      	ldr	r2, [pc, #480]	; (8001568 <HAL_I2C_Init+0x280>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a6a      	ldr	r2, [pc, #424]	; (800155c <HAL_I2C_Init+0x274>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d802      	bhi.n	80013bc <HAL_I2C_Init+0xd4>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e009      	b.n	80013d0 <HAL_I2C_Init+0xe8>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a69      	ldr	r2, [pc, #420]	; (800156c <HAL_I2C_Init+0x284>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	495c      	ldr	r1, [pc, #368]	; (800155c <HAL_I2C_Init+0x274>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d819      	bhi.n	8001424 <HAL_I2C_Init+0x13c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001404:	400b      	ands	r3, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <HAL_I2C_Init+0x138>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	e051      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001420:	2304      	movs	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x168>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x18e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x196>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1bc>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fb16 	bl	8000bb4 <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	; (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f002 f8e6 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f001 fea8 	bl	8003384 <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f002 f960 	bl	8003920 <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f002 f950 	bl	80039a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	461a      	mov	r2, r3
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fa18 	bl	8000bb4 <HAL_GetTick>
 8001784:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b20      	cmp	r3, #32
 8001790:	f040 820b 	bne.w	8001baa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2319      	movs	r3, #25
 800179a:	2201      	movs	r2, #1
 800179c:	497c      	ldr	r1, [pc, #496]	; (8001990 <HAL_I2C_Master_Receive+0x224>)
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f001 ffe8 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
 80017ac:	e1fe      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_I2C_Master_Receive+0x50>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e1f7      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d007      	beq.n	80017e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2222      	movs	r2, #34	; 0x22
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4a5c      	ldr	r2, [pc, #368]	; (8001994 <HAL_I2C_Master_Receive+0x228>)
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001824:	8979      	ldrh	r1, [r7, #10]
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f001 fe2c 	bl	8003488 <I2C_MasterRequestRead>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1b8      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	2b00      	cmp	r3, #0
 8001840:	d113      	bne.n	800186a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e18c      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186e:	2b01      	cmp	r3, #1
 8001870:	d11b      	bne.n	80018aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e16c      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d11b      	bne.n	80018ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	e14c      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001910:	e138      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b03      	cmp	r3, #3
 8001918:	f200 80f1 	bhi.w	8001afe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	2b01      	cmp	r3, #1
 8001922:	d123      	bne.n	800196c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f002 f8ad 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e139      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	855a      	strh	r2, [r3, #42]	; 0x2a
 800196a:	e10b      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	2b02      	cmp	r3, #2
 8001972:	d14e      	bne.n	8001a12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	2200      	movs	r2, #0
 800197c:	4906      	ldr	r1, [pc, #24]	; (8001998 <HAL_I2C_Master_Receive+0x22c>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f001 fef8 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e10e      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
 800198e:	bf00      	nop
 8001990:	00100002 	.word	0x00100002
 8001994:	ffff0000 	.word	0xffff0000
 8001998:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a10:	e0b8      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4966      	ldr	r1, [pc, #408]	; (8001bb4 <HAL_I2C_Master_Receive+0x448>)
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f001 fea9 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0bf      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	2200      	movs	r2, #0
 8001a76:	494f      	ldr	r1, [pc, #316]	; (8001bb4 <HAL_I2C_Master_Receive+0x448>)
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f001 fe7b 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e091      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001afc:	e042      	b.n	8001b84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f001 ffc0 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e04c      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d118      	bne.n	8001b84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f47f aec2 	bne.w	8001912 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	00010004 	.word	0x00010004

08001bb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d003      	beq.n	8001bf0 <HAL_I2C_EV_IRQHandler+0x38>
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b40      	cmp	r3, #64	; 0x40
 8001bec:	f040 80c1 	bne.w	8001d72 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c10:	d003      	beq.n	8001c1a <HAL_I2C_EV_IRQHandler+0x62>
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_EV_IRQHandler+0x66>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x68>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	f000 8132 	beq.w	8001e8a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00c      	beq.n	8001c4a <HAL_I2C_EV_IRQHandler+0x92>
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 ffa8 	bl	8003b92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fd83 	bl	800274e <I2C_Master_SB>
 8001c48:	e092      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0xb2>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	0a5b      	lsrs	r3, r3, #9
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fdf9 	bl	800285a <I2C_Master_ADD10>
 8001c68:	e082      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_I2C_EV_IRQHandler+0xd2>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	0a5b      	lsrs	r3, r3, #9
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fe13 	bl	80028ae <I2C_Master_ADDR>
 8001c88:	e072      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03b      	beq.n	8001d0e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca4:	f000 80f3 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	09db      	lsrs	r3, r3, #7
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00f      	beq.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f9f3 	bl	80020b8 <I2C_MasterTransmit_TXE>
 8001cd2:	e04d      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80d6 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	0a5b      	lsrs	r3, r3, #9
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80cf 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	2b21      	cmp	r3, #33	; 0x21
 8001cf4:	d103      	bne.n	8001cfe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fa7a 	bl	80021f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cfc:	e0c7      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	f040 80c4 	bne.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fae8 	bl	80022dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0c:	e0bf      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d1c:	f000 80b7 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00f      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0x194>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	0a9b      	lsrs	r3, r3, #10
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0x194>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb5d 	bl	8002404 <I2C_MasterReceive_RXNE>
 8001d4a:	e011      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 809a 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	0a5b      	lsrs	r3, r3, #9
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8093 	beq.w	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fc06 	bl	800257a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	e08e      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d70:	e08d      	b.n	8001e8e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e007      	b.n	8001d94 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x20e>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00c      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 ffc4 	bl	8002d4c <I2C_Slave_ADDR>
 8001dc4:	e066      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x22e>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	0a5b      	lsrs	r3, r3, #9
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fffe 	bl	8002de0 <I2C_Slave_STOPF>
 8001de4:	e056      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2b21      	cmp	r3, #33	; 0x21
 8001dea:	d002      	beq.n	8001df2 <HAL_I2C_EV_IRQHandler+0x23a>
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	2b29      	cmp	r3, #41	; 0x29
 8001df0:	d125      	bne.n	8001e3e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	09db      	lsrs	r3, r3, #7
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00f      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0x266>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	0a9b      	lsrs	r3, r3, #10
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0x266>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 feda 	bl	8002bd0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e1c:	e039      	b.n	8001e92 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d033      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x2da>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	0a5b      	lsrs	r3, r3, #9
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02d      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 ff07 	bl	8002c4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e3c:	e029      	b.n	8001e92 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00f      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	0a9b      	lsrs	r3, r3, #10
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 ff12 	bl	8002c8c <I2C_SlaveReceive_RXNE>
 8001e68:	e014      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	0a5b      	lsrs	r3, r3, #9
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 ff40 	bl	8002d08 <I2C_SlaveReceive_BTF>
 8001e88:	e004      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e8a:	bf00      	nop
 8001e8c:	e002      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e92:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b08a      	sub	sp, #40	; 0x28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ebc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x4e>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ee6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <HAL_I2C_ER_IRQHandler+0x78>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	0a9b      	lsrs	r3, r3, #10
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03f      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x104>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d039      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f2a:	7efb      	ldrb	r3, [r7, #27]
 8001f2c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f44:	7ebb      	ldrb	r3, [r7, #26]
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d112      	bne.n	8001f70 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	2b21      	cmp	r3, #33	; 0x21
 8001f54:	d008      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b29      	cmp	r3, #41	; 0x29
 8001f5a:	d005      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0xce>
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	2b28      	cmp	r3, #40	; 0x28
 8001f60:	d106      	bne.n	8001f70 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b21      	cmp	r3, #33	; 0x21
 8001f66:	d103      	bne.n	8001f70 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f001 f869 	bl	8003040 <I2C_Slave_AF>
 8001f6e:	e016      	b.n	8001f9e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f78:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f82:	7efb      	ldrb	r3, [r7, #27]
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d002      	beq.n	8001f8e <HAL_I2C_ER_IRQHandler+0xf4>
 8001f88:	7efb      	ldrb	r3, [r7, #27]
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d107      	bne.n	8001f9e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	0adb      	lsrs	r3, r3, #11
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_I2C_ER_IRQHandler+0x12e>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001fc6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 f8a0 	bl	8003120 <I2C_ITError>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d150      	bne.n	8002180 <I2C_MasterTransmit_TXE+0xc8>
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b21      	cmp	r3, #33	; 0x21
 80020e2:	d14d      	bne.n	8002180 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d01d      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d01a      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020f6:	d016      	beq.n	8002126 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002106:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2211      	movs	r2, #17
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff62 	bl	8001fe8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002124:	e060      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002134:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002144:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d107      	bne.n	8002170 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff7d 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800216e:	e03b      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff35 	bl	8001fe8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800217e:	e033      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b21      	cmp	r3, #33	; 0x21
 8002184:	d005      	beq.n	8002192 <I2C_MasterTransmit_TXE+0xda>
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d12d      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b22      	cmp	r3, #34	; 0x22
 8002190:	d12a      	bne.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d108      	bne.n	80021ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021ac:	e01c      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d103      	bne.n	80021c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f88e 	bl	80022dc <I2C_MemoryTransmit_TXE_BTF>
}
 80021c0:	e012      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021e6:	e7ff      	b.n	80021e8 <I2C_MasterTransmit_TXE+0x130>
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b21      	cmp	r3, #33	; 0x21
 8002208:	d164      	bne.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002238:	e04c      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d01d      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b20      	cmp	r3, #32
 8002244:	d01a      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800224c:	d016      	beq.n	800227c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2211      	movs	r2, #17
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff feb7 	bl	8001fe8 <HAL_I2C_MasterTxCpltCallback>
}
 800227a:	e02b      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800228a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d107      	bne.n	80022c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fed2 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
}
 80022c4:	e006      	b.n	80022d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe8a 	bl	8001fe8 <HAL_I2C_MasterTxCpltCallback>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11d      	bne.n	8002330 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10b      	bne.n	8002314 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002312:	e073      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	b29b      	uxth	r3, r3
 800231a:	121b      	asrs	r3, r3, #8
 800231c:	b2da      	uxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800232e:	e065      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10b      	bne.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	b2da      	uxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800234e:	e055      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	2b02      	cmp	r3, #2
 8002356:	d151      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b22      	cmp	r3, #34	; 0x22
 800235c:	d10d      	bne.n	800237a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002378:	e040      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b21      	cmp	r3, #33	; 0x21
 8002388:	d112      	bne.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023ae:	e025      	b.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d120      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b21      	cmp	r3, #33	; 0x21
 80023be:	d11d      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe36 	bl	8002068 <HAL_I2C_MemTxCpltCallback>
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b22      	cmp	r3, #34	; 0x22
 8002416:	f040 80ac 	bne.w	8002572 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d921      	bls.n	800246c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b03      	cmp	r3, #3
 8002456:	f040 808c 	bne.w	8002572 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800246a:	e082      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b02      	cmp	r3, #2
 8002472:	d075      	beq.n	8002560 <I2C_MasterReceive_RXNE+0x15c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <I2C_MasterReceive_RXNE+0x7c>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d16f      	bne.n	8002560 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 facf 	bl	8003a24 <I2C_WaitOnSTOPRequestThroughIT>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d142      	bne.n	8002512 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d10a      	bne.n	80024fc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fdc1 	bl	800207c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024fa:	e03a      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2212      	movs	r2, #18
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fd76 	bl	8001ffc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002510:	e02f      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002520:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fd99 	bl	8002090 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800255e:	e008      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	605a      	str	r2, [r3, #4]
}
 8002570:	e7ff      	b.n	8002572 <I2C_MasterReceive_RXNE+0x16e>
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11b      	bne.n	80025ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025c8:	e0bd      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d129      	bne.n	8002628 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d007      	beq.n	8002600 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002626:	e08e      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d176      	bne.n	8002720 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <I2C_MasterReceive_BTF+0xc4>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d108      	bne.n	8002650 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e019      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <I2C_MasterReceive_BTF+0xe2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d108      	bne.n	800266e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e00a      	b.n	8002684 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d007      	beq.n	8002684 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d10a      	bne.n	800270a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fcba 	bl	800207c <HAL_I2C_MemRxCpltCallback>
}
 8002708:	e01d      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2212      	movs	r2, #18
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fc6f 	bl	8001ffc <HAL_I2C_MasterRxCpltCallback>
}
 800271e:	e012      	b.n	8002746 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d117      	bne.n	8002792 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800277a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800277c:	e067      	b.n	800284e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
}
 8002790:	e05d      	b.n	800284e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	d133      	bne.n	8002804 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b21      	cmp	r3, #33	; 0x21
 80027a6:	d109      	bne.n	80027bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e008      	b.n	80027ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d004      	beq.n	80027e0 <I2C_Master_SB+0x92>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d032      	beq.n	800284e <I2C_Master_SB+0x100>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02d      	beq.n	800284e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	605a      	str	r2, [r3, #4]
}
 8002802:	e024      	b.n	800284e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	b29b      	uxth	r3, r3
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	e011      	b.n	800284e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10d      	bne.n	800284e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	b29b      	uxth	r3, r3
 8002838:	11db      	asrs	r3, r3, #7
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 0306 	and.w	r3, r3, #6
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f063 030e 	orn	r3, r3, #14
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <I2C_Master_ADD10+0x26>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <I2C_Master_ADD10+0x48>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a0:	605a      	str	r2, [r3, #4]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b091      	sub	sp, #68	; 0x44
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b22      	cmp	r3, #34	; 0x22
 80028d6:	f040 8169 	bne.w	8002bac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <I2C_Master_ADDR+0x54>
 80028e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10b      	bne.n	8002902 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	e160      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <I2C_Master_ADDR+0x98>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002912:	d118      	bne.n	8002946 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	651a      	str	r2, [r3, #80]	; 0x50
 8002944:	e13e      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e115      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 808a 	bne.w	8002a98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298a:	d137      	bne.n	80029fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029aa:	d113      	bne.n	80029d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	e0e7      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e0d3      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d02e      	beq.n	8002a60 <I2C_Master_ADDR+0x1b2>
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d02b      	beq.n	8002a60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d102      	bne.n	8002a14 <I2C_Master_ADDR+0x166>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d125      	bne.n	8002a60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00e      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00b      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d008      	beq.n	8002a38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	e0a1      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e085      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d14d      	bne.n	8002b3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d016      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d013      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d010      	beq.n	8002ad6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af4:	d117      	bne.n	8002b26 <I2C_Master_ADDR+0x278>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afc:	d00b      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d008      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d005      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d002      	beq.n	8002b16 <I2C_Master_ADDR+0x268>
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d107      	bne.n	8002b26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	e032      	b.n	8002ba4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d117      	bne.n	8002b8e <I2C_Master_ADDR+0x2e0>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b64:	d00b      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d008      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d005      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d002      	beq.n	8002b7e <I2C_Master_ADDR+0x2d0>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d107      	bne.n	8002b8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002baa:	e00b      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	e7ff      	b.n	8002bc4 <I2C_Master_ADDR+0x316>
 8002bc4:	bf00      	nop
 8002bc6:	3744      	adds	r7, #68	; 0x44
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02b      	beq.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d114      	bne.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b29      	cmp	r3, #41	; 0x29
 8002c1c:	d111      	bne.n	8002c42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2228      	movs	r2, #40	; 0x28
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff f9e7 	bl	8002010 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02c      	beq.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d114      	bne.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cda:	d111      	bne.n	8002d00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2228      	movs	r2, #40	; 0x28
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff f992 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d66:	2b28      	cmp	r3, #40	; 0x28
 8002d68:	d127      	bne.n	8002dba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	09db      	lsrs	r3, r3, #7
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	81bb      	strh	r3, [r7, #12]
 8002d9c:	e002      	b.n	8002da4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002dac:	89ba      	ldrh	r2, [r7, #12]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff f940 	bl	8002038 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002db8:	e00e      	b.n	8002dd8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d172      	bne.n	8002f24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b22      	cmp	r3, #34	; 0x22
 8002e42:	d002      	beq.n	8002e4a <I2C_Slave_STOPF+0x6a>
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b2a      	cmp	r3, #42	; 0x2a
 8002e48:	d135      	bne.n	8002eb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f869 	bl	8000f5a <HAL_DMA_GetState>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d049      	beq.n	8002f22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <I2C_Slave_STOPF+0x258>)
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f83b 	bl	8000f16 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d03d      	beq.n	8002f22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb4:	e035      	b.n	8002f22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f043 0204 	orr.w	r2, r3, #4
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe f833 	bl	8000f5a <HAL_DMA_GetState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d014      	beq.n	8002f24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <I2C_Slave_STOPF+0x258>)
 8002f00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f805 	bl	8000f16 <HAL_DMA_Abort_IT>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4798      	blx	r3
 8002f20:	e000      	b.n	8002f24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03e      	beq.n	8002fac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d112      	bne.n	8002f62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d112      	bne.n	8002f96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8b3 	bl	8003120 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fba:	e039      	b.n	8003030 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc0:	d109      	bne.n	8002fd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2228      	movs	r2, #40	; 0x28
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff f827 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b28      	cmp	r3, #40	; 0x28
 8002fe0:	d111      	bne.n	8003006 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <I2C_Slave_STOPF+0x25c>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff f828 	bl	8002054 <HAL_I2C_ListenCpltCallback>
}
 8003004:	e014      	b.n	8003030 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d002      	beq.n	8003014 <I2C_Slave_STOPF+0x234>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b22      	cmp	r3, #34	; 0x22
 8003012:	d10d      	bne.n	8003030 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe fffa 	bl	8002024 <HAL_I2C_SlaveRxCpltCallback>
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08003625 	.word	0x08003625
 800303c:	ffff0000 	.word	0xffff0000

08003040 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d002      	beq.n	8003062 <I2C_Slave_AF+0x22>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b20      	cmp	r3, #32
 8003060:	d129      	bne.n	80030b6 <I2C_Slave_AF+0x76>
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b28      	cmp	r3, #40	; 0x28
 8003066:	d126      	bne.n	80030b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <I2C_Slave_AF+0xdc>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003086:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe ffd0 	bl	8002054 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030b4:	e02e      	b.n	8003114 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d126      	bne.n	800310a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <I2C_Slave_AF+0xdc>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe ff84 	bl	8002010 <HAL_I2C_SlaveTxCpltCallback>
}
 8003108:	e004      	b.n	8003114 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003112:	615a      	str	r2, [r3, #20]
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	ffff0000 	.word	0xffff0000

08003120 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003136:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003138:	7bbb      	ldrb	r3, [r7, #14]
 800313a:	2b10      	cmp	r3, #16
 800313c:	d002      	beq.n	8003144 <I2C_ITError+0x24>
 800313e:	7bbb      	ldrb	r3, [r7, #14]
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d10a      	bne.n	800315a <I2C_ITError+0x3a>
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b22      	cmp	r3, #34	; 0x22
 8003148:	d107      	bne.n	800315a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003158:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003160:	2b28      	cmp	r3, #40	; 0x28
 8003162:	d107      	bne.n	8003174 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2228      	movs	r2, #40	; 0x28
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003172:	e015      	b.n	80031a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003182:	d00a      	beq.n	800319a <I2C_ITError+0x7a>
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b60      	cmp	r3, #96	; 0x60
 8003188:	d007      	beq.n	800319a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d162      	bne.n	8003276 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d020      	beq.n	8003210 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	4a6a      	ldr	r2, [pc, #424]	; (800337c <I2C_ITError+0x25c>)
 80031d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fe9b 	bl	8000f16 <HAL_DMA_Abort_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8089 	beq.w	80032fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800320a:	4610      	mov	r0, r2
 800320c:	4798      	blx	r3
 800320e:	e074      	b.n	80032fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	4a59      	ldr	r2, [pc, #356]	; (800337c <I2C_ITError+0x25c>)
 8003216:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fe7a 	bl	8000f16 <HAL_DMA_Abort_IT>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d068      	beq.n	80032fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d10b      	bne.n	800324e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
 8003274:	e041      	b.n	80032fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b60      	cmp	r3, #96	; 0x60
 8003280:	d125      	bne.n	80032ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d10b      	bne.n	80032b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe feec 	bl	80020a4 <HAL_I2C_AbortCpltCallback>
 80032cc:	e015      	b.n	80032fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d10b      	bne.n	80032f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe fecb 	bl	8002090 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10e      	bne.n	8003328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d113      	bne.n	8003374 <I2C_ITError+0x254>
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b28      	cmp	r3, #40	; 0x28
 8003350:	d110      	bne.n	8003374 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <I2C_ITError+0x260>)
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe fe70 	bl	8002054 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08003625 	.word	0x08003625
 8003380:	ffff0000 	.word	0xffff0000

08003384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d006      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e00b      	b.n	80033d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d107      	bne.n	80033d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f9c5 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d103      	bne.n	8003408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e035      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e01b      	b.n	8003460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003428:	897b      	ldrh	r3, [r7, #10]
 800342a:	11db      	asrs	r3, r3, #7
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f063 030f 	orn	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <I2C_MasterRequestWrite+0xfc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f9eb 	bl	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e010      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <I2C_MasterRequestWrite+0x100>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9db 	bl	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010008 	.word	0x00010008
 8003484:	00010002 	.word	0x00010002

08003488 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d006      	beq.n	80034c2 <I2C_MasterRequestRead+0x3a>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d003      	beq.n	80034c2 <I2C_MasterRequestRead+0x3a>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c0:	d108      	bne.n	80034d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e00b      	b.n	80034ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b11      	cmp	r3, #17
 80034da:	d107      	bne.n	80034ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f93b 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003512:	d103      	bne.n	800351c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e079      	b.n	8003614 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003528:	d108      	bne.n	800353c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e05f      	b.n	80035fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800353c:	897b      	ldrh	r3, [r7, #10]
 800353e:	11db      	asrs	r3, r3, #7
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0306 	and.w	r3, r3, #6
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 030f 	orn	r3, r3, #15
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4930      	ldr	r1, [pc, #192]	; (800361c <I2C_MasterRequestRead+0x194>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f961 	bl	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e054      	b.n	8003614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4929      	ldr	r1, [pc, #164]	; (8003620 <I2C_MasterRequestRead+0x198>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f951 	bl	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e044      	b.n	8003614 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f8d9 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d103      	bne.n	80035e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e017      	b.n	8003614 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035e4:	897b      	ldrh	r3, [r7, #10]
 80035e6:	11db      	asrs	r3, r3, #7
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 0306 	and.w	r3, r3, #6
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f063 030e 	orn	r3, r3, #14
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4907      	ldr	r1, [pc, #28]	; (8003620 <I2C_MasterRequestRead+0x198>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f90d 	bl	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	00010008 	.word	0x00010008
 8003620:	00010002 	.word	0x00010002

08003624 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <I2C_DMAAbort+0x148>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	08db      	lsrs	r3, r3, #3
 8003644:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <I2C_DMAAbort+0x14c>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0a1a      	lsrs	r2, r3, #8
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800366a:	e00a      	b.n	8003682 <I2C_DMAAbort+0x5e>
    }
    count--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b01      	subs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d0ea      	beq.n	8003658 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	2200      	movs	r2, #0
 8003690:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	2200      	movs	r2, #0
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	2200      	movs	r2, #0
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	2200      	movs	r2, #0
 80036d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b60      	cmp	r3, #96	; 0x60
 80036f2:	d10e      	bne.n	8003712 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7fe fcca 	bl	80020a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003710:	e027      	b.n	8003762 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003718:	2b28      	cmp	r3, #40	; 0x28
 800371a:	d117      	bne.n	800374c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800373a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2228      	movs	r2, #40	; 0x28
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800374a:	e007      	b.n	800375c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f7fe fc97 	bl	8002090 <HAL_I2C_ErrorCallback>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000000 	.word	0x20000000
 8003770:	14f8b589 	.word	0x14f8b589

08003774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003784:	e025      	b.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d021      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fd fa11 	bl	8000bb4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e023      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10d      	bne.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	e00c      	b.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	429a      	cmp	r2, r3
 8003816:	d0b6      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003830:	e051      	b.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003840:	d123      	bne.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f043 0204 	orr.w	r2, r3, #4
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e046      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d021      	beq.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fd f98f 	bl	8000bb4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e020      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10c      	bne.n	80038fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e00b      	b.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	43da      	mvns	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d18d      	bne.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392c:	e02d      	b.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f900 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02d      	b.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d021      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fd f935 	bl	8000bb4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d1ca      	bne.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ae:	e02d      	b.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8bf 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02d      	b.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d021      	beq.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fd f8f4 	bl	8000bb4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d1ca      	bne.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	0a1a      	lsrs	r2, r3, #8
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f043 0220 	orr.w	r2, r3, #32
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e008      	b.n	8003a74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a70:	d0e9      	beq.n	8003a46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	20000000 	.word	0x20000000
 8003a84:	14f8b589 	.word	0x14f8b589

08003a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a94:	e042      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d119      	bne.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e029      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7fd f86c 	bl	8000bb4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d1b5      	bne.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d11b      	bne.n	8003b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ba2:	d103      	bne.n	8003bac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003baa:	e007      	b.n	8003bbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bb4:	d102      	bne.n	8003bbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cc      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d90c      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d044      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e067      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4934      	ldr	r1, [pc, #208]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fc ff7c 	bl	8000bb4 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fc ff78 	bl	8000bb4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e04f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20c      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 f855 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fedc 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08005be4 	.word	0x08005be4
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	20000004 	.word	0x20000004

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	08005bf4 	.word	0x08005bf4

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	08005bf4 	.word	0x08005bf4

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e00:	b0ae      	sub	sp, #184	; 0xb8
 8003e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	4bcb      	ldr	r3, [pc, #812]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	f200 8206 	bhi.w	800423c <HAL_RCC_GetSysClockFreq+0x440>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	0800423d 	.word	0x0800423d
 8003e40:	0800423d 	.word	0x0800423d
 8003e44:	0800423d 	.word	0x0800423d
 8003e48:	08003e75 	.word	0x08003e75
 8003e4c:	0800423d 	.word	0x0800423d
 8003e50:	0800423d 	.word	0x0800423d
 8003e54:	0800423d 	.word	0x0800423d
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	0800423d 	.word	0x0800423d
 8003e60:	0800423d 	.word	0x0800423d
 8003e64:	0800423d 	.word	0x0800423d
 8003e68:	0800406d 	.word	0x0800406d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4bb9      	ldr	r3, [pc, #740]	; (8004154 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e72:	e1e7      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4bb8      	ldr	r3, [pc, #736]	; (8004158 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e7a:	e1e3      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4bb4      	ldr	r3, [pc, #720]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e88:	4bb1      	ldr	r3, [pc, #708]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d071      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e94:	4bae      	ldr	r3, [pc, #696]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ea0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003eec:	4649      	mov	r1, r9
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4641      	mov	r1, r8
 8003efc:	1a51      	subs	r1, r2, r1
 8003efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f00:	4649      	mov	r1, r9
 8003f02:	eb63 0301 	sbc.w	r3, r3, r1
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f14:	4649      	mov	r1, r9
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4641      	mov	r1, r8
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4622      	mov	r2, r4
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	462b      	mov	r3, r5
 8003f30:	460a      	mov	r2, r1
 8003f32:	eb42 0303 	adc.w	r3, r2, r3
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f44:	4629      	mov	r1, r5
 8003f46:	024b      	lsls	r3, r1, #9
 8003f48:	4621      	mov	r1, r4
 8003f4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4e:	4621      	mov	r1, r4
 8003f50:	024a      	lsls	r2, r1, #9
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f68:	f7fc f94c 	bl	8000204 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f76:	e067      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4b75      	ldr	r3, [pc, #468]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f92:	2300      	movs	r3, #0
 8003f94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	0159      	lsls	r1, r3, #5
 8003fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fac:	0150      	lsls	r0, r2, #5
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	1a51      	subs	r1, r2, r1
 8003fb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fb8:	4629      	mov	r1, r5
 8003fba:	eb63 0301 	sbc.w	r3, r3, r1
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003fcc:	4649      	mov	r1, r9
 8003fce:	018b      	lsls	r3, r1, #6
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	018a      	lsls	r2, r1, #6
 8003fda:	4641      	mov	r1, r8
 8003fdc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffa:	4692      	mov	sl, r2
 8003ffc:	469b      	mov	fp, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	eb1a 0303 	adds.w	r3, sl, r3
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	462b      	mov	r3, r5
 8004008:	eb4b 0303 	adc.w	r3, fp, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004030:	2200      	movs	r2, #0
 8004032:	673b      	str	r3, [r7, #112]	; 0x70
 8004034:	677a      	str	r2, [r7, #116]	; 0x74
 8004036:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800403a:	f7fc f8e3 	bl	8000204 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4613      	mov	r3, r2
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800406a:	e0eb      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800406c:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d06b      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004084:	4b32      	ldr	r3, [pc, #200]	; (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	2200      	movs	r2, #0
 800408c:	66bb      	str	r3, [r7, #104]	; 0x68
 800408e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	663b      	str	r3, [r7, #96]	; 0x60
 8004098:	2300      	movs	r3, #0
 800409a:	667b      	str	r3, [r7, #100]	; 0x64
 800409c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	0159      	lsls	r1, r3, #5
 80040ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b2:	0150      	lsls	r0, r2, #5
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4621      	mov	r1, r4
 80040ba:	1a51      	subs	r1, r2, r1
 80040bc:	61b9      	str	r1, [r7, #24]
 80040be:	4629      	mov	r1, r5
 80040c0:	eb63 0301 	sbc.w	r3, r3, r1
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040d2:	4659      	mov	r1, fp
 80040d4:	018b      	lsls	r3, r1, #6
 80040d6:	4651      	mov	r1, sl
 80040d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040dc:	4651      	mov	r1, sl
 80040de:	018a      	lsls	r2, r1, #6
 80040e0:	4651      	mov	r1, sl
 80040e2:	ebb2 0801 	subs.w	r8, r2, r1
 80040e6:	4659      	mov	r1, fp
 80040e8:	eb63 0901 	sbc.w	r9, r3, r1
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004100:	4690      	mov	r8, r2
 8004102:	4699      	mov	r9, r3
 8004104:	4623      	mov	r3, r4
 8004106:	eb18 0303 	adds.w	r3, r8, r3
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	462b      	mov	r3, r5
 800410e:	eb49 0303 	adc.w	r3, r9, r3
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004120:	4629      	mov	r1, r5
 8004122:	024b      	lsls	r3, r1, #9
 8004124:	4621      	mov	r1, r4
 8004126:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800412a:	4621      	mov	r1, r4
 800412c:	024a      	lsls	r2, r1, #9
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004136:	2200      	movs	r2, #0
 8004138:	65bb      	str	r3, [r7, #88]	; 0x58
 800413a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800413c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004140:	f7fc f860 	bl	8000204 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414e:	e065      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x420>
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415c:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <HAL_RCC_GetSysClockFreq+0x458>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	2200      	movs	r2, #0
 8004164:	4618      	mov	r0, r3
 8004166:	4611      	mov	r1, r2
 8004168:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800416c:	653b      	str	r3, [r7, #80]	; 0x50
 800416e:	2300      	movs	r3, #0
 8004170:	657b      	str	r3, [r7, #84]	; 0x54
 8004172:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004176:	4642      	mov	r2, r8
 8004178:	464b      	mov	r3, r9
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0159      	lsls	r1, r3, #5
 8004184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004188:	0150      	lsls	r0, r2, #5
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4641      	mov	r1, r8
 8004190:	1a51      	subs	r1, r2, r1
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	4649      	mov	r1, r9
 8004196:	eb63 0301 	sbc.w	r3, r3, r1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041a8:	4659      	mov	r1, fp
 80041aa:	018b      	lsls	r3, r1, #6
 80041ac:	4651      	mov	r1, sl
 80041ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b2:	4651      	mov	r1, sl
 80041b4:	018a      	lsls	r2, r1, #6
 80041b6:	4651      	mov	r1, sl
 80041b8:	1a54      	subs	r4, r2, r1
 80041ba:	4659      	mov	r1, fp
 80041bc:	eb63 0501 	sbc.w	r5, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	464b      	mov	r3, r9
 80041dc:	eb45 0303 	adc.w	r3, r5, r3
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ee:	4629      	mov	r1, r5
 80041f0:	028b      	lsls	r3, r1, #10
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f8:	4621      	mov	r1, r4
 80041fa:	028a      	lsls	r2, r1, #10
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004204:	2200      	movs	r2, #0
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
 8004208:	64fa      	str	r2, [r7, #76]	; 0x4c
 800420a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800420e:	f7fb fff9 	bl	8000204 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4613      	mov	r3, r2
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_RCC_GetSysClockFreq+0x458>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0f1b      	lsrs	r3, r3, #28
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800422a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800422e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800423a:	e003      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_GetSysClockFreq+0x45c>)
 800423e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004242:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004248:	4618      	mov	r0, r3
 800424a:	37b8      	adds	r7, #184	; 0xb8
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	00f42400 	.word	0x00f42400

0800425c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e28d      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8083 	beq.w	8004382 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800427c:	4b94      	ldr	r3, [pc, #592]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b04      	cmp	r3, #4
 8004286:	d019      	beq.n	80042bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004288:	4b91      	ldr	r3, [pc, #580]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004290:	2b08      	cmp	r3, #8
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004294:	4b8e      	ldr	r3, [pc, #568]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a0:	d00c      	beq.n	80042bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a2:	4b8b      	ldr	r3, [pc, #556]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d112      	bne.n	80042d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b88      	ldr	r3, [pc, #544]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ba:	d10b      	bne.n	80042d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05b      	beq.n	8004380 <HAL_RCC_OscConfig+0x124>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d157      	bne.n	8004380 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e25a      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d106      	bne.n	80042ec <HAL_RCC_OscConfig+0x90>
 80042de:	4b7c      	ldr	r3, [pc, #496]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7b      	ldr	r2, [pc, #492]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e01d      	b.n	8004328 <HAL_RCC_OscConfig+0xcc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0xb4>
 80042f6:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b73      	ldr	r3, [pc, #460]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a72      	ldr	r2, [pc, #456]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e00b      	b.n	8004328 <HAL_RCC_OscConfig+0xcc>
 8004310:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6b      	ldr	r2, [pc, #428]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fc fc40 	bl	8000bb4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fc fc3c 	bl	8000bb4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e21f      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0xdc>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fc fc2c 	bl	8000bb4 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004360:	f7fc fc28 	bl	8000bb4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e20b      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x104>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d06f      	beq.n	800446e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800438e:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800439a:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d105      	bne.n	80043b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b44      	ldr	r3, [pc, #272]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x186>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1d3      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4937      	ldr	r1, [pc, #220]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCC_OscConfig+0x278>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fc fbd5 	bl	8000bb4 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440e:	f7fc fbd1 	bl	8000bb4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1b4      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4925      	ldr	r1, [pc, #148]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCC_OscConfig+0x278>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fc fbb4 	bl	8000bb4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004450:	f7fc fbb0 	bl	8000bb4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e193      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fc fb94 	bl	8000bb4 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004490:	f7fc fb90 	bl	8000bb4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e173      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_OscConfig+0x274>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x234>
 80044ae:	e01b      	b.n	80044e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fc fb7d 	bl	8000bb4 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	e00e      	b.n	80044dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044be:	f7fc fb79 	bl	8000bb4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d907      	bls.n	80044dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e15c      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	42470000 	.word	0x42470000
 80044d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b8a      	ldr	r3, [pc, #552]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ea      	bne.n	80044be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8097 	beq.w	8004624 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b83      	ldr	r3, [pc, #524]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a7e      	ldr	r2, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b7c      	ldr	r3, [pc, #496]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b79      	ldr	r3, [pc, #484]	; (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a75      	ldr	r2, [pc, #468]	; (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fc fb39 	bl	8000bb4 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fc fb35 	bl	8000bb4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e118      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCC_OscConfig+0x4b0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x31e>
 800456c:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a65      	ldr	r2, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
 8004578:	e01c      	b.n	80045b4 <HAL_RCC_OscConfig+0x358>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b05      	cmp	r3, #5
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x340>
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a60      	ldr	r2, [pc, #384]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x358>
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a59      	ldr	r2, [pc, #356]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	4b57      	ldr	r3, [pc, #348]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	4a56      	ldr	r2, [pc, #344]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fc fafa 	bl	8000bb4 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fc faf6 	bl	8000bb4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0d7      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RCC_OscConfig+0x368>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc fae4 	bl	8000bb4 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc fae0 	bl	8000bb4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0c1      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ee      	bne.n	80045f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	4a3a      	ldr	r2, [pc, #232]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80ad 	beq.w	8004788 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d060      	beq.n	80046fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d145      	bne.n	80046ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b33      	ldr	r3, [pc, #204]	; (8004710 <HAL_RCC_OscConfig+0x4b4>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fc fab4 	bl	8000bb4 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fc fab0 	bl	8000bb4 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e093      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	491b      	ldr	r1, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCC_OscConfig+0x4b4>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fc fa85 	bl	8000bb4 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fc fa81 	bl	8000bb4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e064      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x452>
 80046cc:	e05c      	b.n	8004788 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <HAL_RCC_OscConfig+0x4b4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fc fa6e 	bl	8000bb4 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fc fa6a 	bl	8000bb4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04d      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x480>
 80046fa:	e045      	b.n	8004788 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e040      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
 8004708:	40023800 	.word	0x40023800
 800470c:	40007000 	.word	0x40007000
 8004710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_RCC_OscConfig+0x538>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d030      	beq.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d129      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d122      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800474a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800474c:	4293      	cmp	r3, r2
 800474e:	d119      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	3b01      	subs	r3, #1
 800475e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d10f      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e03f      	b.n	800482a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc f8b6 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fd7b 	bl	80052d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08a      	sub	sp, #40	; 0x28
 8004836:	af02      	add	r7, sp, #8
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	d17c      	bne.n	800494c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_UART_Transmit+0x2c>
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e075      	b.n	800494e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_UART_Transmit+0x3e>
 800486c:	2302      	movs	r3, #2
 800486e:	e06e      	b.n	800494e <HAL_UART_Transmit+0x11c>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2221      	movs	r2, #33	; 0x21
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004886:	f7fc f995 	bl	8000bb4 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d108      	bne.n	80048b4 <HAL_UART_Transmit+0x82>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e003      	b.n	80048bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048c4:	e02a      	b.n	800491c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 faf9 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e036      	b.n	800494e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	3302      	adds	r3, #2
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	e007      	b.n	800490e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3301      	adds	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1cf      	bne.n	80048c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2140      	movs	r1, #64	; 0x40
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fac9 	bl	8004ec8 <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0ba      	sub	sp, #232	; 0xe8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_UART_IRQHandler+0x66>
 80049aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fbd3 	bl	8005162 <UART_Receive_IT>
      return;
 80049bc:	e256      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80de 	beq.w	8004b84 <HAL_UART_IRQHandler+0x22c>
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80d1 	beq.w	8004b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_UART_IRQHandler+0xae>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_UART_IRQHandler+0xd2>
 8004a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0202 	orr.w	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
 8004a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
 8004a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0208 	orr.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 81ed 	beq.w	8004e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x14e>
 8004a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb5e 	bl	8005162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x17a>
 8004aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04f      	beq.n	8004b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa66 	bl	8004fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d141      	bne.n	8004b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1d9      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d013      	beq.n	8004b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	4a7d      	ldr	r2, [pc, #500]	; (8004d34 <HAL_UART_IRQHandler+0x3dc>)
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc f9e5 	bl	8000f16 <HAL_DMA_Abort_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	e00e      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f99a 	bl	8004e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00a      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f996 	bl	8004e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e006      	b.n	8004b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f992 	bl	8004e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b7e:	e170      	b.n	8004e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	bf00      	nop
    return;
 8004b82:	e16e      	b.n	8004e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	f040 814a 	bne.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8143 	beq.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 813c 	beq.w	8004e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	f040 80b4 	bne.w	8004d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8140 	beq.w	8004e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	f080 8139 	bcs.w	8004e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	f000 8088 	beq.w	8004d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d9      	bne.n	8004c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3314      	adds	r3, #20
 8004c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e1      	bne.n	8004c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e3      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fc f88e 	bl	8000e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8c0 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d30:	e099      	b.n	8004e66 <HAL_UART_IRQHandler+0x50e>
 8004d32:	bf00      	nop
 8004d34:	0800506b 	.word	0x0800506b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 808b 	beq.w	8004e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8086 	beq.w	8004e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d82:	647a      	str	r2, [r7, #68]	; 0x44
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	623b      	str	r3, [r7, #32]
   return(result);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dba:	633a      	str	r2, [r7, #48]	; 0x30
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f848 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e023      	b.n	8004e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_UART_IRQHandler+0x4ea>
 8004e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f929 	bl	8005092 <UART_Transmit_IT>
    return;
 8004e40:	e014      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <HAL_UART_IRQHandler+0x514>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f969 	bl	8005132 <UART_EndTransmit_IT>
    return;
 8004e60:	e004      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
    return;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
      return;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_UART_IRQHandler+0x514>
      return;
 8004e6a:	bf00      	nop
  }
}
 8004e6c:	37e8      	adds	r7, #232	; 0xe8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop

08004e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b090      	sub	sp, #64	; 0x40
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed8:	e050      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d04c      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee8:	f7fb fe64 	bl	8000bb4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d241      	bcs.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f18:	637a      	str	r2, [r7, #52]	; 0x34
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4c:	623a      	str	r2, [r7, #32]
 8004f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	69f9      	ldr	r1, [r7, #28]
 8004f52:	6a3a      	ldr	r2, [r7, #32]
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e00f      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d09f      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3740      	adds	r7, #64	; 0x40
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b095      	sub	sp, #84	; 0x54
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	2b01      	cmp	r3, #1
 800501a:	d119      	bne.n	8005050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	60bb      	str	r3, [r7, #8]
   return(result);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0310 	bic.w	r3, r3, #16
 8005032:	647b      	str	r3, [r7, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800503c:	61ba      	str	r2, [r7, #24]
 800503e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6979      	ldr	r1, [r7, #20]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	613b      	str	r3, [r7, #16]
   return(result);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800505e:	bf00      	nop
 8005060:	3754      	adds	r7, #84	; 0x54
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff ff09 	bl	8004e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b21      	cmp	r3, #33	; 0x21
 80050a4:	d13e      	bne.n	8005124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	d114      	bne.n	80050da <UART_Transmit_IT+0x48>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d110      	bne.n	80050da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]
 80050d8:	e008      	b.n	80050ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6211      	str	r1, [r2, #32]
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4619      	mov	r1, r3
 80050fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800510e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fe8e 	bl	8004e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b08c      	sub	sp, #48	; 0x30
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b22      	cmp	r3, #34	; 0x22
 8005174:	f040 80ab 	bne.w	80052ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d117      	bne.n	80051b2 <UART_Receive_IT+0x50>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d113      	bne.n	80051b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	1c9a      	adds	r2, r3, #2
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
 80051b0:	e026      	b.n	8005200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d007      	beq.n	80051d6 <UART_Receive_IT+0x74>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <UART_Receive_IT+0x82>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e008      	b.n	80051f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4619      	mov	r1, r3
 800520e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005210:	2b00      	cmp	r3, #0
 8005212:	d15a      	bne.n	80052ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0220 	bic.w	r2, r2, #32
 8005222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	d135      	bne.n	80052c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	613b      	str	r3, [r7, #16]
   return(result);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f023 0310 	bic.w	r3, r3, #16
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	623a      	str	r2, [r7, #32]
 800527c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	69f9      	ldr	r1, [r7, #28]
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	61bb      	str	r3, [r7, #24]
   return(result);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e5      	bne.n	800525a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d10a      	bne.n	80052b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fdf9 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
 80052be:	e002      	b.n	80052c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff fde1 	bl	8004e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e002      	b.n	80052d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3730      	adds	r7, #48	; 0x30
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b0c0      	sub	sp, #256	; 0x100
 80052de:	af00      	add	r7, sp, #0
 80052e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	68d9      	ldr	r1, [r3, #12]
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	ea40 0301 	orr.w	r3, r0, r1
 8005300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005330:	f021 010c 	bic.w	r1, r1, #12
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533e:	430b      	orrs	r3, r1
 8005340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	6999      	ldr	r1, [r3, #24]
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	ea40 0301 	orr.w	r3, r0, r1
 800535e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b8f      	ldr	r3, [pc, #572]	; (80055a4 <UART_SetConfig+0x2cc>)
 8005368:	429a      	cmp	r2, r3
 800536a:	d005      	beq.n	8005378 <UART_SetConfig+0xa0>
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <UART_SetConfig+0x2d0>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d104      	bne.n	8005382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fd2c 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 800537c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005380:	e003      	b.n	800538a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005382:	f7fe fd13 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8005386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	f040 810c 	bne.w	80055b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053aa:	4622      	mov	r2, r4
 80053ac:	462b      	mov	r3, r5
 80053ae:	1891      	adds	r1, r2, r2
 80053b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80053b2:	415b      	adcs	r3, r3
 80053b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053ba:	4621      	mov	r1, r4
 80053bc:	eb12 0801 	adds.w	r8, r2, r1
 80053c0:	4629      	mov	r1, r5
 80053c2:	eb43 0901 	adc.w	r9, r3, r1
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053da:	4690      	mov	r8, r2
 80053dc:	4699      	mov	r9, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	eb18 0303 	adds.w	r3, r8, r3
 80053e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e8:	462b      	mov	r3, r5
 80053ea:	eb49 0303 	adc.w	r3, r9, r3
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005406:	460b      	mov	r3, r1
 8005408:	18db      	adds	r3, r3, r3
 800540a:	653b      	str	r3, [r7, #80]	; 0x50
 800540c:	4613      	mov	r3, r2
 800540e:	eb42 0303 	adc.w	r3, r2, r3
 8005412:	657b      	str	r3, [r7, #84]	; 0x54
 8005414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800541c:	f7fa fef2 	bl	8000204 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4b61      	ldr	r3, [pc, #388]	; (80055ac <UART_SetConfig+0x2d4>)
 8005426:	fba3 2302 	umull	r2, r3, r3, r2
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	011c      	lsls	r4, r3, #4
 800542e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800543c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	1891      	adds	r1, r2, r2
 8005446:	64b9      	str	r1, [r7, #72]	; 0x48
 8005448:	415b      	adcs	r3, r3
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005450:	4641      	mov	r1, r8
 8005452:	eb12 0a01 	adds.w	sl, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0b01 	adc.w	fp, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800546c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005470:	4692      	mov	sl, r2
 8005472:	469b      	mov	fp, r3
 8005474:	4643      	mov	r3, r8
 8005476:	eb1a 0303 	adds.w	r3, sl, r3
 800547a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800547e:	464b      	mov	r3, r9
 8005480:	eb4b 0303 	adc.w	r3, fp, r3
 8005484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800549c:	460b      	mov	r3, r1
 800549e:	18db      	adds	r3, r3, r3
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
 80054a2:	4613      	mov	r3, r2
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	647b      	str	r3, [r7, #68]	; 0x44
 80054aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054b2:	f7fa fea7 	bl	8000204 <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	4b3b      	ldr	r3, [pc, #236]	; (80055ac <UART_SetConfig+0x2d4>)
 80054be:	fba3 2301 	umull	r2, r3, r3, r1
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2264      	movs	r2, #100	; 0x64
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	1acb      	subs	r3, r1, r3
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054d2:	4b36      	ldr	r3, [pc, #216]	; (80055ac <UART_SetConfig+0x2d4>)
 80054d4:	fba3 2302 	umull	r2, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054e0:	441c      	add	r4, r3
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80054fc:	415b      	adcs	r3, r3
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005504:	4641      	mov	r1, r8
 8005506:	1851      	adds	r1, r2, r1
 8005508:	6339      	str	r1, [r7, #48]	; 0x30
 800550a:	4649      	mov	r1, r9
 800550c:	414b      	adcs	r3, r1
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800551c:	4659      	mov	r1, fp
 800551e:	00cb      	lsls	r3, r1, #3
 8005520:	4651      	mov	r1, sl
 8005522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005526:	4651      	mov	r1, sl
 8005528:	00ca      	lsls	r2, r1, #3
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	4603      	mov	r3, r0
 8005530:	4642      	mov	r2, r8
 8005532:	189b      	adds	r3, r3, r2
 8005534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005538:	464b      	mov	r3, r9
 800553a:	460a      	mov	r2, r1
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005558:	460b      	mov	r3, r1
 800555a:	18db      	adds	r3, r3, r3
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	4613      	mov	r3, r2
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800556a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800556e:	f7fa fe49 	bl	8000204 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <UART_SetConfig+0x2d4>)
 8005578:	fba3 1302 	umull	r1, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2164      	movs	r1, #100	; 0x64
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	3332      	adds	r3, #50	; 0x32
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <UART_SetConfig+0x2d4>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 0207 	and.w	r2, r3, #7
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4422      	add	r2, r4
 800559e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a0:	e105      	b.n	80057ae <UART_SetConfig+0x4d6>
 80055a2:	bf00      	nop
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055c2:	4642      	mov	r2, r8
 80055c4:	464b      	mov	r3, r9
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	6239      	str	r1, [r7, #32]
 80055ca:	415b      	adcs	r3, r3
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
 80055ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d2:	4641      	mov	r1, r8
 80055d4:	1854      	adds	r4, r2, r1
 80055d6:	4649      	mov	r1, r9
 80055d8:	eb43 0501 	adc.w	r5, r3, r1
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	00eb      	lsls	r3, r5, #3
 80055e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ea:	00e2      	lsls	r2, r4, #3
 80055ec:	4614      	mov	r4, r2
 80055ee:	461d      	mov	r5, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	18e3      	adds	r3, r4, r3
 80055f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055f8:	464b      	mov	r3, r9
 80055fa:	eb45 0303 	adc.w	r3, r5, r3
 80055fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800560e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800561e:	4629      	mov	r1, r5
 8005620:	008b      	lsls	r3, r1, #2
 8005622:	4621      	mov	r1, r4
 8005624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005628:	4621      	mov	r1, r4
 800562a:	008a      	lsls	r2, r1, #2
 800562c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005630:	f7fa fde8 	bl	8000204 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4b60      	ldr	r3, [pc, #384]	; (80057bc <UART_SetConfig+0x4e4>)
 800563a:	fba3 2302 	umull	r2, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	011c      	lsls	r4, r3, #4
 8005642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005646:	2200      	movs	r2, #0
 8005648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800564c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	1891      	adds	r1, r2, r2
 800565a:	61b9      	str	r1, [r7, #24]
 800565c:	415b      	adcs	r3, r3
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005664:	4641      	mov	r1, r8
 8005666:	1851      	adds	r1, r2, r1
 8005668:	6139      	str	r1, [r7, #16]
 800566a:	4649      	mov	r1, r9
 800566c:	414b      	adcs	r3, r1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800567c:	4659      	mov	r1, fp
 800567e:	00cb      	lsls	r3, r1, #3
 8005680:	4651      	mov	r1, sl
 8005682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005686:	4651      	mov	r1, sl
 8005688:	00ca      	lsls	r2, r1, #3
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	4603      	mov	r3, r0
 8005690:	4642      	mov	r2, r8
 8005692:	189b      	adds	r3, r3, r2
 8005694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005698:	464b      	mov	r3, r9
 800569a:	460a      	mov	r2, r1
 800569c:	eb42 0303 	adc.w	r3, r2, r3
 80056a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056bc:	4649      	mov	r1, r9
 80056be:	008b      	lsls	r3, r1, #2
 80056c0:	4641      	mov	r1, r8
 80056c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c6:	4641      	mov	r1, r8
 80056c8:	008a      	lsls	r2, r1, #2
 80056ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056ce:	f7fa fd99 	bl	8000204 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <UART_SetConfig+0x4e4>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a34      	ldr	r2, [pc, #208]	; (80057bc <UART_SetConfig+0x4e4>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f6:	441c      	add	r4, r3
 80056f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fc:	2200      	movs	r2, #0
 80056fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005700:	677a      	str	r2, [r7, #116]	; 0x74
 8005702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005706:	4642      	mov	r2, r8
 8005708:	464b      	mov	r3, r9
 800570a:	1891      	adds	r1, r2, r2
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	415b      	adcs	r3, r3
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005716:	4641      	mov	r1, r8
 8005718:	1851      	adds	r1, r2, r1
 800571a:	6039      	str	r1, [r7, #0]
 800571c:	4649      	mov	r1, r9
 800571e:	414b      	adcs	r3, r1
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800572e:	4659      	mov	r1, fp
 8005730:	00cb      	lsls	r3, r1, #3
 8005732:	4651      	mov	r1, sl
 8005734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005738:	4651      	mov	r1, sl
 800573a:	00ca      	lsls	r2, r1, #3
 800573c:	4610      	mov	r0, r2
 800573e:	4619      	mov	r1, r3
 8005740:	4603      	mov	r3, r0
 8005742:	4642      	mov	r2, r8
 8005744:	189b      	adds	r3, r3, r2
 8005746:	66bb      	str	r3, [r7, #104]	; 0x68
 8005748:	464b      	mov	r3, r9
 800574a:	460a      	mov	r2, r1
 800574c:	eb42 0303 	adc.w	r3, r2, r3
 8005750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	663b      	str	r3, [r7, #96]	; 0x60
 800575c:	667a      	str	r2, [r7, #100]	; 0x64
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800576a:	4649      	mov	r1, r9
 800576c:	008b      	lsls	r3, r1, #2
 800576e:	4641      	mov	r1, r8
 8005770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005774:	4641      	mov	r1, r8
 8005776:	008a      	lsls	r2, r1, #2
 8005778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800577c:	f7fa fd42 	bl	8000204 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <UART_SetConfig+0x4e4>)
 8005786:	fba3 1302 	umull	r1, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2164      	movs	r1, #100	; 0x64
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	3332      	adds	r3, #50	; 0x32
 8005798:	4a08      	ldr	r2, [pc, #32]	; (80057bc <UART_SetConfig+0x4e4>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4422      	add	r2, r4
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ba:	bf00      	nop
 80057bc:	51eb851f 	.word	0x51eb851f

080057c0 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80057d2:	232d      	movs	r3, #45	; 0x2d
 80057d4:	73bb      	strb	r3, [r7, #14]
 80057d6:	e011      	b.n	80057fc <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	b299      	uxth	r1, r3
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	3b2d      	subs	r3, #45	; 0x2d
 80057e0:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <VL53L1X_SensorInit+0xd4>)
 80057e2:	5cd2      	ldrb	r2, [r2, r3]
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f954 	bl	8005a94 <VL53L1_WrByte>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	3301      	adds	r3, #1
 80057fa:	73bb      	strb	r3, [r7, #14]
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	2b87      	cmp	r3, #135	; 0x87
 8005800:	d9ea      	bls.n	80057d8 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f889 	bl	800591c <VL53L1X_StartRanging>
 800580a:	4603      	mov	r3, r0
 800580c:	461a      	mov	r2, r3
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4313      	orrs	r3, r2
 8005812:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8005818:	e00b      	b.n	8005832 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800581a:	f107 020d 	add.w	r2, r7, #13
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f8aa 	bl	800597c <VL53L1X_CheckForDataReady>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	4313      	orrs	r3, r2
 8005830:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8005832:	7b7b      	ldrb	r3, [r7, #13]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f82c 	bl	8005898 <VL53L1X_ClearInterrupt>
 8005840:	4603      	mov	r3, r0
 8005842:	461a      	mov	r2, r3
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	4313      	orrs	r3, r2
 8005848:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f87d 	bl	800594c <VL53L1X_StopRanging>
 8005852:	4603      	mov	r3, r0
 8005854:	461a      	mov	r2, r3
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	4313      	orrs	r3, r2
 800585a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	2209      	movs	r2, #9
 8005860:	2108      	movs	r1, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f916 	bl	8005a94 <VL53L1_WrByte>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	4313      	orrs	r3, r2
 8005870:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2200      	movs	r2, #0
 8005876:	210b      	movs	r1, #11
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f90b 	bl	8005a94 <VL53L1_WrByte>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	4313      	orrs	r3, r2
 8005886:	73fb      	strb	r3, [r7, #15]
	return status;
 8005888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	08005bfc 	.word	0x08005bfc

08005898 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2201      	movs	r2, #1
 80058aa:	2186      	movs	r1, #134	; 0x86
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f8f1 	bl	8005a94 <VL53L1_WrByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	73fb      	strb	r3, [r7, #15]
	return status;
 80058bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	6039      	str	r1, [r7, #0]
 80058d2:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80058d8:	f107 020e 	add.w	r2, r7, #14
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	2130      	movs	r1, #48	; 0x30
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 f903 	bl	8005aec <VL53L1_RdByte>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	701a      	strb	r2, [r3, #0]
	return status;
 8005910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	2187      	movs	r1, #135	; 0x87
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f8af 	bl	8005a94 <VL53L1_WrByte>
 8005936:	4603      	mov	r3, r0
 8005938:	461a      	mov	r2, r3
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	4313      	orrs	r3, r2
 800593e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2200      	movs	r2, #0
 800595e:	2187      	movs	r1, #135	; 0x87
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f897 	bl	8005a94 <VL53L1_WrByte>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	4313      	orrs	r3, r2
 800596e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	6039      	str	r1, [r7, #0]
 8005986:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 800598c:	f107 020d 	add.w	r2, r7, #13
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff97 	bl	80058c8 <VL53L1X_GetInterruptPolarity>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80059a4:	f107 020e 	add.w	r2, r7, #14
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	2131      	movs	r1, #49	; 0x31
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f89d 	bl	8005aec <VL53L1_RdByte>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80059bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	7b7a      	ldrb	r2, [r7, #13]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d103      	bne.n	80059d8 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e002      	b.n	80059de <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80059de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	4603      	mov	r3, r0
 80059f2:	6039      	str	r1, [r7, #0]
 80059f4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80059fe:	f107 020e 	add.w	r2, r7, #14
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	21e5      	movs	r1, #229	; 0xe5
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f870 	bl	8005aec <VL53L1_RdByte>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8005a16:	7bba      	ldrb	r2, [r7, #14]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	701a      	strb	r2, [r3, #0]
	return status;
 8005a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	4603      	mov	r3, r0
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	89f9      	ldrh	r1, [r7, #14]
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	9200      	str	r2, [sp, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4805      	ldr	r0, [pc, #20]	; (8005a58 <_I2CWrite+0x30>)
 8005a44:	f7fb fd94 	bl	8001570 <HAL_I2C_Master_Transmit>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005a4c:	697b      	ldr	r3, [r7, #20]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000028 	.word	0x20000028

08005a5c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	4603      	mov	r3, r0
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	b299      	uxth	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	220a      	movs	r2, #10
 8005a78:	9200      	str	r2, [sp, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4804      	ldr	r0, [pc, #16]	; (8005a90 <_I2CRead+0x34>)
 8005a7e:	f7fb fe75 	bl	800176c <HAL_I2C_Master_Receive>
 8005a82:	4603      	mov	r3, r0
 8005a84:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005a86:	697b      	ldr	r3, [r7, #20]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000028 	.word	0x20000028

08005a94 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	80bb      	strh	r3, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005aaa:	88bb      	ldrh	r3, [r7, #4]
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <VL53L1_WrByte+0x54>)
 8005ab4:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005ab6:	88bb      	ldrh	r3, [r7, #4]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <VL53L1_WrByte+0x54>)
 8005abc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <VL53L1_WrByte+0x54>)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	4907      	ldr	r1, [pc, #28]	; (8005ae8 <VL53L1_WrByte+0x54>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ffac 	bl	8005a28 <_I2CWrite>
 8005ad0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005ad8:	23f3      	movs	r3, #243	; 0xf3
 8005ada:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8005adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	200000c4 	.word	0x200000c4

08005aec <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	603a      	str	r2, [r7, #0]
 8005af6:	80fb      	strh	r3, [r7, #6]
 8005af8:	460b      	mov	r3, r1
 8005afa:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005b00:	88bb      	ldrh	r3, [r7, #4]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <VL53L1_RdByte+0x6c>)
 8005b0a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005b0c:	88bb      	ldrh	r3, [r7, #4]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <VL53L1_RdByte+0x6c>)
 8005b12:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	2202      	movs	r2, #2
 8005b18:	490f      	ldr	r1, [pc, #60]	; (8005b58 <VL53L1_RdByte+0x6c>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ff84 	bl	8005a28 <_I2CWrite>
 8005b20:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005b28:	23f3      	movs	r3, #243	; 0xf3
 8005b2a:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005b2c:	e00d      	b.n	8005b4a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	2201      	movs	r2, #1
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff91 	bl	8005a5c <_I2CRead>
 8005b3a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005b42:	23f3      	movs	r3, #243	; 0xf3
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e000      	b.n	8005b4a <VL53L1_RdByte+0x5e>
    }
done:
 8005b48:	bf00      	nop
    return Status;
 8005b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200000c4 	.word	0x200000c4

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	; (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	; (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f000 f820 	bl	8005bb4 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08005c60 	.word	0x08005c60
 8005b98:	08005c60 	.word	0x08005c60
 8005b9c:	08005c60 	.word	0x08005c60
 8005ba0:	08005c64 	.word	0x08005c64

08005ba4 <memset>:
 8005ba4:	4402      	add	r2, r0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d100      	bne.n	8005bae <memset+0xa>
 8005bac:	4770      	bx	lr
 8005bae:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb2:	e7f9      	b.n	8005ba8 <memset+0x4>

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
