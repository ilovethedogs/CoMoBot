
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003854  08003854  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800385c  0800385c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003870  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003870  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b24  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171e  00000000  00000000  00028b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211be  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa24  00000000  00000000  0004c32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8be6  00000000  00000000  00056d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f64  00000000  00000000  0011f988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003824 	.word	0x08003824

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003824 	.word	0x08003824

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 f9fe 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f806 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f89e 	bl	8000654 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f86e 	bl	80005f8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x14>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f970 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <SystemClock_Config+0xd0>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd4>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fe71 	bl	8003290 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b4:	f000 f8a2 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fb24 	bl	8002c24 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e2:	f000 f88b 	bl	80006fc <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f000 fcd5 	bl	8000fe4 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f85c 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40005400 	.word	0x40005400
 8000650:	00061a80 	.word	0x00061a80

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_GPIO_Init+0xa0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <MX_GPIO_Init+0xa0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_GPIO_Init+0xa0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_GPIO_Init+0xa0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xa0>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xa0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_GPIO_Init+0xa0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xa0>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_GPIO_Init+0xa0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <MX_GPIO_Init+0xa4>)
 80006d6:	f000 facd 	bl	8000c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2017      	movs	r0, #23
 80006e0:	f000 fa61 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006e4:	2017      	movs	r0, #23
 80006e6:	f000 fa7a 	bl	8000bde <HAL_NVIC_EnableIRQ>

}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020400 	.word	0x40020400

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <HAL_I2C_MspInit+0xa4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d13b      	bne.n	80007f2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000796:	23c0      	movs	r3, #192	; 0xc0
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079a:	2312      	movs	r3, #18
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a6:	2304      	movs	r3, #4
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <HAL_I2C_MspInit+0xac>)
 80007b2:	f000 fa5f 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 80007c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_I2C_MspInit+0xa8>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	201f      	movs	r0, #31
 80007d8:	f000 f9e5 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007dc:	201f      	movs	r0, #31
 80007de:	f000 f9fe 	bl	8000bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2020      	movs	r0, #32
 80007e8:	f000 f9dd 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007ec:	2020      	movs	r0, #32
 80007ee:	f000 f9f6 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40005400 	.word	0x40005400
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f8ac 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000860:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000864:	f000 fb9a 	bl	8000f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <I2C1_EV_IRQHandler+0x10>)
 8000872:	f000 fcfb 	bl	800126c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <I2C1_ER_IRQHandler+0x10>)
 8000886:	f000 fe62 	bl	800154e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000028 	.word	0x20000028

08000894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008be:	490e      	ldr	r1, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d4:	4c0b      	ldr	r4, [pc, #44]	; (8000904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e2:	f7ff ffd7 	bl	8000894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f002 ff71 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fe0d 	bl	8000508 <main>
  bx  lr    
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008fc:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000900:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000904:	20000080 	.word	0x20000080

08000908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <HAL_Init+0x40>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_Init+0x40>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x40>)
 800092e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f92b 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fee2 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023c00 	.word	0x40023c00

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f943 	bl	8000bfa <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f90b 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	2000007c 	.word	0x2000007c

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000007c 	.word	0x2000007c

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d004      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00c      	b.n	8000c4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2205      	movs	r2, #5
 8000c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0201 	bic.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c64:	b2db      	uxtb	r3, r3
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e165      	b.n	8000f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8154 	bne.w	8000f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d005      	beq.n	8000cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d130      	bne.n	8000d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	091b      	lsrs	r3, r3, #4
 8000d12:	f003 0201 	and.w	r2, r3, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d017      	beq.n	8000d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80ae 	beq.w	8000f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a5c      	ldr	r2, [pc, #368]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a58      	ldr	r2, [pc, #352]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x21a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x216>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4d      	ldr	r2, [pc, #308]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x212>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_GPIO_Init+0x314>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x20e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	; (8000f8c <HAL_GPIO_Init+0x318>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x20a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4a      	ldr	r2, [pc, #296]	; (8000f90 <HAL_GPIO_Init+0x31c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x202>
 8000e72:	2306      	movs	r3, #6
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x21c>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea0:	4935      	ldr	r1, [pc, #212]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	f67f ae96 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40013c00 	.word	0x40013c00

08000f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f806 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013c00 	.word	0x40013c00

08000fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e12b      	b.n	800124e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fba4 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001048:	f001 fede 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a81      	ldr	r2, [pc, #516]	; (8001258 <HAL_I2C_Init+0x274>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d807      	bhi.n	8001068 <HAL_I2C_Init+0x84>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a80      	ldr	r2, [pc, #512]	; (800125c <HAL_I2C_Init+0x278>)
 800105c:	4293      	cmp	r3, r2
 800105e:	bf94      	ite	ls
 8001060:	2301      	movls	r3, #1
 8001062:	2300      	movhi	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e006      	b.n	8001076 <HAL_I2C_Init+0x92>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a7d      	ldr	r2, [pc, #500]	; (8001260 <HAL_I2C_Init+0x27c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	bf94      	ite	ls
 8001070:	2301      	movls	r3, #1
 8001072:	2300      	movhi	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0e7      	b.n	800124e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a78      	ldr	r2, [pc, #480]	; (8001264 <HAL_I2C_Init+0x280>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a6a      	ldr	r2, [pc, #424]	; (8001258 <HAL_I2C_Init+0x274>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <HAL_I2C_Init+0xd4>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	e009      	b.n	80010cc <HAL_I2C_Init+0xe8>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a69      	ldr	r2, [pc, #420]	; (8001268 <HAL_I2C_Init+0x284>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	495c      	ldr	r1, [pc, #368]	; (8001258 <HAL_I2C_Init+0x274>)
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d819      	bhi.n	8001120 <HAL_I2C_Init+0x13c>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fa:	1c59      	adds	r1, r3, #1
 80010fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001100:	400b      	ands	r3, r1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00a      	beq.n	800111c <HAL_I2C_Init+0x138>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1e59      	subs	r1, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fbb1 f3f3 	udiv	r3, r1, r3
 8001114:	3301      	adds	r3, #1
 8001116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111a:	e051      	b.n	80011c0 <HAL_I2C_Init+0x1dc>
 800111c:	2304      	movs	r3, #4
 800111e:	e04f      	b.n	80011c0 <HAL_I2C_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d111      	bne.n	800114c <HAL_I2C_Init+0x168>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	440b      	add	r3, r1
 8001136:	fbb0 f3f3 	udiv	r3, r0, r3
 800113a:	3301      	adds	r3, #1
 800113c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e012      	b.n	8001172 <HAL_I2C_Init+0x18e>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1e58      	subs	r0, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6859      	ldr	r1, [r3, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	0099      	lsls	r1, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001162:	3301      	adds	r3, #1
 8001164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf0c      	ite	eq
 800116c:	2301      	moveq	r3, #1
 800116e:	2300      	movne	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Init+0x196>
 8001176:	2301      	movs	r3, #1
 8001178:	e022      	b.n	80011c0 <HAL_I2C_Init+0x1dc>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10e      	bne.n	80011a0 <HAL_I2C_Init+0x1bc>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1e58      	subs	r0, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	440b      	add	r3, r1
 8001190:	fbb0 f3f3 	udiv	r3, r0, r3
 8001194:	3301      	adds	r3, #1
 8001196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119e:	e00f      	b.n	80011c0 <HAL_I2C_Init+0x1dc>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	0099      	lsls	r1, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	6809      	ldr	r1, [r1, #0]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6911      	ldr	r1, [r2, #16]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68d2      	ldr	r2, [r2, #12]
 80011fa:	4311      	orrs	r1, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	430b      	orrs	r3, r1
 8001202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2220      	movs	r2, #32
 800123a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	000186a0 	.word	0x000186a0
 800125c:	001e847f 	.word	0x001e847f
 8001260:	003d08ff 	.word	0x003d08ff
 8001264:	431bde83 	.word	0x431bde83
 8001268:	10624dd3 	.word	0x10624dd3

0800126c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800128c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001294:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b10      	cmp	r3, #16
 800129a:	d003      	beq.n	80012a4 <HAL_I2C_EV_IRQHandler+0x38>
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	f040 80c1 	bne.w	8001426 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_I2C_EV_IRQHandler+0x6e>
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80012c4:	d003      	beq.n	80012ce <HAL_I2C_EV_IRQHandler+0x62>
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80012cc:	d101      	bne.n	80012d2 <HAL_I2C_EV_IRQHandler+0x66>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_I2C_EV_IRQHandler+0x68>
 80012d2:	2300      	movs	r3, #0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f000 8132 	beq.w	800153e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <HAL_I2C_EV_IRQHandler+0x92>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	0a5b      	lsrs	r3, r3, #9
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f001 fc7b 	bl	8002bec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fd83 	bl	8001e02 <I2C_Master_SB>
 80012fc:	e092      	b.n	8001424 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <HAL_I2C_EV_IRQHandler+0xb2>
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	0a5b      	lsrs	r3, r3, #9
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fdf9 	bl	8001f0e <I2C_Master_ADD10>
 800131c:	e082      	b.n	8001424 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_I2C_EV_IRQHandler+0xd2>
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	0a5b      	lsrs	r3, r3, #9
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fe13 	bl	8001f62 <I2C_Master_ADDR>
 800133c:	e072      	b.n	8001424 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d03b      	beq.n	80013c2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001358:	f000 80f3 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	09db      	lsrs	r3, r3, #7
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00f      	beq.n	8001388 <HAL_I2C_EV_IRQHandler+0x11c>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	0a9b      	lsrs	r3, r3, #10
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <HAL_I2C_EV_IRQHandler+0x11c>
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f9f3 	bl	800176c <I2C_MasterTransmit_TXE>
 8001386:	e04d      	b.n	8001424 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80d6 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	0a5b      	lsrs	r3, r3, #9
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80cf 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	2b21      	cmp	r3, #33	; 0x21
 80013a8:	d103      	bne.n	80013b2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fa7a 	bl	80018a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013b0:	e0c7      	b.n	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b40      	cmp	r3, #64	; 0x40
 80013b6:	f040 80c4 	bne.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fae8 	bl	8001990 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013c0:	e0bf      	b.n	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013d0:	f000 80b7 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	099b      	lsrs	r3, r3, #6
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00f      	beq.n	8001400 <HAL_I2C_EV_IRQHandler+0x194>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	0a9b      	lsrs	r3, r3, #10
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_I2C_EV_IRQHandler+0x194>
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fb5d 	bl	8001ab8 <I2C_MasterReceive_RXNE>
 80013fe:	e011      	b.n	8001424 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 809a 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	0a5b      	lsrs	r3, r3, #9
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8093 	beq.w	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fc06 	bl	8001c2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001422:	e08e      	b.n	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001424:	e08d      	b.n	8001542 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e007      	b.n	8001448 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <HAL_I2C_EV_IRQHandler+0x20e>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	0a5b      	lsrs	r3, r3, #9
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 ffc4 	bl	8002400 <I2C_Slave_ADDR>
 8001478:	e066      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_I2C_EV_IRQHandler+0x22e>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	0a5b      	lsrs	r3, r3, #9
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fffe 	bl	8002494 <I2C_Slave_STOPF>
 8001498:	e056      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	2b21      	cmp	r3, #33	; 0x21
 800149e:	d002      	beq.n	80014a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	2b29      	cmp	r3, #41	; 0x29
 80014a4:	d125      	bne.n	80014f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	09db      	lsrs	r3, r3, #7
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00f      	beq.n	80014d2 <HAL_I2C_EV_IRQHandler+0x266>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	0a9b      	lsrs	r3, r3, #10
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_I2C_EV_IRQHandler+0x266>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 feda 	bl	8002284 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014d0:	e039      	b.n	8001546 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d033      	beq.n	8001546 <HAL_I2C_EV_IRQHandler+0x2da>
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	0a5b      	lsrs	r3, r3, #9
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d02d      	beq.n	8001546 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 ff07 	bl	80022fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014f0:	e029      	b.n	8001546 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00f      	beq.n	800151e <HAL_I2C_EV_IRQHandler+0x2b2>
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	0a9b      	lsrs	r3, r3, #10
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_I2C_EV_IRQHandler+0x2b2>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 ff12 	bl	8002340 <I2C_SlaveReceive_RXNE>
 800151c:	e014      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00e      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	0a5b      	lsrs	r3, r3, #9
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 ff40 	bl	80023bc <I2C_SlaveReceive_BTF>
 800153c:	e004      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800153e:	bf00      	nop
 8001540:	e002      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001542:	bf00      	nop
 8001544:	e000      	b.n	8001548 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001546:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b08a      	sub	sp, #40	; 0x28
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001570:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <HAL_I2C_ER_IRQHandler+0x4e>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800159a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00e      	beq.n	80015c6 <HAL_I2C_ER_IRQHandler+0x78>
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80015c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	0a9b      	lsrs	r3, r3, #10
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03f      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x104>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d039      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80015de:	7efb      	ldrb	r3, [r7, #27]
 80015e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80015f8:	7ebb      	ldrb	r3, [r7, #26]
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d112      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xd6>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xd6>
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	2b21      	cmp	r3, #33	; 0x21
 8001608:	d008      	beq.n	800161c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	2b29      	cmp	r3, #41	; 0x29
 800160e:	d005      	beq.n	800161c <HAL_I2C_ER_IRQHandler+0xce>
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b28      	cmp	r3, #40	; 0x28
 8001614:	d106      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b21      	cmp	r3, #33	; 0x21
 800161a:	d103      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 f869 	bl	80026f4 <I2C_Slave_AF>
 8001622:	e016      	b.n	8001652 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800162c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	2b10      	cmp	r3, #16
 800163a:	d002      	beq.n	8001642 <HAL_I2C_ER_IRQHandler+0xf4>
 800163c:	7efb      	ldrb	r3, [r7, #27]
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d107      	bne.n	8001652 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001650:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	0adb      	lsrs	r3, r3, #11
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x12e>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800167a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 f8a0 	bl	80027d4 <I2C_ITError>
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
 80016f8:	4613      	mov	r3, r2
 80016fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001782:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	d150      	bne.n	8001834 <I2C_MasterTransmit_TXE+0xc8>
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b21      	cmp	r3, #33	; 0x21
 8001796:	d14d      	bne.n	8001834 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d01d      	beq.n	80017da <I2C_MasterTransmit_TXE+0x6e>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d01a      	beq.n	80017da <I2C_MasterTransmit_TXE+0x6e>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017aa:	d016      	beq.n	80017da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2211      	movs	r2, #17
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff62 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017d8:	e060      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b40      	cmp	r3, #64	; 0x40
 8001812:	d107      	bne.n	8001824 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff7d 	bl	800171c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001822:	e03b      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff35 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001832:	e033      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b21      	cmp	r3, #33	; 0x21
 8001838:	d005      	beq.n	8001846 <I2C_MasterTransmit_TXE+0xda>
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d12d      	bne.n	800189c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b22      	cmp	r3, #34	; 0x22
 8001844:	d12a      	bne.n	800189c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001860:	e01c      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b40      	cmp	r3, #64	; 0x40
 800186c:	d103      	bne.n	8001876 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f88e 	bl	8001990 <I2C_MemoryTransmit_TXE_BTF>
}
 8001874:	e012      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800189a:	e7ff      	b.n	800189c <I2C_MasterTransmit_TXE+0x130>
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b21      	cmp	r3, #33	; 0x21
 80018bc:	d164      	bne.n	8001988 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d012      	beq.n	80018ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80018ec:	e04c      	b.n	8001988 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d01d      	beq.n	8001930 <I2C_MasterTransmit_BTF+0x8c>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d01a      	beq.n	8001930 <I2C_MasterTransmit_BTF+0x8c>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001900:	d016      	beq.n	8001930 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001910:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2211      	movs	r2, #17
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff feb7 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
}
 800192e:	e02b      	b.n	8001988 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800193e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d107      	bne.n	800197a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fed2 	bl	800171c <HAL_I2C_MemTxCpltCallback>
}
 8001978:	e006      	b.n	8001988 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fe8a 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11d      	bne.n	80019e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d10b      	bne.n	80019c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c0:	1c9a      	adds	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80019c6:	e073      	b.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	121b      	asrs	r3, r3, #8
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019e2:	e065      	b.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10b      	bne.n	8001a04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a02:	e055      	b.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d151      	bne.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b22      	cmp	r3, #34	; 0x22
 8001a10:	d10d      	bne.n	8001a2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a2c:	e040      	b.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b21      	cmp	r3, #33	; 0x21
 8001a3c:	d112      	bne.n	8001a64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a62:	e025      	b.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d120      	bne.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b21      	cmp	r3, #33	; 0x21
 8001a72:	d11d      	bne.n	8001ab0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fe36 	bl	800171c <HAL_I2C_MemTxCpltCallback>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b22      	cmp	r3, #34	; 0x22
 8001aca:	f040 80ac 	bne.w	8001c26 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d921      	bls.n	8001b20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	f040 808c 	bne.w	8001c26 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001b1e:	e082      	b.n	8001c26 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d075      	beq.n	8001c14 <I2C_MasterReceive_RXNE+0x15c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d002      	beq.n	8001b34 <I2C_MasterReceive_RXNE+0x7c>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d16f      	bne.n	8001c14 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 f827 	bl	8002b88 <I2C_WaitOnSTOPRequestThroughIT>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d142      	bne.n	8001bc6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	d10a      	bne.n	8001bb0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fdc1 	bl	8001730 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bae:	e03a      	b.n	8001c26 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2212      	movs	r2, #18
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd76 	bl	80016b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bc4:	e02f      	b.n	8001c26 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fd99 	bl	8001744 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c12:	e008      	b.n	8001c26 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	e7ff      	b.n	8001c26 <I2C_MasterReceive_RXNE+0x16e>
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d11b      	bne.n	8001c7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001c7c:	e0bd      	b.n	8001dfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d129      	bne.n	8001cdc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d00a      	beq.n	8001cb4 <I2C_MasterReceive_BTF+0x86>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d007      	beq.n	8001cb4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cda:	e08e      	b.n	8001dfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d176      	bne.n	8001dd4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d002      	beq.n	8001cf2 <I2C_MasterReceive_BTF+0xc4>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d108      	bne.n	8001d04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e019      	b.n	8001d38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <I2C_MasterReceive_BTF+0xe2>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d108      	bne.n	8001d22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e00a      	b.n	8001d38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d007      	beq.n	8001d38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d10a      	bne.n	8001dbe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fcba 	bl	8001730 <HAL_I2C_MemRxCpltCallback>
}
 8001dbc:	e01d      	b.n	8001dfa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2212      	movs	r2, #18
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fc6f 	bl	80016b0 <HAL_I2C_MasterRxCpltCallback>
}
 8001dd2:	e012      	b.n	8001dfa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d117      	bne.n	8001e46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001e30:	e067      	b.n	8001f02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	e05d      	b.n	8001f02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4e:	d133      	bne.n	8001eb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b21      	cmp	r3, #33	; 0x21
 8001e5a:	d109      	bne.n	8001e70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	e008      	b.n	8001e82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <I2C_Master_SB+0x92>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d108      	bne.n	8001ea6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d032      	beq.n	8001f02 <I2C_Master_SB+0x100>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02d      	beq.n	8001f02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb4:	605a      	str	r2, [r3, #4]
}
 8001eb6:	e024      	b.n	8001f02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10e      	bne.n	8001ede <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	11db      	asrs	r3, r3, #7
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0306 	and.w	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f063 030f 	orn	r3, r3, #15
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
}
 8001edc:	e011      	b.n	8001f02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10d      	bne.n	8001f02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	11db      	asrs	r3, r3, #7
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0306 	and.w	r3, r3, #6
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f063 030e 	orn	r3, r3, #14
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	611a      	str	r2, [r3, #16]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <I2C_Master_ADD10+0x26>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <I2C_Master_ADD10+0x48>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f54:	605a      	str	r2, [r3, #4]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b091      	sub	sp, #68	; 0x44
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b22      	cmp	r3, #34	; 0x22
 8001f8a:	f040 8169 	bne.w	8002260 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <I2C_Master_ADDR+0x54>
 8001f96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d10b      	bne.n	8001fb6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	e160      	b.n	8002278 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11d      	bne.n	8001ffa <I2C_Master_ADDR+0x98>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fc6:	d118      	bne.n	8001ffa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff8:	e13e      	b.n	8002278 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d113      	bne.n	800202c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e115      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	f040 808a 	bne.w	800214c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203e:	d137      	bne.n	80020b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800205e:	d113      	bne.n	8002088 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	e0e7      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e0d3      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d02e      	beq.n	8002114 <I2C_Master_ADDR+0x1b2>
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d02b      	beq.n	8002114 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d102      	bne.n	80020c8 <I2C_Master_ADDR+0x166>
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d125      	bne.n	8002114 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d00e      	beq.n	80020ec <I2C_Master_ADDR+0x18a>
 80020ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d00b      	beq.n	80020ec <I2C_Master_ADDR+0x18a>
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d008      	beq.n	80020ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e007      	b.n	80020fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	e0a1      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002122:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e085      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d14d      	bne.n	80021f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002158:	2b04      	cmp	r3, #4
 800215a:	d016      	beq.n	800218a <I2C_Master_ADDR+0x228>
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215e:	2b02      	cmp	r3, #2
 8002160:	d013      	beq.n	800218a <I2C_Master_ADDR+0x228>
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	2b10      	cmp	r3, #16
 8002166:	d010      	beq.n	800218a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002176:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a8:	d117      	bne.n	80021da <I2C_Master_ADDR+0x278>
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b0:	d00b      	beq.n	80021ca <I2C_Master_ADDR+0x268>
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d008      	beq.n	80021ca <I2C_Master_ADDR+0x268>
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d005      	beq.n	80021ca <I2C_Master_ADDR+0x268>
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d002      	beq.n	80021ca <I2C_Master_ADDR+0x268>
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d107      	bne.n	80021da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	e032      	b.n	8002258 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002210:	d117      	bne.n	8002242 <I2C_Master_ADDR+0x2e0>
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002218:	d00b      	beq.n	8002232 <I2C_Master_ADDR+0x2d0>
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	2b01      	cmp	r3, #1
 800221e:	d008      	beq.n	8002232 <I2C_Master_ADDR+0x2d0>
 8002220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002222:	2b08      	cmp	r3, #8
 8002224:	d005      	beq.n	8002232 <I2C_Master_ADDR+0x2d0>
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	2b10      	cmp	r3, #16
 800222a:	d002      	beq.n	8002232 <I2C_Master_ADDR+0x2d0>
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	2b20      	cmp	r3, #32
 8002230:	d107      	bne.n	8002242 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002240:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800225e:	e00b      	b.n	8002278 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
}
 8002276:	e7ff      	b.n	8002278 <I2C_Master_ADDR+0x316>
 8002278:	bf00      	nop
 800227a:	3744      	adds	r7, #68	; 0x44
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d02b      	beq.n	80022f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d114      	bne.n	80022f6 <I2C_SlaveTransmit_TXE+0x72>
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b29      	cmp	r3, #41	; 0x29
 80022d0:	d111      	bne.n	80022f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2228      	movs	r2, #40	; 0x28
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff f9e7 	bl	80016c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d011      	beq.n	8002334 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02c      	beq.n	80023b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d114      	bne.n	80023b4 <I2C_SlaveReceive_RXNE+0x74>
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b2a      	cmp	r3, #42	; 0x2a
 800238e:	d111      	bne.n	80023b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2222      	movs	r2, #34	; 0x22
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2228      	movs	r2, #40	; 0x28
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff f992 	bl	80016d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d012      	beq.n	80023f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800241a:	2b28      	cmp	r3, #40	; 0x28
 800241c:	d127      	bne.n	800246e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	09db      	lsrs	r3, r3, #7
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	81bb      	strh	r3, [r7, #12]
 8002450:	e002      	b.n	8002458 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002460:	89ba      	ldrh	r2, [r7, #12]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff f940 	bl	80016ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800246c:	e00e      	b.n	800248c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f0:	d172      	bne.n	80025d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b22      	cmp	r3, #34	; 0x22
 80024f6:	d002      	beq.n	80024fe <I2C_Slave_STOPF+0x6a>
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b2a      	cmp	r3, #42	; 0x2a
 80024fc:	d135      	bne.n	800256a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002530:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fb8d 	bl	8000c56 <HAL_DMA_GetState>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d049      	beq.n	80025d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <I2C_Slave_STOPF+0x258>)
 8002548:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fb5f 	bl	8000c12 <HAL_DMA_Abort_IT>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03d      	beq.n	80025d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002564:	4610      	mov	r0, r2
 8002566:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002568:	e035      	b.n	80025d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fb57 	bl	8000c56 <HAL_DMA_GetState>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d014      	beq.n	80025d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <I2C_Slave_STOPF+0x258>)
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fb29 	bl	8000c12 <HAL_DMA_Abort_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3
 80025d4:	e000      	b.n	80025d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03e      	beq.n	8002660 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d112      	bne.n	8002616 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d112      	bne.n	800264a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f8b3 	bl	80027d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800266e:	e039      	b.n	80026e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b2a      	cmp	r3, #42	; 0x2a
 8002674:	d109      	bne.n	800268a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2228      	movs	r2, #40	; 0x28
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff f827 	bl	80016d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b28      	cmp	r3, #40	; 0x28
 8002694:	d111      	bne.n	80026ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <I2C_Slave_STOPF+0x25c>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff f828 	bl	8001708 <HAL_I2C_ListenCpltCallback>
}
 80026b8:	e014      	b.n	80026e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	2b22      	cmp	r3, #34	; 0x22
 80026c0:	d002      	beq.n	80026c8 <I2C_Slave_STOPF+0x234>
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b22      	cmp	r3, #34	; 0x22
 80026c6:	d10d      	bne.n	80026e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fffa 	bl	80016d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	08002a39 	.word	0x08002a39
 80026f0:	ffff0000 	.word	0xffff0000

080026f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d002      	beq.n	8002716 <I2C_Slave_AF+0x22>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d129      	bne.n	800276a <I2C_Slave_AF+0x76>
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b28      	cmp	r3, #40	; 0x28
 800271a:	d126      	bne.n	800276a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <I2C_Slave_AF+0xdc>)
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002730:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800273a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe ffd0 	bl	8001708 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002768:	e02e      	b.n	80027c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b21      	cmp	r3, #33	; 0x21
 800276e:	d126      	bne.n	80027be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <I2C_Slave_AF+0xdc>)
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2221      	movs	r2, #33	; 0x21
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800279a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe ff84 	bl	80016c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80027bc:	e004      	b.n	80027c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c6:	615a      	str	r2, [r3, #20]
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	ffff0000 	.word	0xffff0000

080027d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d002      	beq.n	80027f8 <I2C_ITError+0x24>
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d10a      	bne.n	800280e <I2C_ITError+0x3a>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b22      	cmp	r3, #34	; 0x22
 80027fc:	d107      	bne.n	800280e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002814:	2b28      	cmp	r3, #40	; 0x28
 8002816:	d107      	bne.n	8002828 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2228      	movs	r2, #40	; 0x28
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002826:	e015      	b.n	8002854 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002836:	d00a      	beq.n	800284e <I2C_ITError+0x7a>
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b60      	cmp	r3, #96	; 0x60
 800283c:	d007      	beq.n	800284e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002862:	d162      	bne.n	800292a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002872:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d020      	beq.n	80028c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <I2C_ITError+0x25c>)
 8002888:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe f9bf 	bl	8000c12 <HAL_DMA_Abort_IT>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8089 	beq.w	80029ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028be:	4610      	mov	r0, r2
 80028c0:	4798      	blx	r3
 80028c2:	e074      	b.n	80029ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	4a59      	ldr	r2, [pc, #356]	; (8002a30 <I2C_ITError+0x25c>)
 80028ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe f99e 	bl	8000c12 <HAL_DMA_Abort_IT>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d068      	beq.n	80029ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10b      	bne.n	8002902 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002924:	4610      	mov	r0, r2
 8002926:	4798      	blx	r3
 8002928:	e041      	b.n	80029ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b60      	cmp	r3, #96	; 0x60
 8002934:	d125      	bne.n	8002982 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d10b      	bne.n	800296a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe feec 	bl	8001758 <HAL_I2C_AbortCpltCallback>
 8002980:	e015      	b.n	80029ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d10b      	bne.n	80029a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fecb 	bl	8001744 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d113      	bne.n	8002a28 <I2C_ITError+0x254>
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b28      	cmp	r3, #40	; 0x28
 8002a04:	d110      	bne.n	8002a28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <I2C_ITError+0x260>)
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fe70 	bl	8001708 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	ffff0000 	.word	0xffff0000

08002a38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <I2C_DMAAbort+0x148>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <I2C_DMAAbort+0x14c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a1a      	lsrs	r2, r3, #8
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00da      	lsls	r2, r3, #3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002a7e:	e00a      	b.n	8002a96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a94:	d0ea      	beq.n	8002a6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	2200      	movs	r2, #0
 8002ada:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2200      	movs	r2, #0
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d10e      	bne.n	8002b26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7fe fe1a 	bl	8001758 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b24:	e027      	b.n	8002b76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b2c:	2b28      	cmp	r3, #40	; 0x28
 8002b2e:	d117      	bne.n	8002b60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2228      	movs	r2, #40	; 0x28
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b5e:	e007      	b.n	8002b70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f7fe fde7 	bl	8001744 <HAL_I2C_ErrorCallback>
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	14f8b589 	.word	0x14f8b589

08002b88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0a1a      	lsrs	r2, r3, #8
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e008      	b.n	8002bd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd4:	d0e9      	beq.n	8002baa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	20000000 	.word	0x20000000
 8002be8:	14f8b589 	.word	0x14f8b589

08002bec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002bfc:	d103      	bne.n	8002c06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c04:	e007      	b.n	8002c16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c0e:	d102      	bne.n	8002c16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2208      	movs	r2, #8
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fd fe60 	bl	80009d8 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fd fe5c 	bl	80009d8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f841 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fdc0 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	0800383c 	.word	0x0800383c
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e0c:	f7ff fff0 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	0800384c 	.word	0x0800384c

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b0ae      	sub	sp, #184	; 0xb8
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4bcb      	ldr	r3, [pc, #812]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	f200 8206 	bhi.w	8003270 <HAL_RCC_GetSysClockFreq+0x440>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08003271 	.word	0x08003271
 8002e74:	08003271 	.word	0x08003271
 8002e78:	08003271 	.word	0x08003271
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08003271 	.word	0x08003271
 8002e84:	08003271 	.word	0x08003271
 8002e88:	08003271 	.word	0x08003271
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08003271 	.word	0x08003271
 8002e94:	08003271 	.word	0x08003271
 8002e98:	08003271 	.word	0x08003271
 8002e9c:	080030a1 	.word	0x080030a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4bb9      	ldr	r3, [pc, #740]	; (8003188 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ea6:	e1e7      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea8:	4bb8      	ldr	r3, [pc, #736]	; (800318c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eae:	e1e3      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4bb4      	ldr	r3, [pc, #720]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4bb1      	ldr	r3, [pc, #708]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d071      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4bae      	ldr	r3, [pc, #696]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	647b      	str	r3, [r7, #68]	; 0x44
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f20:	4649      	mov	r1, r9
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1a51      	subs	r1, r2, r1
 8002f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f34:	4649      	mov	r1, r9
 8002f36:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f48:	4649      	mov	r1, r9
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4641      	mov	r1, r8
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
 8002f62:	462b      	mov	r3, r5
 8002f64:	460a      	mov	r2, r1
 8002f66:	eb42 0303 	adc.w	r3, r2, r3
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f78:	4629      	mov	r1, r5
 8002f7a:	024b      	lsls	r3, r1, #9
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f82:	4621      	mov	r1, r4
 8002f84:	024a      	lsls	r2, r1, #9
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f9c:	f7fd f932 	bl	8000204 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002faa:	e067      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003000:	4649      	mov	r1, r9
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4641      	mov	r1, r8
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4641      	mov	r1, r8
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4641      	mov	r1, r8
 8003010:	ebb2 0a01 	subs.w	sl, r2, r1
 8003014:	4649      	mov	r1, r9
 8003016:	eb63 0b01 	sbc.w	fp, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800302a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800302e:	4692      	mov	sl, r2
 8003030:	469b      	mov	fp, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb1a 0303 	adds.w	r3, sl, r3
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	462b      	mov	r3, r5
 800303c:	eb4b 0303 	adc.w	r3, fp, r3
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	2200      	movs	r2, #0
 8003066:	673b      	str	r3, [r7, #112]	; 0x70
 8003068:	677a      	str	r2, [r7, #116]	; 0x74
 800306a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800306e:	f7fd f8c9 	bl	8000204 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309e:	e0eb      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d06b      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	2200      	movs	r2, #0
 80030c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	663b      	str	r3, [r7, #96]	; 0x60
 80030cc:	2300      	movs	r3, #0
 80030ce:	667b      	str	r3, [r7, #100]	; 0x64
 80030d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e6:	0150      	lsls	r0, r2, #5
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4621      	mov	r1, r4
 80030ee:	1a51      	subs	r1, r2, r1
 80030f0:	61b9      	str	r1, [r7, #24]
 80030f2:	4629      	mov	r1, r5
 80030f4:	eb63 0301 	sbc.w	r3, r3, r1
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003106:	4659      	mov	r1, fp
 8003108:	018b      	lsls	r3, r1, #6
 800310a:	4651      	mov	r1, sl
 800310c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003110:	4651      	mov	r1, sl
 8003112:	018a      	lsls	r2, r1, #6
 8003114:	4651      	mov	r1, sl
 8003116:	ebb2 0801 	subs.w	r8, r2, r1
 800311a:	4659      	mov	r1, fp
 800311c:	eb63 0901 	sbc.w	r9, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003134:	4690      	mov	r8, r2
 8003136:	4699      	mov	r9, r3
 8003138:	4623      	mov	r3, r4
 800313a:	eb18 0303 	adds.w	r3, r8, r3
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003154:	4629      	mov	r1, r5
 8003156:	024b      	lsls	r3, r1, #9
 8003158:	4621      	mov	r1, r4
 800315a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315e:	4621      	mov	r1, r4
 8003160:	024a      	lsls	r2, r1, #9
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316a:	2200      	movs	r2, #0
 800316c:	65bb      	str	r3, [r7, #88]	; 0x58
 800316e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003174:	f7fd f846 	bl	8000204 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003182:	e065      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x420>
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2200      	movs	r2, #0
 8003198:	4618      	mov	r0, r3
 800319a:	4611      	mov	r1, r2
 800319c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a0:	653b      	str	r3, [r7, #80]	; 0x50
 80031a2:	2300      	movs	r3, #0
 80031a4:	657b      	str	r3, [r7, #84]	; 0x54
 80031a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4641      	mov	r1, r8
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4649      	mov	r1, r9
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	1a54      	subs	r4, r2, r1
 80031ee:	4659      	mov	r1, fp
 80031f0:	eb63 0501 	sbc.w	r5, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	00eb      	lsls	r3, r5, #3
 80031fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003202:	00e2      	lsls	r2, r4, #3
 8003204:	4614      	mov	r4, r2
 8003206:	461d      	mov	r5, r3
 8003208:	4643      	mov	r3, r8
 800320a:	18e3      	adds	r3, r4, r3
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	464b      	mov	r3, r9
 8003210:	eb45 0303 	adc.w	r3, r5, r3
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003222:	4629      	mov	r1, r5
 8003224:	028b      	lsls	r3, r1, #10
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322c:	4621      	mov	r1, r4
 800322e:	028a      	lsls	r2, r1, #10
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003238:	2200      	movs	r2, #0
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
 800323c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800323e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003242:	f7fc ffdf 	bl	8000204 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4613      	mov	r3, r2
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0f1b      	lsrs	r3, r3, #28
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800326e:	e003      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800327c:	4618      	mov	r0, r3
 800327e:	37b8      	adds	r7, #184	; 0xb8
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400

08003290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e28d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b0:	4b94      	ldr	r3, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032bc:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c8:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x124>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e25a      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x90>
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xb4>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fb38 	bl	80009d8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fd fb34 	bl	80009d8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e21f      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xdc>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd fb24 	bl	80009d8 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fd fb20 	bl	80009d8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e20b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x104>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1d3      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd facd 	bl	80009d8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd fac9 	bl	80009d8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1b4      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd faac 	bl	80009d8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fd faa8 	bl	80009d8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e193      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fa8c 	bl	80009d8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd fa88 	bl	80009d8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e173      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x234>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd fa75 	bl	80009d8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd fa71 	bl	80009d8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e15c      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b8a      	ldr	r3, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b83      	ldr	r3, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fd fa31 	bl	80009d8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fd fa2d 	bl	80009d8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x31e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a65      	ldr	r2, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x340>
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a60      	ldr	r2, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b5e      	ldr	r3, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a59      	ldr	r2, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd f9f2 	bl	80009d8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd f9ee 	bl	80009d8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0d7      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x368>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd f9dc 	bl	80009d8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd f9d8 	bl	80009d8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0c1      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ad 	beq.w	80037bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d145      	bne.n	8003702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd f9ac 	bl	80009d8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd f9a8 	bl	80009d8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e093      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fd f97d 	bl	80009d8 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fd f979 	bl	80009d8 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e064      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x452>
 8003700:	e05c      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd f966 	bl	80009d8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd f962 	bl	80009d8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x480>
 800372e:	e045      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_OscConfig+0x538>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d030      	beq.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d122      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d119      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 f820 	bl	8003824 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	0800385c 	.word	0x0800385c
 8003808:	0800385c 	.word	0x0800385c
 800380c:	0800385c 	.word	0x0800385c
 8003810:	08003860 	.word	0x08003860

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
