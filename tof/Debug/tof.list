
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000074  08006f68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08006f68  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec5b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  0002ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e18  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd3b  00000000  00000000  000553f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce4e0  00000000  00000000  00065133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba4  00000000  00000000  00133664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006da4 	.word	0x08006da4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006da4 	.word	0x08006da4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f004 fa36 	bl	8004a3a <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000e4 	.word	0x200000e4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb85 	bl	8000cf0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f873 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f935 	bl	8000858 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ee:	f000 f8db 	bl	80007a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 f907 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sensorState = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]
  uint8_t boot[6] = {66, 79, 79, 84, 10, 0};
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <main+0xdc>)
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000604:	6018      	str	r0, [r3, #0]
 8000606:	3304      	adds	r3, #4
 8000608:	8019      	strh	r1, [r3, #0]
  while(sensorState==0){
 800060a:	e00f      	b.n	800062c <main+0x50>
		VL53L1X_BootState(dev, &sensorState);
 800060c:	f107 031f 	add.w	r3, r7, #31
 8000610:	4619      	mov	r1, r3
 8000612:	2052      	movs	r0, #82	; 0x52
 8000614:	f005 faed 	bl	8005bf2 <VL53L1X_BootState>
		HAL_UART_Transmit(&huart2, boot, 6, 10);
 8000618:	f107 0118 	add.w	r1, r7, #24
 800061c:	230a      	movs	r3, #10
 800061e:	2206      	movs	r2, #6
 8000620:	4826      	ldr	r0, [pc, #152]	; (80006bc <main+0xe0>)
 8000622:	f004 fa0a 	bl	8004a3a <HAL_UART_Transmit>
		HAL_Delay(2);
 8000626:	2002      	movs	r0, #2
 8000628:	f000 fbd4 	bl	8000dd4 <HAL_Delay>
  while(sensorState==0){
 800062c:	7ffb      	ldrb	r3, [r7, #31]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0ec      	beq.n	800060c <main+0x30>
  }

  VL53L1X_SensorInit(dev);
 8000632:	2052      	movs	r0, #82	; 0x52
 8000634:	f005 f9c8 	bl	80059c8 <VL53L1X_SensorInit>
  //VL53L1X_SetI2CAddress(dev, dev1);
  VL53L1X_StartRanging(dev1);
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <main+0xe4>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fa71 	bl	8005b24 <VL53L1X_StartRanging>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dataReady = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
  uint8_t getting[6] = {71, 69, 84, 83, 10, 0};
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <main+0xe8>)
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000650:	6018      	str	r0, [r3, #0]
 8000652:	3304      	adds	r3, #4
 8000654:	8019      	strh	r1, [r3, #0]
  uint8_t data[6] = {68, 65, 84, 65, 10, 0};
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <main+0xec>)
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000660:	6018      	str	r0, [r3, #0]
 8000662:	3304      	adds	r3, #4
 8000664:	8019      	strh	r1, [r3, #0]
  uint16_t dis = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
	  while (dataReady == 0){
 800066a:	e00a      	b.n	8000682 <main+0xa6>
		  VL53L1X_CheckForDataReady(dev1, &dataReady);
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0xe4>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	f107 0217 	add.w	r2, r7, #23
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fa84 	bl	8005b84 <VL53L1X_CheckForDataReady>
		  //HAL_UART_Transmit(&huart2, getting, 6, 10);
		  HAL_Delay(2);
 800067c:	2002      	movs	r0, #2
 800067e:	f000 fba9 	bl	8000dd4 <HAL_Delay>
	  while (dataReady == 0){
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f1      	beq.n	800066c <main+0x90>
	  }
	  VL53L1X_GetDistance(dev1, &dis);
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0xe4>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	1dba      	adds	r2, r7, #6
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f005 facd 	bl	8005c30 <VL53L1X_GetDistance>
	  VL53L1X_ClearInterrupt(dev1);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <main+0xe4>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fa00 	bl	8005aa0 <VL53L1X_ClearInterrupt>
	  //HAL_UART_Transmit(&huart2, data, 6, 10);
	  printf("%d\n", dis);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <main+0xf0>)
 80006a6:	f005 fbef 	bl	8005e88 <iprintf>
	  dataReady = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	75fb      	strb	r3, [r7, #23]
	  HAL_Delay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f000 fb90 	bl	8000dd4 <HAL_Delay>
	  while (dataReady == 0){
 80006b4:	e7e5      	b.n	8000682 <main+0xa6>
 80006b6:	bf00      	nop
 80006b8:	08006dc0 	.word	0x08006dc0
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	20000000 	.word	0x20000000
 80006c4:	08006dc8 	.word	0x08006dc8
 80006c8:	08006dd0 	.word	0x08006dd0
 80006cc:	08006dbc 	.word	0x08006dbc

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fbca 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemClock_Config+0xd4>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000744:	23a8      	movs	r3, #168	; 0xa8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fe83 	bl	8004464 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 f8da 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fb22 	bl	8003dd0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000792:	f000 f8c3 	bl	800091c <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f000 fe83 	bl	80014f0 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f894 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000090 	.word	0x20000090
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f004 f8b0 	bl	80049a0 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f869 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e4 	.word	0x200000e4
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_GPIO_Init+0xbc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a27      	ldr	r2, [pc, #156]	; (8000914 <MX_GPIO_Init+0xbc>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0xbc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_GPIO_Init+0xbc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <MX_GPIO_Init+0xbc>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_GPIO_Init+0xbc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_GPIO_Init+0xbc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_GPIO_Init+0xc0>)
 80008f6:	f000 fc43 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2017      	movs	r0, #23
 8000900:	f000 fb67 	bl	8000fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000904:	2017      	movs	r0, #23
 8000906:	f000 fb80 	bl	800100a <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_I2C_MspInit+0xa4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d13b      	bne.n	8000a12 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b6:	23c0      	movs	r3, #192	; 0xc0
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <HAL_I2C_MspInit+0xac>)
 80009d2:	f000 fbd5 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_I2C_MspInit+0xa8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	201f      	movs	r0, #31
 80009f8:	f000 faeb 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009fc:	201f      	movs	r0, #31
 80009fe:	f000 fb04 	bl	800100a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2020      	movs	r0, #32
 8000a08:	f000 fae3 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a0c:	2020      	movs	r0, #32
 8000a0e:	f000 fafc 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d133      	bne.n	8000ab2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x9c>)
 8000a9e:	f000 fb6f 	bl	8001180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 fa93 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	; 0x26
 8000aae:	f000 faac 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f93e 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b24:	f000 fcc0 	bl	80014a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <I2C1_EV_IRQHandler+0x10>)
 8000b32:	f001 f945 	bl	8001dc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000090 	.word	0x20000090

08000b40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <I2C1_ER_IRQHandler+0x10>)
 8000b46:	f001 faac 	bl	80020a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000090 	.word	0x20000090

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART2_IRQHandler+0x10>)
 8000b5a:	f004 f801 	bl	8004b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000e4 	.word	0x200000e4

08000b68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b7a:	f3af 8000 	nop.w
 8000b7e:	4601      	mov	r1, r0
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf0      	blt.n	8000b7a <_read+0x12>
	}

return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bca:	605a      	str	r2, [r3, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f005 f8f2 	bl	8005e24 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20020000 	.word	0x20020000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000128 	.word	0x20000128
 8000c74:	20000240 	.word	0x20000240

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffd7 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f005 f8b1 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc85 	bl	80005dc <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce0:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000ce4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ce8:	20000240 	.word	0x20000240

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f94f 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe00 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f967 	bl	8001026 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f92f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	20000008 	.word	0x20000008

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	2000012c 	.word	0x2000012c

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2000012c 	.word	0x2000012c

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff feb6 	bl	8000dbc <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d008      	beq.n	8001070 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e052      	b.n	8001116 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0216 	bic.w	r2, r2, #22
 800107e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800108e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <HAL_DMA_Abort+0x62>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0208 	bic.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c0:	e013      	b.n	80010ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c2:	f7ff fe7b 	bl	8000dbc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d90c      	bls.n	80010ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2220      	movs	r2, #32
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e015      	b.n	8001116 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e4      	bne.n	80010c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	223f      	movs	r2, #63	; 0x3f
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d004      	beq.n	800113c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e00c      	b.n	8001156 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2205      	movs	r2, #5
 8001140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e165      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8154 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80ae 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_GPIO_Init+0x300>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x308>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x310>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_GPIO_Init+0x314>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x20e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_GPIO_Init+0x318>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x20a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x31c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x206>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x320>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x202>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013de:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f ae96 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f806 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e12b      	b.n	800175a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fa2e 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f002 fd2e 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a81      	ldr	r2, [pc, #516]	; (8001764 <HAL_I2C_Init+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a80      	ldr	r2, [pc, #512]	; (8001768 <HAL_I2C_Init+0x278>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a7d      	ldr	r2, [pc, #500]	; (800176c <HAL_I2C_Init+0x27c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0e7      	b.n	800175a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a78      	ldr	r2, [pc, #480]	; (8001770 <HAL_I2C_Init+0x280>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	; (8001764 <HAL_I2C_Init+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a69      	ldr	r2, [pc, #420]	; (8001774 <HAL_I2C_Init+0x284>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	495c      	ldr	r1, [pc, #368]	; (8001764 <HAL_I2C_Init+0x274>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d819      	bhi.n	800162c <HAL_I2C_Init+0x13c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_I2C_Init+0x138>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e59      	subs	r1, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	3301      	adds	r3, #1
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	e051      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001628:	2304      	movs	r3, #4
 800162a:	e04f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_I2C_Init+0x168>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e012      	b.n	800167e <HAL_I2C_Init+0x18e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Init+0x196>
 8001682:	2301      	movs	r3, #1
 8001684:	e022      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <HAL_I2C_Init+0x1bc>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	440b      	add	r3, r1
 800169c:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	6809      	ldr	r1, [r1, #0]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6911      	ldr	r1, [r2, #16]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	000186a0 	.word	0x000186a0
 8001768:	001e847f 	.word	0x001e847f
 800176c:	003d08ff 	.word	0x003d08ff
 8001770:	431bde83 	.word	0x431bde83
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	460b      	mov	r3, r1
 8001786:	817b      	strh	r3, [r7, #10]
 8001788:	4613      	mov	r3, r2
 800178a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fb16 	bl	8000dbc <HAL_GetTick>
 8001790:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	f040 80e0 	bne.w	8001960 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2319      	movs	r3, #25
 80017a6:	2201      	movs	r2, #1
 80017a8:	4970      	ldr	r1, [pc, #448]	; (800196c <HAL_I2C_Master_Transmit+0x1f4>)
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f002 f8e6 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	e0d3      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x50>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0cc      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d007      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2221      	movs	r2, #33	; 0x21
 8001802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2210      	movs	r2, #16
 800180a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	893a      	ldrh	r2, [r7, #8]
 800181e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_I2C_Master_Transmit+0x1f8>)
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f001 fea8 	bl	800358c <I2C_MasterRequestWrite>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e08d      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800185c:	e066      	b.n	800192c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f002 f960 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00d      	beq.n	800188a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2b04      	cmp	r3, #4
 8001874:	d107      	bne.n	8001886 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06b      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d11b      	bne.n	8001900 <HAL_I2C_Master_Transmit+0x188>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d017      	beq.n	8001900 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6a39      	ldr	r1, [r7, #32]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f002 f950 	bl	8003baa <I2C_WaitOnBTFFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00d      	beq.n	800192c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	2b04      	cmp	r3, #4
 8001916:	d107      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e01a      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	2b00      	cmp	r3, #0
 8001932:	d194      	bne.n	800185e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	00100002 	.word	0x00100002
 8001970:	ffff0000 	.word	0xffff0000

08001974 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
 8001984:	4613      	mov	r3, r2
 8001986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fa18 	bl	8000dbc <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	f040 820b 	bne.w	8001db2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2319      	movs	r3, #25
 80019a2:	2201      	movs	r2, #1
 80019a4:	497c      	ldr	r1, [pc, #496]	; (8001b98 <HAL_I2C_Master_Receive+0x224>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f001 ffe8 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e1fe      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_I2C_Master_Receive+0x50>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e1f7      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d007      	beq.n	80019ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2222      	movs	r2, #34	; 0x22
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2210      	movs	r2, #16
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	893a      	ldrh	r2, [r7, #8]
 8001a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <HAL_I2C_Master_Receive+0x228>)
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f001 fe2c 	bl	8003690 <I2C_MasterRequestRead>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1b8      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d113      	bne.n	8001a72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e18c      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11b      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e16c      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d11b      	bne.n	8001af2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	e14c      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b18:	e138      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	f200 80f1 	bhi.w	8001d06 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d123      	bne.n	8001b74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f002 f8ad 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e139      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b72:	e10b      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d14e      	bne.n	8001c1a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	2200      	movs	r2, #0
 8001b84:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <HAL_I2C_Master_Receive+0x22c>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f001 fef8 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e10e      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
 8001b96:	bf00      	nop
 8001b98:	00100002 	.word	0x00100002
 8001b9c:	ffff0000 	.word	0xffff0000
 8001ba0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c18:	e0b8      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	2200      	movs	r2, #0
 8001c22:	4966      	ldr	r1, [pc, #408]	; (8001dbc <HAL_I2C_Master_Receive+0x448>)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f001 fea9 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0bf      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	494f      	ldr	r1, [pc, #316]	; (8001dbc <HAL_I2C_Master_Receive+0x448>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f001 fe7b 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e091      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d04:	e042      	b.n	8001d8c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f001 ffc0 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e04c      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d118      	bne.n	8001d8c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f aec2 	bne.w	8001b1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	00010004 	.word	0x00010004

08001dc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d003      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0x38>
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	f040 80c1 	bne.w	8001f7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_I2C_EV_IRQHandler+0x6e>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001e18:	d003      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x62>
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e20:	d101      	bne.n	8001e26 <HAL_I2C_EV_IRQHandler+0x66>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x68>
 8001e26:	2300      	movs	r3, #0
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	f000 8132 	beq.w	8002092 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x92>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	0a5b      	lsrs	r3, r3, #9
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f001 ffa8 	bl	8003d9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fd83 	bl	8002956 <I2C_Master_SB>
 8001e50:	e092      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	0a5b      	lsrs	r3, r3, #9
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fdf9 	bl	8002a62 <I2C_Master_ADD10>
 8001e70:	e082      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	0a5b      	lsrs	r3, r3, #9
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fe13 	bl	8002ab6 <I2C_Master_ADDR>
 8001e90:	e072      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d03b      	beq.n	8001f16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	f000 80f3 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	09db      	lsrs	r3, r3, #7
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00f      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x11c>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	0a9b      	lsrs	r3, r3, #10
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x11c>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f9f3 	bl	80022c0 <I2C_MasterTransmit_TXE>
 8001eda:	e04d      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80d6 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	0a5b      	lsrs	r3, r3, #9
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80cf 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b21      	cmp	r3, #33	; 0x21
 8001efc:	d103      	bne.n	8001f06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa7a 	bl	80023f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f04:	e0c7      	b.n	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	f040 80c4 	bne.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fae8 	bl	80024e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f14:	e0bf      	b.n	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f24:	f000 80b7 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00f      	beq.n	8001f54 <HAL_I2C_EV_IRQHandler+0x194>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	0a9b      	lsrs	r3, r3, #10
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_I2C_EV_IRQHandler+0x194>
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fb5d 	bl	800260c <I2C_MasterReceive_RXNE>
 8001f52:	e011      	b.n	8001f78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 809a 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0a5b      	lsrs	r3, r3, #9
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8093 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fc06 	bl	8002782 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f76:	e08e      	b.n	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f78:	e08d      	b.n	8002096 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e007      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d012      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x20e>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fc4:	69b9      	ldr	r1, [r7, #24]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 ffc4 	bl	8002f54 <I2C_Slave_ADDR>
 8001fcc:	e066      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x22e>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	0a5b      	lsrs	r3, r3, #9
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fffe 	bl	8002fe8 <I2C_Slave_STOPF>
 8001fec:	e056      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	2b21      	cmp	r3, #33	; 0x21
 8001ff2:	d002      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0x23a>
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	2b29      	cmp	r3, #41	; 0x29
 8001ff8:	d125      	bne.n	8002046 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	09db      	lsrs	r3, r3, #7
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00f      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0x266>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	0a9b      	lsrs	r3, r3, #10
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0x266>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 feda 	bl	8002dd8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002024:	e039      	b.n	800209a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d033      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x2da>
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	0a5b      	lsrs	r3, r3, #9
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d02d      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 ff07 	bl	8002e52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002044:	e029      	b.n	800209a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00f      	beq.n	8002072 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	0a9b      	lsrs	r3, r3, #10
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_I2C_EV_IRQHandler+0x2b2>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 ff12 	bl	8002e94 <I2C_SlaveReceive_RXNE>
 8002070:	e014      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00e      	beq.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	0a5b      	lsrs	r3, r3, #9
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 ff40 	bl	8002f10 <I2C_SlaveReceive_BTF>
 8002090:	e004      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002092:	bf00      	nop
 8002094:	e002      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800209a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08a      	sub	sp, #40	; 0x28
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00e      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	0a5b      	lsrs	r3, r3, #9
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <HAL_I2C_ER_IRQHandler+0x78>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002118:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	0a9b      	lsrs	r3, r3, #10
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03f      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0x104>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d039      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002132:	7efb      	ldrb	r3, [r7, #27]
 8002134:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800214c:	7ebb      	ldrb	r3, [r7, #26]
 800214e:	2b20      	cmp	r3, #32
 8002150:	d112      	bne.n	8002178 <HAL_I2C_ER_IRQHandler+0xd6>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_I2C_ER_IRQHandler+0xd6>
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	2b21      	cmp	r3, #33	; 0x21
 800215c:	d008      	beq.n	8002170 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	2b29      	cmp	r3, #41	; 0x29
 8002162:	d005      	beq.n	8002170 <HAL_I2C_ER_IRQHandler+0xce>
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b28      	cmp	r3, #40	; 0x28
 8002168:	d106      	bne.n	8002178 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b21      	cmp	r3, #33	; 0x21
 800216e:	d103      	bne.n	8002178 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f001 f869 	bl	8003248 <I2C_Slave_AF>
 8002176:	e016      	b.n	80021a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002180:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800218a:	7efb      	ldrb	r3, [r7, #27]
 800218c:	2b10      	cmp	r3, #16
 800218e:	d002      	beq.n	8002196 <HAL_I2C_ER_IRQHandler+0xf4>
 8002190:	7efb      	ldrb	r3, [r7, #27]
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	0adb      	lsrs	r3, r3, #11
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80021ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 f8a0 	bl	8003328 <I2C_ITError>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	4613      	mov	r3, r2
 800224e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d150      	bne.n	8002388 <I2C_MasterTransmit_TXE+0xc8>
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b21      	cmp	r3, #33	; 0x21
 80022ea:	d14d      	bne.n	8002388 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d01d      	beq.n	800232e <I2C_MasterTransmit_TXE+0x6e>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d01a      	beq.n	800232e <I2C_MasterTransmit_TXE+0x6e>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022fe:	d016      	beq.n	800232e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800230e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2211      	movs	r2, #17
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff62 	bl	80021f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800232c:	e060      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800233c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d107      	bne.n	8002378 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff7d 	bl	8002270 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002376:	e03b      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff35 	bl	80021f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002386:	e033      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b21      	cmp	r3, #33	; 0x21
 800238c:	d005      	beq.n	800239a <I2C_MasterTransmit_TXE+0xda>
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d12d      	bne.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2b22      	cmp	r3, #34	; 0x22
 8002398:	d12a      	bne.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023b4:	e01c      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d103      	bne.n	80023ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f88e 	bl	80024e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80023c8:	e012      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023ee:	e7ff      	b.n	80023f0 <I2C_MasterTransmit_TXE+0x130>
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b21      	cmp	r3, #33	; 0x21
 8002410:	d164      	bne.n	80024dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002440:	e04c      	b.n	80024dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d01d      	beq.n	8002484 <I2C_MasterTransmit_BTF+0x8c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b20      	cmp	r3, #32
 800244c:	d01a      	beq.n	8002484 <I2C_MasterTransmit_BTF+0x8c>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002454:	d016      	beq.n	8002484 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002464:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2211      	movs	r2, #17
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff feb7 	bl	80021f0 <HAL_I2C_MasterTxCpltCallback>
}
 8002482:	e02b      	b.n	80024dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002492:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d107      	bne.n	80024ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fed2 	bl	8002270 <HAL_I2C_MemTxCpltCallback>
}
 80024cc:	e006      	b.n	80024dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fe8a 	bl	80021f0 <HAL_I2C_MasterTxCpltCallback>
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11d      	bne.n	8002538 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10b      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	b2da      	uxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	1c9a      	adds	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800251a:	e073      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	b29b      	uxth	r3, r3
 8002522:	121b      	asrs	r3, r3, #8
 8002524:	b2da      	uxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002536:	e065      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10b      	bne.n	8002558 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	b2da      	uxtb	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002556:	e055      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	2b02      	cmp	r3, #2
 800255e:	d151      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b22      	cmp	r3, #34	; 0x22
 8002564:	d10d      	bne.n	8002582 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002580:	e040      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b21      	cmp	r3, #33	; 0x21
 8002590:	d112      	bne.n	80025b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025b6:	e025      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d120      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b21      	cmp	r3, #33	; 0x21
 80025c6:	d11d      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fe36 	bl	8002270 <HAL_I2C_MemTxCpltCallback>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b22      	cmp	r3, #34	; 0x22
 800261e:	f040 80ac 	bne.w	800277a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d921      	bls.n	8002674 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b03      	cmp	r3, #3
 800265e:	f040 808c 	bne.w	800277a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002672:	e082      	b.n	800277a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b02      	cmp	r3, #2
 800267a:	d075      	beq.n	8002768 <I2C_MasterReceive_RXNE+0x15c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <I2C_MasterReceive_RXNE+0x7c>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d16f      	bne.n	8002768 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f001 facf 	bl	8003c2c <I2C_WaitOnSTOPRequestThroughIT>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d142      	bne.n	800271a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d10a      	bne.n	8002704 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fdc1 	bl	8002284 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002702:	e03a      	b.n	800277a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2212      	movs	r2, #18
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fd76 	bl	8002204 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002718:	e02f      	b.n	800277a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002728:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fd99 	bl	8002298 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002766:	e008      	b.n	800277a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	605a      	str	r2, [r3, #4]
}
 8002778:	e7ff      	b.n	800277a <I2C_MasterReceive_RXNE+0x16e>
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b04      	cmp	r3, #4
 8002798:	d11b      	bne.n	80027d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027d0:	e0bd      	b.n	800294e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d129      	bne.n	8002830 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00a      	beq.n	8002808 <I2C_MasterReceive_BTF+0x86>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d007      	beq.n	8002808 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800282e:	e08e      	b.n	800294e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d176      	bne.n	8002928 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <I2C_MasterReceive_BTF+0xc4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d108      	bne.n	8002858 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e019      	b.n	800288c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d002      	beq.n	8002864 <I2C_MasterReceive_BTF+0xe2>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d108      	bne.n	8002876 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e00a      	b.n	800288c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b10      	cmp	r3, #16
 800287a:	d007      	beq.n	800288c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d10a      	bne.n	8002912 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fcba 	bl	8002284 <HAL_I2C_MemRxCpltCallback>
}
 8002910:	e01d      	b.n	800294e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2212      	movs	r2, #18
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fc6f 	bl	8002204 <HAL_I2C_MasterRxCpltCallback>
}
 8002926:	e012      	b.n	800294e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d117      	bne.n	800299a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002982:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002984:	e067      	b.n	8002a56 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]
}
 8002998:	e05d      	b.n	8002a56 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a2:	d133      	bne.n	8002a0c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b21      	cmp	r3, #33	; 0x21
 80029ae:	d109      	bne.n	80029c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	e008      	b.n	80029d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <I2C_Master_SB+0x92>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d108      	bne.n	80029fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d032      	beq.n	8002a56 <I2C_Master_SB+0x100>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d02d      	beq.n	8002a56 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a08:	605a      	str	r2, [r3, #4]
}
 8002a0a:	e024      	b.n	8002a56 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10e      	bne.n	8002a32 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	11db      	asrs	r3, r3, #7
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 0306 	and.w	r3, r3, #6
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f063 030f 	orn	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]
}
 8002a30:	e011      	b.n	8002a56 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10d      	bne.n	8002a56 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	11db      	asrs	r3, r3, #7
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0306 	and.w	r3, r3, #6
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f063 030e 	orn	r3, r3, #14
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <I2C_Master_ADD10+0x26>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <I2C_Master_ADD10+0x48>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	605a      	str	r2, [r3, #4]
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b091      	sub	sp, #68	; 0x44
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b22      	cmp	r3, #34	; 0x22
 8002ade:	f040 8169 	bne.w	8002db4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <I2C_Master_ADDR+0x54>
 8002aea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d10b      	bne.n	8002b0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	e160      	b.n	8002dcc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <I2C_Master_ADDR+0x98>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b1a:	d118      	bne.n	8002b4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b4c:	e13e      	b.n	8002dcc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d113      	bne.n	8002b80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e115      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 808a 	bne.w	8002ca0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b92:	d137      	bne.n	8002c04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb2:	d113      	bne.n	8002bdc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	e0e7      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e0d3      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d02e      	beq.n	8002c68 <I2C_Master_ADDR+0x1b2>
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d02b      	beq.n	8002c68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d102      	bne.n	8002c1c <I2C_Master_ADDR+0x166>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d125      	bne.n	8002c68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00e      	beq.n	8002c40 <I2C_Master_ADDR+0x18a>
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d00b      	beq.n	8002c40 <I2C_Master_ADDR+0x18a>
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d008      	beq.n	8002c40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e007      	b.n	8002c50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	e0a1      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e085      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d14d      	bne.n	8002d46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d016      	beq.n	8002cde <I2C_Master_ADDR+0x228>
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d013      	beq.n	8002cde <I2C_Master_ADDR+0x228>
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d010      	beq.n	8002cde <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e007      	b.n	8002cee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfc:	d117      	bne.n	8002d2e <I2C_Master_ADDR+0x278>
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d04:	d00b      	beq.n	8002d1e <I2C_Master_ADDR+0x268>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d008      	beq.n	8002d1e <I2C_Master_ADDR+0x268>
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d005      	beq.n	8002d1e <I2C_Master_ADDR+0x268>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d002      	beq.n	8002d1e <I2C_Master_ADDR+0x268>
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d107      	bne.n	8002d2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	e032      	b.n	8002dac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d64:	d117      	bne.n	8002d96 <I2C_Master_ADDR+0x2e0>
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d6c:	d00b      	beq.n	8002d86 <I2C_Master_ADDR+0x2d0>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d008      	beq.n	8002d86 <I2C_Master_ADDR+0x2d0>
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d005      	beq.n	8002d86 <I2C_Master_ADDR+0x2d0>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d002      	beq.n	8002d86 <I2C_Master_ADDR+0x2d0>
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d107      	bne.n	8002d96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002db2:	e00b      	b.n	8002dcc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	e7ff      	b.n	8002dcc <I2C_Master_ADDR+0x316>
 8002dcc:	bf00      	nop
 8002dce:	3744      	adds	r7, #68	; 0x44
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02b      	beq.n	8002e4a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d114      	bne.n	8002e4a <I2C_SlaveTransmit_TXE+0x72>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b29      	cmp	r3, #41	; 0x29
 8002e24:	d111      	bne.n	8002e4a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2221      	movs	r2, #33	; 0x21
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2228      	movs	r2, #40	; 0x28
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff f9e7 	bl	8002218 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d011      	beq.n	8002e88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02c      	beq.n	8002f08 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d114      	bne.n	8002f08 <I2C_SlaveReceive_RXNE+0x74>
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee2:	d111      	bne.n	8002f08 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2222      	movs	r2, #34	; 0x22
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2228      	movs	r2, #40	; 0x28
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff f992 	bl	800222c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f6e:	2b28      	cmp	r3, #40	; 0x28
 8002f70:	d127      	bne.n	8002fc2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	09db      	lsrs	r3, r3, #7
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	81bb      	strh	r3, [r7, #12]
 8002fa4:	e002      	b.n	8002fac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fb4:	89ba      	ldrh	r2, [r7, #12]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff f940 	bl	8002240 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fc0:	e00e      	b.n	8002fe0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003006:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003034:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	d172      	bne.n	800312c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b22      	cmp	r3, #34	; 0x22
 800304a:	d002      	beq.n	8003052 <I2C_Slave_STOPF+0x6a>
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b2a      	cmp	r3, #42	; 0x2a
 8003050:	d135      	bne.n	80030be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003084:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe f869 	bl	8001162 <HAL_DMA_GetState>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d049      	beq.n	800312a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4a69      	ldr	r2, [pc, #420]	; (8003240 <I2C_Slave_STOPF+0x258>)
 800309c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe f83b 	bl	800111e <HAL_DMA_Abort_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03d      	beq.n	800312a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b8:	4610      	mov	r0, r2
 80030ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030bc:	e035      	b.n	800312a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0204 	orr.w	r2, r3, #4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe f833 	bl	8001162 <HAL_DMA_GetState>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d014      	beq.n	800312c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	4a4e      	ldr	r2, [pc, #312]	; (8003240 <I2C_Slave_STOPF+0x258>)
 8003108:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe f805 	bl	800111e <HAL_DMA_Abort_IT>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003124:	4610      	mov	r0, r2
 8003126:	4798      	blx	r3
 8003128:	e000      	b.n	800312c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800312a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03e      	beq.n	80031b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d112      	bne.n	800316a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d112      	bne.n	800319e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f8b3 	bl	8003328 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031c2:	e039      	b.n	8003238 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b2a      	cmp	r3, #42	; 0x2a
 80031c8:	d109      	bne.n	80031de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2228      	movs	r2, #40	; 0x28
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff f827 	bl	800222c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b28      	cmp	r3, #40	; 0x28
 80031e8:	d111      	bne.n	800320e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <I2C_Slave_STOPF+0x25c>)
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff f828 	bl	800225c <HAL_I2C_ListenCpltCallback>
}
 800320c:	e014      	b.n	8003238 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	2b22      	cmp	r3, #34	; 0x22
 8003214:	d002      	beq.n	800321c <I2C_Slave_STOPF+0x234>
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b22      	cmp	r3, #34	; 0x22
 800321a:	d10d      	bne.n	8003238 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fffa 	bl	800222c <HAL_I2C_SlaveRxCpltCallback>
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	0800382d 	.word	0x0800382d
 8003244:	ffff0000 	.word	0xffff0000

08003248 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d002      	beq.n	800326a <I2C_Slave_AF+0x22>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b20      	cmp	r3, #32
 8003268:	d129      	bne.n	80032be <I2C_Slave_AF+0x76>
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b28      	cmp	r3, #40	; 0x28
 800326e:	d126      	bne.n	80032be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <I2C_Slave_AF+0xdc>)
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003284:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800328e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe ffd0 	bl	800225c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032bc:	e02e      	b.n	800331c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b21      	cmp	r3, #33	; 0x21
 80032c2:	d126      	bne.n	8003312 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a17      	ldr	r2, [pc, #92]	; (8003324 <I2C_Slave_AF+0xdc>)
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2221      	movs	r2, #33	; 0x21
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003308:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe ff84 	bl	8002218 <HAL_I2C_SlaveTxCpltCallback>
}
 8003310:	e004      	b.n	800331c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800331a:	615a      	str	r2, [r3, #20]
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	ffff0000 	.word	0xffff0000

08003328 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800333e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003340:	7bbb      	ldrb	r3, [r7, #14]
 8003342:	2b10      	cmp	r3, #16
 8003344:	d002      	beq.n	800334c <I2C_ITError+0x24>
 8003346:	7bbb      	ldrb	r3, [r7, #14]
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d10a      	bne.n	8003362 <I2C_ITError+0x3a>
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b22      	cmp	r3, #34	; 0x22
 8003350:	d107      	bne.n	8003362 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003360:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003368:	2b28      	cmp	r3, #40	; 0x28
 800336a:	d107      	bne.n	800337c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2228      	movs	r2, #40	; 0x28
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800337a:	e015      	b.n	80033a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d00a      	beq.n	80033a2 <I2C_ITError+0x7a>
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b60      	cmp	r3, #96	; 0x60
 8003390:	d007      	beq.n	80033a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b6:	d162      	bne.n	800347e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d020      	beq.n	8003418 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <I2C_ITError+0x25c>)
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fe9b 	bl	800111e <HAL_DMA_Abort_IT>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8089 	beq.w	8003502 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003412:	4610      	mov	r0, r2
 8003414:	4798      	blx	r3
 8003416:	e074      	b.n	8003502 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	4a59      	ldr	r2, [pc, #356]	; (8003584 <I2C_ITError+0x25c>)
 800341e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fe7a 	bl	800111e <HAL_DMA_Abort_IT>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d068      	beq.n	8003502 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d10b      	bne.n	8003456 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003478:	4610      	mov	r0, r2
 800347a:	4798      	blx	r3
 800347c:	e041      	b.n	8003502 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b60      	cmp	r3, #96	; 0x60
 8003488:	d125      	bne.n	80034d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d10b      	bne.n	80034be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe feec 	bl	80022ac <HAL_I2C_AbortCpltCallback>
 80034d4:	e015      	b.n	8003502 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d10b      	bne.n	80034fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fe fecb 	bl	8002298 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b04      	cmp	r3, #4
 8003552:	d113      	bne.n	800357c <I2C_ITError+0x254>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b28      	cmp	r3, #40	; 0x28
 8003558:	d110      	bne.n	800357c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <I2C_ITError+0x260>)
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe fe70 	bl	800225c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	0800382d 	.word	0x0800382d
 8003588:	ffff0000 	.word	0xffff0000

0800358c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d006      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b4:	d108      	bne.n	80035c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e00b      	b.n	80035e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d107      	bne.n	80035e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9c5 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d103      	bne.n	8003610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e035      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361c:	d108      	bne.n	8003630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	e01b      	b.n	8003668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	11db      	asrs	r3, r3, #7
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0306 	and.w	r3, r3, #6
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f063 030f 	orn	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <I2C_MasterRequestWrite+0xfc>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f9eb 	bl	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e010      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <I2C_MasterRequestWrite+0x100>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f9db 	bl	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010008 	.word	0x00010008
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d006      	beq.n	80036ca <I2C_MasterRequestRead+0x3a>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d003      	beq.n	80036ca <I2C_MasterRequestRead+0x3a>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c8:	d108      	bne.n	80036dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e00b      	b.n	80036f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b11      	cmp	r3, #17
 80036e2:	d107      	bne.n	80036f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f93b 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d103      	bne.n	8003724 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e079      	b.n	800381c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d108      	bne.n	8003744 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	e05f      	b.n	8003804 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030f 	orn	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4930      	ldr	r1, [pc, #192]	; (8003824 <I2C_MasterRequestRead+0x194>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f961 	bl	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e054      	b.n	800381c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003772:	897b      	ldrh	r3, [r7, #10]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4929      	ldr	r1, [pc, #164]	; (8003828 <I2C_MasterRequestRead+0x198>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f951 	bl	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e044      	b.n	800381c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f8d9 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d103      	bne.n	80037e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e017      	b.n	800381c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	11db      	asrs	r3, r3, #7
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0306 	and.w	r3, r3, #6
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f063 030e 	orn	r3, r3, #14
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4907      	ldr	r1, [pc, #28]	; (8003828 <I2C_MasterRequestRead+0x198>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f90d 	bl	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	00010008 	.word	0x00010008
 8003828:	00010002 	.word	0x00010002

0800382c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003846:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <I2C_DMAAbort+0x148>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <I2C_DMAAbort+0x14c>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0a1a      	lsrs	r2, r3, #8
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003872:	e00a      	b.n	800388a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003888:	d0ea      	beq.n	8003860 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2200      	movs	r2, #0
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	2200      	movs	r2, #0
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	2200      	movs	r2, #0
 80038de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b60      	cmp	r3, #96	; 0x60
 80038fa:	d10e      	bne.n	800391a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f7fe fcca 	bl	80022ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003918:	e027      	b.n	800396a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003920:	2b28      	cmp	r3, #40	; 0x28
 8003922:	d117      	bne.n	8003954 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003942:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2228      	movs	r2, #40	; 0x28
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003952:	e007      	b.n	8003964 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f7fe fc97 	bl	8002298 <HAL_I2C_ErrorCallback>
}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000004 	.word	0x20000004
 8003978:	14f8b589 	.word	0x14f8b589

0800397c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398c:	e025      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d021      	beq.n	80039da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7fd fa11 	bl	8000dbc <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e023      	b.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10d      	bne.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	e00c      	b.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d0b6      	beq.n	800398e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a38:	e051      	b.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d123      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e046      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d021      	beq.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fd f98f 	bl	8000dbc <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d116      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e020      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10c      	bne.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e00b      	b.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d18d      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b34:	e02d      	b.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f900 	bl	8003d3c <I2C_IsAcknowledgeFailed>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e02d      	b.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d021      	beq.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fd f935 	bl	8000dbc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d116      	bne.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e007      	b.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d1ca      	bne.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb6:	e02d      	b.n	8003c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8bf 	bl	8003d3c <I2C_IsAcknowledgeFailed>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e02d      	b.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d021      	beq.n	8003c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7fd f8f4 	bl	8000dbc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e007      	b.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d1ca      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	08db      	lsrs	r3, r3, #3
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	0a1a      	lsrs	r2, r3, #8
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e008      	b.n	8003c7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d0e9      	beq.n	8003c4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	20000004 	.word	0x20000004
 8003c8c:	14f8b589 	.word	0x14f8b589

08003c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c9c:	e042      	b.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d119      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0210 	mvn.w	r2, #16
 8003cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e029      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fd f86c 	bl	8000dbc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e007      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d1b5      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d11b      	bne.n	8003d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003daa:	d103      	bne.n	8003db4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003db2:	e007      	b.n	8003dc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003dbc:	d102      	bne.n	8003dc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0cc      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d90c      	bls.n	8003e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0b8      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e48:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d044      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d119      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e06f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e067      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4934      	ldr	r1, [pc, #208]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fc ff7c 	bl	8000dbc <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fc ff78 	bl	8000dbc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d20c      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e032      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4916      	ldr	r1, [pc, #88]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	490e      	ldr	r1, [pc, #56]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f56:	f000 f855 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	490a      	ldr	r1, [pc, #40]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fedc 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023c00 	.word	0x40023c00
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08006dd8 	.word	0x08006dd8
 8003f94:	20000004 	.word	0x20000004
 8003f98:	20000008 	.word	0x20000008

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0a9b      	lsrs	r3, r3, #10
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08006de8 	.word	0x08006de8

08003fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fe0:	f7ff ffdc 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0b5b      	lsrs	r3, r3, #13
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08006de8 	.word	0x08006de8

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b0ae      	sub	sp, #184	; 0xb8
 800400a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800402a:	4bcb      	ldr	r3, [pc, #812]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b0c      	cmp	r3, #12
 8004034:	f200 8206 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x440>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_RCC_GetSysClockFreq+0x3c>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004075 	.word	0x08004075
 8004044:	08004445 	.word	0x08004445
 8004048:	08004445 	.word	0x08004445
 800404c:	08004445 	.word	0x08004445
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004445 	.word	0x08004445
 8004058:	08004445 	.word	0x08004445
 800405c:	08004445 	.word	0x08004445
 8004060:	08004085 	.word	0x08004085
 8004064:	08004445 	.word	0x08004445
 8004068:	08004445 	.word	0x08004445
 800406c:	08004445 	.word	0x08004445
 8004070:	08004275 	.word	0x08004275
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4bb9      	ldr	r3, [pc, #740]	; (800435c <HAL_RCC_GetSysClockFreq+0x358>)
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800407a:	e1e7      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800407c:	4bb8      	ldr	r3, [pc, #736]	; (8004360 <HAL_RCC_GetSysClockFreq+0x35c>)
 800407e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004082:	e1e3      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004084:	4bb4      	ldr	r3, [pc, #720]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800408c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004090:	4bb1      	ldr	r3, [pc, #708]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d071      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409c:	4bae      	ldr	r3, [pc, #696]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	099b      	lsrs	r3, r3, #6
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80040ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d4:	0150      	lsls	r0, r2, #5
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4621      	mov	r1, r4
 80040dc:	1a51      	subs	r1, r2, r1
 80040de:	6439      	str	r1, [r7, #64]	; 0x40
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb63 0301 	sbc.w	r3, r3, r1
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80040f4:	4649      	mov	r1, r9
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	4641      	mov	r1, r8
 80040fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fe:	4641      	mov	r1, r8
 8004100:	018a      	lsls	r2, r1, #6
 8004102:	4641      	mov	r1, r8
 8004104:	1a51      	subs	r1, r2, r1
 8004106:	63b9      	str	r1, [r7, #56]	; 0x38
 8004108:	4649      	mov	r1, r9
 800410a:	eb63 0301 	sbc.w	r3, r3, r1
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800411c:	4649      	mov	r1, r9
 800411e:	00cb      	lsls	r3, r1, #3
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004126:	4641      	mov	r1, r8
 8004128:	00ca      	lsls	r2, r1, #3
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	4603      	mov	r3, r0
 8004130:	4622      	mov	r2, r4
 8004132:	189b      	adds	r3, r3, r2
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	462b      	mov	r3, r5
 8004138:	460a      	mov	r2, r1
 800413a:	eb42 0303 	adc.w	r3, r2, r3
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800414c:	4629      	mov	r1, r5
 800414e:	024b      	lsls	r3, r1, #9
 8004150:	4621      	mov	r1, r4
 8004152:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004156:	4621      	mov	r1, r4
 8004158:	024a      	lsls	r2, r1, #9
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800416c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004170:	f7fc f89e 	bl	80002b0 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4613      	mov	r3, r2
 800417a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417e:	e067      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4b75      	ldr	r3, [pc, #468]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800418c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	67bb      	str	r3, [r7, #120]	; 0x78
 800419a:	2300      	movs	r3, #0
 800419c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800419e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80041a2:	4622      	mov	r2, r4
 80041a4:	462b      	mov	r3, r5
 80041a6:	f04f 0000 	mov.w	r0, #0
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	0159      	lsls	r1, r3, #5
 80041b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b4:	0150      	lsls	r0, r2, #5
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4621      	mov	r1, r4
 80041bc:	1a51      	subs	r1, r2, r1
 80041be:	62b9      	str	r1, [r7, #40]	; 0x28
 80041c0:	4629      	mov	r1, r5
 80041c2:	eb63 0301 	sbc.w	r3, r3, r1
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80041d4:	4649      	mov	r1, r9
 80041d6:	018b      	lsls	r3, r1, #6
 80041d8:	4641      	mov	r1, r8
 80041da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041de:	4641      	mov	r1, r8
 80041e0:	018a      	lsls	r2, r1, #6
 80041e2:	4641      	mov	r1, r8
 80041e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e8:	4649      	mov	r1, r9
 80041ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004202:	4692      	mov	sl, r2
 8004204:	469b      	mov	fp, r3
 8004206:	4623      	mov	r3, r4
 8004208:	eb1a 0303 	adds.w	r3, sl, r3
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	462b      	mov	r3, r5
 8004210:	eb4b 0303 	adc.w	r3, fp, r3
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004222:	4629      	mov	r1, r5
 8004224:	028b      	lsls	r3, r1, #10
 8004226:	4621      	mov	r1, r4
 8004228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800422c:	4621      	mov	r1, r4
 800422e:	028a      	lsls	r2, r1, #10
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004238:	2200      	movs	r2, #0
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
 800423c:	677a      	str	r2, [r7, #116]	; 0x74
 800423e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004242:	f7fc f835 	bl	80002b0 <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4613      	mov	r3, r2
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004250:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004272:	e0eb      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004274:	4b38      	ldr	r3, [pc, #224]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d06b      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428c:	4b32      	ldr	r3, [pc, #200]	; (8004358 <HAL_RCC_GetSysClockFreq+0x354>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	2200      	movs	r2, #0
 8004294:	66bb      	str	r3, [r7, #104]	; 0x68
 8004296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	663b      	str	r3, [r7, #96]	; 0x60
 80042a0:	2300      	movs	r3, #0
 80042a2:	667b      	str	r3, [r7, #100]	; 0x64
 80042a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80042a8:	4622      	mov	r2, r4
 80042aa:	462b      	mov	r3, r5
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4621      	mov	r1, r4
 80042c2:	1a51      	subs	r1, r2, r1
 80042c4:	61b9      	str	r1, [r7, #24]
 80042c6:	4629      	mov	r1, r5
 80042c8:	eb63 0301 	sbc.w	r3, r3, r1
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80042da:	4659      	mov	r1, fp
 80042dc:	018b      	lsls	r3, r1, #6
 80042de:	4651      	mov	r1, sl
 80042e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e4:	4651      	mov	r1, sl
 80042e6:	018a      	lsls	r2, r1, #6
 80042e8:	4651      	mov	r1, sl
 80042ea:	ebb2 0801 	subs.w	r8, r2, r1
 80042ee:	4659      	mov	r1, fp
 80042f0:	eb63 0901 	sbc.w	r9, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004300:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004304:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004308:	4690      	mov	r8, r2
 800430a:	4699      	mov	r9, r3
 800430c:	4623      	mov	r3, r4
 800430e:	eb18 0303 	adds.w	r3, r8, r3
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	462b      	mov	r3, r5
 8004316:	eb49 0303 	adc.w	r3, r9, r3
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004328:	4629      	mov	r1, r5
 800432a:	024b      	lsls	r3, r1, #9
 800432c:	4621      	mov	r1, r4
 800432e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004332:	4621      	mov	r1, r4
 8004334:	024a      	lsls	r2, r1, #9
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800433e:	2200      	movs	r2, #0
 8004340:	65bb      	str	r3, [r7, #88]	; 0x58
 8004342:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004344:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004348:	f7fb ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004356:	e065      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x420>
 8004358:	40023800 	.word	0x40023800
 800435c:	00f42400 	.word	0x00f42400
 8004360:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004364:	4b3d      	ldr	r3, [pc, #244]	; (800445c <HAL_RCC_GetSysClockFreq+0x458>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	2200      	movs	r2, #0
 800436c:	4618      	mov	r0, r3
 800436e:	4611      	mov	r1, r2
 8004370:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004374:	653b      	str	r3, [r7, #80]	; 0x50
 8004376:	2300      	movs	r3, #0
 8004378:	657b      	str	r3, [r7, #84]	; 0x54
 800437a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800437e:	4642      	mov	r2, r8
 8004380:	464b      	mov	r3, r9
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004390:	0150      	lsls	r0, r2, #5
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4641      	mov	r1, r8
 8004398:	1a51      	subs	r1, r2, r1
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	4649      	mov	r1, r9
 800439e:	eb63 0301 	sbc.w	r3, r3, r1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043b0:	4659      	mov	r1, fp
 80043b2:	018b      	lsls	r3, r1, #6
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ba:	4651      	mov	r1, sl
 80043bc:	018a      	lsls	r2, r1, #6
 80043be:	4651      	mov	r1, sl
 80043c0:	1a54      	subs	r4, r2, r1
 80043c2:	4659      	mov	r1, fp
 80043c4:	eb63 0501 	sbc.w	r5, r3, r1
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	00eb      	lsls	r3, r5, #3
 80043d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d6:	00e2      	lsls	r2, r4, #3
 80043d8:	4614      	mov	r4, r2
 80043da:	461d      	mov	r5, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	18e3      	adds	r3, r4, r3
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	464b      	mov	r3, r9
 80043e4:	eb45 0303 	adc.w	r3, r5, r3
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f6:	4629      	mov	r1, r5
 80043f8:	028b      	lsls	r3, r1, #10
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004400:	4621      	mov	r1, r4
 8004402:	028a      	lsls	r2, r1, #10
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800440c:	2200      	movs	r2, #0
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004410:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004416:	f7fb ff4b 	bl	80002b0 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4613      	mov	r3, r2
 8004420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <HAL_RCC_GetSysClockFreq+0x458>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0f1b      	lsrs	r3, r3, #28
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004442:	e003      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800444a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004450:	4618      	mov	r0, r3
 8004452:	37b8      	adds	r7, #184	; 0xb8
 8004454:	46bd      	mov	sp, r7
 8004456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	00f42400 	.word	0x00f42400

08004464 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e28d      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8083 	beq.w	800458a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004484:	4b94      	ldr	r3, [pc, #592]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d019      	beq.n	80044c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004490:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004498:	2b08      	cmp	r3, #8
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800449c:	4b8e      	ldr	r3, [pc, #568]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a8:	d00c      	beq.n	80044c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d112      	bne.n	80044dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c2:	d10b      	bne.n	80044dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c4:	4b84      	ldr	r3, [pc, #528]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05b      	beq.n	8004588 <HAL_RCC_OscConfig+0x124>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d157      	bne.n	8004588 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e25a      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x90>
 80044e6:	4b7c      	ldr	r3, [pc, #496]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7b      	ldr	r2, [pc, #492]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e01d      	b.n	8004530 <HAL_RCC_OscConfig+0xcc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0xb4>
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a75      	ldr	r2, [pc, #468]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b73      	ldr	r3, [pc, #460]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a72      	ldr	r2, [pc, #456]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0xcc>
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6e      	ldr	r2, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6b      	ldr	r2, [pc, #428]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fc fc40 	bl	8000dbc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004540:	f7fc fc3c 	bl	8000dbc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e21f      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0xdc>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fc fc2c 	bl	8000dbc <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fc fc28 	bl	8000dbc <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e20b      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x104>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d06f      	beq.n	8004676 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004596:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045a2:	4b4d      	ldr	r3, [pc, #308]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045ae:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x186>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1d3      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4937      	ldr	r1, [pc, #220]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_RCC_OscConfig+0x278>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fc fbd5 	bl	8000dbc <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004616:	f7fc fbd1 	bl	8000dbc <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1b4      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4925      	ldr	r1, [pc, #148]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCC_OscConfig+0x278>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fc fbb4 	bl	8000dbc <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004658:	f7fc fbb0 	bl	8000dbc <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e193      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d036      	beq.n	80046f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc fb94 	bl	8000dbc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004698:	f7fc fb90 	bl	8000dbc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e173      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_OscConfig+0x274>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x234>
 80046b6:	e01b      	b.n	80046f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fc fb7d 	bl	8000dbc <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	e00e      	b.n	80046e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fc fb79 	bl	8000dbc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d907      	bls.n	80046e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e15c      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470000 	.word	0x42470000
 80046e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b8a      	ldr	r3, [pc, #552]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ea      	bne.n	80046c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8097 	beq.w	800482c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b83      	ldr	r3, [pc, #524]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	4b7f      	ldr	r3, [pc, #508]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a7e      	ldr	r2, [pc, #504]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b7c      	ldr	r3, [pc, #496]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b79      	ldr	r3, [pc, #484]	; (8004914 <HAL_RCC_OscConfig+0x4b0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473a:	4b76      	ldr	r3, [pc, #472]	; (8004914 <HAL_RCC_OscConfig+0x4b0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a75      	ldr	r2, [pc, #468]	; (8004914 <HAL_RCC_OscConfig+0x4b0>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fc fb39 	bl	8000dbc <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fc fb35 	bl	8000dbc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e118      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	4b6c      	ldr	r3, [pc, #432]	; (8004914 <HAL_RCC_OscConfig+0x4b0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x31e>
 8004774:	4b66      	ldr	r3, [pc, #408]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a65      	ldr	r2, [pc, #404]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	e01c      	b.n	80047bc <HAL_RCC_OscConfig+0x358>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x340>
 800478a:	4b61      	ldr	r3, [pc, #388]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004790:	f043 0304 	orr.w	r3, r3, #4
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a5d      	ldr	r2, [pc, #372]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0x358>
 80047a4:	4b5a      	ldr	r3, [pc, #360]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a59      	ldr	r2, [pc, #356]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	4b57      	ldr	r3, [pc, #348]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a56      	ldr	r2, [pc, #344]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fc fafa 	bl	8000dbc <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fc faf6 	bl	8000dbc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0d7      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCC_OscConfig+0x368>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fc fae4 	bl	8000dbc <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fc fae0 	bl	8000dbc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0c1      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480e:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80ad 	beq.w	8004990 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b08      	cmp	r3, #8
 8004840:	d060      	beq.n	8004904 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d145      	bne.n	80048d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCC_OscConfig+0x4b4>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc fab4 	bl	8000dbc <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004858:	f7fc fab0 	bl	8000dbc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e093      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	491b      	ldr	r1, [pc, #108]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x4b4>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fc fa85 	bl	8000dbc <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fc fa81 	bl	8000dbc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e064      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x452>
 80048d4:	e05c      	b.n	8004990 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x4b4>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fc fa6e 	bl	8000dbc <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fc fa6a 	bl	8000dbc <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e04d      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x480>
 8004902:	e045      	b.n	8004990 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e040      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800491c:	4b1f      	ldr	r3, [pc, #124]	; (800499c <HAL_RCC_OscConfig+0x538>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d030      	beq.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d129      	bne.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d122      	bne.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004954:	4293      	cmp	r3, r2
 8004956:	d119      	bne.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	3b01      	subs	r3, #1
 8004966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d10f      	bne.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e03f      	b.n	8004a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc f82e 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fd7b 	bl	80054e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b08a      	sub	sp, #40	; 0x28
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d17c      	bne.n	8004b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_UART_Transmit+0x2c>
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e075      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Transmit+0x3e>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e06e      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2221      	movs	r2, #33	; 0x21
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc f995 	bl	8000dbc <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d108      	bne.n	8004abc <HAL_UART_Transmit+0x82>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e003      	b.n	8004ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004acc:	e02a      	b.n	8004b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2180      	movs	r1, #128	; 0x80
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 faf9 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e036      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3302      	adds	r3, #2
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e007      	b.n	8004b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	3301      	adds	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1cf      	bne.n	8004ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	; 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fac9 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b0ba      	sub	sp, #232	; 0xe8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x66>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fbd3 	bl	800536a <UART_Receive_IT>
      return;
 8004bc4:	e256      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80de 	beq.w	8004d8c <HAL_UART_IRQHandler+0x22c>
 8004bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80d1 	beq.w	8004d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_UART_IRQHandler+0xae>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_UART_IRQHandler+0xd2>
 8004c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0202 	orr.w	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_UART_IRQHandler+0xf6>
 8004c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_UART_IRQHandler+0x126>
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f043 0208 	orr.w	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 81ed 	beq.w	800506a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_UART_IRQHandler+0x14e>
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb5e 	bl	800536a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_UART_IRQHandler+0x17a>
 8004cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04f      	beq.n	8004d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa66 	bl	80051ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d141      	bne.n	8004d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1d9      	bne.n	8004cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	4a7d      	ldr	r2, [pc, #500]	; (8004f3c <HAL_UART_IRQHandler+0x3dc>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc f9e5 	bl	800111e <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	e00e      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f99a 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e00a      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f996 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e006      	b.n	8004d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f992 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d86:	e170      	b.n	800506a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	bf00      	nop
    return;
 8004d8a:	e16e      	b.n	800506a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 814a 	bne.w	800502a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8143 	beq.w	800502a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 813c 	beq.w	800502a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	f040 80b4 	bne.w	8004f40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8140 	beq.w	800506e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004df6:	429a      	cmp	r2, r3
 8004df8:	f080 8139 	bcs.w	800506e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	f000 8088 	beq.w	8004f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e1      	bne.n	8004e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e3      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc f88e 	bl	800103e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8c0 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f38:	e099      	b.n	800506e <HAL_UART_IRQHandler+0x50e>
 8004f3a:	bf00      	nop
 8004f3c:	08005273 	.word	0x08005273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 808b 	beq.w	8005072 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8086 	beq.w	8005072 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e3      	bne.n	8004f66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	623b      	str	r3, [r7, #32]
   return(result);
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e3      	bne.n	8004f9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0310 	bic.w	r3, r3, #16
 8004ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005008:	61fa      	str	r2, [r7, #28]
 800500a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	69b9      	ldr	r1, [r7, #24]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	617b      	str	r3, [r7, #20]
   return(result);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e3      	bne.n	8004fe4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800501c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f848 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005028:	e023      	b.n	8005072 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_UART_IRQHandler+0x4ea>
 8005036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f929 	bl	800529a <UART_Transmit_IT>
    return;
 8005048:	e014      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <HAL_UART_IRQHandler+0x514>
 8005056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f969 	bl	800533a <UART_EndTransmit_IT>
    return;
 8005068:	e004      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
    return;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
      return;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <HAL_UART_IRQHandler+0x514>
      return;
 8005072:	bf00      	nop
  }
}
 8005074:	37e8      	adds	r7, #232	; 0xe8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b090      	sub	sp, #64	; 0x40
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	e050      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d04c      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
 80050f0:	f7fb fe64 	bl	8000dbc <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d241      	bcs.n	8005184 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005120:	637a      	str	r2, [r7, #52]	; 0x34
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3314      	adds	r3, #20
 800513a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005154:	623a      	str	r2, [r7, #32]
 8005156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	61bb      	str	r3, [r7, #24]
   return(result);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e5      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e00f      	b.n	80051a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d09f      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3740      	adds	r7, #64	; 0x40
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b095      	sub	sp, #84	; 0x54
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051d4:	643a      	str	r2, [r7, #64]	; 0x40
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	2b01      	cmp	r3, #1
 8005222:	d119      	bne.n	8005258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60bb      	str	r3, [r7, #8]
   return(result);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	647b      	str	r3, [r7, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005244:	61ba      	str	r2, [r7, #24]
 8005246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6979      	ldr	r1, [r7, #20]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	613b      	str	r3, [r7, #16]
   return(result);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005266:	bf00      	nop
 8005268:	3754      	adds	r7, #84	; 0x54
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ff09 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b21      	cmp	r3, #33	; 0x21
 80052ac:	d13e      	bne.n	800532c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b6:	d114      	bne.n	80052e2 <UART_Transmit_IT+0x48>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d110      	bne.n	80052e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	1c9a      	adds	r2, r3, #2
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	621a      	str	r2, [r3, #32]
 80052e0:	e008      	b.n	80052f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	1c59      	adds	r1, r3, #1
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6211      	str	r1, [r2, #32]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4619      	mov	r1, r3
 8005302:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10f      	bne.n	8005328 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005316:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005326:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fe8e 	bl	800507c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b08c      	sub	sp, #48	; 0x30
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b22      	cmp	r3, #34	; 0x22
 800537c:	f040 80ab 	bne.w	80054d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d117      	bne.n	80053ba <UART_Receive_IT+0x50>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d113      	bne.n	80053ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28
 80053b8:	e026      	b.n	8005408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d007      	beq.n	80053de <UART_Receive_IT+0x74>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <UART_Receive_IT+0x82>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e008      	b.n	80053fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4619      	mov	r1, r3
 8005416:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005418:	2b00      	cmp	r3, #0
 800541a:	d15a      	bne.n	80054d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0220 	bic.w	r2, r2, #32
 800542a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800543a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	2b01      	cmp	r3, #1
 800545a:	d135      	bne.n	80054c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	613b      	str	r3, [r7, #16]
   return(result);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f023 0310 	bic.w	r3, r3, #16
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	623a      	str	r2, [r7, #32]
 8005484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	69f9      	ldr	r1, [r7, #28]
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d10a      	bne.n	80054ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff fdf9 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
 80054c6:	e002      	b.n	80054ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fde1 	bl	8005090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e002      	b.n	80054d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3730      	adds	r7, #48	; 0x30
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e4:	b0c0      	sub	sp, #256	; 0x100
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	ea40 0301 	orr.w	r3, r0, r1
 8005508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	431a      	orrs	r2, r3
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005538:	f021 010c 	bic.w	r1, r1, #12
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005546:	430b      	orrs	r3, r1
 8005548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	6999      	ldr	r1, [r3, #24]
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	ea40 0301 	orr.w	r3, r0, r1
 8005566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b8f      	ldr	r3, [pc, #572]	; (80057ac <UART_SetConfig+0x2cc>)
 8005570:	429a      	cmp	r2, r3
 8005572:	d005      	beq.n	8005580 <UART_SetConfig+0xa0>
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b8d      	ldr	r3, [pc, #564]	; (80057b0 <UART_SetConfig+0x2d0>)
 800557c:	429a      	cmp	r2, r3
 800557e:	d104      	bne.n	800558a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005580:	f7fe fd2c 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 8005584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005588:	e003      	b.n	8005592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800558a:	f7fe fd13 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 800558e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559c:	f040 810c 	bne.w	80057b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	1891      	adds	r1, r2, r2
 80055b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80055ba:	415b      	adcs	r3, r3
 80055bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055c2:	4621      	mov	r1, r4
 80055c4:	eb12 0801 	adds.w	r8, r2, r1
 80055c8:	4629      	mov	r1, r5
 80055ca:	eb43 0901 	adc.w	r9, r3, r1
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055e2:	4690      	mov	r8, r2
 80055e4:	4699      	mov	r9, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	eb18 0303 	adds.w	r3, r8, r3
 80055ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055f0:	462b      	mov	r3, r5
 80055f2:	eb49 0303 	adc.w	r3, r9, r3
 80055f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005606:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800560a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800560e:	460b      	mov	r3, r1
 8005610:	18db      	adds	r3, r3, r3
 8005612:	653b      	str	r3, [r7, #80]	; 0x50
 8005614:	4613      	mov	r3, r2
 8005616:	eb42 0303 	adc.w	r3, r2, r3
 800561a:	657b      	str	r3, [r7, #84]	; 0x54
 800561c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005624:	f7fa fe44 	bl	80002b0 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <UART_SetConfig+0x2d4>)
 800562e:	fba3 2302 	umull	r2, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	011c      	lsls	r4, r3, #4
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563a:	2200      	movs	r2, #0
 800563c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005640:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	1891      	adds	r1, r2, r2
 800564e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005650:	415b      	adcs	r3, r3
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005658:	4641      	mov	r1, r8
 800565a:	eb12 0a01 	adds.w	sl, r2, r1
 800565e:	4649      	mov	r1, r9
 8005660:	eb43 0b01 	adc.w	fp, r3, r1
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005678:	4692      	mov	sl, r2
 800567a:	469b      	mov	fp, r3
 800567c:	4643      	mov	r3, r8
 800567e:	eb1a 0303 	adds.w	r3, sl, r3
 8005682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005686:	464b      	mov	r3, r9
 8005688:	eb4b 0303 	adc.w	r3, fp, r3
 800568c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800569c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056a4:	460b      	mov	r3, r1
 80056a6:	18db      	adds	r3, r3, r3
 80056a8:	643b      	str	r3, [r7, #64]	; 0x40
 80056aa:	4613      	mov	r3, r2
 80056ac:	eb42 0303 	adc.w	r3, r2, r3
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
 80056b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056ba:	f7fa fdf9 	bl	80002b0 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	4b3b      	ldr	r3, [pc, #236]	; (80057b4 <UART_SetConfig+0x2d4>)
 80056c6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	2264      	movs	r2, #100	; 0x64
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056da:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <UART_SetConfig+0x2d4>)
 80056dc:	fba3 2302 	umull	r2, r3, r3, r2
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e8:	441c      	add	r4, r3
 80056ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	1891      	adds	r1, r2, r2
 8005702:	63b9      	str	r1, [r7, #56]	; 0x38
 8005704:	415b      	adcs	r3, r3
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800570c:	4641      	mov	r1, r8
 800570e:	1851      	adds	r1, r2, r1
 8005710:	6339      	str	r1, [r7, #48]	; 0x30
 8005712:	4649      	mov	r1, r9
 8005714:	414b      	adcs	r3, r1
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005724:	4659      	mov	r1, fp
 8005726:	00cb      	lsls	r3, r1, #3
 8005728:	4651      	mov	r1, sl
 800572a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572e:	4651      	mov	r1, sl
 8005730:	00ca      	lsls	r2, r1, #3
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	4603      	mov	r3, r0
 8005738:	4642      	mov	r2, r8
 800573a:	189b      	adds	r3, r3, r2
 800573c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005740:	464b      	mov	r3, r9
 8005742:	460a      	mov	r2, r1
 8005744:	eb42 0303 	adc.w	r3, r2, r3
 8005748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005758:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800575c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005760:	460b      	mov	r3, r1
 8005762:	18db      	adds	r3, r3, r3
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
 8005766:	4613      	mov	r3, r2
 8005768:	eb42 0303 	adc.w	r3, r2, r3
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005776:	f7fa fd9b 	bl	80002b0 <__aeabi_uldivmod>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <UART_SetConfig+0x2d4>)
 8005780:	fba3 1302 	umull	r1, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2164      	movs	r1, #100	; 0x64
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	3332      	adds	r3, #50	; 0x32
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <UART_SetConfig+0x2d4>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	f003 0207 	and.w	r2, r3, #7
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4422      	add	r2, r4
 80057a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057a8:	e105      	b.n	80059b6 <UART_SetConfig+0x4d6>
 80057aa:	bf00      	nop
 80057ac:	40011000 	.word	0x40011000
 80057b0:	40011400 	.word	0x40011400
 80057b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057ca:	4642      	mov	r2, r8
 80057cc:	464b      	mov	r3, r9
 80057ce:	1891      	adds	r1, r2, r2
 80057d0:	6239      	str	r1, [r7, #32]
 80057d2:	415b      	adcs	r3, r3
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057da:	4641      	mov	r1, r8
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb43 0501 	adc.w	r5, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	00eb      	lsls	r3, r5, #3
 80057ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057f2:	00e2      	lsls	r2, r4, #3
 80057f4:	4614      	mov	r4, r2
 80057f6:	461d      	mov	r5, r3
 80057f8:	4643      	mov	r3, r8
 80057fa:	18e3      	adds	r3, r4, r3
 80057fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005800:	464b      	mov	r3, r9
 8005802:	eb45 0303 	adc.w	r3, r5, r3
 8005806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005826:	4629      	mov	r1, r5
 8005828:	008b      	lsls	r3, r1, #2
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005830:	4621      	mov	r1, r4
 8005832:	008a      	lsls	r2, r1, #2
 8005834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005838:	f7fa fd3a 	bl	80002b0 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4b60      	ldr	r3, [pc, #384]	; (80059c4 <UART_SetConfig+0x4e4>)
 8005842:	fba3 2302 	umull	r2, r3, r3, r2
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	011c      	lsls	r4, r3, #4
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	61b9      	str	r1, [r7, #24]
 8005864:	415b      	adcs	r3, r3
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800586c:	4641      	mov	r1, r8
 800586e:	1851      	adds	r1, r2, r1
 8005870:	6139      	str	r1, [r7, #16]
 8005872:	4649      	mov	r1, r9
 8005874:	414b      	adcs	r3, r1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005884:	4659      	mov	r1, fp
 8005886:	00cb      	lsls	r3, r1, #3
 8005888:	4651      	mov	r1, sl
 800588a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588e:	4651      	mov	r1, sl
 8005890:	00ca      	lsls	r2, r1, #3
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	4603      	mov	r3, r0
 8005898:	4642      	mov	r2, r8
 800589a:	189b      	adds	r3, r3, r2
 800589c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058a0:	464b      	mov	r3, r9
 80058a2:	460a      	mov	r2, r1
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80058b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058c4:	4649      	mov	r1, r9
 80058c6:	008b      	lsls	r3, r1, #2
 80058c8:	4641      	mov	r1, r8
 80058ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ce:	4641      	mov	r1, r8
 80058d0:	008a      	lsls	r2, r1, #2
 80058d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058d6:	f7fa fceb 	bl	80002b0 <__aeabi_uldivmod>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4b39      	ldr	r3, [pc, #228]	; (80059c4 <UART_SetConfig+0x4e4>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3332      	adds	r3, #50	; 0x32
 80058f2:	4a34      	ldr	r2, [pc, #208]	; (80059c4 <UART_SetConfig+0x4e4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fe:	441c      	add	r4, r3
 8005900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005904:	2200      	movs	r2, #0
 8005906:	673b      	str	r3, [r7, #112]	; 0x70
 8005908:	677a      	str	r2, [r7, #116]	; 0x74
 800590a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800590e:	4642      	mov	r2, r8
 8005910:	464b      	mov	r3, r9
 8005912:	1891      	adds	r1, r2, r2
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	415b      	adcs	r3, r3
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591e:	4641      	mov	r1, r8
 8005920:	1851      	adds	r1, r2, r1
 8005922:	6039      	str	r1, [r7, #0]
 8005924:	4649      	mov	r1, r9
 8005926:	414b      	adcs	r3, r1
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005936:	4659      	mov	r1, fp
 8005938:	00cb      	lsls	r3, r1, #3
 800593a:	4651      	mov	r1, sl
 800593c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005940:	4651      	mov	r1, sl
 8005942:	00ca      	lsls	r2, r1, #3
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	4603      	mov	r3, r0
 800594a:	4642      	mov	r2, r8
 800594c:	189b      	adds	r3, r3, r2
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005950:	464b      	mov	r3, r9
 8005952:	460a      	mov	r2, r1
 8005954:	eb42 0303 	adc.w	r3, r2, r3
 8005958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	663b      	str	r3, [r7, #96]	; 0x60
 8005964:	667a      	str	r2, [r7, #100]	; 0x64
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005972:	4649      	mov	r1, r9
 8005974:	008b      	lsls	r3, r1, #2
 8005976:	4641      	mov	r1, r8
 8005978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597c:	4641      	mov	r1, r8
 800597e:	008a      	lsls	r2, r1, #2
 8005980:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005984:	f7fa fc94 	bl	80002b0 <__aeabi_uldivmod>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <UART_SetConfig+0x4e4>)
 800598e:	fba3 1302 	umull	r1, r3, r3, r2
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2164      	movs	r1, #100	; 0x64
 8005996:	fb01 f303 	mul.w	r3, r1, r3
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	3332      	adds	r3, #50	; 0x32
 80059a0:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <UART_SetConfig+0x4e4>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4422      	add	r2, r4
 80059b4:	609a      	str	r2, [r3, #8]
}
 80059b6:	bf00      	nop
 80059b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c2:	bf00      	nop
 80059c4:	51eb851f 	.word	0x51eb851f

080059c8 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80059da:	232d      	movs	r3, #45	; 0x2d
 80059dc:	73bb      	strb	r3, [r7, #14]
 80059de:	e011      	b.n	8005a04 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	b299      	uxth	r1, r3
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	3b2d      	subs	r3, #45	; 0x2d
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <VL53L1X_SensorInit+0xd4>)
 80059ea:	5cd2      	ldrb	r2, [r2, r3]
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f972 	bl	8005cd8 <VL53L1_WrByte>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	3301      	adds	r3, #1
 8005a02:	73bb      	strb	r3, [r7, #14]
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	2b87      	cmp	r3, #135	; 0x87
 8005a08:	d9ea      	bls.n	80059e0 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f889 	bl	8005b24 <VL53L1X_StartRanging>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8005a20:	e00b      	b.n	8005a3a <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8005a22:	f107 020d 	add.w	r2, r7, #13
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f8aa 	bl	8005b84 <VL53L1X_CheckForDataReady>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8005a3a:	7b7b      	ldrb	r3, [r7, #13]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f82c 	bl	8005aa0 <VL53L1X_ClearInterrupt>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f87d 	bl	8005b54 <VL53L1X_StopRanging>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2209      	movs	r2, #9
 8005a68:	2108      	movs	r1, #8
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f934 	bl	8005cd8 <VL53L1_WrByte>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	210b      	movs	r1, #11
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f929 	bl	8005cd8 <VL53L1_WrByte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	08006df0 	.word	0x08006df0

08005aa0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2186      	movs	r1, #134	; 0x86
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f90f 	bl	8005cd8 <VL53L1_WrByte>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	73fb      	strb	r3, [r7, #15]
	return status;
 8005ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	6039      	str	r1, [r7, #0]
 8005ada:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8005ae0:	f107 020e 	add.w	r2, r7, #14
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	2130      	movs	r1, #48	; 0x30
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f921 	bl	8005d30 <VL53L1_RdByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	701a      	strb	r2, [r3, #0]
	return status;
 8005b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	2187      	movs	r1, #135	; 0x87
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f8cd 	bl	8005cd8 <VL53L1_WrByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	73fb      	strb	r3, [r7, #15]
	return status;
 8005b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2187      	movs	r1, #135	; 0x87
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f8b5 	bl	8005cd8 <VL53L1_WrByte>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	73fb      	strb	r3, [r7, #15]
	return status;
 8005b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8005b94:	f107 020d 	add.w	r2, r7, #13
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff97 	bl	8005ad0 <VL53L1X_GetInterruptPolarity>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8005bac:	f107 020e 	add.w	r2, r7, #14
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	2131      	movs	r1, #49	; 0x31
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f8bb 	bl	8005d30 <VL53L1_RdByte>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8005bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10c      	bne.n	8005be6 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	7b7a      	ldrb	r2, [r7, #13]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8005be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	6039      	str	r1, [r7, #0]
 8005bfc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8005c06:	f107 020e 	add.w	r2, r7, #14
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	21e5      	movs	r1, #229	; 0xe5
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f88e 	bl	8005d30 <VL53L1_RdByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8005c1e:	7bba      	ldrb	r2, [r7, #14]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	701a      	strb	r2, [r3, #0]
	return status;
 8005c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8005c40:	f107 020c 	add.w	r2, r7, #12
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	2196      	movs	r1, #150	; 0x96
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f8a9 	bl	8005da0 <VL53L1_RdWord>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8005c58:	89ba      	ldrh	r2, [r7, #12]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	801a      	strh	r2, [r3, #0]
	return status;
 8005c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	4603      	mov	r3, r0
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	89f9      	ldrh	r1, [r7, #14]
 8005c80:	220a      	movs	r2, #10
 8005c82:	9200      	str	r2, [sp, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <_I2CWrite+0x30>)
 8005c88:	f7fb fd76 	bl	8001778 <HAL_I2C_Master_Transmit>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000090 	.word	0x20000090

08005ca0 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	b299      	uxth	r1, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	220a      	movs	r2, #10
 8005cbc:	9200      	str	r2, [sp, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <_I2CRead+0x34>)
 8005cc2:	f7fb fe57 	bl	8001974 <HAL_I2C_Master_Receive>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005cca:	697b      	ldr	r3, [r7, #20]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000090 	.word	0x20000090

08005cd8 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	80bb      	strh	r3, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005cee:	88bb      	ldrh	r3, [r7, #4]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <VL53L1_WrByte+0x54>)
 8005cf8:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005cfa:	88bb      	ldrh	r3, [r7, #4]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <VL53L1_WrByte+0x54>)
 8005d00:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <VL53L1_WrByte+0x54>)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	4907      	ldr	r1, [pc, #28]	; (8005d2c <VL53L1_WrByte+0x54>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ffac 	bl	8005c6c <_I2CWrite>
 8005d14:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d1c:	23f3      	movs	r3, #243	; 0xf3
 8005d1e:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8005d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000130 	.word	0x20000130

08005d30 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	603a      	str	r2, [r7, #0]
 8005d3a:	80fb      	strh	r3, [r7, #6]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005d44:	88bb      	ldrh	r3, [r7, #4]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <VL53L1_RdByte+0x6c>)
 8005d4e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005d50:	88bb      	ldrh	r3, [r7, #4]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <VL53L1_RdByte+0x6c>)
 8005d56:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	490f      	ldr	r1, [pc, #60]	; (8005d9c <VL53L1_RdByte+0x6c>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff84 	bl	8005c6c <_I2CWrite>
 8005d64:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d6c:	23f3      	movs	r3, #243	; 0xf3
 8005d6e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005d70:	e00d      	b.n	8005d8e <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2201      	movs	r2, #1
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff91 	bl	8005ca0 <_I2CRead>
 8005d7e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d86:	23f3      	movs	r3, #243	; 0xf3
 8005d88:	73fb      	strb	r3, [r7, #15]
 8005d8a:	e000      	b.n	8005d8e <VL53L1_RdByte+0x5e>
    }
done:
 8005d8c:	bf00      	nop
    return Status;
 8005d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000130 	.word	0x20000130

08005da0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	603a      	str	r2, [r7, #0]
 8005daa:	80fb      	strh	r3, [r7, #6]
 8005dac:	460b      	mov	r3, r1
 8005dae:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005db4:	88bb      	ldrh	r3, [r7, #4]
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005dbe:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005dc6:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4914      	ldr	r1, [pc, #80]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff ff4c 	bl	8005c6c <_I2CWrite>
 8005dd4:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005ddc:	23f3      	movs	r3, #243	; 0xf3
 8005dde:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005de0:	e018      	b.n	8005e14 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2202      	movs	r2, #2
 8005de6:	490e      	ldr	r1, [pc, #56]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff ff59 	bl	8005ca0 <_I2CRead>
 8005dee:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005df6:	23f3      	movs	r3, #243	; 0xf3
 8005df8:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005dfa:	e00b      	b.n	8005e14 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005dfc:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <VL53L1_RdWord+0x80>)
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000130 	.word	0x20000130

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000010 	.word	0x20000010

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 ffae 	bl	8006da4 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	08006eec 	.word	0x08006eec
 8005e6c:	08006eec 	.word	0x08006eec
 8005e70:	08006eec 	.word	0x08006eec
 8005e74:	08006ef0 	.word	0x08006ef0

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <iprintf>:
 8005e88:	b40f      	push	{r0, r1, r2, r3}
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <iprintf+0x2c>)
 8005e8c:	b513      	push	{r0, r1, r4, lr}
 8005e8e:	681c      	ldr	r4, [r3, #0]
 8005e90:	b124      	cbz	r4, 8005e9c <iprintf+0x14>
 8005e92:	69a3      	ldr	r3, [r4, #24]
 8005e94:	b913      	cbnz	r3, 8005e9c <iprintf+0x14>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f866 	bl	8005f68 <__sinit>
 8005e9c:	ab05      	add	r3, sp, #20
 8005e9e:	9a04      	ldr	r2, [sp, #16]
 8005ea0:	68a1      	ldr	r1, [r4, #8]
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 f9bd 	bl	8006224 <_vfiprintf_r>
 8005eaa:	b002      	add	sp, #8
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	b004      	add	sp, #16
 8005eb2:	4770      	bx	lr
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <std>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec6:	6083      	str	r3, [r0, #8]
 8005ec8:	8181      	strh	r1, [r0, #12]
 8005eca:	6643      	str	r3, [r0, #100]	; 0x64
 8005ecc:	81c2      	strh	r2, [r0, #14]
 8005ece:	6183      	str	r3, [r0, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	305c      	adds	r0, #92	; 0x5c
 8005ed6:	f7ff ffcf 	bl	8005e78 <memset>
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x38>)
 8005edc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <std+0x3c>)
 8005ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <std+0x40>)
 8005ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <std+0x44>)
 8005ee8:	6224      	str	r4, [r4, #32]
 8005eea:	6323      	str	r3, [r4, #48]	; 0x30
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	080067cd 	.word	0x080067cd
 8005ef4:	080067ef 	.word	0x080067ef
 8005ef8:	08006827 	.word	0x08006827
 8005efc:	0800684b 	.word	0x0800684b

08005f00 <_cleanup_r>:
 8005f00:	4901      	ldr	r1, [pc, #4]	; (8005f08 <_cleanup_r+0x8>)
 8005f02:	f000 b8af 	b.w	8006064 <_fwalk_reent>
 8005f06:	bf00      	nop
 8005f08:	08006b25 	.word	0x08006b25

08005f0c <__sfmoreglue>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	2268      	movs	r2, #104	; 0x68
 8005f10:	1e4d      	subs	r5, r1, #1
 8005f12:	4355      	muls	r5, r2
 8005f14:	460e      	mov	r6, r1
 8005f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f1a:	f000 f8e5 	bl	80060e8 <_malloc_r>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b140      	cbz	r0, 8005f34 <__sfmoreglue+0x28>
 8005f22:	2100      	movs	r1, #0
 8005f24:	e9c0 1600 	strd	r1, r6, [r0]
 8005f28:	300c      	adds	r0, #12
 8005f2a:	60a0      	str	r0, [r4, #8]
 8005f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f30:	f7ff ffa2 	bl	8005e78 <memset>
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__sfp_lock_acquire>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_acquire+0x8>)
 8005f3a:	f000 b8b3 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000231 	.word	0x20000231

08005f44 <__sfp_lock_release>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sfp_lock_release+0x8>)
 8005f46:	f000 b8ae 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000231 	.word	0x20000231

08005f50 <__sinit_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_acquire+0x8>)
 8005f52:	f000 b8a7 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20000232 	.word	0x20000232

08005f5c <__sinit_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sinit_lock_release+0x8>)
 8005f5e:	f000 b8a2 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20000232 	.word	0x20000232

08005f68 <__sinit>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fff0 	bl	8005f50 <__sinit_lock_acquire>
 8005f70:	69a3      	ldr	r3, [r4, #24]
 8005f72:	b11b      	cbz	r3, 8005f7c <__sinit+0x14>
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f7ff bff0 	b.w	8005f5c <__sinit_lock_release>
 8005f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f80:	6523      	str	r3, [r4, #80]	; 0x50
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <__sinit+0x68>)
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <__sinit+0x6c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	bf04      	itt	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	61a3      	streq	r3, [r4, #24]
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f820 	bl	8005fd8 <__sfp>
 8005f98:	6060      	str	r0, [r4, #4]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f81c 	bl	8005fd8 <__sfp>
 8005fa0:	60a0      	str	r0, [r4, #8]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f818 	bl	8005fd8 <__sfp>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60e0      	str	r0, [r4, #12]
 8005fac:	2104      	movs	r1, #4
 8005fae:	6860      	ldr	r0, [r4, #4]
 8005fb0:	f7ff ff82 	bl	8005eb8 <std>
 8005fb4:	68a0      	ldr	r0, [r4, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2109      	movs	r1, #9
 8005fba:	f7ff ff7d 	bl	8005eb8 <std>
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	f7ff ff78 	bl	8005eb8 <std>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61a3      	str	r3, [r4, #24]
 8005fcc:	e7d2      	b.n	8005f74 <__sinit+0xc>
 8005fce:	bf00      	nop
 8005fd0:	08006e4c 	.word	0x08006e4c
 8005fd4:	08005f01 	.word	0x08005f01

08005fd8 <__sfp>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	4607      	mov	r7, r0
 8005fdc:	f7ff ffac 	bl	8005f38 <__sfp_lock_acquire>
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <__sfp+0x84>)
 8005fe2:	681e      	ldr	r6, [r3, #0]
 8005fe4:	69b3      	ldr	r3, [r6, #24]
 8005fe6:	b913      	cbnz	r3, 8005fee <__sfp+0x16>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffbd 	bl	8005f68 <__sinit>
 8005fee:	3648      	adds	r6, #72	; 0x48
 8005ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	d503      	bpl.n	8006000 <__sfp+0x28>
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	b30b      	cbz	r3, 8006040 <__sfp+0x68>
 8005ffc:	6836      	ldr	r6, [r6, #0]
 8005ffe:	e7f7      	b.n	8005ff0 <__sfp+0x18>
 8006000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006004:	b9d5      	cbnz	r5, 800603c <__sfp+0x64>
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <__sfp+0x88>)
 8006008:	60e3      	str	r3, [r4, #12]
 800600a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800600e:	6665      	str	r5, [r4, #100]	; 0x64
 8006010:	f000 f847 	bl	80060a2 <__retarget_lock_init_recursive>
 8006014:	f7ff ff96 	bl	8005f44 <__sfp_lock_release>
 8006018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800601c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	61a5      	str	r5, [r4, #24]
 8006024:	2208      	movs	r2, #8
 8006026:	4629      	mov	r1, r5
 8006028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800602c:	f7ff ff24 	bl	8005e78 <memset>
 8006030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006038:	4620      	mov	r0, r4
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	3468      	adds	r4, #104	; 0x68
 800603e:	e7d9      	b.n	8005ff4 <__sfp+0x1c>
 8006040:	2104      	movs	r1, #4
 8006042:	4638      	mov	r0, r7
 8006044:	f7ff ff62 	bl	8005f0c <__sfmoreglue>
 8006048:	4604      	mov	r4, r0
 800604a:	6030      	str	r0, [r6, #0]
 800604c:	2800      	cmp	r0, #0
 800604e:	d1d5      	bne.n	8005ffc <__sfp+0x24>
 8006050:	f7ff ff78 	bl	8005f44 <__sfp_lock_release>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	e7ee      	b.n	8006038 <__sfp+0x60>
 800605a:	bf00      	nop
 800605c:	08006e4c 	.word	0x08006e4c
 8006060:	ffff0001 	.word	0xffff0001

08006064 <_fwalk_reent>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006070:	2700      	movs	r7, #0
 8006072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006076:	f1b9 0901 	subs.w	r9, r9, #1
 800607a:	d505      	bpl.n	8006088 <_fwalk_reent+0x24>
 800607c:	6824      	ldr	r4, [r4, #0]
 800607e:	2c00      	cmp	r4, #0
 8006080:	d1f7      	bne.n	8006072 <_fwalk_reent+0xe>
 8006082:	4638      	mov	r0, r7
 8006084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d907      	bls.n	800609e <_fwalk_reent+0x3a>
 800608e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006092:	3301      	adds	r3, #1
 8006094:	d003      	beq.n	800609e <_fwalk_reent+0x3a>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	47c0      	blx	r8
 800609c:	4307      	orrs	r7, r0
 800609e:	3568      	adds	r5, #104	; 0x68
 80060a0:	e7e9      	b.n	8006076 <_fwalk_reent+0x12>

080060a2 <__retarget_lock_init_recursive>:
 80060a2:	4770      	bx	lr

080060a4 <__retarget_lock_acquire_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <__retarget_lock_release_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <sbrk_aligned>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4e0e      	ldr	r6, [pc, #56]	; (80060e4 <sbrk_aligned+0x3c>)
 80060ac:	460c      	mov	r4, r1
 80060ae:	6831      	ldr	r1, [r6, #0]
 80060b0:	4605      	mov	r5, r0
 80060b2:	b911      	cbnz	r1, 80060ba <sbrk_aligned+0x12>
 80060b4:	f000 fb7a 	bl	80067ac <_sbrk_r>
 80060b8:	6030      	str	r0, [r6, #0]
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 fb75 	bl	80067ac <_sbrk_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	d00a      	beq.n	80060dc <sbrk_aligned+0x34>
 80060c6:	1cc4      	adds	r4, r0, #3
 80060c8:	f024 0403 	bic.w	r4, r4, #3
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d007      	beq.n	80060e0 <sbrk_aligned+0x38>
 80060d0:	1a21      	subs	r1, r4, r0
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 fb6a 	bl	80067ac <_sbrk_r>
 80060d8:	3001      	adds	r0, #1
 80060da:	d101      	bne.n	80060e0 <sbrk_aligned+0x38>
 80060dc:	f04f 34ff 	mov.w	r4, #4294967295
 80060e0:	4620      	mov	r0, r4
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	20000238 	.word	0x20000238

080060e8 <_malloc_r>:
 80060e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ec:	1ccd      	adds	r5, r1, #3
 80060ee:	f025 0503 	bic.w	r5, r5, #3
 80060f2:	3508      	adds	r5, #8
 80060f4:	2d0c      	cmp	r5, #12
 80060f6:	bf38      	it	cc
 80060f8:	250c      	movcc	r5, #12
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	4607      	mov	r7, r0
 80060fe:	db01      	blt.n	8006104 <_malloc_r+0x1c>
 8006100:	42a9      	cmp	r1, r5
 8006102:	d905      	bls.n	8006110 <_malloc_r+0x28>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	2600      	movs	r6, #0
 800610a:	4630      	mov	r0, r6
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006110:	4e2e      	ldr	r6, [pc, #184]	; (80061cc <_malloc_r+0xe4>)
 8006112:	f000 fdbb 	bl	8006c8c <__malloc_lock>
 8006116:	6833      	ldr	r3, [r6, #0]
 8006118:	461c      	mov	r4, r3
 800611a:	bb34      	cbnz	r4, 800616a <_malloc_r+0x82>
 800611c:	4629      	mov	r1, r5
 800611e:	4638      	mov	r0, r7
 8006120:	f7ff ffc2 	bl	80060a8 <sbrk_aligned>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	4604      	mov	r4, r0
 8006128:	d14d      	bne.n	80061c6 <_malloc_r+0xde>
 800612a:	6834      	ldr	r4, [r6, #0]
 800612c:	4626      	mov	r6, r4
 800612e:	2e00      	cmp	r6, #0
 8006130:	d140      	bne.n	80061b4 <_malloc_r+0xcc>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	4631      	mov	r1, r6
 8006136:	4638      	mov	r0, r7
 8006138:	eb04 0803 	add.w	r8, r4, r3
 800613c:	f000 fb36 	bl	80067ac <_sbrk_r>
 8006140:	4580      	cmp	r8, r0
 8006142:	d13a      	bne.n	80061ba <_malloc_r+0xd2>
 8006144:	6821      	ldr	r1, [r4, #0]
 8006146:	3503      	adds	r5, #3
 8006148:	1a6d      	subs	r5, r5, r1
 800614a:	f025 0503 	bic.w	r5, r5, #3
 800614e:	3508      	adds	r5, #8
 8006150:	2d0c      	cmp	r5, #12
 8006152:	bf38      	it	cc
 8006154:	250c      	movcc	r5, #12
 8006156:	4629      	mov	r1, r5
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff ffa5 	bl	80060a8 <sbrk_aligned>
 800615e:	3001      	adds	r0, #1
 8006160:	d02b      	beq.n	80061ba <_malloc_r+0xd2>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	442b      	add	r3, r5
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	e00e      	b.n	8006188 <_malloc_r+0xa0>
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	1b52      	subs	r2, r2, r5
 800616e:	d41e      	bmi.n	80061ae <_malloc_r+0xc6>
 8006170:	2a0b      	cmp	r2, #11
 8006172:	d916      	bls.n	80061a2 <_malloc_r+0xba>
 8006174:	1961      	adds	r1, r4, r5
 8006176:	42a3      	cmp	r3, r4
 8006178:	6025      	str	r5, [r4, #0]
 800617a:	bf18      	it	ne
 800617c:	6059      	strne	r1, [r3, #4]
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	bf08      	it	eq
 8006182:	6031      	streq	r1, [r6, #0]
 8006184:	5162      	str	r2, [r4, r5]
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	4638      	mov	r0, r7
 800618a:	f104 060b 	add.w	r6, r4, #11
 800618e:	f000 fd83 	bl	8006c98 <__malloc_unlock>
 8006192:	f026 0607 	bic.w	r6, r6, #7
 8006196:	1d23      	adds	r3, r4, #4
 8006198:	1af2      	subs	r2, r6, r3
 800619a:	d0b6      	beq.n	800610a <_malloc_r+0x22>
 800619c:	1b9b      	subs	r3, r3, r6
 800619e:	50a3      	str	r3, [r4, r2]
 80061a0:	e7b3      	b.n	800610a <_malloc_r+0x22>
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	bf0c      	ite	eq
 80061a8:	6032      	streq	r2, [r6, #0]
 80061aa:	605a      	strne	r2, [r3, #4]
 80061ac:	e7ec      	b.n	8006188 <_malloc_r+0xa0>
 80061ae:	4623      	mov	r3, r4
 80061b0:	6864      	ldr	r4, [r4, #4]
 80061b2:	e7b2      	b.n	800611a <_malloc_r+0x32>
 80061b4:	4634      	mov	r4, r6
 80061b6:	6876      	ldr	r6, [r6, #4]
 80061b8:	e7b9      	b.n	800612e <_malloc_r+0x46>
 80061ba:	230c      	movs	r3, #12
 80061bc:	603b      	str	r3, [r7, #0]
 80061be:	4638      	mov	r0, r7
 80061c0:	f000 fd6a 	bl	8006c98 <__malloc_unlock>
 80061c4:	e7a1      	b.n	800610a <_malloc_r+0x22>
 80061c6:	6025      	str	r5, [r4, #0]
 80061c8:	e7de      	b.n	8006188 <_malloc_r+0xa0>
 80061ca:	bf00      	nop
 80061cc:	20000234 	.word	0x20000234

080061d0 <__sfputc_r>:
 80061d0:	6893      	ldr	r3, [r2, #8]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	b410      	push	{r4}
 80061d8:	6093      	str	r3, [r2, #8]
 80061da:	da08      	bge.n	80061ee <__sfputc_r+0x1e>
 80061dc:	6994      	ldr	r4, [r2, #24]
 80061de:	42a3      	cmp	r3, r4
 80061e0:	db01      	blt.n	80061e6 <__sfputc_r+0x16>
 80061e2:	290a      	cmp	r1, #10
 80061e4:	d103      	bne.n	80061ee <__sfputc_r+0x1e>
 80061e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ea:	f000 bb33 	b.w	8006854 <__swbuf_r>
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	1c58      	adds	r0, r3, #1
 80061f2:	6010      	str	r0, [r2, #0]
 80061f4:	7019      	strb	r1, [r3, #0]
 80061f6:	4608      	mov	r0, r1
 80061f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <__sfputs_r>:
 80061fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006200:	4606      	mov	r6, r0
 8006202:	460f      	mov	r7, r1
 8006204:	4614      	mov	r4, r2
 8006206:	18d5      	adds	r5, r2, r3
 8006208:	42ac      	cmp	r4, r5
 800620a:	d101      	bne.n	8006210 <__sfputs_r+0x12>
 800620c:	2000      	movs	r0, #0
 800620e:	e007      	b.n	8006220 <__sfputs_r+0x22>
 8006210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006214:	463a      	mov	r2, r7
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ffda 	bl	80061d0 <__sfputc_r>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d1f3      	bne.n	8006208 <__sfputs_r+0xa>
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006224 <_vfiprintf_r>:
 8006224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006228:	460d      	mov	r5, r1
 800622a:	b09d      	sub	sp, #116	; 0x74
 800622c:	4614      	mov	r4, r2
 800622e:	4698      	mov	r8, r3
 8006230:	4606      	mov	r6, r0
 8006232:	b118      	cbz	r0, 800623c <_vfiprintf_r+0x18>
 8006234:	6983      	ldr	r3, [r0, #24]
 8006236:	b90b      	cbnz	r3, 800623c <_vfiprintf_r+0x18>
 8006238:	f7ff fe96 	bl	8005f68 <__sinit>
 800623c:	4b89      	ldr	r3, [pc, #548]	; (8006464 <_vfiprintf_r+0x240>)
 800623e:	429d      	cmp	r5, r3
 8006240:	d11b      	bne.n	800627a <_vfiprintf_r+0x56>
 8006242:	6875      	ldr	r5, [r6, #4]
 8006244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d405      	bmi.n	8006256 <_vfiprintf_r+0x32>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	059a      	lsls	r2, r3, #22
 800624e:	d402      	bmi.n	8006256 <_vfiprintf_r+0x32>
 8006250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006252:	f7ff ff27 	bl	80060a4 <__retarget_lock_acquire_recursive>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	071b      	lsls	r3, r3, #28
 800625a:	d501      	bpl.n	8006260 <_vfiprintf_r+0x3c>
 800625c:	692b      	ldr	r3, [r5, #16]
 800625e:	b9eb      	cbnz	r3, 800629c <_vfiprintf_r+0x78>
 8006260:	4629      	mov	r1, r5
 8006262:	4630      	mov	r0, r6
 8006264:	f000 fb5a 	bl	800691c <__swsetup_r>
 8006268:	b1c0      	cbz	r0, 800629c <_vfiprintf_r+0x78>
 800626a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800626c:	07dc      	lsls	r4, r3, #31
 800626e:	d50e      	bpl.n	800628e <_vfiprintf_r+0x6a>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b01d      	add	sp, #116	; 0x74
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	4b7b      	ldr	r3, [pc, #492]	; (8006468 <_vfiprintf_r+0x244>)
 800627c:	429d      	cmp	r5, r3
 800627e:	d101      	bne.n	8006284 <_vfiprintf_r+0x60>
 8006280:	68b5      	ldr	r5, [r6, #8]
 8006282:	e7df      	b.n	8006244 <_vfiprintf_r+0x20>
 8006284:	4b79      	ldr	r3, [pc, #484]	; (800646c <_vfiprintf_r+0x248>)
 8006286:	429d      	cmp	r5, r3
 8006288:	bf08      	it	eq
 800628a:	68f5      	ldreq	r5, [r6, #12]
 800628c:	e7da      	b.n	8006244 <_vfiprintf_r+0x20>
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	0598      	lsls	r0, r3, #22
 8006292:	d4ed      	bmi.n	8006270 <_vfiprintf_r+0x4c>
 8006294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006296:	f7ff ff06 	bl	80060a6 <__retarget_lock_release_recursive>
 800629a:	e7e9      	b.n	8006270 <_vfiprintf_r+0x4c>
 800629c:	2300      	movs	r3, #0
 800629e:	9309      	str	r3, [sp, #36]	; 0x24
 80062a0:	2320      	movs	r3, #32
 80062a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062aa:	2330      	movs	r3, #48	; 0x30
 80062ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006470 <_vfiprintf_r+0x24c>
 80062b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b4:	f04f 0901 	mov.w	r9, #1
 80062b8:	4623      	mov	r3, r4
 80062ba:	469a      	mov	sl, r3
 80062bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c0:	b10a      	cbz	r2, 80062c6 <_vfiprintf_r+0xa2>
 80062c2:	2a25      	cmp	r2, #37	; 0x25
 80062c4:	d1f9      	bne.n	80062ba <_vfiprintf_r+0x96>
 80062c6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ca:	d00b      	beq.n	80062e4 <_vfiprintf_r+0xc0>
 80062cc:	465b      	mov	r3, fp
 80062ce:	4622      	mov	r2, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ff93 	bl	80061fe <__sfputs_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	f000 80aa 	beq.w	8006432 <_vfiprintf_r+0x20e>
 80062de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e0:	445a      	add	r2, fp
 80062e2:	9209      	str	r2, [sp, #36]	; 0x24
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a2 	beq.w	8006432 <_vfiprintf_r+0x20e>
 80062ee:	2300      	movs	r3, #0
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f8:	f10a 0a01 	add.w	sl, sl, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	9307      	str	r3, [sp, #28]
 8006300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006304:	931a      	str	r3, [sp, #104]	; 0x68
 8006306:	4654      	mov	r4, sl
 8006308:	2205      	movs	r2, #5
 800630a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630e:	4858      	ldr	r0, [pc, #352]	; (8006470 <_vfiprintf_r+0x24c>)
 8006310:	f7f9 ff7e 	bl	8000210 <memchr>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	b9d8      	cbnz	r0, 8006350 <_vfiprintf_r+0x12c>
 8006318:	06d1      	lsls	r1, r2, #27
 800631a:	bf44      	itt	mi
 800631c:	2320      	movmi	r3, #32
 800631e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006322:	0713      	lsls	r3, r2, #28
 8006324:	bf44      	itt	mi
 8006326:	232b      	movmi	r3, #43	; 0x2b
 8006328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632c:	f89a 3000 	ldrb.w	r3, [sl]
 8006330:	2b2a      	cmp	r3, #42	; 0x2a
 8006332:	d015      	beq.n	8006360 <_vfiprintf_r+0x13c>
 8006334:	9a07      	ldr	r2, [sp, #28]
 8006336:	4654      	mov	r4, sl
 8006338:	2000      	movs	r0, #0
 800633a:	f04f 0c0a 	mov.w	ip, #10
 800633e:	4621      	mov	r1, r4
 8006340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006344:	3b30      	subs	r3, #48	; 0x30
 8006346:	2b09      	cmp	r3, #9
 8006348:	d94e      	bls.n	80063e8 <_vfiprintf_r+0x1c4>
 800634a:	b1b0      	cbz	r0, 800637a <_vfiprintf_r+0x156>
 800634c:	9207      	str	r2, [sp, #28]
 800634e:	e014      	b.n	800637a <_vfiprintf_r+0x156>
 8006350:	eba0 0308 	sub.w	r3, r0, r8
 8006354:	fa09 f303 	lsl.w	r3, r9, r3
 8006358:	4313      	orrs	r3, r2
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	46a2      	mov	sl, r4
 800635e:	e7d2      	b.n	8006306 <_vfiprintf_r+0xe2>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	1d19      	adds	r1, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9103      	str	r1, [sp, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfbb      	ittet	lt
 800636c:	425b      	neglt	r3, r3
 800636e:	f042 0202 	orrlt.w	r2, r2, #2
 8006372:	9307      	strge	r3, [sp, #28]
 8006374:	9307      	strlt	r3, [sp, #28]
 8006376:	bfb8      	it	lt
 8006378:	9204      	strlt	r2, [sp, #16]
 800637a:	7823      	ldrb	r3, [r4, #0]
 800637c:	2b2e      	cmp	r3, #46	; 0x2e
 800637e:	d10c      	bne.n	800639a <_vfiprintf_r+0x176>
 8006380:	7863      	ldrb	r3, [r4, #1]
 8006382:	2b2a      	cmp	r3, #42	; 0x2a
 8006384:	d135      	bne.n	80063f2 <_vfiprintf_r+0x1ce>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	9203      	str	r2, [sp, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfb8      	it	lt
 8006392:	f04f 33ff 	movlt.w	r3, #4294967295
 8006396:	3402      	adds	r4, #2
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006480 <_vfiprintf_r+0x25c>
 800639e:	7821      	ldrb	r1, [r4, #0]
 80063a0:	2203      	movs	r2, #3
 80063a2:	4650      	mov	r0, sl
 80063a4:	f7f9 ff34 	bl	8000210 <memchr>
 80063a8:	b140      	cbz	r0, 80063bc <_vfiprintf_r+0x198>
 80063aa:	2340      	movs	r3, #64	; 0x40
 80063ac:	eba0 000a 	sub.w	r0, r0, sl
 80063b0:	fa03 f000 	lsl.w	r0, r3, r0
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	4303      	orrs	r3, r0
 80063b8:	3401      	adds	r4, #1
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c0:	482c      	ldr	r0, [pc, #176]	; (8006474 <_vfiprintf_r+0x250>)
 80063c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063c6:	2206      	movs	r2, #6
 80063c8:	f7f9 ff22 	bl	8000210 <memchr>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d03f      	beq.n	8006450 <_vfiprintf_r+0x22c>
 80063d0:	4b29      	ldr	r3, [pc, #164]	; (8006478 <_vfiprintf_r+0x254>)
 80063d2:	bb1b      	cbnz	r3, 800641c <_vfiprintf_r+0x1f8>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	3307      	adds	r3, #7
 80063d8:	f023 0307 	bic.w	r3, r3, #7
 80063dc:	3308      	adds	r3, #8
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e2:	443b      	add	r3, r7
 80063e4:	9309      	str	r3, [sp, #36]	; 0x24
 80063e6:	e767      	b.n	80062b8 <_vfiprintf_r+0x94>
 80063e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ec:	460c      	mov	r4, r1
 80063ee:	2001      	movs	r0, #1
 80063f0:	e7a5      	b.n	800633e <_vfiprintf_r+0x11a>
 80063f2:	2300      	movs	r3, #0
 80063f4:	3401      	adds	r4, #1
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	4619      	mov	r1, r3
 80063fa:	f04f 0c0a 	mov.w	ip, #10
 80063fe:	4620      	mov	r0, r4
 8006400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006404:	3a30      	subs	r2, #48	; 0x30
 8006406:	2a09      	cmp	r2, #9
 8006408:	d903      	bls.n	8006412 <_vfiprintf_r+0x1ee>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0c5      	beq.n	800639a <_vfiprintf_r+0x176>
 800640e:	9105      	str	r1, [sp, #20]
 8006410:	e7c3      	b.n	800639a <_vfiprintf_r+0x176>
 8006412:	fb0c 2101 	mla	r1, ip, r1, r2
 8006416:	4604      	mov	r4, r0
 8006418:	2301      	movs	r3, #1
 800641a:	e7f0      	b.n	80063fe <_vfiprintf_r+0x1da>
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	462a      	mov	r2, r5
 8006422:	4b16      	ldr	r3, [pc, #88]	; (800647c <_vfiprintf_r+0x258>)
 8006424:	a904      	add	r1, sp, #16
 8006426:	4630      	mov	r0, r6
 8006428:	f3af 8000 	nop.w
 800642c:	4607      	mov	r7, r0
 800642e:	1c78      	adds	r0, r7, #1
 8006430:	d1d6      	bne.n	80063e0 <_vfiprintf_r+0x1bc>
 8006432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006434:	07d9      	lsls	r1, r3, #31
 8006436:	d405      	bmi.n	8006444 <_vfiprintf_r+0x220>
 8006438:	89ab      	ldrh	r3, [r5, #12]
 800643a:	059a      	lsls	r2, r3, #22
 800643c:	d402      	bmi.n	8006444 <_vfiprintf_r+0x220>
 800643e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006440:	f7ff fe31 	bl	80060a6 <__retarget_lock_release_recursive>
 8006444:	89ab      	ldrh	r3, [r5, #12]
 8006446:	065b      	lsls	r3, r3, #25
 8006448:	f53f af12 	bmi.w	8006270 <_vfiprintf_r+0x4c>
 800644c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800644e:	e711      	b.n	8006274 <_vfiprintf_r+0x50>
 8006450:	ab03      	add	r3, sp, #12
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	462a      	mov	r2, r5
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <_vfiprintf_r+0x258>)
 8006458:	a904      	add	r1, sp, #16
 800645a:	4630      	mov	r0, r6
 800645c:	f000 f880 	bl	8006560 <_printf_i>
 8006460:	e7e4      	b.n	800642c <_vfiprintf_r+0x208>
 8006462:	bf00      	nop
 8006464:	08006e70 	.word	0x08006e70
 8006468:	08006e90 	.word	0x08006e90
 800646c:	08006e50 	.word	0x08006e50
 8006470:	08006eb0 	.word	0x08006eb0
 8006474:	08006eba 	.word	0x08006eba
 8006478:	00000000 	.word	0x00000000
 800647c:	080061ff 	.word	0x080061ff
 8006480:	08006eb6 	.word	0x08006eb6

08006484 <_printf_common>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	4616      	mov	r6, r2
 800648a:	4699      	mov	r9, r3
 800648c:	688a      	ldr	r2, [r1, #8]
 800648e:	690b      	ldr	r3, [r1, #16]
 8006490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006494:	4293      	cmp	r3, r2
 8006496:	bfb8      	it	lt
 8006498:	4613      	movlt	r3, r2
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a0:	4607      	mov	r7, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b10a      	cbz	r2, 80064aa <_printf_common+0x26>
 80064a6:	3301      	adds	r3, #1
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	0699      	lsls	r1, r3, #26
 80064ae:	bf42      	ittt	mi
 80064b0:	6833      	ldrmi	r3, [r6, #0]
 80064b2:	3302      	addmi	r3, #2
 80064b4:	6033      	strmi	r3, [r6, #0]
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	f015 0506 	ands.w	r5, r5, #6
 80064bc:	d106      	bne.n	80064cc <_printf_common+0x48>
 80064be:	f104 0a19 	add.w	sl, r4, #25
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	6832      	ldr	r2, [r6, #0]
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dc26      	bgt.n	800651a <_printf_common+0x96>
 80064cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d0:	1e13      	subs	r3, r2, #0
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	bf18      	it	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	0692      	lsls	r2, r2, #26
 80064da:	d42b      	bmi.n	8006534 <_printf_common+0xb0>
 80064dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e0:	4649      	mov	r1, r9
 80064e2:	4638      	mov	r0, r7
 80064e4:	47c0      	blx	r8
 80064e6:	3001      	adds	r0, #1
 80064e8:	d01e      	beq.n	8006528 <_printf_common+0xa4>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	68e5      	ldr	r5, [r4, #12]
 80064ee:	6832      	ldr	r2, [r6, #0]
 80064f0:	f003 0306 	and.w	r3, r3, #6
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	bf08      	it	eq
 80064f8:	1aad      	subeq	r5, r5, r2
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	6922      	ldr	r2, [r4, #16]
 80064fe:	bf0c      	ite	eq
 8006500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006504:	2500      	movne	r5, #0
 8006506:	4293      	cmp	r3, r2
 8006508:	bfc4      	itt	gt
 800650a:	1a9b      	subgt	r3, r3, r2
 800650c:	18ed      	addgt	r5, r5, r3
 800650e:	2600      	movs	r6, #0
 8006510:	341a      	adds	r4, #26
 8006512:	42b5      	cmp	r5, r6
 8006514:	d11a      	bne.n	800654c <_printf_common+0xc8>
 8006516:	2000      	movs	r0, #0
 8006518:	e008      	b.n	800652c <_printf_common+0xa8>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4649      	mov	r1, r9
 8006520:	4638      	mov	r0, r7
 8006522:	47c0      	blx	r8
 8006524:	3001      	adds	r0, #1
 8006526:	d103      	bne.n	8006530 <_printf_common+0xac>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	3501      	adds	r5, #1
 8006532:	e7c6      	b.n	80064c2 <_printf_common+0x3e>
 8006534:	18e1      	adds	r1, r4, r3
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	2030      	movs	r0, #48	; 0x30
 800653a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653e:	4422      	add	r2, r4
 8006540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006548:	3302      	adds	r3, #2
 800654a:	e7c7      	b.n	80064dc <_printf_common+0x58>
 800654c:	2301      	movs	r3, #1
 800654e:	4622      	mov	r2, r4
 8006550:	4649      	mov	r1, r9
 8006552:	4638      	mov	r0, r7
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d0e6      	beq.n	8006528 <_printf_common+0xa4>
 800655a:	3601      	adds	r6, #1
 800655c:	e7d9      	b.n	8006512 <_printf_common+0x8e>
	...

08006560 <_printf_i>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	7e0f      	ldrb	r7, [r1, #24]
 8006566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006568:	2f78      	cmp	r7, #120	; 0x78
 800656a:	4691      	mov	r9, r2
 800656c:	4680      	mov	r8, r0
 800656e:	460c      	mov	r4, r1
 8006570:	469a      	mov	sl, r3
 8006572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006576:	d807      	bhi.n	8006588 <_printf_i+0x28>
 8006578:	2f62      	cmp	r7, #98	; 0x62
 800657a:	d80a      	bhi.n	8006592 <_printf_i+0x32>
 800657c:	2f00      	cmp	r7, #0
 800657e:	f000 80d8 	beq.w	8006732 <_printf_i+0x1d2>
 8006582:	2f58      	cmp	r7, #88	; 0x58
 8006584:	f000 80a3 	beq.w	80066ce <_printf_i+0x16e>
 8006588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006590:	e03a      	b.n	8006608 <_printf_i+0xa8>
 8006592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006596:	2b15      	cmp	r3, #21
 8006598:	d8f6      	bhi.n	8006588 <_printf_i+0x28>
 800659a:	a101      	add	r1, pc, #4	; (adr r1, 80065a0 <_printf_i+0x40>)
 800659c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a0:	080065f9 	.word	0x080065f9
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	08006589 	.word	0x08006589
 80065ac:	08006589 	.word	0x08006589
 80065b0:	08006589 	.word	0x08006589
 80065b4:	08006589 	.word	0x08006589
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006589 	.word	0x08006589
 80065c0:	08006589 	.word	0x08006589
 80065c4:	08006589 	.word	0x08006589
 80065c8:	08006589 	.word	0x08006589
 80065cc:	08006719 	.word	0x08006719
 80065d0:	0800663d 	.word	0x0800663d
 80065d4:	080066fb 	.word	0x080066fb
 80065d8:	08006589 	.word	0x08006589
 80065dc:	08006589 	.word	0x08006589
 80065e0:	0800673b 	.word	0x0800673b
 80065e4:	08006589 	.word	0x08006589
 80065e8:	0800663d 	.word	0x0800663d
 80065ec:	08006589 	.word	0x08006589
 80065f0:	08006589 	.word	0x08006589
 80065f4:	08006703 	.word	0x08006703
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006608:	2301      	movs	r3, #1
 800660a:	e0a3      	b.n	8006754 <_printf_i+0x1f4>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	6829      	ldr	r1, [r5, #0]
 8006610:	0606      	lsls	r6, r0, #24
 8006612:	f101 0304 	add.w	r3, r1, #4
 8006616:	d50a      	bpl.n	800662e <_printf_i+0xce>
 8006618:	680e      	ldr	r6, [r1, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	2e00      	cmp	r6, #0
 800661e:	da03      	bge.n	8006628 <_printf_i+0xc8>
 8006620:	232d      	movs	r3, #45	; 0x2d
 8006622:	4276      	negs	r6, r6
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006628:	485e      	ldr	r0, [pc, #376]	; (80067a4 <_printf_i+0x244>)
 800662a:	230a      	movs	r3, #10
 800662c:	e019      	b.n	8006662 <_printf_i+0x102>
 800662e:	680e      	ldr	r6, [r1, #0]
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006636:	bf18      	it	ne
 8006638:	b236      	sxthne	r6, r6
 800663a:	e7ef      	b.n	800661c <_printf_i+0xbc>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	1d19      	adds	r1, r3, #4
 8006642:	6029      	str	r1, [r5, #0]
 8006644:	0601      	lsls	r1, r0, #24
 8006646:	d501      	bpl.n	800664c <_printf_i+0xec>
 8006648:	681e      	ldr	r6, [r3, #0]
 800664a:	e002      	b.n	8006652 <_printf_i+0xf2>
 800664c:	0646      	lsls	r6, r0, #25
 800664e:	d5fb      	bpl.n	8006648 <_printf_i+0xe8>
 8006650:	881e      	ldrh	r6, [r3, #0]
 8006652:	4854      	ldr	r0, [pc, #336]	; (80067a4 <_printf_i+0x244>)
 8006654:	2f6f      	cmp	r7, #111	; 0x6f
 8006656:	bf0c      	ite	eq
 8006658:	2308      	moveq	r3, #8
 800665a:	230a      	movne	r3, #10
 800665c:	2100      	movs	r1, #0
 800665e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006662:	6865      	ldr	r5, [r4, #4]
 8006664:	60a5      	str	r5, [r4, #8]
 8006666:	2d00      	cmp	r5, #0
 8006668:	bfa2      	ittt	ge
 800666a:	6821      	ldrge	r1, [r4, #0]
 800666c:	f021 0104 	bicge.w	r1, r1, #4
 8006670:	6021      	strge	r1, [r4, #0]
 8006672:	b90e      	cbnz	r6, 8006678 <_printf_i+0x118>
 8006674:	2d00      	cmp	r5, #0
 8006676:	d04d      	beq.n	8006714 <_printf_i+0x1b4>
 8006678:	4615      	mov	r5, r2
 800667a:	fbb6 f1f3 	udiv	r1, r6, r3
 800667e:	fb03 6711 	mls	r7, r3, r1, r6
 8006682:	5dc7      	ldrb	r7, [r0, r7]
 8006684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006688:	4637      	mov	r7, r6
 800668a:	42bb      	cmp	r3, r7
 800668c:	460e      	mov	r6, r1
 800668e:	d9f4      	bls.n	800667a <_printf_i+0x11a>
 8006690:	2b08      	cmp	r3, #8
 8006692:	d10b      	bne.n	80066ac <_printf_i+0x14c>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07de      	lsls	r6, r3, #31
 8006698:	d508      	bpl.n	80066ac <_printf_i+0x14c>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4299      	cmp	r1, r3
 80066a0:	bfde      	ittt	le
 80066a2:	2330      	movle	r3, #48	; 0x30
 80066a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ac:	1b52      	subs	r2, r2, r5
 80066ae:	6122      	str	r2, [r4, #16]
 80066b0:	f8cd a000 	str.w	sl, [sp]
 80066b4:	464b      	mov	r3, r9
 80066b6:	aa03      	add	r2, sp, #12
 80066b8:	4621      	mov	r1, r4
 80066ba:	4640      	mov	r0, r8
 80066bc:	f7ff fee2 	bl	8006484 <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d14c      	bne.n	800675e <_printf_i+0x1fe>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	b004      	add	sp, #16
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ce:	4835      	ldr	r0, [pc, #212]	; (80067a4 <_printf_i+0x244>)
 80066d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066d4:	6829      	ldr	r1, [r5, #0]
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066dc:	6029      	str	r1, [r5, #0]
 80066de:	061d      	lsls	r5, r3, #24
 80066e0:	d514      	bpl.n	800670c <_printf_i+0x1ac>
 80066e2:	07df      	lsls	r7, r3, #31
 80066e4:	bf44      	itt	mi
 80066e6:	f043 0320 	orrmi.w	r3, r3, #32
 80066ea:	6023      	strmi	r3, [r4, #0]
 80066ec:	b91e      	cbnz	r6, 80066f6 <_printf_i+0x196>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f023 0320 	bic.w	r3, r3, #32
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	2310      	movs	r3, #16
 80066f8:	e7b0      	b.n	800665c <_printf_i+0xfc>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	f043 0320 	orr.w	r3, r3, #32
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	2378      	movs	r3, #120	; 0x78
 8006704:	4828      	ldr	r0, [pc, #160]	; (80067a8 <_printf_i+0x248>)
 8006706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800670a:	e7e3      	b.n	80066d4 <_printf_i+0x174>
 800670c:	0659      	lsls	r1, r3, #25
 800670e:	bf48      	it	mi
 8006710:	b2b6      	uxthmi	r6, r6
 8006712:	e7e6      	b.n	80066e2 <_printf_i+0x182>
 8006714:	4615      	mov	r5, r2
 8006716:	e7bb      	b.n	8006690 <_printf_i+0x130>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	6826      	ldr	r6, [r4, #0]
 800671c:	6961      	ldr	r1, [r4, #20]
 800671e:	1d18      	adds	r0, r3, #4
 8006720:	6028      	str	r0, [r5, #0]
 8006722:	0635      	lsls	r5, r6, #24
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	d501      	bpl.n	800672c <_printf_i+0x1cc>
 8006728:	6019      	str	r1, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0x1d2>
 800672c:	0670      	lsls	r0, r6, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0x1c8>
 8006730:	8019      	strh	r1, [r3, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	4615      	mov	r5, r2
 8006738:	e7ba      	b.n	80066b0 <_printf_i+0x150>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	1d1a      	adds	r2, r3, #4
 800673e:	602a      	str	r2, [r5, #0]
 8006740:	681d      	ldr	r5, [r3, #0]
 8006742:	6862      	ldr	r2, [r4, #4]
 8006744:	2100      	movs	r1, #0
 8006746:	4628      	mov	r0, r5
 8006748:	f7f9 fd62 	bl	8000210 <memchr>
 800674c:	b108      	cbz	r0, 8006752 <_printf_i+0x1f2>
 800674e:	1b40      	subs	r0, r0, r5
 8006750:	6060      	str	r0, [r4, #4]
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	2300      	movs	r3, #0
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675c:	e7a8      	b.n	80066b0 <_printf_i+0x150>
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	462a      	mov	r2, r5
 8006762:	4649      	mov	r1, r9
 8006764:	4640      	mov	r0, r8
 8006766:	47d0      	blx	sl
 8006768:	3001      	adds	r0, #1
 800676a:	d0ab      	beq.n	80066c4 <_printf_i+0x164>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	079b      	lsls	r3, r3, #30
 8006770:	d413      	bmi.n	800679a <_printf_i+0x23a>
 8006772:	68e0      	ldr	r0, [r4, #12]
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	4298      	cmp	r0, r3
 8006778:	bfb8      	it	lt
 800677a:	4618      	movlt	r0, r3
 800677c:	e7a4      	b.n	80066c8 <_printf_i+0x168>
 800677e:	2301      	movs	r3, #1
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	47d0      	blx	sl
 8006788:	3001      	adds	r0, #1
 800678a:	d09b      	beq.n	80066c4 <_printf_i+0x164>
 800678c:	3501      	adds	r5, #1
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	9903      	ldr	r1, [sp, #12]
 8006792:	1a5b      	subs	r3, r3, r1
 8006794:	42ab      	cmp	r3, r5
 8006796:	dcf2      	bgt.n	800677e <_printf_i+0x21e>
 8006798:	e7eb      	b.n	8006772 <_printf_i+0x212>
 800679a:	2500      	movs	r5, #0
 800679c:	f104 0619 	add.w	r6, r4, #25
 80067a0:	e7f5      	b.n	800678e <_printf_i+0x22e>
 80067a2:	bf00      	nop
 80067a4:	08006ec1 	.word	0x08006ec1
 80067a8:	08006ed2 	.word	0x08006ed2

080067ac <_sbrk_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_sbrk_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fa fa28 	bl	8000c0c <_sbrk>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_sbrk_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_sbrk_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	2000023c 	.word	0x2000023c

080067cc <__sread>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	f000 fab2 	bl	8006d3c <_read_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	bfab      	itete	ge
 80067dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067de:	89a3      	ldrhlt	r3, [r4, #12]
 80067e0:	181b      	addge	r3, r3, r0
 80067e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067e6:	bfac      	ite	ge
 80067e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ea:	81a3      	strhlt	r3, [r4, #12]
 80067ec:	bd10      	pop	{r4, pc}

080067ee <__swrite>:
 80067ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f2:	461f      	mov	r7, r3
 80067f4:	898b      	ldrh	r3, [r1, #12]
 80067f6:	05db      	lsls	r3, r3, #23
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	4616      	mov	r6, r2
 80067fe:	d505      	bpl.n	800680c <__swrite+0x1e>
 8006800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006804:	2302      	movs	r3, #2
 8006806:	2200      	movs	r2, #0
 8006808:	f000 f9c8 	bl	8006b9c <_lseek_r>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	4632      	mov	r2, r6
 800681a:	463b      	mov	r3, r7
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	f000 b869 	b.w	80068f8 <_write_r>

08006826 <__sseek>:
 8006826:	b510      	push	{r4, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 f9b5 	bl	8006b9c <_lseek_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	bf15      	itete	ne
 8006838:	6560      	strne	r0, [r4, #84]	; 0x54
 800683a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800683e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006842:	81a3      	strheq	r3, [r4, #12]
 8006844:	bf18      	it	ne
 8006846:	81a3      	strhne	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__sclose>:
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	f000 b8d3 	b.w	80069f8 <_close_r>
	...

08006854 <__swbuf_r>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	460e      	mov	r6, r1
 8006858:	4614      	mov	r4, r2
 800685a:	4605      	mov	r5, r0
 800685c:	b118      	cbz	r0, 8006866 <__swbuf_r+0x12>
 800685e:	6983      	ldr	r3, [r0, #24]
 8006860:	b90b      	cbnz	r3, 8006866 <__swbuf_r+0x12>
 8006862:	f7ff fb81 	bl	8005f68 <__sinit>
 8006866:	4b21      	ldr	r3, [pc, #132]	; (80068ec <__swbuf_r+0x98>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d12b      	bne.n	80068c4 <__swbuf_r+0x70>
 800686c:	686c      	ldr	r4, [r5, #4]
 800686e:	69a3      	ldr	r3, [r4, #24]
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	071a      	lsls	r2, r3, #28
 8006876:	d52f      	bpl.n	80068d8 <__swbuf_r+0x84>
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	b36b      	cbz	r3, 80068d8 <__swbuf_r+0x84>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	1ac0      	subs	r0, r0, r3
 8006882:	6963      	ldr	r3, [r4, #20]
 8006884:	b2f6      	uxtb	r6, r6
 8006886:	4283      	cmp	r3, r0
 8006888:	4637      	mov	r7, r6
 800688a:	dc04      	bgt.n	8006896 <__swbuf_r+0x42>
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f948 	bl	8006b24 <_fflush_r>
 8006894:	bb30      	cbnz	r0, 80068e4 <__swbuf_r+0x90>
 8006896:	68a3      	ldr	r3, [r4, #8]
 8006898:	3b01      	subs	r3, #1
 800689a:	60a3      	str	r3, [r4, #8]
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	701e      	strb	r6, [r3, #0]
 80068a4:	6963      	ldr	r3, [r4, #20]
 80068a6:	3001      	adds	r0, #1
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d004      	beq.n	80068b6 <__swbuf_r+0x62>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	07db      	lsls	r3, r3, #31
 80068b0:	d506      	bpl.n	80068c0 <__swbuf_r+0x6c>
 80068b2:	2e0a      	cmp	r6, #10
 80068b4:	d104      	bne.n	80068c0 <__swbuf_r+0x6c>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 f933 	bl	8006b24 <_fflush_r>
 80068be:	b988      	cbnz	r0, 80068e4 <__swbuf_r+0x90>
 80068c0:	4638      	mov	r0, r7
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <__swbuf_r+0x9c>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d101      	bne.n	80068ce <__swbuf_r+0x7a>
 80068ca:	68ac      	ldr	r4, [r5, #8]
 80068cc:	e7cf      	b.n	800686e <__swbuf_r+0x1a>
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <__swbuf_r+0xa0>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	bf08      	it	eq
 80068d4:	68ec      	ldreq	r4, [r5, #12]
 80068d6:	e7ca      	b.n	800686e <__swbuf_r+0x1a>
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f81e 	bl	800691c <__swsetup_r>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d0cb      	beq.n	800687c <__swbuf_r+0x28>
 80068e4:	f04f 37ff 	mov.w	r7, #4294967295
 80068e8:	e7ea      	b.n	80068c0 <__swbuf_r+0x6c>
 80068ea:	bf00      	nop
 80068ec:	08006e70 	.word	0x08006e70
 80068f0:	08006e90 	.word	0x08006e90
 80068f4:	08006e50 	.word	0x08006e50

080068f8 <_write_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	; (8006918 <_write_r+0x20>)
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	2200      	movs	r2, #0
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7f9 fe54 	bl	80005b4 <_write>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_write_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_write_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	2000023c 	.word	0x2000023c

0800691c <__swsetup_r>:
 800691c:	4b32      	ldr	r3, [pc, #200]	; (80069e8 <__swsetup_r+0xcc>)
 800691e:	b570      	push	{r4, r5, r6, lr}
 8006920:	681d      	ldr	r5, [r3, #0]
 8006922:	4606      	mov	r6, r0
 8006924:	460c      	mov	r4, r1
 8006926:	b125      	cbz	r5, 8006932 <__swsetup_r+0x16>
 8006928:	69ab      	ldr	r3, [r5, #24]
 800692a:	b913      	cbnz	r3, 8006932 <__swsetup_r+0x16>
 800692c:	4628      	mov	r0, r5
 800692e:	f7ff fb1b 	bl	8005f68 <__sinit>
 8006932:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <__swsetup_r+0xd0>)
 8006934:	429c      	cmp	r4, r3
 8006936:	d10f      	bne.n	8006958 <__swsetup_r+0x3c>
 8006938:	686c      	ldr	r4, [r5, #4]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006940:	0719      	lsls	r1, r3, #28
 8006942:	d42c      	bmi.n	800699e <__swsetup_r+0x82>
 8006944:	06dd      	lsls	r5, r3, #27
 8006946:	d411      	bmi.n	800696c <__swsetup_r+0x50>
 8006948:	2309      	movs	r3, #9
 800694a:	6033      	str	r3, [r6, #0]
 800694c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	f04f 30ff 	mov.w	r0, #4294967295
 8006956:	e03e      	b.n	80069d6 <__swsetup_r+0xba>
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <__swsetup_r+0xd4>)
 800695a:	429c      	cmp	r4, r3
 800695c:	d101      	bne.n	8006962 <__swsetup_r+0x46>
 800695e:	68ac      	ldr	r4, [r5, #8]
 8006960:	e7eb      	b.n	800693a <__swsetup_r+0x1e>
 8006962:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <__swsetup_r+0xd8>)
 8006964:	429c      	cmp	r4, r3
 8006966:	bf08      	it	eq
 8006968:	68ec      	ldreq	r4, [r5, #12]
 800696a:	e7e6      	b.n	800693a <__swsetup_r+0x1e>
 800696c:	0758      	lsls	r0, r3, #29
 800696e:	d512      	bpl.n	8006996 <__swsetup_r+0x7a>
 8006970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006972:	b141      	cbz	r1, 8006986 <__swsetup_r+0x6a>
 8006974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006978:	4299      	cmp	r1, r3
 800697a:	d002      	beq.n	8006982 <__swsetup_r+0x66>
 800697c:	4630      	mov	r0, r6
 800697e:	f000 f991 	bl	8006ca4 <_free_r>
 8006982:	2300      	movs	r3, #0
 8006984:	6363      	str	r3, [r4, #52]	; 0x34
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	2300      	movs	r3, #0
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f043 0308 	orr.w	r3, r3, #8
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	b94b      	cbnz	r3, 80069b6 <__swsetup_r+0x9a>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ac:	d003      	beq.n	80069b6 <__swsetup_r+0x9a>
 80069ae:	4621      	mov	r1, r4
 80069b0:	4630      	mov	r0, r6
 80069b2:	f000 f92b 	bl	8006c0c <__smakebuf_r>
 80069b6:	89a0      	ldrh	r0, [r4, #12]
 80069b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069bc:	f010 0301 	ands.w	r3, r0, #1
 80069c0:	d00a      	beq.n	80069d8 <__swsetup_r+0xbc>
 80069c2:	2300      	movs	r3, #0
 80069c4:	60a3      	str	r3, [r4, #8]
 80069c6:	6963      	ldr	r3, [r4, #20]
 80069c8:	425b      	negs	r3, r3
 80069ca:	61a3      	str	r3, [r4, #24]
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	b943      	cbnz	r3, 80069e2 <__swsetup_r+0xc6>
 80069d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069d4:	d1ba      	bne.n	800694c <__swsetup_r+0x30>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	0781      	lsls	r1, r0, #30
 80069da:	bf58      	it	pl
 80069dc:	6963      	ldrpl	r3, [r4, #20]
 80069de:	60a3      	str	r3, [r4, #8]
 80069e0:	e7f4      	b.n	80069cc <__swsetup_r+0xb0>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e7f7      	b.n	80069d6 <__swsetup_r+0xba>
 80069e6:	bf00      	nop
 80069e8:	20000010 	.word	0x20000010
 80069ec:	08006e70 	.word	0x08006e70
 80069f0:	08006e90 	.word	0x08006e90
 80069f4:	08006e50 	.word	0x08006e50

080069f8 <_close_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d06      	ldr	r5, [pc, #24]	; (8006a14 <_close_r+0x1c>)
 80069fc:	2300      	movs	r3, #0
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	f7fa f8cd 	bl	8000ba2 <_close>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_close_r+0x1a>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_close_r+0x1a>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	2000023c 	.word	0x2000023c

08006a18 <__sflush_r>:
 8006a18:	898a      	ldrh	r2, [r1, #12]
 8006a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	0710      	lsls	r0, r2, #28
 8006a22:	460c      	mov	r4, r1
 8006a24:	d458      	bmi.n	8006ad8 <__sflush_r+0xc0>
 8006a26:	684b      	ldr	r3, [r1, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dc05      	bgt.n	8006a38 <__sflush_r+0x20>
 8006a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dc02      	bgt.n	8006a38 <__sflush_r+0x20>
 8006a32:	2000      	movs	r0, #0
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d0f9      	beq.n	8006a32 <__sflush_r+0x1a>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a44:	682f      	ldr	r7, [r5, #0]
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	d032      	beq.n	8006ab0 <__sflush_r+0x98>
 8006a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	075a      	lsls	r2, r3, #29
 8006a50:	d505      	bpl.n	8006a5e <__sflush_r+0x46>
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	1ac0      	subs	r0, r0, r3
 8006a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a58:	b10b      	cbz	r3, 8006a5e <__sflush_r+0x46>
 8006a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a5c:	1ac0      	subs	r0, r0, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4602      	mov	r2, r0
 8006a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b0      	blx	r6
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	d106      	bne.n	8006a7e <__sflush_r+0x66>
 8006a70:	6829      	ldr	r1, [r5, #0]
 8006a72:	291d      	cmp	r1, #29
 8006a74:	d82c      	bhi.n	8006ad0 <__sflush_r+0xb8>
 8006a76:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <__sflush_r+0x108>)
 8006a78:	40ca      	lsrs	r2, r1
 8006a7a:	07d6      	lsls	r6, r2, #31
 8006a7c:	d528      	bpl.n	8006ad0 <__sflush_r+0xb8>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	6062      	str	r2, [r4, #4]
 8006a82:	04d9      	lsls	r1, r3, #19
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	d504      	bpl.n	8006a94 <__sflush_r+0x7c>
 8006a8a:	1c42      	adds	r2, r0, #1
 8006a8c:	d101      	bne.n	8006a92 <__sflush_r+0x7a>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	b903      	cbnz	r3, 8006a94 <__sflush_r+0x7c>
 8006a92:	6560      	str	r0, [r4, #84]	; 0x54
 8006a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a96:	602f      	str	r7, [r5, #0]
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d0ca      	beq.n	8006a32 <__sflush_r+0x1a>
 8006a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	d002      	beq.n	8006aaa <__sflush_r+0x92>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f8fd 	bl	8006ca4 <_free_r>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	6360      	str	r0, [r4, #52]	; 0x34
 8006aae:	e7c1      	b.n	8006a34 <__sflush_r+0x1c>
 8006ab0:	6a21      	ldr	r1, [r4, #32]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b0      	blx	r6
 8006ab8:	1c41      	adds	r1, r0, #1
 8006aba:	d1c7      	bne.n	8006a4c <__sflush_r+0x34>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0c4      	beq.n	8006a4c <__sflush_r+0x34>
 8006ac2:	2b1d      	cmp	r3, #29
 8006ac4:	d001      	beq.n	8006aca <__sflush_r+0xb2>
 8006ac6:	2b16      	cmp	r3, #22
 8006ac8:	d101      	bne.n	8006ace <__sflush_r+0xb6>
 8006aca:	602f      	str	r7, [r5, #0]
 8006acc:	e7b1      	b.n	8006a32 <__sflush_r+0x1a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	e7ad      	b.n	8006a34 <__sflush_r+0x1c>
 8006ad8:	690f      	ldr	r7, [r1, #16]
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	d0a9      	beq.n	8006a32 <__sflush_r+0x1a>
 8006ade:	0793      	lsls	r3, r2, #30
 8006ae0:	680e      	ldr	r6, [r1, #0]
 8006ae2:	bf08      	it	eq
 8006ae4:	694b      	ldreq	r3, [r1, #20]
 8006ae6:	600f      	str	r7, [r1, #0]
 8006ae8:	bf18      	it	ne
 8006aea:	2300      	movne	r3, #0
 8006aec:	eba6 0807 	sub.w	r8, r6, r7
 8006af0:	608b      	str	r3, [r1, #8]
 8006af2:	f1b8 0f00 	cmp.w	r8, #0
 8006af6:	dd9c      	ble.n	8006a32 <__sflush_r+0x1a>
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006afc:	4643      	mov	r3, r8
 8006afe:	463a      	mov	r2, r7
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	2800      	cmp	r0, #0
 8006b06:	dc06      	bgt.n	8006b16 <__sflush_r+0xfe>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e78e      	b.n	8006a34 <__sflush_r+0x1c>
 8006b16:	4407      	add	r7, r0
 8006b18:	eba8 0800 	sub.w	r8, r8, r0
 8006b1c:	e7e9      	b.n	8006af2 <__sflush_r+0xda>
 8006b1e:	bf00      	nop
 8006b20:	20400001 	.word	0x20400001

08006b24 <_fflush_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	b913      	cbnz	r3, 8006b34 <_fflush_r+0x10>
 8006b2e:	2500      	movs	r5, #0
 8006b30:	4628      	mov	r0, r5
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	b118      	cbz	r0, 8006b3e <_fflush_r+0x1a>
 8006b36:	6983      	ldr	r3, [r0, #24]
 8006b38:	b90b      	cbnz	r3, 8006b3e <_fflush_r+0x1a>
 8006b3a:	f7ff fa15 	bl	8005f68 <__sinit>
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <_fflush_r+0x6c>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d11b      	bne.n	8006b7c <_fflush_r+0x58>
 8006b44:	686c      	ldr	r4, [r5, #4]
 8006b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0ef      	beq.n	8006b2e <_fflush_r+0xa>
 8006b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b50:	07d0      	lsls	r0, r2, #31
 8006b52:	d404      	bmi.n	8006b5e <_fflush_r+0x3a>
 8006b54:	0599      	lsls	r1, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_fflush_r+0x3a>
 8006b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5a:	f7ff faa3 	bl	80060a4 <__retarget_lock_acquire_recursive>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	4621      	mov	r1, r4
 8006b62:	f7ff ff59 	bl	8006a18 <__sflush_r>
 8006b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b68:	07da      	lsls	r2, r3, #31
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	d4e0      	bmi.n	8006b30 <_fflush_r+0xc>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d4dd      	bmi.n	8006b30 <_fflush_r+0xc>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f7ff fa96 	bl	80060a6 <__retarget_lock_release_recursive>
 8006b7a:	e7d9      	b.n	8006b30 <_fflush_r+0xc>
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <_fflush_r+0x70>)
 8006b7e:	429c      	cmp	r4, r3
 8006b80:	d101      	bne.n	8006b86 <_fflush_r+0x62>
 8006b82:	68ac      	ldr	r4, [r5, #8]
 8006b84:	e7df      	b.n	8006b46 <_fflush_r+0x22>
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <_fflush_r+0x74>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	bf08      	it	eq
 8006b8c:	68ec      	ldreq	r4, [r5, #12]
 8006b8e:	e7da      	b.n	8006b46 <_fflush_r+0x22>
 8006b90:	08006e70 	.word	0x08006e70
 8006b94:	08006e90 	.word	0x08006e90
 8006b98:	08006e50 	.word	0x08006e50

08006b9c <_lseek_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	; (8006bbc <_lseek_r+0x20>)
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	602a      	str	r2, [r5, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f7fa f820 	bl	8000bf0 <_lseek>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_lseek_r+0x1e>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_lseek_r+0x1e>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	2000023c 	.word	0x2000023c

08006bc0 <__swhatbuf_r>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	460e      	mov	r6, r1
 8006bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	b096      	sub	sp, #88	; 0x58
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	da08      	bge.n	8006be4 <__swhatbuf_r+0x24>
 8006bd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	602a      	str	r2, [r5, #0]
 8006bda:	061a      	lsls	r2, r3, #24
 8006bdc:	d410      	bmi.n	8006c00 <__swhatbuf_r+0x40>
 8006bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be2:	e00e      	b.n	8006c02 <__swhatbuf_r+0x42>
 8006be4:	466a      	mov	r2, sp
 8006be6:	f000 f8bb 	bl	8006d60 <_fstat_r>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dbf1      	blt.n	8006bd2 <__swhatbuf_r+0x12>
 8006bee:	9a01      	ldr	r2, [sp, #4]
 8006bf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bf8:	425a      	negs	r2, r3
 8006bfa:	415a      	adcs	r2, r3
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	e7ee      	b.n	8006bde <__swhatbuf_r+0x1e>
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	2000      	movs	r0, #0
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	b016      	add	sp, #88	; 0x58
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c0c <__smakebuf_r>:
 8006c0c:	898b      	ldrh	r3, [r1, #12]
 8006c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c10:	079d      	lsls	r5, r3, #30
 8006c12:	4606      	mov	r6, r0
 8006c14:	460c      	mov	r4, r1
 8006c16:	d507      	bpl.n	8006c28 <__smakebuf_r+0x1c>
 8006c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	2301      	movs	r3, #1
 8006c22:	6163      	str	r3, [r4, #20]
 8006c24:	b002      	add	sp, #8
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	ab01      	add	r3, sp, #4
 8006c2a:	466a      	mov	r2, sp
 8006c2c:	f7ff ffc8 	bl	8006bc0 <__swhatbuf_r>
 8006c30:	9900      	ldr	r1, [sp, #0]
 8006c32:	4605      	mov	r5, r0
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff fa57 	bl	80060e8 <_malloc_r>
 8006c3a:	b948      	cbnz	r0, 8006c50 <__smakebuf_r+0x44>
 8006c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c40:	059a      	lsls	r2, r3, #22
 8006c42:	d4ef      	bmi.n	8006c24 <__smakebuf_r+0x18>
 8006c44:	f023 0303 	bic.w	r3, r3, #3
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	e7e3      	b.n	8006c18 <__smakebuf_r+0xc>
 8006c50:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <__smakebuf_r+0x7c>)
 8006c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	6020      	str	r0, [r4, #0]
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	6163      	str	r3, [r4, #20]
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	6120      	str	r0, [r4, #16]
 8006c66:	b15b      	cbz	r3, 8006c80 <__smakebuf_r+0x74>
 8006c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f000 f889 	bl	8006d84 <_isatty_r>
 8006c72:	b128      	cbz	r0, 8006c80 <__smakebuf_r+0x74>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	89a0      	ldrh	r0, [r4, #12]
 8006c82:	4305      	orrs	r5, r0
 8006c84:	81a5      	strh	r5, [r4, #12]
 8006c86:	e7cd      	b.n	8006c24 <__smakebuf_r+0x18>
 8006c88:	08005f01 	.word	0x08005f01

08006c8c <__malloc_lock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__malloc_lock+0x8>)
 8006c8e:	f7ff ba09 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000230 	.word	0x20000230

08006c98 <__malloc_unlock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__malloc_unlock+0x8>)
 8006c9a:	f7ff ba04 	b.w	80060a6 <__retarget_lock_release_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20000230 	.word	0x20000230

08006ca4 <_free_r>:
 8006ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	d044      	beq.n	8006d34 <_free_r+0x90>
 8006caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cae:	9001      	str	r0, [sp, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006cb6:	bfb8      	it	lt
 8006cb8:	18e4      	addlt	r4, r4, r3
 8006cba:	f7ff ffe7 	bl	8006c8c <__malloc_lock>
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <_free_r+0x94>)
 8006cc0:	9801      	ldr	r0, [sp, #4]
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	b933      	cbnz	r3, 8006cd4 <_free_r+0x30>
 8006cc6:	6063      	str	r3, [r4, #4]
 8006cc8:	6014      	str	r4, [r2, #0]
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cd0:	f7ff bfe2 	b.w	8006c98 <__malloc_unlock>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d908      	bls.n	8006cea <_free_r+0x46>
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	bf01      	itttt	eq
 8006ce0:	6819      	ldreq	r1, [r3, #0]
 8006ce2:	685b      	ldreq	r3, [r3, #4]
 8006ce4:	1949      	addeq	r1, r1, r5
 8006ce6:	6021      	streq	r1, [r4, #0]
 8006ce8:	e7ed      	b.n	8006cc6 <_free_r+0x22>
 8006cea:	461a      	mov	r2, r3
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	b10b      	cbz	r3, 8006cf4 <_free_r+0x50>
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	d9fa      	bls.n	8006cea <_free_r+0x46>
 8006cf4:	6811      	ldr	r1, [r2, #0]
 8006cf6:	1855      	adds	r5, r2, r1
 8006cf8:	42a5      	cmp	r5, r4
 8006cfa:	d10b      	bne.n	8006d14 <_free_r+0x70>
 8006cfc:	6824      	ldr	r4, [r4, #0]
 8006cfe:	4421      	add	r1, r4
 8006d00:	1854      	adds	r4, r2, r1
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	d1e0      	bne.n	8006cca <_free_r+0x26>
 8006d08:	681c      	ldr	r4, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	6053      	str	r3, [r2, #4]
 8006d0e:	4421      	add	r1, r4
 8006d10:	6011      	str	r1, [r2, #0]
 8006d12:	e7da      	b.n	8006cca <_free_r+0x26>
 8006d14:	d902      	bls.n	8006d1c <_free_r+0x78>
 8006d16:	230c      	movs	r3, #12
 8006d18:	6003      	str	r3, [r0, #0]
 8006d1a:	e7d6      	b.n	8006cca <_free_r+0x26>
 8006d1c:	6825      	ldr	r5, [r4, #0]
 8006d1e:	1961      	adds	r1, r4, r5
 8006d20:	428b      	cmp	r3, r1
 8006d22:	bf04      	itt	eq
 8006d24:	6819      	ldreq	r1, [r3, #0]
 8006d26:	685b      	ldreq	r3, [r3, #4]
 8006d28:	6063      	str	r3, [r4, #4]
 8006d2a:	bf04      	itt	eq
 8006d2c:	1949      	addeq	r1, r1, r5
 8006d2e:	6021      	streq	r1, [r4, #0]
 8006d30:	6054      	str	r4, [r2, #4]
 8006d32:	e7ca      	b.n	8006cca <_free_r+0x26>
 8006d34:	b003      	add	sp, #12
 8006d36:	bd30      	pop	{r4, r5, pc}
 8006d38:	20000234 	.word	0x20000234

08006d3c <_read_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d07      	ldr	r5, [pc, #28]	; (8006d5c <_read_r+0x20>)
 8006d40:	4604      	mov	r4, r0
 8006d42:	4608      	mov	r0, r1
 8006d44:	4611      	mov	r1, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7f9 ff0c 	bl	8000b68 <_read>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_read_r+0x1e>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_read_r+0x1e>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	2000023c 	.word	0x2000023c

08006d60 <_fstat_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	; (8006d80 <_fstat_r+0x20>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	f7f9 ff24 	bl	8000bba <_fstat>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d102      	bne.n	8006d7c <_fstat_r+0x1c>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	b103      	cbz	r3, 8006d7c <_fstat_r+0x1c>
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	bd38      	pop	{r3, r4, r5, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000023c 	.word	0x2000023c

08006d84 <_isatty_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	; (8006da0 <_isatty_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7f9 ff23 	bl	8000bda <_isatty>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_isatty_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_isatty_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	2000023c 	.word	0x2000023c

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
