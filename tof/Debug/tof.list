
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000001c  08006084  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08006084  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e264  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e55  00000000  00000000  0002e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00030108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220f6  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1f8  00000000  00000000  0005390e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf18  00000000  00000000  00062b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fa1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003134  00000000  00000000  0012fa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005fac 	.word	0x08005fac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08005fac 	.word	0x08005fac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fcd3 	bl	8000eb8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f83b 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8fd 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8a3 	bl	8000664 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8cf 	bl	80006c0 <MX_USART2_UART_Init>

  VL53L1X_SensorInit(dev);
  //VL53L1X_SetI2CAddress(dev, dev1);
  VL53L1X_StartRanging(dev1);
  */
  uint8_t fail[6] = {70, 65, 73, 76, 10, 0};
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <main+0x74>)
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052c:	6018      	str	r0, [r3, #0]
 800052e:	3304      	adds	r3, #4
 8000530:	8019      	strh	r1, [r3, #0]
  uint8_t suc = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	77fb      	strb	r3, [r7, #31]
  if (!(suc = ChangeAddresses(1))) {
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fb14 	bl	8000b64 <ChangeAddresses>
 800053c:	4603      	mov	r3, r0
 800053e:	77fb      	strb	r3, [r7, #31]
 8000540:	7ffb      	ldrb	r3, [r7, #31]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d106      	bne.n	8000554 <main+0x4c>
	  HAL_UART_Transmit(&huart2, fail, 6, 10);
 8000546:	f107 0114 	add.w	r1, r7, #20
 800054a:	230a      	movs	r3, #10
 800054c:	2206      	movs	r2, #6
 800054e:	480c      	ldr	r0, [pc, #48]	; (8000580 <main+0x78>)
 8000550:	f004 fb4d 	bl	8004bee <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dataReady = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	77bb      	strb	r3, [r7, #30]
  uint8_t getting[6] = {71, 69, 84, 83, 10, 0};
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <main+0x7c>)
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000562:	6018      	str	r0, [r3, #0]
 8000564:	3304      	adds	r3, #4
 8000566:	8019      	strh	r1, [r3, #0]
  uint8_t data[6] = {68, 65, 84, 65, 10, 0};
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x80>)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	8019      	strh	r1, [r3, #0]
  uint16_t dis = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	83bb      	strh	r3, [r7, #28]
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x72>
 800057c:	08005fc4 	.word	0x08005fc4
 8000580:	2000008c 	.word	0x2000008c
 8000584:	08005fcc 	.word	0x08005fcc
 8000588:	08005fd4 	.word	0x08005fd4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fcfe 	bl	8005f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a28      	ldr	r2, [pc, #160]	; (800065c <SystemClock_Config+0xd0>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <SystemClock_Config+0xd4>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000600:	23a8      	movs	r3, #168	; 0xa8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f003 ffff 	bl	8004618 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000620:	f000 faf0 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fc9e 	bl	8003f84 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064e:	f000 fad9 	bl	8000c04 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f000 ffff 	bl	80016a4 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 faaa 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000038 	.word	0x20000038
 80006b8:	40005400 	.word	0x40005400
 80006bc:	00061a80 	.word	0x00061a80

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f004 fa2c 	bl	8004b54 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 fa7f 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <MX_GPIO_Init+0x124>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a41      	ldr	r2, [pc, #260]	; (8000838 <MX_GPIO_Init+0x124>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <MX_GPIO_Init+0x124>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <MX_GPIO_Init+0x124>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <MX_GPIO_Init+0x124>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <MX_GPIO_Init+0x124>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <MX_GPIO_Init+0x124>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <MX_GPIO_Init+0x124>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_GPIO_Init+0x124>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0x124>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_GPIO_Init+0x124>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0x124>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0x124>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <MX_GPIO_Init+0x124>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0x124>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80007b6:	2200      	movs	r2, #0
 80007b8:	f643 4104 	movw	r1, #15364	; 0x3c04
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <MX_GPIO_Init+0x128>)
 80007be:	f000 ff57 	bl	8001670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80007c8:	481d      	ldr	r0, [pc, #116]	; (8000840 <MX_GPIO_Init+0x12c>)
 80007ca:	f000 ff51 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2104      	movs	r1, #4
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x130>)
 80007d4:	f000 ff4c 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80007d8:	f643 4304 	movw	r3, #15364	; 0x3c04
 80007dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_GPIO_Init+0x128>)
 80007f2:	f000 fda9 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_GPIO_Init+0x12c>)
 8000810:	f000 fd9a 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000814:	2304      	movs	r3, #4
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x130>)
 800082c:	f000 fd8c 	bl	8001348 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020c00 	.word	0x40020c00

08000848 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2104      	movs	r1, #4
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <TurnOffAll+0x70>)
 8000852:	f000 ff0d 	bl	8001670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	4817      	ldr	r0, [pc, #92]	; (80008bc <TurnOffAll+0x74>)
 800085e:	f000 ff07 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	4815      	ldr	r0, [pc, #84]	; (80008bc <TurnOffAll+0x74>)
 8000868:	f000 ff02 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <TurnOffAll+0x74>)
 8000874:	f000 fefc 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	480f      	ldr	r0, [pc, #60]	; (80008bc <TurnOffAll+0x74>)
 8000880:	f000 fef6 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <TurnOffAll+0x74>)
 800088c:	f000 fef0 	bl	8001670 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	480a      	ldr	r0, [pc, #40]	; (80008c0 <TurnOffAll+0x78>)
 8000898:	f000 feea 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <TurnOffAll+0x78>)
 80008a4:	f000 fee4 	bl	8001670 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <TurnOffAll+0x78>)
 80008b0:	f000 fede 	bl	8001670 <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000

080008c4 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
	uint8_t boot[7] = {66, 79, 79, 84, 48, 10, 0};
 80008d2:	4a9e      	ldr	r2, [pc, #632]	; (8000b4c <TurnOnAt+0x288>)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008dc:	6018      	str	r0, [r3, #0]
 80008de:	3304      	adds	r3, #4
 80008e0:	8019      	strh	r1, [r3, #0]
 80008e2:	3302      	adds	r3, #2
 80008e4:	0c0a      	lsrs	r2, r1, #16
 80008e6:	701a      	strb	r2, [r3, #0]
	switch (i) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	f200 8129 	bhi.w	8000b42 <TurnOnAt+0x27e>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <TurnOnAt+0x34>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	08000955 	.word	0x08000955
 8000900:	08000993 	.word	0x08000993
 8000904:	080009cf 	.word	0x080009cf
 8000908:	08000a0d 	.word	0x08000a0d
 800090c:	08000a4b 	.word	0x08000a4b
 8000910:	08000a89 	.word	0x08000a89
 8000914:	08000ac7 	.word	0x08000ac7
 8000918:	08000b05 	.word	0x08000b05
	case 0:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2104      	movs	r1, #4
 8000920:	488b      	ldr	r0, [pc, #556]	; (8000b50 <TurnOnAt+0x28c>)
 8000922:	f000 fea5 	bl	8001670 <HAL_GPIO_WritePin>
		while(bootState==0){
 8000926:	e011      	b.n	800094c <TurnOnAt+0x88>
			VL53L1X_BootState(dev, &bootState);
 8000928:	4b8a      	ldr	r3, [pc, #552]	; (8000b54 <TurnOnAt+0x290>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	f107 020f 	add.w	r2, r7, #15
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f005 fa55 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000938:	f107 0108 	add.w	r1, r7, #8
 800093c:	230a      	movs	r3, #10
 800093e:	2207      	movs	r2, #7
 8000940:	4885      	ldr	r0, [pc, #532]	; (8000b58 <TurnOnAt+0x294>)
 8000942:	f004 f954 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000946:	2002      	movs	r0, #2
 8000948:	f000 fb28 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0ea      	beq.n	8000928 <TurnOnAt+0x64>
		}
		break;
 8000952:	e0f6      	b.n	8000b42 <TurnOnAt+0x27e>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	4880      	ldr	r0, [pc, #512]	; (8000b5c <TurnOnAt+0x298>)
 800095c:	f000 fe88 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 49;
 8000960:	2331      	movs	r3, #49	; 0x31
 8000962:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000964:	e011      	b.n	800098a <TurnOnAt+0xc6>
			VL53L1X_BootState(dev, &bootState);
 8000966:	4b7b      	ldr	r3, [pc, #492]	; (8000b54 <TurnOnAt+0x290>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	f107 020f 	add.w	r2, r7, #15
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fa36 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000976:	f107 0108 	add.w	r1, r7, #8
 800097a:	230a      	movs	r3, #10
 800097c:	2207      	movs	r2, #7
 800097e:	4876      	ldr	r0, [pc, #472]	; (8000b58 <TurnOnAt+0x294>)
 8000980:	f004 f935 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 fb09 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0ea      	beq.n	8000966 <TurnOnAt+0xa2>
		}
		break;
 8000990:	e0d7      	b.n	8000b42 <TurnOnAt+0x27e>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2104      	movs	r1, #4
 8000996:	4871      	ldr	r0, [pc, #452]	; (8000b5c <TurnOnAt+0x298>)
 8000998:	f000 fe6a 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 50;
 800099c:	2332      	movs	r3, #50	; 0x32
 800099e:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 80009a0:	e011      	b.n	80009c6 <TurnOnAt+0x102>
			VL53L1X_BootState(dev, &bootState);
 80009a2:	4b6c      	ldr	r3, [pc, #432]	; (8000b54 <TurnOnAt+0x290>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	f107 020f 	add.w	r2, r7, #15
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 fa18 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 80009b2:	f107 0108 	add.w	r1, r7, #8
 80009b6:	230a      	movs	r3, #10
 80009b8:	2207      	movs	r2, #7
 80009ba:	4867      	ldr	r0, [pc, #412]	; (8000b58 <TurnOnAt+0x294>)
 80009bc:	f004 f917 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 faeb 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0ea      	beq.n	80009a2 <TurnOnAt+0xde>
		}
		break;
 80009cc:	e0b9      	b.n	8000b42 <TurnOnAt+0x27e>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d4:	4861      	ldr	r0, [pc, #388]	; (8000b5c <TurnOnAt+0x298>)
 80009d6:	f000 fe4b 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 51;
 80009da:	2333      	movs	r3, #51	; 0x33
 80009dc:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 80009de:	e011      	b.n	8000a04 <TurnOnAt+0x140>
			VL53L1X_BootState(dev, &bootState);
 80009e0:	4b5c      	ldr	r3, [pc, #368]	; (8000b54 <TurnOnAt+0x290>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	f107 020f 	add.w	r2, r7, #15
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 f9f9 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 80009f0:	f107 0108 	add.w	r1, r7, #8
 80009f4:	230a      	movs	r3, #10
 80009f6:	2207      	movs	r2, #7
 80009f8:	4857      	ldr	r0, [pc, #348]	; (8000b58 <TurnOnAt+0x294>)
 80009fa:	f004 f8f8 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f000 facc 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0ea      	beq.n	80009e0 <TurnOnAt+0x11c>
		}
		break;
 8000a0a:	e09a      	b.n	8000b42 <TurnOnAt+0x27e>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	4852      	ldr	r0, [pc, #328]	; (8000b5c <TurnOnAt+0x298>)
 8000a14:	f000 fe2c 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 52;
 8000a18:	2334      	movs	r3, #52	; 0x34
 8000a1a:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000a1c:	e011      	b.n	8000a42 <TurnOnAt+0x17e>
			VL53L1X_BootState(dev, &bootState);
 8000a1e:	4b4d      	ldr	r3, [pc, #308]	; (8000b54 <TurnOnAt+0x290>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	f107 020f 	add.w	r2, r7, #15
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 f9da 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000a2e:	f107 0108 	add.w	r1, r7, #8
 8000a32:	230a      	movs	r3, #10
 8000a34:	2207      	movs	r2, #7
 8000a36:	4848      	ldr	r0, [pc, #288]	; (8000b58 <TurnOnAt+0x294>)
 8000a38:	f004 f8d9 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 faad 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0ea      	beq.n	8000a1e <TurnOnAt+0x15a>
		}
		break;
 8000a48:	e07b      	b.n	8000b42 <TurnOnAt+0x27e>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	4842      	ldr	r0, [pc, #264]	; (8000b5c <TurnOnAt+0x298>)
 8000a52:	f000 fe0d 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 53;
 8000a56:	2335      	movs	r3, #53	; 0x35
 8000a58:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000a5a:	e011      	b.n	8000a80 <TurnOnAt+0x1bc>
			VL53L1X_BootState(dev, &bootState);
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <TurnOnAt+0x290>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	f107 020f 	add.w	r2, r7, #15
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 f9bb 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	230a      	movs	r3, #10
 8000a72:	2207      	movs	r2, #7
 8000a74:	4838      	ldr	r0, [pc, #224]	; (8000b58 <TurnOnAt+0x294>)
 8000a76:	f004 f8ba 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f000 fa8e 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0ea      	beq.n	8000a5c <TurnOnAt+0x198>
		}
		break;
 8000a86:	e05c      	b.n	8000b42 <TurnOnAt+0x27e>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4834      	ldr	r0, [pc, #208]	; (8000b60 <TurnOnAt+0x29c>)
 8000a90:	f000 fdee 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 54;
 8000a94:	2336      	movs	r3, #54	; 0x36
 8000a96:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000a98:	e011      	b.n	8000abe <TurnOnAt+0x1fa>
			VL53L1X_BootState(dev, &bootState);
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <TurnOnAt+0x290>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	f107 020f 	add.w	r2, r7, #15
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 f99c 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000aaa:	f107 0108 	add.w	r1, r7, #8
 8000aae:	230a      	movs	r3, #10
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	4829      	ldr	r0, [pc, #164]	; (8000b58 <TurnOnAt+0x294>)
 8000ab4:	f004 f89b 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 fa6f 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0ea      	beq.n	8000a9a <TurnOnAt+0x1d6>
		}
		break;
 8000ac4:	e03d      	b.n	8000b42 <TurnOnAt+0x27e>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000acc:	4824      	ldr	r0, [pc, #144]	; (8000b60 <TurnOnAt+0x29c>)
 8000ace:	f000 fdcf 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 55;
 8000ad2:	2337      	movs	r3, #55	; 0x37
 8000ad4:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000ad6:	e011      	b.n	8000afc <TurnOnAt+0x238>
			VL53L1X_BootState(dev, &bootState);
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <TurnOnAt+0x290>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	f107 020f 	add.w	r2, r7, #15
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 f97d 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000ae8:	f107 0108 	add.w	r1, r7, #8
 8000aec:	230a      	movs	r3, #10
 8000aee:	2207      	movs	r2, #7
 8000af0:	4819      	ldr	r0, [pc, #100]	; (8000b58 <TurnOnAt+0x294>)
 8000af2:	f004 f87c 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f000 fa50 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0ea      	beq.n	8000ad8 <TurnOnAt+0x214>
		}
		break;
 8000b02:	e01e      	b.n	8000b42 <TurnOnAt+0x27e>
	case 8:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <TurnOnAt+0x29c>)
 8000b0c:	f000 fdb0 	bl	8001670 <HAL_GPIO_WritePin>
		boot[4] = 56;
 8000b10:	2338      	movs	r3, #56	; 0x38
 8000b12:	733b      	strb	r3, [r7, #12]
		while(bootState==0){
 8000b14:	e011      	b.n	8000b3a <TurnOnAt+0x276>
			VL53L1X_BootState(dev, &bootState);
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <TurnOnAt+0x290>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	f107 020f 	add.w	r2, r7, #15
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 f95e 	bl	8005de2 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 7, 10);
 8000b26:	f107 0108 	add.w	r1, r7, #8
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <TurnOnAt+0x294>)
 8000b30:	f004 f85d 	bl	8004bee <HAL_UART_Transmit>
			HAL_Delay(2);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fa31 	bl	8000f9c <HAL_Delay>
		while(bootState==0){
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0ea      	beq.n	8000b16 <TurnOnAt+0x252>
		}
		break;
 8000b40:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08005fdc 	.word	0x08005fdc
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	20000000 	.word	0x20000000
 8000b58:	2000008c 	.word	0x2000008c
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000

08000b64 <ChangeAddresses>:

uint16_t ChangeAddresses(uint8_t num_of_tof) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
	TurnOffAll();
 8000b72:	f7ff fe69 	bl	8000848 <TurnOffAll>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f000 fa10 	bl	8000f9c <HAL_Delay>
	for (uint8_t i = 0; i != num_of_tof + 1; ++i) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73bb      	strb	r3, [r7, #14]
 8000b80:	e030      	b.n	8000be4 <ChangeAddresses+0x80>
		success *= TurnOnAt(i);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe9d 	bl	80008c4 <TurnOnAt>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	fb12 f303 	smulbb	r3, r2, r3
 8000b94:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8000b96:	2005      	movs	r0, #5
 8000b98:	f000 fa00 	bl	8000f9c <HAL_Delay>
		VL53L1X_SensorInit(dev);
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <ChangeAddresses+0x98>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 f809 	bl	8005bb8 <VL53L1X_SensorInit>
		success *= VL53L1X_SetI2CAddress(dev, devs[i]);
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <ChangeAddresses+0x98>)
 8000ba8:	881a      	ldrh	r2, [r3, #0]
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	4914      	ldr	r1, [pc, #80]	; (8000c00 <ChangeAddresses+0x9c>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f004 ffe2 	bl	8005b7c <VL53L1X_SetI2CAddress>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	7bfa      	ldrb	r2, [r7, #15]
 8000bbe:	fb12 f303 	smulbb	r3, r2, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
		success *= VL53L1X_StartRanging(devs[i]);
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <ChangeAddresses+0x9c>)
 8000bc8:	5cd3      	ldrb	r3, [r2, r3]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f005 f8a1 	bl	8005d14 <VL53L1X_StartRanging>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	fb12 f303 	smulbb	r3, r2, r3
 8000bdc:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i != num_of_tof + 1; ++i) {
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73bb      	strb	r3, [r7, #14]
 8000be4:	7bba      	ldrb	r2, [r7, #14]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d1c9      	bne.n	8000b82 <ChangeAddresses+0x1e>
	}
	return success;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b29b      	uxth	r3, r3
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <HAL_I2C_MspInit+0xa4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d13b      	bne.n	8000cfa <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	23c0      	movs	r3, #192	; 0xc0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4814      	ldr	r0, [pc, #80]	; (8000d0c <HAL_I2C_MspInit+0xac>)
 8000cba:	f000 fb45 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_I2C_MspInit+0xa8>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	201f      	movs	r0, #31
 8000ce0:	f000 fa5b 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ce4:	201f      	movs	r0, #31
 8000ce6:	f000 fa74 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2020      	movs	r0, #32
 8000cf0:	f000 fa53 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	f000 fa6c 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_UART_MspInit+0x94>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d133      	bne.n	8000d9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_UART_MspInit+0x9c>)
 8000d86:	f000 fadf 	bl	8001348 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2026      	movs	r0, #38	; 0x26
 8000d90:	f000 fa03 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f000 fa1c 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8ae 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <I2C1_EV_IRQHandler+0x10>)
 8000e0a:	f001 f8b3 	bl	8001f74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000038 	.word	0x20000038

08000e18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <I2C1_ER_IRQHandler+0x10>)
 8000e1e:	f001 fa1a 	bl	8002256 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000038 	.word	0x20000038

08000e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <USART2_IRQHandler+0x10>)
 8000e32:	f003 ff6f 	bl	8004d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f005 f85f 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb37 	bl	8000508 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ea8:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8000eac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000eb0:	200001d4 	.word	0x200001d4

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94f 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fe90 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000010 	.word	0x20000010
 8000f54:	20000018 	.word	0x20000018
 8000f58:	20000014 	.word	0x20000014

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	200000d0 	.word	0x200000d0

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000d0 	.word	0x200000d0

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000018 	.word	0x20000018

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff feb6 	bl	8000f84 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d008      	beq.n	8001238 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e052      	b.n	80012de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0216 	bic.w	r2, r2, #22
 8001246:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001256:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <HAL_DMA_Abort+0x62>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001288:	e013      	b.n	80012b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800128a:	f7ff fe7b 	bl	8000f84 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b05      	cmp	r3, #5
 8001296:	d90c      	bls.n	80012b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2220      	movs	r2, #32
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e015      	b.n	80012de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e4      	bne.n	800128a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	223f      	movs	r2, #63	; 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d004      	beq.n	8001304 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e00c      	b.n	800131e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2205      	movs	r2, #5
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001338:	b2db      	uxtb	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e165      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8154 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	2b02      	cmp	r3, #2
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80ae 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a5c      	ldr	r2, [pc, #368]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_GPIO_Init+0x304>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x308>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d025      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x30c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01f      	beq.n	800155e <HAL_GPIO_Init+0x216>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x310>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x212>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x314>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x318>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x20a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x31c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x206>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_GPIO_Init+0x320>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x202>
 8001546:	2306      	movs	r3, #6
 8001548:	e00c      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800154a:	2307      	movs	r3, #7
 800154c:	e00a      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800154e:	2305      	movs	r3, #5
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001552:	2304      	movs	r3, #4
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x304>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_GPIO_Init+0x324>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_GPIO_Init+0x324>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x324>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_GPIO_Init+0x324>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x324>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_GPIO_Init+0x324>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_GPIO_Init+0x324>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001624:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_GPIO_Init+0x324>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f ae96 	bls.w	8001364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40021800 	.word	0x40021800
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e12b      	b.n	800190e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fac8 	bl	8000c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001708:	f002 fd2e 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a81      	ldr	r2, [pc, #516]	; (8001918 <HAL_I2C_Init+0x274>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d807      	bhi.n	8001728 <HAL_I2C_Init+0x84>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a80      	ldr	r2, [pc, #512]	; (800191c <HAL_I2C_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e006      	b.n	8001736 <HAL_I2C_Init+0x92>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a7d      	ldr	r2, [pc, #500]	; (8001920 <HAL_I2C_Init+0x27c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0e7      	b.n	800190e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4a78      	ldr	r2, [pc, #480]	; (8001924 <HAL_I2C_Init+0x280>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_I2C_Init+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d802      	bhi.n	8001778 <HAL_I2C_Init+0xd4>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	e009      	b.n	800178c <HAL_I2C_Init+0xe8>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_I2C_Init+0x284>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	3301      	adds	r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800179e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	495c      	ldr	r1, [pc, #368]	; (8001918 <HAL_I2C_Init+0x274>)
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d819      	bhi.n	80017e0 <HAL_I2C_Init+0x13c>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e59      	subs	r1, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017c0:	400b      	ands	r3, r1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_I2C_Init+0x138>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e59      	subs	r1, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	e051      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017dc:	2304      	movs	r3, #4
 80017de:	e04f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_I2C_Init+0x168>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e58      	subs	r0, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e012      	b.n	8001832 <HAL_I2C_Init+0x18e>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Init+0x196>
 8001836:	2301      	movs	r3, #1
 8001838:	e022      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10e      	bne.n	8001860 <HAL_I2C_Init+0x1bc>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e58      	subs	r0, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	fbb0 f3f3 	udiv	r3, r0, r3
 8001854:	3301      	adds	r3, #1
 8001856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185e:	e00f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	6809      	ldr	r1, [r1, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6911      	ldr	r1, [r2, #16]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68d2      	ldr	r2, [r2, #12]
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	000186a0 	.word	0x000186a0
 800191c:	001e847f 	.word	0x001e847f
 8001920:	003d08ff 	.word	0x003d08ff
 8001924:	431bde83 	.word	0x431bde83
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
 800193c:	4613      	mov	r3, r2
 800193e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fb20 	bl	8000f84 <HAL_GetTick>
 8001944:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	f040 80e0 	bne.w	8001b14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2319      	movs	r3, #25
 800195a:	2201      	movs	r2, #1
 800195c:	4970      	ldr	r1, [pc, #448]	; (8001b20 <HAL_I2C_Master_Transmit+0x1f4>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f002 f8e6 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
 800196c:	e0d3      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2C_Master_Transmit+0x50>
 8001978:	2302      	movs	r3, #2
 800197a:	e0cc      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d007      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2221      	movs	r2, #33	; 0x21
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2210      	movs	r2, #16
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_I2C_Master_Transmit+0x1f8>)
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f001 fea8 	bl	8003740 <I2C_MasterRequestWrite>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08d      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a10:	e066      	b.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f002 f960 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d017      	beq.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f002 f950 	bl	8003d5e <I2C_WaitOnBTFFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d194      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00100002 	.word	0x00100002
 8001b24:	ffff0000 	.word	0xffff0000

08001b28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff fa22 	bl	8000f84 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	f040 820b 	bne.w	8001f66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	497c      	ldr	r1, [pc, #496]	; (8001d4c <HAL_I2C_Master_Receive+0x224>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f001 ffe8 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e1fe      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Master_Receive+0x50>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e1f7      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d007      	beq.n	8001b9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2222      	movs	r2, #34	; 0x22
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <HAL_I2C_Master_Receive+0x228>)
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f001 fe2c 	bl	8003844 <I2C_MasterRequestRead>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1b8      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e18c      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d11b      	bne.n	8001c66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e16c      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d11b      	bne.n	8001ca6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	e14c      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ccc:	e138      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	f200 80f1 	bhi.w	8001eba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d123      	bne.n	8001d28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f002 f8ad 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e139      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d26:	e10b      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d14e      	bne.n	8001dce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	2200      	movs	r2, #0
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <HAL_I2C_Master_Receive+0x22c>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f001 fef8 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e10e      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
 8001d4a:	bf00      	nop
 8001d4c:	00100002 	.word	0x00100002
 8001d50:	ffff0000 	.word	0xffff0000
 8001d54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dcc:	e0b8      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4966      	ldr	r1, [pc, #408]	; (8001f70 <HAL_I2C_Master_Receive+0x448>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f001 fea9 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0bf      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	2200      	movs	r2, #0
 8001e32:	494f      	ldr	r1, [pc, #316]	; (8001f70 <HAL_I2C_Master_Receive+0x448>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f001 fe7b 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e091      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb8:	e042      	b.n	8001f40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f001 ffc0 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e04c      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d118      	bne.n	8001f40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f aec2 	bne.w	8001cce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	00010004 	.word	0x00010004

08001f74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d003      	beq.n	8001fac <HAL_I2C_EV_IRQHandler+0x38>
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	f040 80c1 	bne.w	800212e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001fcc:	d003      	beq.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x62>
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_EV_IRQHandler+0x66>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x68>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	f000 8132 	beq.w	8002246 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <HAL_I2C_EV_IRQHandler+0x92>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 ffa8 	bl	8003f4e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fd83 	bl	8002b0a <I2C_Master_SB>
 8002004:	e092      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0xb2>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	0a5b      	lsrs	r3, r3, #9
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fdf9 	bl	8002c16 <I2C_Master_ADD10>
 8002024:	e082      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0xd2>
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	0a5b      	lsrs	r3, r3, #9
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fe13 	bl	8002c6a <I2C_Master_ADDR>
 8002044:	e072      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03b      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002060:	f000 80f3 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	09db      	lsrs	r3, r3, #7
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00f      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x11c>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	0a9b      	lsrs	r3, r3, #10
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x11c>
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d103      	bne.n	8002090 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f9f3 	bl	8002474 <I2C_MasterTransmit_TXE>
 800208e:	e04d      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80d6 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	0a5b      	lsrs	r3, r3, #9
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80cf 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	2b21      	cmp	r3, #33	; 0x21
 80020b0:	d103      	bne.n	80020ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa7a 	bl	80025ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b8:	e0c7      	b.n	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	f040 80c4 	bne.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fae8 	bl	8002698 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c8:	e0bf      	b.n	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d8:	f000 80b7 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00f      	beq.n	8002108 <HAL_I2C_EV_IRQHandler+0x194>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_I2C_EV_IRQHandler+0x194>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fb5d 	bl	80027c0 <I2C_MasterReceive_RXNE>
 8002106:	e011      	b.n	800212c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 809a 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	0a5b      	lsrs	r3, r3, #9
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8093 	beq.w	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fc06 	bl	8002936 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212a:	e08e      	b.n	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
 800212c:	e08d      	b.n	800224a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e007      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_I2C_EV_IRQHandler+0x20e>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00c      	beq.n	8002182 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002178:	69b9      	ldr	r1, [r7, #24]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 ffc4 	bl	8003108 <I2C_Slave_ADDR>
 8002180:	e066      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	0a5b      	lsrs	r3, r3, #9
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fffe 	bl	800319c <I2C_Slave_STOPF>
 80021a0:	e056      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	2b21      	cmp	r3, #33	; 0x21
 80021a6:	d002      	beq.n	80021ae <HAL_I2C_EV_IRQHandler+0x23a>
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	2b29      	cmp	r3, #41	; 0x29
 80021ac:	d125      	bne.n	80021fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	09db      	lsrs	r3, r3, #7
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00f      	beq.n	80021da <HAL_I2C_EV_IRQHandler+0x266>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	0a9b      	lsrs	r3, r3, #10
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_I2C_EV_IRQHandler+0x266>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 feda 	bl	8002f8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d8:	e039      	b.n	800224e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d033      	beq.n	800224e <HAL_I2C_EV_IRQHandler+0x2da>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	0a5b      	lsrs	r3, r3, #9
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02d      	beq.n	800224e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 ff07 	bl	8003006 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f8:	e029      	b.n	800224e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00f      	beq.n	8002226 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0a9b      	lsrs	r3, r3, #10
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ff12 	bl	8003048 <I2C_SlaveReceive_RXNE>
 8002224:	e014      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00e      	beq.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	0a5b      	lsrs	r3, r3, #9
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 ff40 	bl	80030c4 <I2C_SlaveReceive_BTF>
 8002244:	e004      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800224e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b08a      	sub	sp, #40	; 0x28
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002278:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_I2C_ER_IRQHandler+0x78>
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	0a9b      	lsrs	r3, r3, #10
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03f      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x104>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d039      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022e6:	7efb      	ldrb	r3, [r7, #27]
 80022e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002300:	7ebb      	ldrb	r3, [r7, #26]
 8002302:	2b20      	cmp	r3, #32
 8002304:	d112      	bne.n	800232c <HAL_I2C_ER_IRQHandler+0xd6>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <HAL_I2C_ER_IRQHandler+0xd6>
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b21      	cmp	r3, #33	; 0x21
 8002310:	d008      	beq.n	8002324 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b29      	cmp	r3, #41	; 0x29
 8002316:	d005      	beq.n	8002324 <HAL_I2C_ER_IRQHandler+0xce>
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b28      	cmp	r3, #40	; 0x28
 800231c:	d106      	bne.n	800232c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b21      	cmp	r3, #33	; 0x21
 8002322:	d103      	bne.n	800232c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 f869 	bl	80033fc <I2C_Slave_AF>
 800232a:	e016      	b.n	800235a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002334:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800233e:	7efb      	ldrb	r3, [r7, #27]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d002      	beq.n	800234a <HAL_I2C_ER_IRQHandler+0xf4>
 8002344:	7efb      	ldrb	r3, [r7, #27]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d107      	bne.n	800235a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002358:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	0adb      	lsrs	r3, r3, #11
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <HAL_I2C_ER_IRQHandler+0x12e>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002382:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f001 f8a0 	bl	80034dc <I2C_ITError>
  }
}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
 8002400:	4613      	mov	r3, r2
 8002402:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800248a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d150      	bne.n	800253c <I2C_MasterTransmit_TXE+0xc8>
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b21      	cmp	r3, #33	; 0x21
 800249e:	d14d      	bne.n	800253c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d01d      	beq.n	80024e2 <I2C_MasterTransmit_TXE+0x6e>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d01a      	beq.n	80024e2 <I2C_MasterTransmit_TXE+0x6e>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024b2:	d016      	beq.n	80024e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2211      	movs	r2, #17
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff62 	bl	80023a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024e0:	e060      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d107      	bne.n	800252c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff7d 	bl	8002424 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800252a:	e03b      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff35 	bl	80023a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800253a:	e033      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b21      	cmp	r3, #33	; 0x21
 8002540:	d005      	beq.n	800254e <I2C_MasterTransmit_TXE+0xda>
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d12d      	bne.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b22      	cmp	r3, #34	; 0x22
 800254c:	d12a      	bne.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d108      	bne.n	800256a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002568:	e01c      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d103      	bne.n	800257e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f88e 	bl	8002698 <I2C_MemoryTransmit_TXE_BTF>
}
 800257c:	e012      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025a2:	e7ff      	b.n	80025a4 <I2C_MasterTransmit_TXE+0x130>
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b21      	cmp	r3, #33	; 0x21
 80025c4:	d164      	bne.n	8002690 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025f4:	e04c      	b.n	8002690 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d01d      	beq.n	8002638 <I2C_MasterTransmit_BTF+0x8c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d01a      	beq.n	8002638 <I2C_MasterTransmit_BTF+0x8c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002608:	d016      	beq.n	8002638 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002618:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2211      	movs	r2, #17
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff feb7 	bl	80023a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002636:	e02b      	b.n	8002690 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002646:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d107      	bne.n	8002682 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fed2 	bl	8002424 <HAL_I2C_MemTxCpltCallback>
}
 8002680:	e006      	b.n	8002690 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fe8a 	bl	80023a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11d      	bne.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10b      	bne.n	80026d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026ce:	e073      	b.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	121b      	asrs	r3, r3, #8
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026ea:	e065      	b.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
}
 800270a:	e055      	b.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	2b02      	cmp	r3, #2
 8002712:	d151      	bne.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b22      	cmp	r3, #34	; 0x22
 8002718:	d10d      	bne.n	8002736 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002734:	e040      	b.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b21      	cmp	r3, #33	; 0x21
 8002744:	d112      	bne.n	800276c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800276a:	e025      	b.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d120      	bne.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b21      	cmp	r3, #33	; 0x21
 800277a:	d11d      	bne.n	80027b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800278a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fe36 	bl	8002424 <HAL_I2C_MemTxCpltCallback>
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b22      	cmp	r3, #34	; 0x22
 80027d2:	f040 80ac 	bne.w	800292e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d921      	bls.n	8002828 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b03      	cmp	r3, #3
 8002812:	f040 808c 	bne.w	800292e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002824:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002826:	e082      	b.n	800292e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b02      	cmp	r3, #2
 800282e:	d075      	beq.n	800291c <I2C_MasterReceive_RXNE+0x15c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d002      	beq.n	800283c <I2C_MasterReceive_RXNE+0x7c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d16f      	bne.n	800291c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f001 facf 	bl	8003de0 <I2C_WaitOnSTOPRequestThroughIT>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d142      	bne.n	80028ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002866:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d10a      	bne.n	80028b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fdc1 	bl	8002438 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028b6:	e03a      	b.n	800292e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2212      	movs	r2, #18
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fd76 	bl	80023b8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028cc:	e02f      	b.n	800292e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fd99 	bl	800244c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800291a:	e008      	b.n	800292e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	605a      	str	r2, [r3, #4]
}
 800292c:	e7ff      	b.n	800292e <I2C_MasterReceive_RXNE+0x16e>
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b04      	cmp	r3, #4
 800294c:	d11b      	bne.n	8002986 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002984:	e0bd      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b03      	cmp	r3, #3
 800298e:	d129      	bne.n	80029e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00a      	beq.n	80029bc <I2C_MasterReceive_BTF+0x86>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d007      	beq.n	80029bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029e2:	e08e      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d176      	bne.n	8002adc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <I2C_MasterReceive_BTF+0xc4>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e019      	b.n	8002a40 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d002      	beq.n	8002a18 <I2C_MasterReceive_BTF+0xe2>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d108      	bne.n	8002a2a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e00a      	b.n	8002a40 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d007      	beq.n	8002a40 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d10a      	bne.n	8002ac6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fcba 	bl	8002438 <HAL_I2C_MemRxCpltCallback>
}
 8002ac4:	e01d      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2212      	movs	r2, #18
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fc6f 	bl	80023b8 <HAL_I2C_MasterRxCpltCallback>
}
 8002ada:	e012      	b.n	8002b02 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d117      	bne.n	8002b4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b38:	e067      	b.n	8002c0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]
}
 8002b4c:	e05d      	b.n	8002c0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b56:	d133      	bne.n	8002bc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b21      	cmp	r3, #33	; 0x21
 8002b62:	d109      	bne.n	8002b78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e008      	b.n	8002b8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <I2C_Master_SB+0x92>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d108      	bne.n	8002bae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d032      	beq.n	8002c0a <I2C_Master_SB+0x100>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02d      	beq.n	8002c0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbc:	605a      	str	r2, [r3, #4]
}
 8002bbe:	e024      	b.n	8002c0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10e      	bne.n	8002be6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	11db      	asrs	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0306 	and.w	r3, r3, #6
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f063 030f 	orn	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]
}
 8002be4:	e011      	b.n	8002c0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10d      	bne.n	8002c0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	11db      	asrs	r3, r3, #7
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0306 	and.w	r3, r3, #6
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f063 030e 	orn	r3, r3, #14
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <I2C_Master_ADD10+0x26>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00c      	beq.n	8002c5e <I2C_Master_ADD10+0x48>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5c:	605a      	str	r2, [r3, #4]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b091      	sub	sp, #68	; 0x44
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b22      	cmp	r3, #34	; 0x22
 8002c92:	f040 8169 	bne.w	8002f68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <I2C_Master_ADDR+0x54>
 8002c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10b      	bne.n	8002cbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	e160      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11d      	bne.n	8002d02 <I2C_Master_ADDR+0x98>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cce:	d118      	bne.n	8002d02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8002d00:	e13e      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d113      	bne.n	8002d34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e115      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f040 808a 	bne.w	8002e54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d46:	d137      	bne.n	8002db8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d113      	bne.n	8002d90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	e0e7      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e0d3      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d02e      	beq.n	8002e1c <I2C_Master_ADDR+0x1b2>
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d02b      	beq.n	8002e1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d102      	bne.n	8002dd0 <I2C_Master_ADDR+0x166>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d125      	bne.n	8002e1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00e      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d00b      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d008      	beq.n	8002df4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	e0a1      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e085      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d14d      	bne.n	8002efa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d016      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
 8002e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d013      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d010      	beq.n	8002e92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e007      	b.n	8002ea2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb0:	d117      	bne.n	8002ee2 <I2C_Master_ADDR+0x278>
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb8:	d00b      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d008      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d005      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d002      	beq.n	8002ed2 <I2C_Master_ADDR+0x268>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d107      	bne.n	8002ee2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	e032      	b.n	8002f60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f18:	d117      	bne.n	8002f4a <I2C_Master_ADDR+0x2e0>
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f20:	d00b      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d008      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d005      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d002      	beq.n	8002f3a <I2C_Master_ADDR+0x2d0>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d107      	bne.n	8002f4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f66:	e00b      	b.n	8002f80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	e7ff      	b.n	8002f80 <I2C_Master_ADDR+0x316>
 8002f80:	bf00      	nop
 8002f82:	3744      	adds	r7, #68	; 0x44
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02b      	beq.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d114      	bne.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b29      	cmp	r3, #41	; 0x29
 8002fd8:	d111      	bne.n	8002ffe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2221      	movs	r2, #33	; 0x21
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2228      	movs	r2, #40	; 0x28
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff f9e7 	bl	80023cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02c      	beq.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d114      	bne.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b2a      	cmp	r3, #42	; 0x2a
 8003096:	d111      	bne.n	80030bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2228      	movs	r2, #40	; 0x28
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff f992 	bl	80023e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003122:	2b28      	cmp	r3, #40	; 0x28
 8003124:	d127      	bne.n	8003176 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	09db      	lsrs	r3, r3, #7
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	81bb      	strh	r3, [r7, #12]
 8003158:	e002      	b.n	8003160 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003168:	89ba      	ldrh	r2, [r7, #12]
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff f940 	bl	80023f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003174:	e00e      	b.n	8003194 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d172      	bne.n	80032e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	d002      	beq.n	8003206 <I2C_Slave_STOPF+0x6a>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b2a      	cmp	r3, #42	; 0x2a
 8003204:	d135      	bne.n	8003272 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe f873 	bl	800132a <HAL_DMA_GetState>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d049      	beq.n	80032de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <I2C_Slave_STOPF+0x258>)
 8003250:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f845 	bl	80012e6 <HAL_DMA_Abort_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03d      	beq.n	80032de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003270:	e035      	b.n	80032de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe f83d 	bl	800132a <HAL_DMA_GetState>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d014      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	4a4e      	ldr	r2, [pc, #312]	; (80033f4 <I2C_Slave_STOPF+0x258>)
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f80f 	bl	80012e6 <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
 80032dc:	e000      	b.n	80032e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03e      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d112      	bne.n	800331e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d112      	bne.n	8003352 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8b3 	bl	80034dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003376:	e039      	b.n	80033ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b2a      	cmp	r3, #42	; 0x2a
 800337c:	d109      	bne.n	8003392 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff f827 	bl	80023e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b28      	cmp	r3, #40	; 0x28
 800339c:	d111      	bne.n	80033c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <I2C_Slave_STOPF+0x25c>)
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff f828 	bl	8002410 <HAL_I2C_ListenCpltCallback>
}
 80033c0:	e014      	b.n	80033ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	d002      	beq.n	80033d0 <I2C_Slave_STOPF+0x234>
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b22      	cmp	r3, #34	; 0x22
 80033ce:	d10d      	bne.n	80033ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe fffa 	bl	80023e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	080039e1 	.word	0x080039e1
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d002      	beq.n	800341e <I2C_Slave_AF+0x22>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b20      	cmp	r3, #32
 800341c:	d129      	bne.n	8003472 <I2C_Slave_AF+0x76>
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b28      	cmp	r3, #40	; 0x28
 8003422:	d126      	bne.n	8003472 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <I2C_Slave_AF+0xdc>)
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003438:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003442:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe ffd0 	bl	8002410 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003470:	e02e      	b.n	80034d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b21      	cmp	r3, #33	; 0x21
 8003476:	d126      	bne.n	80034c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <I2C_Slave_AF+0xdc>)
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe ff84 	bl	80023cc <HAL_I2C_SlaveTxCpltCallback>
}
 80034c4:	e004      	b.n	80034d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ce:	615a      	str	r2, [r3, #20]
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	ffff0000 	.word	0xffff0000

080034dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d002      	beq.n	8003500 <I2C_ITError+0x24>
 80034fa:	7bbb      	ldrb	r3, [r7, #14]
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d10a      	bne.n	8003516 <I2C_ITError+0x3a>
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b22      	cmp	r3, #34	; 0x22
 8003504:	d107      	bne.n	8003516 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003514:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800351c:	2b28      	cmp	r3, #40	; 0x28
 800351e:	d107      	bne.n	8003530 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2228      	movs	r2, #40	; 0x28
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800352e:	e015      	b.n	800355c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353e:	d00a      	beq.n	8003556 <I2C_ITError+0x7a>
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b60      	cmp	r3, #96	; 0x60
 8003544:	d007      	beq.n	8003556 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356a:	d162      	bne.n	8003632 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d020      	beq.n	80035cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	4a6a      	ldr	r2, [pc, #424]	; (8003738 <I2C_ITError+0x25c>)
 8003590:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fea5 	bl	80012e6 <HAL_DMA_Abort_IT>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8089 	beq.w	80036b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c6:	4610      	mov	r0, r2
 80035c8:	4798      	blx	r3
 80035ca:	e074      	b.n	80036b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	4a59      	ldr	r2, [pc, #356]	; (8003738 <I2C_ITError+0x25c>)
 80035d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fe84 	bl	80012e6 <HAL_DMA_Abort_IT>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d068      	beq.n	80036b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10b      	bne.n	800360a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800362c:	4610      	mov	r0, r2
 800362e:	4798      	blx	r3
 8003630:	e041      	b.n	80036b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b60      	cmp	r3, #96	; 0x60
 800363c:	d125      	bne.n	800368a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10b      	bne.n	8003672 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe feec 	bl	8002460 <HAL_I2C_AbortCpltCallback>
 8003688:	e015      	b.n	80036b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d10b      	bne.n	80036b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fe fecb 	bl	800244c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d113      	bne.n	8003730 <I2C_ITError+0x254>
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b28      	cmp	r3, #40	; 0x28
 800370c:	d110      	bne.n	8003730 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <I2C_ITError+0x260>)
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fe70 	bl	8002410 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	080039e1 	.word	0x080039e1
 800373c:	ffff0000 	.word	0xffff0000

08003740 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	460b      	mov	r3, r1
 800374e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d006      	beq.n	800376a <I2C_MasterRequestWrite+0x2a>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d003      	beq.n	800376a <I2C_MasterRequestWrite+0x2a>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003768:	d108      	bne.n	800377c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e00b      	b.n	8003794 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	2b12      	cmp	r3, #18
 8003782:	d107      	bne.n	8003794 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f9c5 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ba:	d103      	bne.n	80037c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e035      	b.n	8003834 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d0:	d108      	bne.n	80037e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	e01b      	b.n	800381c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037e4:	897b      	ldrh	r3, [r7, #10]
 80037e6:	11db      	asrs	r3, r3, #7
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0306 	and.w	r3, r3, #6
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f063 030f 	orn	r3, r3, #15
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <I2C_MasterRequestWrite+0xfc>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f9eb 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e010      	b.n	8003834 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <I2C_MasterRequestWrite+0x100>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9db 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	00010008 	.word	0x00010008
 8003840:	00010002 	.word	0x00010002

08003844 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	460b      	mov	r3, r1
 8003852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d006      	beq.n	800387e <I2C_MasterRequestRead+0x3a>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestRead+0x3a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b11      	cmp	r3, #17
 8003896:	d107      	bne.n	80038a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f93b 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d103      	bne.n	80038d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e079      	b.n	80039d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e05f      	b.n	80039b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	11db      	asrs	r3, r3, #7
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f063 030f 	orn	r3, r3, #15
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4930      	ldr	r1, [pc, #192]	; (80039d8 <I2C_MasterRequestRead+0x194>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f961 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e054      	b.n	80039d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4929      	ldr	r1, [pc, #164]	; (80039dc <I2C_MasterRequestRead+0x198>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f951 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e044      	b.n	80039d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f8d9 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d103      	bne.n	800399c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e017      	b.n	80039d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	11db      	asrs	r3, r3, #7
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0306 	and.w	r3, r3, #6
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f063 030e 	orn	r3, r3, #14
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4907      	ldr	r1, [pc, #28]	; (80039dc <I2C_MasterRequestRead+0x198>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f90d 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00010008 	.word	0x00010008
 80039dc:	00010002 	.word	0x00010002

080039e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <I2C_DMAAbort+0x148>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <I2C_DMAAbort+0x14c>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0a1a      	lsrs	r2, r3, #8
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00da      	lsls	r2, r3, #3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a26:	e00a      	b.n	8003a3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d0ea      	beq.n	8003a14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	2200      	movs	r2, #0
 8003a82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	2200      	movs	r2, #0
 8003a92:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d10e      	bne.n	8003ace <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7fe fcca 	bl	8002460 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003acc:	e027      	b.n	8003b1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ad4:	2b28      	cmp	r3, #40	; 0x28
 8003ad6:	d117      	bne.n	8003b08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2228      	movs	r2, #40	; 0x28
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b06:	e007      	b.n	8003b18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b18:	6978      	ldr	r0, [r7, #20]
 8003b1a:	f7fe fc97 	bl	800244c <HAL_I2C_ErrorCallback>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000010 	.word	0x20000010
 8003b2c:	14f8b589 	.word	0x14f8b589

08003b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b40:	e025      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d021      	beq.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fd fa1b 	bl	8000f84 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e023      	b.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	e00c      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d0b6      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bec:	e051      	b.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d123      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e046      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d021      	beq.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fd f999 	bl	8000f84 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d116      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e020      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10c      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e00b      	b.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d18d      	bne.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f900 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02d      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d021      	beq.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fd f93f 	bl	8000f84 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e007      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d1ca      	bne.n	8003cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d6a:	e02d      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f8bf 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e02d      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d021      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fd f8fe 	bl	8000f84 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d1ca      	bne.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	0a1a      	lsrs	r2, r3, #8
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e008      	b.n	8003e30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2c:	d0e9      	beq.n	8003e02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20000010 	.word	0x20000010
 8003e40:	14f8b589 	.word	0x14f8b589

08003e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e50:	e042      	b.n	8003ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d119      	bne.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e029      	b.n	8003ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fd f876 	bl	8000f84 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d1b5      	bne.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d11b      	bne.n	8003f40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f5e:	d103      	bne.n	8003f68 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f66:	e007      	b.n	8003f78 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f70:	d102      	bne.n	8003f78 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2208      	movs	r2, #8
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e067      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fc ff86 	bl	8000f84 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fc ff82 	bl	8000f84 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20c      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f855 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc fee6 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	08005fe4 	.word	0x08005fe4
 8004148:	20000010 	.word	0x20000010
 800414c:	20000014 	.word	0x20000014

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000010 	.word	0x20000010

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08005ff4 	.word	0x08005ff4

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffdc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0b5b      	lsrs	r3, r3, #13
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08005ff4 	.word	0x08005ff4

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b0ae      	sub	sp, #184	; 0xb8
 80041be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041de:	4bcb      	ldr	r3, [pc, #812]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	f200 8206 	bhi.w	80045f8 <HAL_RCC_GetSysClockFreq+0x440>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004229 	.word	0x08004229
 80041f8:	080045f9 	.word	0x080045f9
 80041fc:	080045f9 	.word	0x080045f9
 8004200:	080045f9 	.word	0x080045f9
 8004204:	08004231 	.word	0x08004231
 8004208:	080045f9 	.word	0x080045f9
 800420c:	080045f9 	.word	0x080045f9
 8004210:	080045f9 	.word	0x080045f9
 8004214:	08004239 	.word	0x08004239
 8004218:	080045f9 	.word	0x080045f9
 800421c:	080045f9 	.word	0x080045f9
 8004220:	080045f9 	.word	0x080045f9
 8004224:	08004429 	.word	0x08004429
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4bb9      	ldr	r3, [pc, #740]	; (8004510 <HAL_RCC_GetSysClockFreq+0x358>)
 800422a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800422e:	e1e7      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004230:	4bb8      	ldr	r3, [pc, #736]	; (8004514 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004236:	e1e3      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4bb4      	ldr	r3, [pc, #720]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004244:	4bb1      	ldr	r3, [pc, #708]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d071      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004250:	4bae      	ldr	r3, [pc, #696]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800425c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004288:	0150      	lsls	r0, r2, #5
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4621      	mov	r1, r4
 8004290:	1a51      	subs	r1, r2, r1
 8004292:	6439      	str	r1, [r7, #64]	; 0x40
 8004294:	4629      	mov	r1, r5
 8004296:	eb63 0301 	sbc.w	r3, r3, r1
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042a8:	4649      	mov	r1, r9
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042b2:	4641      	mov	r1, r8
 80042b4:	018a      	lsls	r2, r1, #6
 80042b6:	4641      	mov	r1, r8
 80042b8:	1a51      	subs	r1, r2, r1
 80042ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80042bc:	4649      	mov	r1, r9
 80042be:	eb63 0301 	sbc.w	r3, r3, r1
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042d0:	4649      	mov	r1, r9
 80042d2:	00cb      	lsls	r3, r1, #3
 80042d4:	4641      	mov	r1, r8
 80042d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042da:	4641      	mov	r1, r8
 80042dc:	00ca      	lsls	r2, r1, #3
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	4622      	mov	r2, r4
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ea:	462b      	mov	r3, r5
 80042ec:	460a      	mov	r2, r1
 80042ee:	eb42 0303 	adc.w	r3, r2, r3
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004300:	4629      	mov	r1, r5
 8004302:	024b      	lsls	r3, r1, #9
 8004304:	4621      	mov	r1, r4
 8004306:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800430a:	4621      	mov	r1, r4
 800430c:	024a      	lsls	r2, r1, #9
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800431c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004320:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004324:	f7fb ff6e 	bl	8000204 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004332:	e067      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b75      	ldr	r3, [pc, #468]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004340:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	67bb      	str	r3, [r7, #120]	; 0x78
 800434e:	2300      	movs	r3, #0
 8004350:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004352:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4621      	mov	r1, r4
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	62b9      	str	r1, [r7, #40]	; 0x28
 8004374:	4629      	mov	r1, r5
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004388:	4649      	mov	r1, r9
 800438a:	018b      	lsls	r3, r1, #6
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004392:	4641      	mov	r1, r8
 8004394:	018a      	lsls	r2, r1, #6
 8004396:	4641      	mov	r1, r8
 8004398:	ebb2 0a01 	subs.w	sl, r2, r1
 800439c:	4649      	mov	r1, r9
 800439e:	eb63 0b01 	sbc.w	fp, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b6:	4692      	mov	sl, r2
 80043b8:	469b      	mov	fp, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb1a 0303 	adds.w	r3, sl, r3
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	462b      	mov	r3, r5
 80043c4:	eb4b 0303 	adc.w	r3, fp, r3
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ec:	2200      	movs	r2, #0
 80043ee:	673b      	str	r3, [r7, #112]	; 0x70
 80043f0:	677a      	str	r2, [r7, #116]	; 0x74
 80043f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043f6:	f7fb ff05 	bl	8000204 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4613      	mov	r3, r2
 8004400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004404:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800441a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004426:	e0eb      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004428:	4b38      	ldr	r3, [pc, #224]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004434:	4b35      	ldr	r3, [pc, #212]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d06b      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCC_GetSysClockFreq+0x354>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	2200      	movs	r2, #0
 8004448:	66bb      	str	r3, [r7, #104]	; 0x68
 800444a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800444c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	663b      	str	r3, [r7, #96]	; 0x60
 8004454:	2300      	movs	r3, #0
 8004456:	667b      	str	r3, [r7, #100]	; 0x64
 8004458:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800445c:	4622      	mov	r2, r4
 800445e:	462b      	mov	r3, r5
 8004460:	f04f 0000 	mov.w	r0, #0
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	0159      	lsls	r1, r3, #5
 800446a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800446e:	0150      	lsls	r0, r2, #5
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4621      	mov	r1, r4
 8004476:	1a51      	subs	r1, r2, r1
 8004478:	61b9      	str	r1, [r7, #24]
 800447a:	4629      	mov	r1, r5
 800447c:	eb63 0301 	sbc.w	r3, r3, r1
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800448e:	4659      	mov	r1, fp
 8004490:	018b      	lsls	r3, r1, #6
 8004492:	4651      	mov	r1, sl
 8004494:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004498:	4651      	mov	r1, sl
 800449a:	018a      	lsls	r2, r1, #6
 800449c:	4651      	mov	r1, sl
 800449e:	ebb2 0801 	subs.w	r8, r2, r1
 80044a2:	4659      	mov	r1, fp
 80044a4:	eb63 0901 	sbc.w	r9, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044bc:	4690      	mov	r8, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	4623      	mov	r3, r4
 80044c2:	eb18 0303 	adds.w	r3, r8, r3
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	462b      	mov	r3, r5
 80044ca:	eb49 0303 	adc.w	r3, r9, r3
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044dc:	4629      	mov	r1, r5
 80044de:	024b      	lsls	r3, r1, #9
 80044e0:	4621      	mov	r1, r4
 80044e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e6:	4621      	mov	r1, r4
 80044e8:	024a      	lsls	r2, r1, #9
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044f2:	2200      	movs	r2, #0
 80044f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044fc:	f7fb fe82 	bl	8000204 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800450a:	e065      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x420>
 800450c:	40023800 	.word	0x40023800
 8004510:	00f42400 	.word	0x00f42400
 8004514:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCC_GetSysClockFreq+0x458>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	2200      	movs	r2, #0
 8004520:	4618      	mov	r0, r3
 8004522:	4611      	mov	r1, r2
 8004524:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004528:	653b      	str	r3, [r7, #80]	; 0x50
 800452a:	2300      	movs	r3, #0
 800452c:	657b      	str	r3, [r7, #84]	; 0x54
 800452e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	0159      	lsls	r1, r3, #5
 8004540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004544:	0150      	lsls	r0, r2, #5
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4641      	mov	r1, r8
 800454c:	1a51      	subs	r1, r2, r1
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	4649      	mov	r1, r9
 8004552:	eb63 0301 	sbc.w	r3, r3, r1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004564:	4659      	mov	r1, fp
 8004566:	018b      	lsls	r3, r1, #6
 8004568:	4651      	mov	r1, sl
 800456a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456e:	4651      	mov	r1, sl
 8004570:	018a      	lsls	r2, r1, #6
 8004572:	4651      	mov	r1, sl
 8004574:	1a54      	subs	r4, r2, r1
 8004576:	4659      	mov	r1, fp
 8004578:	eb63 0501 	sbc.w	r5, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	00eb      	lsls	r3, r5, #3
 8004586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	4614      	mov	r4, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4643      	mov	r3, r8
 8004592:	18e3      	adds	r3, r4, r3
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	464b      	mov	r3, r9
 8004598:	eb45 0303 	adc.w	r3, r5, r3
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045aa:	4629      	mov	r1, r5
 80045ac:	028b      	lsls	r3, r1, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b4:	4621      	mov	r1, r4
 80045b6:	028a      	lsls	r2, r1, #10
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c0:	2200      	movs	r2, #0
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045ca:	f7fb fe1b 	bl	8000204 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4613      	mov	r3, r2
 80045d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_GetSysClockFreq+0x458>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0f1b      	lsrs	r3, r3, #28
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80045e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045f6:	e003      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004604:	4618      	mov	r0, r3
 8004606:	37b8      	adds	r7, #184	; 0xb8
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400

08004618 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e28d      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8083 	beq.w	800473e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004638:	4b94      	ldr	r3, [pc, #592]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b04      	cmp	r3, #4
 8004642:	d019      	beq.n	8004678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004644:	4b91      	ldr	r3, [pc, #580]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800464c:	2b08      	cmp	r3, #8
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004650:	4b8e      	ldr	r3, [pc, #568]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465c:	d00c      	beq.n	8004678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465e:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d112      	bne.n	8004690 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b88      	ldr	r3, [pc, #544]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004676:	d10b      	bne.n	8004690 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b84      	ldr	r3, [pc, #528]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05b      	beq.n	800473c <HAL_RCC_OscConfig+0x124>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d157      	bne.n	800473c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e25a      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x90>
 800469a:	4b7c      	ldr	r3, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7b      	ldr	r2, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xcc>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0xb4>
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a75      	ldr	r2, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b73      	ldr	r3, [pc, #460]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a72      	ldr	r2, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xcc>
 80046cc:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6e      	ldr	r2, [pc, #440]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b6c      	ldr	r3, [pc, #432]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6b      	ldr	r2, [pc, #428]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fc fc4a 	bl	8000f84 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fc fc46 	bl	8000f84 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e21f      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xdc>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fc fc36 	bl	8000f84 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471c:	f7fc fc32 	bl	8000f84 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e20b      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x104>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d06f      	beq.n	800482a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800474a:	4b50      	ldr	r3, [pc, #320]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004756:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800475e:	2b08      	cmp	r3, #8
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004762:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCC_OscConfig+0x274>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x186>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1d3      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4937      	ldr	r1, [pc, #220]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCC_OscConfig+0x278>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fc fbdf 	bl	8000f84 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fc fbdb 	bl	8000f84 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1b4      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_RCC_OscConfig+0x274>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_OscConfig+0x278>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc fbbe 	bl	8000f84 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fc fbba 	bl	8000f84 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e193      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d036      	beq.n	80048a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x27c>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc fb9e 	bl	8000f84 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fc fb9a 	bl	8000f84 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e173      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x234>
 800486a:	e01b      	b.n	80048a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_RCC_OscConfig+0x27c>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fc fb87 	bl	8000f84 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e00e      	b.n	8004898 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fc fb83 	bl	8000f84 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d907      	bls.n	8004898 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e15c      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
 800488c:	40023800 	.word	0x40023800
 8004890:	42470000 	.word	0x42470000
 8004894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ea      	bne.n	800487a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8097 	beq.w	80049e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b83      	ldr	r3, [pc, #524]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b7f      	ldr	r3, [pc, #508]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a7e      	ldr	r2, [pc, #504]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <HAL_RCC_OscConfig+0x4b0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d118      	bne.n	8004920 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x4b0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a75      	ldr	r2, [pc, #468]	; (8004ac8 <HAL_RCC_OscConfig+0x4b0>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fc fb43 	bl	8000f84 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004902:	f7fc fb3f 	bl	8000f84 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e118      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x4b0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x31e>
 8004928:	4b66      	ldr	r3, [pc, #408]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	4a65      	ldr	r2, [pc, #404]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	; 0x70
 8004934:	e01c      	b.n	8004970 <HAL_RCC_OscConfig+0x358>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b05      	cmp	r3, #5
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x340>
 800493e:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a60      	ldr	r2, [pc, #384]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	4b5e      	ldr	r3, [pc, #376]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0x358>
 8004958:	4b5a      	ldr	r3, [pc, #360]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a59      	ldr	r2, [pc, #356]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
 8004964:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 800496a:	f023 0304 	bic.w	r3, r3, #4
 800496e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fc fb04 	bl	8000f84 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	e00a      	b.n	8004996 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fc fb00 	bl	8000f84 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0d7      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ee      	beq.n	8004980 <HAL_RCC_OscConfig+0x368>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fc faee 	bl	8000f84 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fc faea 	bl	8000f84 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0c1      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c2:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ee      	bne.n	80049ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d4:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80049da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80ad 	beq.w	8004b44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ea:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d060      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d145      	bne.n	8004a8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x4b4>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fabe 	bl	8000f84 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fc faba 	bl	8000f84 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e093      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	3b01      	subs	r3, #1
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	071b      	lsls	r3, r3, #28
 8004a56:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4b4>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fc fa8f 	bl	8000f84 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fc fa8b 	bl	8000f84 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e064      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x452>
 8004a88:	e05c      	b.n	8004b44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4b4>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fc fa78 	bl	8000f84 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fc fa74 	bl	8000f84 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04d      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x480>
 8004ab6:	e045      	b.n	8004b44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e040      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad0:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <HAL_RCC_OscConfig+0x538>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d030      	beq.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d129      	bne.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d122      	bne.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d119      	bne.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d10f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800

08004b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e03f      	b.n	8004be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc f8c8 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fd7b 	bl	8005694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b08a      	sub	sp, #40	; 0x28
 8004bf2:	af02      	add	r7, sp, #8
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d17c      	bne.n	8004d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_UART_Transmit+0x2c>
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e075      	b.n	8004d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x3e>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e06e      	b.n	8004d0a <HAL_UART_Transmit+0x11c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c42:	f7fc f99f 	bl	8000f84 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_Transmit+0x82>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e003      	b.n	8004c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c80:	e02a      	b.n	8004cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 faf9 	bl	8005284 <UART_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e036      	b.n	8004d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e007      	b.n	8004cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1cf      	bne.n	8004c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2140      	movs	r1, #64	; 0x40
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fac9 	bl	8005284 <UART_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e006      	b.n	8004d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b0ba      	sub	sp, #232	; 0xe8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
 8004d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fbd3 	bl	800551e <UART_Receive_IT>
      return;
 8004d78:	e256      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80de 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
 8004d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d1 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0202 	orr.w	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d011      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 81ed 	beq.w	800521e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fb5e 	bl	800551e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <HAL_UART_IRQHandler+0x17a>
 8004e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d04f      	beq.n	8004f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa66 	bl	8005360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d141      	bne.n	8004f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1d9      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	4a7d      	ldr	r2, [pc, #500]	; (80050f0 <HAL_UART_IRQHandler+0x3dc>)
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc f9ef 	bl	80012e6 <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00e      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f99a 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00a      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f996 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f992 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f3a:	e170      	b.n	800521e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	bf00      	nop
    return;
 8004f3e:	e16e      	b.n	800521e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f040 814a 	bne.w	80051de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8143 	beq.w	80051de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 813c 	beq.w	80051de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	f040 80b4 	bne.w	80050f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8140 	beq.w	8005222 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004faa:	429a      	cmp	r2, r3
 8004fac:	f080 8139 	bcs.w	8005222 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	f000 8088 	beq.w	80050d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d9      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800503a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800503e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e1      	bne.n	8005012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800505e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e3      	bne.n	800504e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e3      	bne.n	8005094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc f898 	bl	8001206 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8c0 	bl	800526c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ec:	e099      	b.n	8005222 <HAL_UART_IRQHandler+0x50e>
 80050ee:	bf00      	nop
 80050f0:	08005427 	.word	0x08005427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 808b 	beq.w	8005226 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8086 	beq.w	8005226 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800513e:	647a      	str	r2, [r7, #68]	; 0x44
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e3      	bne.n	800511a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3314      	adds	r3, #20
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	623b      	str	r3, [r7, #32]
   return(result);
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005176:	633a      	str	r2, [r7, #48]	; 0x30
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0310 	bic.w	r3, r3, #16
 80051ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051bc:	61fa      	str	r2, [r7, #28]
 80051be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e3      	bne.n	8005198 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f848 	bl	800526c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051dc:	e023      	b.n	8005226 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_UART_IRQHandler+0x4ea>
 80051ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f929 	bl	800544e <UART_Transmit_IT>
    return;
 80051fc:	e014      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <HAL_UART_IRQHandler+0x514>
 800520a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f969 	bl	80054ee <UART_EndTransmit_IT>
    return;
 800521c:	e004      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
    return;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
      return;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
      return;
 8005226:	bf00      	nop
  }
}
 8005228:	37e8      	adds	r7, #232	; 0xe8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	; 0x40
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005294:	e050      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d04c      	beq.n	8005338 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800529e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a4:	f7fb fe6e 	bl	8000f84 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d241      	bcs.n	8005338 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d4:	637a      	str	r2, [r7, #52]	; 0x34
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	613b      	str	r3, [r7, #16]
   return(result);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005308:	623a      	str	r2, [r7, #32]
 800530a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	61bb      	str	r3, [r7, #24]
   return(result);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e00f      	b.n	8005358 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	429a      	cmp	r2, r3
 8005354:	d09f      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3740      	adds	r7, #64	; 0x40
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b095      	sub	sp, #84	; 0x54
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005388:	643a      	str	r2, [r7, #64]	; 0x40
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800538e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3314      	adds	r3, #20
 80053ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d119      	bne.n	800540c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f8:	61ba      	str	r2, [r7, #24]
 80053fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800541a:	bf00      	nop
 800541c:	3754      	adds	r7, #84	; 0x54
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff ff09 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b21      	cmp	r3, #33	; 0x21
 8005460:	d13e      	bne.n	80054e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d114      	bne.n	8005496 <UART_Transmit_IT+0x48>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d110      	bne.n	8005496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	1c9a      	adds	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]
 8005494:	e008      	b.n	80054a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6211      	str	r1, [r2, #32]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4619      	mov	r1, r3
 80054b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10f      	bne.n	80054dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe8e 	bl	8005230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08c      	sub	sp, #48	; 0x30
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b22      	cmp	r3, #34	; 0x22
 8005530:	f040 80ab 	bne.w	800568a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d117      	bne.n	800556e <UART_Receive_IT+0x50>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	b29a      	uxth	r2, r3
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	1c9a      	adds	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
 800556c:	e026      	b.n	80055bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d007      	beq.n	8005592 <UART_Receive_IT+0x74>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <UART_Receive_IT+0x82>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e008      	b.n	80055b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4619      	mov	r1, r3
 80055ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d15a      	bne.n	8005686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0220 	bic.w	r2, r2, #32
 80055de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b01      	cmp	r3, #1
 800560e:	d135      	bne.n	800567c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f023 0310 	bic.w	r3, r3, #16
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	623a      	str	r2, [r7, #32]
 8005638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	61bb      	str	r3, [r7, #24]
   return(result);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	d10a      	bne.n	800566e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fdf9 	bl	800526c <HAL_UARTEx_RxEventCallback>
 800567a:	e002      	b.n	8005682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fde1 	bl	8005244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e002      	b.n	800568c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
  }
}
 800568c:	4618      	mov	r0, r3
 800568e:	3730      	adds	r7, #48	; 0x30
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005698:	b0c0      	sub	sp, #256	; 0x100
 800569a:	af00      	add	r7, sp, #0
 800569c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	68d9      	ldr	r1, [r3, #12]
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	ea40 0301 	orr.w	r3, r0, r1
 80056bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056ec:	f021 010c 	bic.w	r1, r1, #12
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056fa:	430b      	orrs	r3, r1
 80056fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	6999      	ldr	r1, [r3, #24]
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	ea40 0301 	orr.w	r3, r0, r1
 800571a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b8f      	ldr	r3, [pc, #572]	; (8005960 <UART_SetConfig+0x2cc>)
 8005724:	429a      	cmp	r2, r3
 8005726:	d005      	beq.n	8005734 <UART_SetConfig+0xa0>
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b8d      	ldr	r3, [pc, #564]	; (8005964 <UART_SetConfig+0x2d0>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d104      	bne.n	800573e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7fe fd2c 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8005738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800573c:	e003      	b.n	8005746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800573e:	f7fe fd13 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8005742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	f040 810c 	bne.w	800596c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800575e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005766:	4622      	mov	r2, r4
 8005768:	462b      	mov	r3, r5
 800576a:	1891      	adds	r1, r2, r2
 800576c:	65b9      	str	r1, [r7, #88]	; 0x58
 800576e:	415b      	adcs	r3, r3
 8005770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005776:	4621      	mov	r1, r4
 8005778:	eb12 0801 	adds.w	r8, r2, r1
 800577c:	4629      	mov	r1, r5
 800577e:	eb43 0901 	adc.w	r9, r3, r1
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800578e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005796:	4690      	mov	r8, r2
 8005798:	4699      	mov	r9, r3
 800579a:	4623      	mov	r3, r4
 800579c:	eb18 0303 	adds.w	r3, r8, r3
 80057a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057a4:	462b      	mov	r3, r5
 80057a6:	eb49 0303 	adc.w	r3, r9, r3
 80057aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057c2:	460b      	mov	r3, r1
 80057c4:	18db      	adds	r3, r3, r3
 80057c6:	653b      	str	r3, [r7, #80]	; 0x50
 80057c8:	4613      	mov	r3, r2
 80057ca:	eb42 0303 	adc.w	r3, r2, r3
 80057ce:	657b      	str	r3, [r7, #84]	; 0x54
 80057d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057d8:	f7fa fd14 	bl	8000204 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4b61      	ldr	r3, [pc, #388]	; (8005968 <UART_SetConfig+0x2d4>)
 80057e2:	fba3 2302 	umull	r2, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	011c      	lsls	r4, r3, #4
 80057ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	1891      	adds	r1, r2, r2
 8005802:	64b9      	str	r1, [r7, #72]	; 0x48
 8005804:	415b      	adcs	r3, r3
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800580c:	4641      	mov	r1, r8
 800580e:	eb12 0a01 	adds.w	sl, r2, r1
 8005812:	4649      	mov	r1, r9
 8005814:	eb43 0b01 	adc.w	fp, r3, r1
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800582c:	4692      	mov	sl, r2
 800582e:	469b      	mov	fp, r3
 8005830:	4643      	mov	r3, r8
 8005832:	eb1a 0303 	adds.w	r3, sl, r3
 8005836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800583a:	464b      	mov	r3, r9
 800583c:	eb4b 0303 	adc.w	r3, fp, r3
 8005840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005858:	460b      	mov	r3, r1
 800585a:	18db      	adds	r3, r3, r3
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
 800585e:	4613      	mov	r3, r2
 8005860:	eb42 0303 	adc.w	r3, r2, r3
 8005864:	647b      	str	r3, [r7, #68]	; 0x44
 8005866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800586a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800586e:	f7fa fcc9 	bl	8000204 <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4611      	mov	r1, r2
 8005878:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <UART_SetConfig+0x2d4>)
 800587a:	fba3 2301 	umull	r2, r3, r3, r1
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	2264      	movs	r2, #100	; 0x64
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	1acb      	subs	r3, r1, r3
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <UART_SetConfig+0x2d4>)
 8005890:	fba3 2302 	umull	r2, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800589c:	441c      	add	r4, r3
 800589e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	1891      	adds	r1, r2, r2
 80058b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058b8:	415b      	adcs	r3, r3
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058c0:	4641      	mov	r1, r8
 80058c2:	1851      	adds	r1, r2, r1
 80058c4:	6339      	str	r1, [r7, #48]	; 0x30
 80058c6:	4649      	mov	r1, r9
 80058c8:	414b      	adcs	r3, r1
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058d8:	4659      	mov	r1, fp
 80058da:	00cb      	lsls	r3, r1, #3
 80058dc:	4651      	mov	r1, sl
 80058de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e2:	4651      	mov	r1, sl
 80058e4:	00ca      	lsls	r2, r1, #3
 80058e6:	4610      	mov	r0, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	4642      	mov	r2, r8
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058f4:	464b      	mov	r3, r9
 80058f6:	460a      	mov	r2, r1
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800590c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005914:	460b      	mov	r3, r1
 8005916:	18db      	adds	r3, r3, r3
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
 800591a:	4613      	mov	r3, r2
 800591c:	eb42 0303 	adc.w	r3, r2, r3
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800592a:	f7fa fc6b 	bl	8000204 <__aeabi_uldivmod>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <UART_SetConfig+0x2d4>)
 8005934:	fba3 1302 	umull	r1, r3, r3, r2
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	2164      	movs	r1, #100	; 0x64
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	3332      	adds	r3, #50	; 0x32
 8005946:	4a08      	ldr	r2, [pc, #32]	; (8005968 <UART_SetConfig+0x2d4>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f003 0207 	and.w	r2, r3, #7
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4422      	add	r2, r4
 800595a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800595c:	e105      	b.n	8005b6a <UART_SetConfig+0x4d6>
 800595e:	bf00      	nop
 8005960:	40011000 	.word	0x40011000
 8005964:	40011400 	.word	0x40011400
 8005968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800596c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005970:	2200      	movs	r2, #0
 8005972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800597a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800597e:	4642      	mov	r2, r8
 8005980:	464b      	mov	r3, r9
 8005982:	1891      	adds	r1, r2, r2
 8005984:	6239      	str	r1, [r7, #32]
 8005986:	415b      	adcs	r3, r3
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598e:	4641      	mov	r1, r8
 8005990:	1854      	adds	r4, r2, r1
 8005992:	4649      	mov	r1, r9
 8005994:	eb43 0501 	adc.w	r5, r3, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	00eb      	lsls	r3, r5, #3
 80059a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059a6:	00e2      	lsls	r2, r4, #3
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	4643      	mov	r3, r8
 80059ae:	18e3      	adds	r3, r4, r3
 80059b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059b4:	464b      	mov	r3, r9
 80059b6:	eb45 0303 	adc.w	r3, r5, r3
 80059ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059da:	4629      	mov	r1, r5
 80059dc:	008b      	lsls	r3, r1, #2
 80059de:	4621      	mov	r1, r4
 80059e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e4:	4621      	mov	r1, r4
 80059e6:	008a      	lsls	r2, r1, #2
 80059e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059ec:	f7fa fc0a 	bl	8000204 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4b60      	ldr	r3, [pc, #384]	; (8005b78 <UART_SetConfig+0x4e4>)
 80059f6:	fba3 2302 	umull	r2, r3, r3, r2
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	011c      	lsls	r4, r3, #4
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	61b9      	str	r1, [r7, #24]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a20:	4641      	mov	r1, r8
 8005a22:	1851      	adds	r1, r2, r1
 8005a24:	6139      	str	r1, [r7, #16]
 8005a26:	4649      	mov	r1, r9
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a38:	4659      	mov	r1, fp
 8005a3a:	00cb      	lsls	r3, r1, #3
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a42:	4651      	mov	r1, sl
 8005a44:	00ca      	lsls	r2, r1, #3
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a54:	464b      	mov	r3, r9
 8005a56:	460a      	mov	r2, r1
 8005a58:	eb42 0303 	adc.w	r3, r2, r3
 8005a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a78:	4649      	mov	r1, r9
 8005a7a:	008b      	lsls	r3, r1, #2
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a82:	4641      	mov	r1, r8
 8005a84:	008a      	lsls	r2, r1, #2
 8005a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a8a:	f7fa fbbb 	bl	8000204 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <UART_SetConfig+0x4e4>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <UART_SetConfig+0x4e4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab2:	441c      	add	r4, r3
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab8:	2200      	movs	r2, #0
 8005aba:	673b      	str	r3, [r7, #112]	; 0x70
 8005abc:	677a      	str	r2, [r7, #116]	; 0x74
 8005abe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ac2:	4642      	mov	r2, r8
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	1891      	adds	r1, r2, r2
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	415b      	adcs	r3, r3
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	1851      	adds	r1, r2, r1
 8005ad6:	6039      	str	r1, [r7, #0]
 8005ad8:	4649      	mov	r1, r9
 8005ada:	414b      	adcs	r3, r1
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aea:	4659      	mov	r1, fp
 8005aec:	00cb      	lsls	r3, r1, #3
 8005aee:	4651      	mov	r1, sl
 8005af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af4:	4651      	mov	r1, sl
 8005af6:	00ca      	lsls	r2, r1, #3
 8005af8:	4610      	mov	r0, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	4603      	mov	r3, r0
 8005afe:	4642      	mov	r2, r8
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b04:	464b      	mov	r3, r9
 8005b06:	460a      	mov	r2, r1
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	663b      	str	r3, [r7, #96]	; 0x60
 8005b18:	667a      	str	r2, [r7, #100]	; 0x64
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b26:	4649      	mov	r1, r9
 8005b28:	008b      	lsls	r3, r1, #2
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b30:	4641      	mov	r1, r8
 8005b32:	008a      	lsls	r2, r1, #2
 8005b34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b38:	f7fa fb64 	bl	8000204 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <UART_SetConfig+0x4e4>)
 8005b42:	fba3 1302 	umull	r1, r3, r3, r2
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2164      	movs	r1, #100	; 0x64
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	3332      	adds	r3, #50	; 0x32
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <UART_SetConfig+0x4e4>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4422      	add	r2, r4
 8005b68:	609a      	str	r2, [r3, #8]
}
 8005b6a:	bf00      	nop
 8005b6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	51eb851f 	.word	0x51eb851f

08005b7c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	460a      	mov	r2, r1
 8005b86:	80fb      	strh	r3, [r7, #6]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8005b90:	797b      	ldrb	r3, [r7, #5]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f976 	bl	8005e8c <VL53L1_WrByte>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	73fb      	strb	r3, [r7, #15]
	return status;
 8005baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8005bca:	232d      	movs	r3, #45	; 0x2d
 8005bcc:	73bb      	strb	r3, [r7, #14]
 8005bce:	e011      	b.n	8005bf4 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	b299      	uxth	r1, r3
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	3b2d      	subs	r3, #45	; 0x2d
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <VL53L1X_SensorInit+0xd4>)
 8005bda:	5cd2      	ldrb	r2, [r2, r3]
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f954 	bl	8005e8c <VL53L1_WrByte>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	73bb      	strb	r3, [r7, #14]
 8005bf4:	7bbb      	ldrb	r3, [r7, #14]
 8005bf6:	2b87      	cmp	r3, #135	; 0x87
 8005bf8:	d9ea      	bls.n	8005bd0 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f889 	bl	8005d14 <VL53L1X_StartRanging>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8005c10:	e00b      	b.n	8005c2a <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8005c12:	f107 020d 	add.w	r2, r7, #13
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f8aa 	bl	8005d74 <VL53L1X_CheckForDataReady>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8005c2a:	7b7b      	ldrb	r3, [r7, #13]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f82c 	bl	8005c90 <VL53L1X_ClearInterrupt>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f87d 	bl	8005d44 <VL53L1X_StopRanging>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	2209      	movs	r2, #9
 8005c58:	2108      	movs	r1, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f916 	bl	8005e8c <VL53L1_WrByte>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	210b      	movs	r1, #11
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 f90b 	bl	8005e8c <VL53L1_WrByte>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	73fb      	strb	r3, [r7, #15]
	return status;
 8005c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08005ffc 	.word	0x08005ffc

08005c90 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	2186      	movs	r1, #134	; 0x86
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 f8f1 	bl	8005e8c <VL53L1_WrByte>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	73fb      	strb	r3, [r7, #15]
	return status;
 8005cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8005cd0:	f107 020e 	add.w	r2, r7, #14
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2130      	movs	r1, #48	; 0x30
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f903 	bl	8005ee4 <VL53L1_RdByte>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2301      	moveq	r3, #1
 8005cfe:	2300      	movne	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	701a      	strb	r2, [r3, #0]
	return status;
 8005d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	2187      	movs	r1, #135	; 0x87
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f8af 	bl	8005e8c <VL53L1_WrByte>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	73fb      	strb	r3, [r7, #15]
	return status;
 8005d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2187      	movs	r1, #135	; 0x87
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f897 	bl	8005e8c <VL53L1_WrByte>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	73fb      	strb	r3, [r7, #15]
	return status;
 8005d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	6039      	str	r1, [r7, #0]
 8005d7e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8005d84:	f107 020d 	add.w	r2, r7, #13
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff97 	bl	8005cc0 <VL53L1X_GetInterruptPolarity>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8005d9c:	f107 020e 	add.w	r2, r7, #14
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2131      	movs	r1, #49	; 0x31
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f89d 	bl	8005ee4 <VL53L1_RdByte>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8005db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10c      	bne.n	8005dd6 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	7b7a      	ldrb	r2, [r7, #13]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d103      	bne.n	8005dd0 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	4603      	mov	r3, r0
 8005dea:	6039      	str	r1, [r7, #0]
 8005dec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8005df6:	f107 020e 	add.w	r2, r7, #14
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	21e5      	movs	r1, #229	; 0xe5
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f870 	bl	8005ee4 <VL53L1_RdByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8005e0e:	7bba      	ldrb	r2, [r7, #14]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	701a      	strb	r2, [r3, #0]
	return status;
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	4603      	mov	r3, r0
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	89f9      	ldrh	r1, [r7, #14]
 8005e34:	220a      	movs	r2, #10
 8005e36:	9200      	str	r2, [sp, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	4805      	ldr	r0, [pc, #20]	; (8005e50 <_I2CWrite+0x30>)
 8005e3c:	f7fb fd76 	bl	800192c <HAL_I2C_Master_Transmit>
 8005e40:	4603      	mov	r3, r0
 8005e42:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005e44:	697b      	ldr	r3, [r7, #20]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000038 	.word	0x20000038

08005e54 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8005e62:	89fb      	ldrh	r3, [r7, #14]
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	220a      	movs	r2, #10
 8005e70:	9200      	str	r2, [sp, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4804      	ldr	r0, [pc, #16]	; (8005e88 <_I2CRead+0x34>)
 8005e76:	f7fb fe57 	bl	8001b28 <HAL_I2C_Master_Receive>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000038 	.word	0x20000038

08005e8c <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	80fb      	strh	r3, [r7, #6]
 8005e96:	460b      	mov	r3, r1
 8005e98:	80bb      	strh	r3, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005ea2:	88bb      	ldrh	r3, [r7, #4]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <VL53L1_WrByte+0x54>)
 8005eac:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005eae:	88bb      	ldrh	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <VL53L1_WrByte+0x54>)
 8005eb4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <VL53L1_WrByte+0x54>)
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <VL53L1_WrByte+0x54>)
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ffac 	bl	8005e20 <_I2CWrite>
 8005ec8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005ed0:	23f3      	movs	r3, #243	; 0xf3
 8005ed2:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8005ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200000d4 	.word	0x200000d4

08005ee4 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	603a      	str	r2, [r7, #0]
 8005eee:	80fb      	strh	r3, [r7, #6]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005ef8:	88bb      	ldrh	r3, [r7, #4]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <VL53L1_RdByte+0x6c>)
 8005f02:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005f04:	88bb      	ldrh	r3, [r7, #4]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <VL53L1_RdByte+0x6c>)
 8005f0a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	490f      	ldr	r1, [pc, #60]	; (8005f50 <VL53L1_RdByte+0x6c>)
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff84 	bl	8005e20 <_I2CWrite>
 8005f18:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005f20:	23f3      	movs	r3, #243	; 0xf3
 8005f22:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005f24:	e00d      	b.n	8005f42 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff ff91 	bl	8005e54 <_I2CRead>
 8005f32:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005f3a:	23f3      	movs	r3, #243	; 0xf3
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	e000      	b.n	8005f42 <VL53L1_RdByte+0x5e>
    }
done:
 8005f40:	bf00      	nop
    return Status;
 8005f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200000d4 	.word	0x200000d4

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	; (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	; (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	; (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	; (8005f98 <__libc_init_array+0x44>)
 8005f68:	f000 f820 	bl	8005fac <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08006060 	.word	0x08006060
 8005f90:	08006060 	.word	0x08006060
 8005f94:	08006060 	.word	0x08006060
 8005f98:	08006064 	.word	0x08006064

08005f9c <memset>:
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memset+0xa>
 8005fa4:	4770      	bx	lr
 8005fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005faa:	e7f9      	b.n	8005fa0 <memset+0x4>

08005fac <_init>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_fini>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr
