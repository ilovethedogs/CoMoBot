
can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000010  08006b74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006b74  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102b9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00033208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022772  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104d0  00000000  00000000  00056612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf91a  00000000  00000000  00066ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001363fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  0013644c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006a74 	.word	0x08006a74

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08006a74 	.word	0x08006a74

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd03 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f869 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9c3 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f999 	bl	8000850 <MX_DMA_Init>
  MX_CAN1_Init();
 800051e:	f000 f8cf 	bl	80006c0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000522:	f000 f93d 	bl	80007a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f969 	bl	80007fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sensorState = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
  uint8_t boot[6] = {66, 79, 79, 84, 10, 0};
 800052e:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <main+0xd0>)
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000538:	6018      	str	r0, [r3, #0]
 800053a:	3304      	adds	r3, #4
 800053c:	8019      	strh	r1, [r3, #0]
  while(sensorState==0){
 800053e:	e011      	b.n	8000564 <main+0x5c>
		VL53L1X_BootState(dev, &sensorState);
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <main+0xd4>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	f107 020f 	add.w	r2, r7, #15
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f006 f94d 	bl	80067ea <VL53L1X_BootState>
		HAL_UART_Transmit(&huart2, boot, 6, 10);
 8000550:	f107 0108 	add.w	r1, r7, #8
 8000554:	230a      	movs	r3, #10
 8000556:	2206      	movs	r2, #6
 8000558:	4821      	ldr	r0, [pc, #132]	; (80005e0 <main+0xd8>)
 800055a:	f005 fcbc 	bl	8005ed6 <HAL_UART_Transmit>
		HAL_Delay(2);
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fd4c 	bl	8000ffc <HAL_Delay>
  while(sensorState==0){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0ea      	beq.n	8000540 <main+0x38>
  }

  VL53L1X_SensorInit(dev);
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <main+0xd4>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f006 f826 	bl	80065c0 <VL53L1X_SensorInit>
  VL53L1X_StartRanging(dev);
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <main+0xd4>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f006 f8cf 	bl	800671c <VL53L1X_StartRanging>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dataReady = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  while (dataReady == 0){
 8000582:	e009      	b.n	8000598 <main+0x90>
		  VL53L1X_CheckForDataReady(dev, &dataReady);
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <main+0xd4>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	1dfa      	adds	r2, r7, #7
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f006 f8f5 	bl	800677c <VL53L1X_CheckForDataReady>
		  HAL_Delay(2);
 8000592:	2002      	movs	r0, #2
 8000594:	f000 fd32 	bl	8000ffc <HAL_Delay>
	  while (dataReady == 0){
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f2      	beq.n	8000584 <main+0x7c>
	  }
	  VL53L1X_GetDistance(dev, &dis);
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <main+0xd4>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	4910      	ldr	r1, [pc, #64]	; (80005e4 <main+0xdc>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 f93f 	bl	8006828 <VL53L1X_GetDistance>
	  VL53L1X_ClearInterrupt(dev);
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <main+0xd4>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 f872 	bl	8006698 <VL53L1X_ClearInterrupt>
	  dataReady = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]

	  uint8_t data[2] = {dis & 0xFF, (dis & 0xFF00) >> 8};
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <main+0xdc>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	713b      	strb	r3, [r7, #4]
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0xdc>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	717b      	strb	r3, [r7, #5]
	  CanSendMssg(2, data);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4619      	mov	r1, r3
 80005d0:	2002      	movs	r0, #2
 80005d2:	f000 f9b7 	bl	8000944 <CanSendMssg>
  {
 80005d6:	e7d4      	b.n	8000582 <main+0x7a>
 80005d8:	08006a8c 	.word	0x08006a8c
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000168 	.word	0x20000168
 80005e4:	2000021c 	.word	0x2000021c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fa34 	bl	8006a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f005 f945 	bl	8005900 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 fa18 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fde4 	bl	800526c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 fa01 	bl	8000ab0 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006c6:	4a34      	ldr	r2, [pc, #208]	; (8000798 <MX_CAN1_Init+0xd8>)
 80006c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006cc:	2215      	movs	r2, #21
 80006ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006de:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80006e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_CAN1_Init+0xd4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000700:	2200      	movs	r2, #0
 8000702:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_CAN1_Init+0xd4>)
 800070c:	2200      	movs	r2, #0
 800070e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000710:	4820      	ldr	r0, [pc, #128]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000712:	f000 fc97 	bl	8001044 <HAL_CAN_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f9c8 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_CAN1_Init+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_CAN1_Init+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_CAN1_Init+0xdc>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_CAN1_Init+0xdc>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_CAN1_Init+0xdc>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_CAN1_Init+0xdc>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_CAN1_Init+0xdc>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_CAN1_Init+0xdc>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_CAN1_Init+0xdc>)
 8000752:	2201      	movs	r2, #1
 8000754:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_CAN1_Init+0xdc>)
 8000758:	220e      	movs	r2, #14
 800075a:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800075c:	490f      	ldr	r1, [pc, #60]	; (800079c <MX_CAN1_Init+0xdc>)
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000760:	f000 fd6c 	bl	800123c <HAL_CAN_ConfigFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_CAN1_Init+0xae>
  {
    /* Filter configuration Error */
    Error_Handler();
 800076a:	f000 f9a1 	bl	8000ab0 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000770:	f000 fe44 	bl	80013fc <HAL_CAN_Start>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_CAN1_Init+0xbe>
  {
    /* Start Error */
    Error_Handler();
 800077a:	f000 f999 	bl	8000ab0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800077e:	2102      	movs	r1, #2
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN1_Init+0xd4>)
 8000782:	f001 f8c9 	bl	8001918 <HAL_CAN_ActivateNotification>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN1_Init+0xd0>
  {
    /* Notification Error */
    Error_Handler();
 800078c:	f000 f990 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000002c 	.word	0x2000002c
 8000798:	40006400 	.word	0x40006400
 800079c:	200001f4 	.word	0x200001f4

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f002 f8d5 	bl	800298c <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 f962 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000054 	.word	0x20000054
 80007f4:	40005400 	.word	0x40005400
 80007f8:	00061a80 	.word	0x00061a80

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f005 fb02 	bl	8005e3c <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f937 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000168 	.word	0x20000168
 800084c:	40004400 	.word	0x40004400

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_DMA_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MX_DMA_Init+0x4c>)
 8000860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_DMA_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200b      	movs	r0, #11
 8000878:	f001 fb7f 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800087c:	200b      	movs	r0, #11
 800087e:	f001 fb98 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2011      	movs	r0, #17
 8000888:	f001 fb77 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800088c:	2011      	movs	r0, #17
 800088e:	f001 fb90 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_GPIO_Init+0x9c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <MX_GPIO_Init+0x9c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_GPIO_Init+0x9c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_GPIO_Init+0x9c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_GPIO_Init+0x9c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_GPIO_Init+0x9c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_GPIO_Init+0x9c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800090a:	2320      	movs	r3, #32
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <MX_GPIO_Init+0xa0>)
 8000920:	f001 fe7c 	bl	800261c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2017      	movs	r0, #23
 800092a:	f001 fb26 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800092e:	2017      	movs	r0, #23
 8000930:	f001 fb3f 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <CanSendMssg>:

/* USER CODE BEGIN 4 */
void CanSendMssg(uint8_t len, uint8_t data[len]) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
	  TxHeader.StdId = 0x17;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <CanSendMssg+0xb0>)
 8000952:	2217      	movs	r2, #23
 8000954:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <CanSendMssg+0xb0>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <CanSendMssg+0xb0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 2;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <CanSendMssg+0xb0>)
 8000964:	2202      	movs	r2, #2
 8000966:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <CanSendMssg+0xb0>)
 800096a:	2200      	movs	r2, #0
 800096c:	751a      	strb	r2, [r3, #20]
	  TxData[0] = 0xCA;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <CanSendMssg+0xb4>)
 8000970:	22ca      	movs	r2, #202	; 0xca
 8000972:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0xFE;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <CanSendMssg+0xb4>)
 8000976:	22fe      	movs	r2, #254	; 0xfe
 8000978:	705a      	strb	r2, [r3, #1]

	  uint8_t trysend[10] = {84, 82, 89, 83, 69, 78, 68, 13, 10, 0};
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <CanSendMssg+0xb8>)
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	ca07      	ldmia	r2, {r0, r1, r2}
 8000982:	c303      	stmia	r3!, {r0, r1}
 8000984:	801a      	strh	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart2, trysend, 10, 10);

	  uint8_t txbox[7] = {84, 88, 66, 88, 13, 10, 0};
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <CanSendMssg+0xbc>)
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000990:	6018      	str	r0, [r3, #0]
 8000992:	3304      	adds	r3, #4
 8000994:	8019      	strh	r1, [r3, #0]
 8000996:	3302      	adds	r3, #2
 8000998:	0c0a      	lsrs	r2, r1, #16
 800099a:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <CanSendMssg+0xc0>)
 800099e:	f000 fe4c 	bl	800163a <HAL_CAN_GetTxMailboxesFreeLevel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d021      	beq.n	80009ec <CanSendMssg+0xa8>
		  //HAL_UART_Transmit(&huart2, txbox, 7, 10);
		  return;
	  }

	  uint8_t sendfail[11] = {83, 69, 78, 68, 70, 65, 73, 76, 13, 10, 0};
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <CanSendMssg+0xc4>)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b0:	c303      	stmia	r3!, {r0, r1}
 80009b2:	801a      	strh	r2, [r3, #0]
 80009b4:	3302      	adds	r3, #2
 80009b6:	0c12      	lsrs	r2, r2, #16
 80009b8:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <CanSendMssg+0xc8>)
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <CanSendMssg+0xb4>)
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <CanSendMssg+0xb0>)
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <CanSendMssg+0xc0>)
 80009c2:	f000 fd5f 	bl	8001484 <HAL_CAN_AddTxMessage>
	  {
	    /* Transmission request Error */
		//HAL_UART_Transmit(&huart2, sendfail, 11, 10);
	  }

	  uint8_t pend[7] = {80, 69, 78, 68, 13, 10, 0};
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <CanSendMssg+0xcc>)
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	3304      	adds	r3, #4
 80009d4:	8019      	strh	r1, [r3, #0]
 80009d6:	3302      	adds	r3, #2
 80009d8:	0c0a      	lsrs	r2, r1, #16
 80009da:	701a      	strb	r2, [r3, #0]
	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 80009dc:	bf00      	nop
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <CanSendMssg+0xc0>)
 80009e0:	f000 fe2b 	bl	800163a <HAL_CAN_GetTxMailboxesFreeLevel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d1f9      	bne.n	80009de <CanSendMssg+0x9a>
 80009ea:	e000      	b.n	80009ee <CanSendMssg+0xaa>
		  return;
 80009ec:	bf00      	nop
	  		  //HAL_UART_Transmit(&huart2, pend, 7, 10);
	  }

	  //return HAL_OK; /* Test Passed */
}
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200001ac 	.word	0x200001ac
 80009f8:	200001e0 	.word	0x200001e0
 80009fc:	08006a94 	.word	0x08006a94
 8000a00:	08006aa0 	.word	0x08006aa0
 8000a04:	2000002c 	.word	0x2000002c
 8000a08:	08006aa8 	.word	0x08006aa8
 8000a0c:	200001f0 	.word	0x200001f0
 8000a10:	08006ab4 	.word	0x08006ab4

08000a14 <CanRecvMssg>:

void CanRecvMssg(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
	uint8_t aa[7] = {70, 70, 70, 70, 13, 10, 0};
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <CanRecvMssg+0x60>)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a24:	6018      	str	r0, [r3, #0]
 8000a26:	3304      	adds	r3, #4
 8000a28:	8019      	strh	r1, [r3, #0]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	0c0a      	lsrs	r2, r1, #16
 8000a2e:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <CanRecvMssg+0x64>)
 8000a34:	f000 ff48 	bl	80018c8 <HAL_CAN_GetRxFifoFillLevel>
	{
		//HAL_UART_Transmit(&huart2, aa, 7, 10);
	}

	uint8_t recvfail[11] = {82, 69, 67, 86, 70, 65, 73, 76, 13, 10, 0};
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <CanRecvMssg+0x68>)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a3e:	c303      	stmia	r3!, {r0, r1}
 8000a40:	801a      	strh	r2, [r3, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	0c12      	lsrs	r2, r2, #16
 8000a46:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <CanRecvMssg+0x6c>)
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <CanRecvMssg+0x70>)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480a      	ldr	r0, [pc, #40]	; (8000a78 <CanRecvMssg+0x64>)
 8000a50:	f000 fe28 	bl	80016a4 <HAL_CAN_GetRxMessage>
	{
	    /* Reception Error */
		//HAL_UART_Transmit(&huart2, recvfail, 11, 10);
	}

	if((RxHeader.StdId != 0x11)                     ||
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <CanRecvMssg+0x70>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d106      	bne.n	8000a6a <CanRecvMssg+0x56>
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <CanRecvMssg+0x70>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
	if((RxHeader.StdId != 0x11)                     ||
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <CanRecvMssg+0x56>
	   (RxHeader.IDE != CAN_ID_STD)                 ||
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <CanRecvMssg+0x70>)
 8000a66:	689b      	ldr	r3, [r3, #8]
	   (RxHeader.RTR != CAN_RTR_DATA)               ||
 8000a68:	2b00      	cmp	r3, #0
	}

	//HAL_UART_Transmit(&huart2, RxData, 8, 10);

	//return HAL_OK; /* Test Passed */
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08006abc 	.word	0x08006abc
 8000a78:	2000002c 	.word	0x2000002c
 8000a7c:	08006ac4 	.word	0x08006ac4
 8000a80:	200001e8 	.word	0x200001e8
 8000a84:	200001c4 	.word	0x200001c4

08000a88 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint8_t gotit[8] = {71, 79, 84, 73, 84, 13, 10, 0};
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9a:	e883 0003 	stmia.w	r3, {r0, r1}
	//HAL_UART_Transmit(&huart2, gotit, 8, 10);
	CanRecvMssg();
 8000a9e:	f7ff ffb9 	bl	8000a14 <CanRecvMssg>
//	CanSendMssg(8, hello);
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08006ad0 	.word	0x08006ad0

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_CAN_MspInit+0xa4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13c      	bne.n	8000ba8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b78:	2309      	movs	r3, #9
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <HAL_CAN_MspInit+0xac>)
 8000b84:	f001 fd4a 	bl	800261c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2013      	movs	r0, #19
 8000b8e:	f001 f9f4 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b92:	2013      	movs	r0, #19
 8000b94:	f001 fa0d 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2014      	movs	r0, #20
 8000b9e:	f001 f9ec 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f001 fa05 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40006400 	.word	0x40006400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a4f      	ldr	r2, [pc, #316]	; (8000d18 <HAL_I2C_MspInit+0x15c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	f040 8098 	bne.w	8000d10 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a4c      	ldr	r2, [pc, #304]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bfc:	23c0      	movs	r3, #192	; 0xc0
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4842      	ldr	r0, [pc, #264]	; (8000d20 <HAL_I2C_MspInit+0x164>)
 8000c18:	f001 fd00 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <HAL_I2C_MspInit+0x160>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c3a:	4a3b      	ldr	r2, [pc, #236]	; (8000d28 <HAL_I2C_MspInit+0x16c>)
 8000c3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000c78:	482a      	ldr	r0, [pc, #168]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c7a:	f001 f9b5 	bl	8001fe8 <HAL_DMA_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000c84:	f7ff ff14 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8e:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_I2C_MspInit+0x168>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <HAL_I2C_MspInit+0x174>)
 8000c98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cd6:	f001 f987 	bl	8001fe8 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8000ce0:	f7ff fee6 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_I2C_MspInit+0x170>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201f      	movs	r0, #31
 8000cf6:	f001 f940 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cfa:	201f      	movs	r0, #31
 8000cfc:	f001 f959 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2020      	movs	r0, #32
 8000d06:	f001 f938 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d0a:	2020      	movs	r0, #32
 8000d0c:	f001 f951 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	200000a8 	.word	0x200000a8
 8000d28:	40026010 	.word	0x40026010
 8000d2c:	20000108 	.word	0x20000108
 8000d30:	400260a0 	.word	0x400260a0

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000daa:	f001 fc37 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f8d4 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Stream0_IRQHandler+0x10>)
 8000e1e:	f001 f9b3 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000a8 	.word	0x200000a8

08000e2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Stream6_IRQHandler+0x10>)
 8000e32:	f001 f9a9 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000108 	.word	0x20000108

08000e40 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <CAN1_TX_IRQHandler+0x10>)
 8000e46:	f000 fd8d 	bl	8001964 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000002c 	.word	0x2000002c

08000e54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <CAN1_RX0_IRQHandler+0x10>)
 8000e5a:	f000 fd83 	bl	8001964 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000002c 	.word	0x2000002c

08000e68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	f001 fd69 	bl	8002944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <I2C1_EV_IRQHandler+0x10>)
 8000e7e:	f002 f9ed 	bl	800325c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000054 	.word	0x20000054

08000e8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <I2C1_ER_IRQHandler+0x10>)
 8000e92:	f002 fb54 	bl	800353e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000054 	.word	0x20000054

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f005 fd93 	bl	8006a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb07 	bl	8000508 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f08:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8000f0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f10:	20000324 	.word	0x20000324

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f001 f80f 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fdb6 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f827 	bl	8001fce <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 ffef 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000220 	.word	0x20000220

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000220 	.word	0x20000220

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c

08001044 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0ed      	b.n	8001232 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fd52 	bl	8000b0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ffb4 	bl	8000fe4 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107e:	e012      	b.n	80010a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001080:	f7ff ffb0 	bl	8000fe4 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d90b      	bls.n	80010a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2205      	movs	r2, #5
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0c5      	b.n	8001232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0e5      	beq.n	8001080 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0202 	bic.w	r2, r2, #2
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ff8e 	bl	8000fe4 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ff8a 	bl	8000fe4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e09f      	b.n	8001232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e5      	bne.n	80010cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e5b      	ldrb	r3, [r3, #25]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001152:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e9b      	ldrb	r3, [r3, #26]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0220 	orr.w	r2, r2, #32
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0220 	bic.w	r2, r2, #32
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7edb      	ldrb	r3, [r3, #27]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0210 	bic.w	r2, r2, #16
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0210 	orr.w	r2, r2, #16
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7f1b      	ldrb	r3, [r3, #28]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0208 	orr.w	r2, r2, #8
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f5b      	ldrb	r3, [r3, #29]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0204 	orr.w	r2, r2, #4
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0204 	bic.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	ea42 0103 	orr.w	r1, r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001252:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001254:	7cfb      	ldrb	r3, [r7, #19]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d003      	beq.n	8001262 <HAL_CAN_ConfigFilter+0x26>
 800125a:	7cfb      	ldrb	r3, [r7, #19]
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 80be 	bne.w	80013de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001262:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001264:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800127c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d123      	bne.n	800130c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3248      	adds	r2, #72	; 0x48
 80012ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001300:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	3348      	adds	r3, #72	; 0x48
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d122      	bne.n	800135a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001334:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3248      	adds	r2, #72	; 0x48
 800133a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001350:	6979      	ldr	r1, [r7, #20]
 8001352:	3348      	adds	r3, #72	; 0x48
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001374:	e007      	b.n	8001386 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013d0:	f023 0201 	bic.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e006      	b.n	80013ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40006400 	.word	0x40006400

080013fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d12e      	bne.n	800146e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fddc 	bl	8000fe4 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800142e:	e012      	b.n	8001456 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001430:	f7ff fdd8 	bl	8000fe4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d90b      	bls.n	8001456 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2205      	movs	r2, #5
 800144e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e012      	b.n	800147c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e5      	bne.n	8001430 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e006      	b.n	800147c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
  }
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d003      	beq.n	80014b0 <HAL_CAN_AddTxMessage+0x2c>
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f040 80b8 	bne.w	8001620 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80a0 	beq.w	8001610 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	0e1b      	lsrs	r3, r3, #24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e09e      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014f0:	2201      	movs	r2, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	409a      	lsls	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3318      	adds	r3, #24
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	440b      	add	r3, r1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e00f      	b.n	800153e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001528:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001532:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3318      	adds	r3, #24
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	440b      	add	r3, r1
 800154e:	3304      	adds	r3, #4
 8001550:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	7d1b      	ldrb	r3, [r3, #20]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	6811      	ldr	r1, [r2, #0]
 800156e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3318      	adds	r3, #24
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3307      	adds	r3, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	061a      	lsls	r2, r3, #24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3306      	adds	r3, #6
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3305      	adds	r3, #5
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	4313      	orrs	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	3204      	adds	r2, #4
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4610      	mov	r0, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	ea43 0200 	orr.w	r2, r3, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3303      	adds	r3, #3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	061a      	lsls	r2, r3, #24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3302      	adds	r3, #2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	4313      	orrs	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	4610      	mov	r0, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	ea43 0200 	orr.w	r2, r3, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3318      	adds	r3, #24
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6811      	ldr	r1, [r2, #0]
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3318      	adds	r3, #24
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	440b      	add	r3, r1
 800160a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e00e      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e006      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d002      	beq.n	800165a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d11d      	bne.n	8001696 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_GetRxMessage+0x24>
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	f040 80f3 	bne.w	80018ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10e      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d116      	bne.n	800170a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0e7      	b.n	80018bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0d8      	b.n	80018bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0204 	and.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	331b      	adds	r3, #27
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0d5b      	lsrs	r3, r3, #21
 8001738:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e00b      	b.n	800175a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	331b      	adds	r3, #27
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	331b      	adds	r3, #27
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0202 	and.w	r2, r3, #2
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	331b      	adds	r3, #27
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	3304      	adds	r3, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 020f 	and.w	r2, r3, #15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	331b      	adds	r3, #27
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4413      	add	r3, r2
 8001794:	3304      	adds	r3, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	331b      	adds	r3, #27
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0a1a      	lsrs	r2, r3, #8
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0c1a      	lsrs	r2, r3, #16
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3302      	adds	r3, #2
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0e1a      	lsrs	r2, r3, #24
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3303      	adds	r3, #3
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0a1a      	lsrs	r2, r3, #8
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3305      	adds	r3, #5
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0c1a      	lsrs	r2, r3, #16
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3306      	adds	r3, #6
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0e1a      	lsrs	r2, r3, #24
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3307      	adds	r3, #7
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d108      	bne.n	800189a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	e007      	b.n	80018aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0220 	orr.w	r2, r2, #32
 80018a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e006      	b.n	80018bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d002      	beq.n	80018ea <HAL_CAN_GetRxFifoFillLevel+0x22>
 80018e4:	7afb      	ldrb	r3, [r7, #11]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d10f      	bne.n	800190a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d106      	bne.n	80018fe <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e005      	b.n	800190a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001928:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <HAL_CAN_ActivateNotification+0x1e>
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d109      	bne.n	800194a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6959      	ldr	r1, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e006      	b.n	8001958 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d07c      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f983 	bl	8001cd2 <HAL_CAN_TxMailbox0CompleteCallback>
 80019cc:	e016      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e00c      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e002      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f989 	bl	8001d0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d024      	beq.n	8001a50 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f963 	bl	8001ce6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a20:	e016      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e00c      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e002      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f969 	bl	8001d22 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d024      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f943 	bl	8001cfa <HAL_CAN_TxMailbox2CompleteCallback>
 8001a74:	e016      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	e00c      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	e002      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f949 	bl	8001d36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00c      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f93a 	bl	8001d5e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f921 	bl	8001d4a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f912 	bl	8001d72 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe ff8e 	bl	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2210      	movs	r2, #16
 8001b86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8fc 	bl	8001d86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8f5 	bl	8001d9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d07b      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d072      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d043      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03e      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c32:	2b60      	cmp	r3, #96	; 0x60
 8001c34:	d02b      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x32a>
 8001c36:	2b60      	cmp	r3, #96	; 0x60
 8001c38:	d82e      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c3a:	2b50      	cmp	r3, #80	; 0x50
 8001c3c:	d022      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x320>
 8001c3e:	2b50      	cmp	r3, #80	; 0x50
 8001c40:	d82a      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c42:	2b40      	cmp	r3, #64	; 0x40
 8001c44:	d019      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x316>
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d826      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d010      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x30c>
 8001c4e:	2b30      	cmp	r3, #48	; 0x30
 8001c50:	d822      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d002      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x2f8>
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d005      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c5a:	e01d      	b.n	8001c98 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c64:	e019      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6e:	e014      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f043 0320 	orr.w	r3, r3, #32
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c78:	e00f      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c82:	e00a      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e005      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e000      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            break;
 8001c98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ca8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f872 	bl	8001dae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7fe fff6 	bl	8000fe4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e099      	b.n	8002138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e00f      	b.n	8002046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7fe ffdd 	bl	8000fe4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d908      	bls.n	8002046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e078      	b.n	8002138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e8      	bne.n	8002026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_DMA_Init+0x158>)
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b04      	cmp	r3, #4
 800209e:	d107      	bne.n	80020b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4313      	orrs	r3, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0307 	bic.w	r3, r3, #7
 80020c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d117      	bne.n	800210a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa19 	bl	8002524 <DMA_CheckFifoParam>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002106:	2301      	movs	r3, #1
 8002108:	e016      	b.n	8002138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9d0 	bl	80024b8 <DMA_CalcBaseAndBitshift>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	f010803f 	.word	0xf010803f

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00c      	b.n	800217c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002194:	4b8e      	ldr	r3, [pc, #568]	; (80023d0 <HAL_DMA_IRQHandler+0x248>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a8e      	ldr	r2, [pc, #568]	; (80023d4 <HAL_DMA_IRQHandler+0x24c>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2208      	movs	r2, #8
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2208      	movs	r2, #8
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2210      	movs	r2, #16
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d043      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2210      	movs	r2, #16
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e01f      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0208 	bic.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2220      	movs	r2, #32
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 808f 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8087 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2220      	movs	r2, #32
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d136      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0216 	bic.w	r2, r2, #22
 8002340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_DMA_IRQHandler+0x1da>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	223f      	movs	r2, #63	; 0x3f
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	2b00      	cmp	r3, #0
 8002394:	d07e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
        }
        return;
 800239e:	e079      	b.n	8002494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01d      	beq.n	80023ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e02c      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
 80023ce:	bf00      	nop
 80023d0:	20000004 	.word	0x20000004
 80023d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e01e      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10f      	bne.n	8002418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d307      	bcc.n	8002470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_DMA_IRQHandler+0x2cc>
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002494:	bf00      	nop
    }
  }
}
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024aa:	b2db      	uxtb	r3, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3b10      	subs	r3, #16
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <DMA_CalcBaseAndBitshift+0x64>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <DMA_CalcBaseAndBitshift+0x68>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d909      	bls.n	80024fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58
 80024f8:	e007      	b.n	800250a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	aaaaaaab 	.word	0xaaaaaaab
 8002520:	08006af0 	.word	0x08006af0

08002524 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11f      	bne.n	800257e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d856      	bhi.n	80025f2 <DMA_CheckFifoParam+0xce>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <DMA_CheckFifoParam+0x28>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	0800256f 	.word	0x0800256f
 8002554:	0800255d 	.word	0x0800255d
 8002558:	080025f3 	.word	0x080025f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d046      	beq.n	80025f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256c:	e043      	b.n	80025f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002576:	d140      	bne.n	80025fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e03d      	b.n	80025fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d121      	bne.n	80025cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d837      	bhi.n	80025fe <DMA_CheckFifoParam+0xda>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <DMA_CheckFifoParam+0x70>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025ab 	.word	0x080025ab
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	080025bd 	.word	0x080025bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      break;
 80025a8:	e030      	b.n	800260c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d025      	beq.n	8002602 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e022      	b.n	8002602 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ca:	e01c      	b.n	8002606 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d903      	bls.n	80025da <DMA_CheckFifoParam+0xb6>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d003      	beq.n	80025e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d8:	e018      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      break;
 80025de:	e015      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e00b      	b.n	800260a <DMA_CheckFifoParam+0xe6>
      break;
 80025f2:	bf00      	nop
 80025f4:	e00a      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e008      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e006      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e004      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;   
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
    }
  } 
  
  return status; 
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e165      	b.n	8002904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8154 	bne.w	80028fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ae 	beq.w	80028fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_GPIO_Init+0x300>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_GPIO_Init+0x300>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_GPIO_Init+0x300>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_GPIO_Init+0x304>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <HAL_GPIO_Init+0x308>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d025      	beq.n	8002836 <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <HAL_GPIO_Init+0x30c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_GPIO_Init+0x310>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <HAL_GPIO_Init+0x314>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_GPIO_Init+0x318>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x20a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_GPIO_Init+0x31c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x206>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_GPIO_Init+0x320>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x202>
 800281a:	2306      	movs	r3, #6
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800281e:	2307      	movs	r3, #7
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4935      	ldr	r1, [pc, #212]	; (8002920 <HAL_GPIO_Init+0x304>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_GPIO_Init+0x324>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287a:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_GPIO_Init+0x324>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002880:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x324>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_GPIO_Init+0x324>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_GPIO_Init+0x324>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_GPIO_Init+0x324>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x324>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_GPIO_Init+0x324>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae96 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40013800 	.word	0x40013800
 8002924:	40020000 	.word	0x40020000
 8002928:	40020400 	.word	0x40020400
 800292c:	40020800 	.word	0x40020800
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40021400 	.word	0x40021400
 800293c:	40021800 	.word	0x40021800
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f806 	bl	8002974 <HAL_GPIO_EXTI_Callback>
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe f902 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f002 fd2e 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	; (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	; (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	; (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	; (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	; (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	; (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	460b      	mov	r3, r1
 8002c22:	817b      	strh	r3, [r7, #10]
 8002c24:	4613      	mov	r3, r2
 8002c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7fe f9dc 	bl	8000fe4 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	f040 80e0 	bne.w	8002dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	4970      	ldr	r1, [pc, #448]	; (8002e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f002 f8e6 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0d3      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x50>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0cc      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d007      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a50      	ldr	r2, [pc, #320]	; (8002e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f001 fea8 	bl	8004a28 <I2C_MasterRequestWrite>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e08d      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf8:	e066      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f002 f960 	bl	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d107      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6a39      	ldr	r1, [r7, #32]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f002 f950 	bl	8005046 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01a      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d194      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000

08002e10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7fe f8de 	bl	8000fe4 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 820b 	bne.w	800324e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	497c      	ldr	r1, [pc, #496]	; (8003034 <HAL_I2C_Master_Receive+0x224>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f001 ffe8 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e1fe      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e1f7      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2222      	movs	r2, #34	; 0x22
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	; (8003038 <HAL_I2C_Master_Receive+0x228>)
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f001 fe2c 	bl	8004b2c <I2C_MasterRequestRead>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1b8      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e18c      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d11b      	bne.n	8002f4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e16c      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	e14c      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fb4:	e138      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	f200 80f1 	bhi.w	80031a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f002 f8ad 	bl	800512c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e139      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800300e:	e10b      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b02      	cmp	r3, #2
 8003016:	d14e      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	4906      	ldr	r1, [pc, #24]	; (800303c <HAL_I2C_Master_Receive+0x22c>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 fef8 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e10e      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000
 800303c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b4:	e0b8      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	2200      	movs	r2, #0
 80030be:	4966      	ldr	r1, [pc, #408]	; (8003258 <HAL_I2C_Master_Receive+0x448>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f001 fea9 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0bf      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	494f      	ldr	r1, [pc, #316]	; (8003258 <HAL_I2C_Master_Receive+0x448>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f001 fe7b 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e091      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a0:	e042      	b.n	8003228 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f001 ffc0 	bl	800512c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e04c      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d118      	bne.n	8003228 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f aec2 	bne.w	8002fb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	00010004 	.word	0x00010004

0800325c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d003      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x38>
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	f040 80c1 	bne.w	8003416 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_I2C_EV_IRQHandler+0x6e>
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032b4:	d003      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x62>
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_EV_IRQHandler+0x66>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_EV_IRQHandler+0x68>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f000 8132 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x92>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	0a5b      	lsrs	r3, r3, #9
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f001 ffa8 	bl	8005236 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fd83 	bl	8003df2 <I2C_Master_SB>
 80032ec:	e092      	b.n	8003414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_I2C_EV_IRQHandler+0xb2>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	0a5b      	lsrs	r3, r3, #9
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fdf9 	bl	8003efe <I2C_Master_ADD10>
 800330c:	e082      	b.n	8003414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_I2C_EV_IRQHandler+0xd2>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	0a5b      	lsrs	r3, r3, #9
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fe13 	bl	8003f52 <I2C_Master_ADDR>
 800332c:	e072      	b.n	8003414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03b      	beq.n	80033b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	f000 80f3 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	09db      	lsrs	r3, r3, #7
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00f      	beq.n	8003378 <HAL_I2C_EV_IRQHandler+0x11c>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	0a9b      	lsrs	r3, r3, #10
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_I2C_EV_IRQHandler+0x11c>
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9f3 	bl	800375c <I2C_MasterTransmit_TXE>
 8003376:	e04d      	b.n	8003414 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80d6 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0a5b      	lsrs	r3, r3, #9
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80cf 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003394:	7bbb      	ldrb	r3, [r7, #14]
 8003396:	2b21      	cmp	r3, #33	; 0x21
 8003398:	d103      	bne.n	80033a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa7a 	bl	8003894 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a0:	e0c7      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	f040 80c4 	bne.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fae8 	bl	8003980 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b0:	e0bf      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c0:	f000 80b7 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x194>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x194>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d103      	bne.n	80033f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb5d 	bl	8003aa8 <I2C_MasterReceive_RXNE>
 80033ee:	e011      	b.n	8003414 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 809a 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	0a5b      	lsrs	r3, r3, #9
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8093 	beq.w	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fc06 	bl	8003c1e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003412:	e08e      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003414:	e08d      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e007      	b.n	8003438 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x20e>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 ffc4 	bl	80043f0 <I2C_Slave_ADDR>
 8003468:	e066      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x22e>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a5b      	lsrs	r3, r3, #9
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fffe 	bl	8004484 <I2C_Slave_STOPF>
 8003488:	e056      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2b21      	cmp	r3, #33	; 0x21
 800348e:	d002      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x23a>
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	2b29      	cmp	r3, #41	; 0x29
 8003494:	d125      	bne.n	80034e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	09db      	lsrs	r3, r3, #7
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00f      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x266>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a9b      	lsrs	r3, r3, #10
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x266>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 feda 	bl	8004274 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c0:	e039      	b.n	8003536 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d033      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0x2da>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	0a5b      	lsrs	r3, r3, #9
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02d      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ff07 	bl	80042ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e0:	e029      	b.n	8003536 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00f      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	0a9b      	lsrs	r3, r3, #10
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0x2b2>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ff12 	bl	8004330 <I2C_SlaveReceive_RXNE>
 800350c:	e014      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00e      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ff40 	bl	80043ac <I2C_SlaveReceive_BTF>
 800352c:	e004      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003536:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	; 0x28
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003560:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <HAL_I2C_ER_IRQHandler+0x4e>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800358a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	0a5b      	lsrs	r3, r3, #9
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_I2C_ER_IRQHandler+0x78>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80035b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	0a9b      	lsrs	r3, r3, #10
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03f      	beq.n	8003642 <HAL_I2C_ER_IRQHandler+0x104>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d039      	beq.n	8003642 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035e8:	7ebb      	ldrb	r3, [r7, #26]
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d112      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xd6>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xd6>
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b21      	cmp	r3, #33	; 0x21
 80035f8:	d008      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b29      	cmp	r3, #41	; 0x29
 80035fe:	d005      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0xce>
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b28      	cmp	r3, #40	; 0x28
 8003604:	d106      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b21      	cmp	r3, #33	; 0x21
 800360a:	d103      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 f869 	bl	80046e4 <I2C_Slave_AF>
 8003612:	e016      	b.n	8003642 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800361c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003626:	7efb      	ldrb	r3, [r7, #27]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d002      	beq.n	8003632 <HAL_I2C_ER_IRQHandler+0xf4>
 800362c:	7efb      	ldrb	r3, [r7, #27]
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d107      	bne.n	8003642 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	0adb      	lsrs	r3, r3, #11
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0x12e>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800366a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f001 f8a0 	bl	80047c4 <I2C_ITError>
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
 80036e8:	4613      	mov	r3, r2
 80036ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003772:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	2b00      	cmp	r3, #0
 8003780:	d150      	bne.n	8003824 <I2C_MasterTransmit_TXE+0xc8>
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b21      	cmp	r3, #33	; 0x21
 8003786:	d14d      	bne.n	8003824 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d01d      	beq.n	80037ca <I2C_MasterTransmit_TXE+0x6e>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b20      	cmp	r3, #32
 8003792:	d01a      	beq.n	80037ca <I2C_MasterTransmit_TXE+0x6e>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379a:	d016      	beq.n	80037ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2211      	movs	r2, #17
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff62 	bl	800368c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c8:	e060      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d107      	bne.n	8003814 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff7d 	bl	800370c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003812:	e03b      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff35 	bl	800368c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003822:	e033      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b21      	cmp	r3, #33	; 0x21
 8003828:	d005      	beq.n	8003836 <I2C_MasterTransmit_TXE+0xda>
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d12d      	bne.n	800388c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b22      	cmp	r3, #34	; 0x22
 8003834:	d12a      	bne.n	800388c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003850:	e01c      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d103      	bne.n	8003866 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f88e 	bl	8003980 <I2C_MemoryTransmit_TXE_BTF>
}
 8003864:	e012      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800388a:	e7ff      	b.n	800388c <I2C_MasterTransmit_TXE+0x130>
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d164      	bne.n	8003978 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038dc:	e04c      	b.n	8003978 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d01d      	beq.n	8003920 <I2C_MasterTransmit_BTF+0x8c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d01a      	beq.n	8003920 <I2C_MasterTransmit_BTF+0x8c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f0:	d016      	beq.n	8003920 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003900:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2211      	movs	r2, #17
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff feb7 	bl	800368c <HAL_I2C_MasterTxCpltCallback>
}
 800391e:	e02b      	b.n	8003978 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800392e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d107      	bne.n	800396a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff fed2 	bl	800370c <HAL_I2C_MemTxCpltCallback>
}
 8003968:	e006      	b.n	8003978 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fe8a 	bl	800368c <HAL_I2C_MasterTxCpltCallback>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11d      	bne.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10b      	bne.n	80039b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80039b6:	e073      	b.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	b29b      	uxth	r3, r3
 80039be:	121b      	asrs	r3, r3, #8
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039d2:	e065      	b.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10b      	bne.n	80039f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f2:	e055      	b.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d151      	bne.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b22      	cmp	r3, #34	; 0x22
 8003a00:	d10d      	bne.n	8003a1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a1c:	e040      	b.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b21      	cmp	r3, #33	; 0x21
 8003a2c:	d112      	bne.n	8003a54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a52:	e025      	b.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d120      	bne.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b21      	cmp	r3, #33	; 0x21
 8003a62:	d11d      	bne.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe36 	bl	800370c <HAL_I2C_MemTxCpltCallback>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b22      	cmp	r3, #34	; 0x22
 8003aba:	f040 80ac 	bne.w	8003c16 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d921      	bls.n	8003b10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	f040 808c 	bne.w	8003c16 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b0e:	e082      	b.n	8003c16 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d075      	beq.n	8003c04 <I2C_MasterReceive_RXNE+0x15c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d002      	beq.n	8003b24 <I2C_MasterReceive_RXNE+0x7c>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d16f      	bne.n	8003c04 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f001 facf 	bl	80050c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d142      	bne.n	8003bb6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d10a      	bne.n	8003ba0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdc1 	bl	8003720 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b9e:	e03a      	b.n	8003c16 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2212      	movs	r2, #18
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fd76 	bl	80036a0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bb4:	e02f      	b.n	8003c16 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fd99 	bl	8003734 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c02:	e008      	b.n	8003c16 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c12:	605a      	str	r2, [r3, #4]
}
 8003c14:	e7ff      	b.n	8003c16 <I2C_MasterReceive_RXNE+0x16e>
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d11b      	bne.n	8003c6e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c44:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c6c:	e0bd      	b.n	8003dea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d129      	bne.n	8003ccc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d00a      	beq.n	8003ca4 <I2C_MasterReceive_BTF+0x86>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d007      	beq.n	8003ca4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cca:	e08e      	b.n	8003dea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d176      	bne.n	8003dc4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d002      	beq.n	8003ce2 <I2C_MasterReceive_BTF+0xc4>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d108      	bne.n	8003cf4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e019      	b.n	8003d28 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d002      	beq.n	8003d00 <I2C_MasterReceive_BTF+0xe2>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d108      	bne.n	8003d12 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e00a      	b.n	8003d28 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d007      	beq.n	8003d28 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d10a      	bne.n	8003dae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fcba 	bl	8003720 <HAL_I2C_MemRxCpltCallback>
}
 8003dac:	e01d      	b.n	8003dea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2212      	movs	r2, #18
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fc6f 	bl	80036a0 <HAL_I2C_MasterRxCpltCallback>
}
 8003dc2:	e012      	b.n	8003dea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d117      	bne.n	8003e36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e20:	e067      	b.n	8003ef2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]
}
 8003e34:	e05d      	b.n	8003ef2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d133      	bne.n	8003ea8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b21      	cmp	r3, #33	; 0x21
 8003e4a:	d109      	bne.n	8003e60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]
 8003e5e:	e008      	b.n	8003e72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <I2C_Master_SB+0x92>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d032      	beq.n	8003ef2 <I2C_Master_SB+0x100>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02d      	beq.n	8003ef2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea4:	605a      	str	r2, [r3, #4]
}
 8003ea6:	e024      	b.n	8003ef2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10e      	bne.n	8003ece <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	11db      	asrs	r3, r3, #7
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 0306 	and.w	r3, r3, #6
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f063 030f 	orn	r3, r3, #15
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	611a      	str	r2, [r3, #16]
}
 8003ecc:	e011      	b.n	8003ef2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10d      	bne.n	8003ef2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	11db      	asrs	r3, r3, #7
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0306 	and.w	r3, r3, #6
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f063 030e 	orn	r3, r3, #14
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <I2C_Master_ADD10+0x26>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <I2C_Master_ADD10+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f44:	605a      	str	r2, [r3, #4]
  }
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b091      	sub	sp, #68	; 0x44
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b22      	cmp	r3, #34	; 0x22
 8003f7a:	f040 8169 	bne.w	8004250 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <I2C_Master_ADDR+0x54>
 8003f86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d10b      	bne.n	8003fa6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	e160      	b.n	8004268 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11d      	bne.n	8003fea <I2C_Master_ADDR+0x98>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fb6:	d118      	bne.n	8003fea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	651a      	str	r2, [r3, #80]	; 0x50
 8003fe8:	e13e      	b.n	8004268 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d113      	bne.n	800401c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e115      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	f040 808a 	bne.w	800413c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402e:	d137      	bne.n	80040a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404e:	d113      	bne.n	8004078 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	e0e7      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e0d3      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d02e      	beq.n	8004104 <I2C_Master_ADDR+0x1b2>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d02b      	beq.n	8004104 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	2b12      	cmp	r3, #18
 80040b0:	d102      	bne.n	80040b8 <I2C_Master_ADDR+0x166>
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d125      	bne.n	8004104 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d00e      	beq.n	80040dc <I2C_Master_ADDR+0x18a>
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d00b      	beq.n	80040dc <I2C_Master_ADDR+0x18a>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d008      	beq.n	80040dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e007      	b.n	80040ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	e0a1      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e085      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d14d      	bne.n	80041e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b04      	cmp	r3, #4
 800414a:	d016      	beq.n	800417a <I2C_Master_ADDR+0x228>
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b02      	cmp	r3, #2
 8004150:	d013      	beq.n	800417a <I2C_Master_ADDR+0x228>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b10      	cmp	r3, #16
 8004156:	d010      	beq.n	800417a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004166:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004198:	d117      	bne.n	80041ca <I2C_Master_ADDR+0x278>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a0:	d00b      	beq.n	80041ba <I2C_Master_ADDR+0x268>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d008      	beq.n	80041ba <I2C_Master_ADDR+0x268>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d005      	beq.n	80041ba <I2C_Master_ADDR+0x268>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d002      	beq.n	80041ba <I2C_Master_ADDR+0x268>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d107      	bne.n	80041ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	e032      	b.n	8004248 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004200:	d117      	bne.n	8004232 <I2C_Master_ADDR+0x2e0>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004208:	d00b      	beq.n	8004222 <I2C_Master_ADDR+0x2d0>
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	2b01      	cmp	r3, #1
 800420e:	d008      	beq.n	8004222 <I2C_Master_ADDR+0x2d0>
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	2b08      	cmp	r3, #8
 8004214:	d005      	beq.n	8004222 <I2C_Master_ADDR+0x2d0>
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b10      	cmp	r3, #16
 800421a:	d002      	beq.n	8004222 <I2C_Master_ADDR+0x2d0>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	2b20      	cmp	r3, #32
 8004220:	d107      	bne.n	8004232 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004230:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800424e:	e00b      	b.n	8004268 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	e7ff      	b.n	8004268 <I2C_Master_ADDR+0x316>
 8004268:	bf00      	nop
 800426a:	3744      	adds	r7, #68	; 0x44
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02b      	beq.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d114      	bne.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b29      	cmp	r3, #41	; 0x29
 80042c0:	d111      	bne.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff f9e7 	bl	80036b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02c      	beq.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d114      	bne.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b2a      	cmp	r3, #42	; 0x2a
 800437e:	d111      	bne.n	80043a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2222      	movs	r2, #34	; 0x22
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2228      	movs	r2, #40	; 0x28
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff f992 	bl	80036c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800440a:	2b28      	cmp	r3, #40	; 0x28
 800440c:	d127      	bne.n	800445e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	09db      	lsrs	r3, r3, #7
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	81bb      	strh	r3, [r7, #12]
 8004440:	e002      	b.n	8004448 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004450:	89ba      	ldrh	r2, [r7, #12]
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff f940 	bl	80036dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800445c:	e00e      	b.n	800447c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e0:	d172      	bne.n	80045c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b22      	cmp	r3, #34	; 0x22
 80044e6:	d002      	beq.n	80044ee <I2C_Slave_STOPF+0x6a>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b2a      	cmp	r3, #42	; 0x2a
 80044ec:	d135      	bne.n	800455a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd ffb8 	bl	800249c <HAL_DMA_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d049      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <I2C_Slave_STOPF+0x258>)
 8004538:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd fe00 	bl	8002144 <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03d      	beq.n	80045c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004558:	e035      	b.n	80045c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd ff82 	bl	800249c <HAL_DMA_GetState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d014      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	4a4e      	ldr	r2, [pc, #312]	; (80046dc <I2C_Slave_STOPF+0x258>)
 80045a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fdca 	bl	8002144 <HAL_DMA_Abort_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c0:	4610      	mov	r0, r2
 80045c2:	4798      	blx	r3
 80045c4:	e000      	b.n	80045c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03e      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d112      	bne.n	8004606 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d112      	bne.n	800463a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8b3 	bl	80047c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800465e:	e039      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d109      	bne.n	800467a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2228      	movs	r2, #40	; 0x28
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff f827 	bl	80036c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b28      	cmp	r3, #40	; 0x28
 8004684:	d111      	bne.n	80046aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <I2C_Slave_STOPF+0x25c>)
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f828 	bl	80036f8 <HAL_I2C_ListenCpltCallback>
}
 80046a8:	e014      	b.n	80046d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	2b22      	cmp	r3, #34	; 0x22
 80046b0:	d002      	beq.n	80046b8 <I2C_Slave_STOPF+0x234>
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b22      	cmp	r3, #34	; 0x22
 80046b6:	d10d      	bne.n	80046d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fe fffa 	bl	80036c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08004cc9 	.word	0x08004cc9
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d002      	beq.n	8004706 <I2C_Slave_AF+0x22>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d129      	bne.n	800475a <I2C_Slave_AF+0x76>
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b28      	cmp	r3, #40	; 0x28
 800470a:	d126      	bne.n	800475a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <I2C_Slave_AF+0xdc>)
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004720:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800472a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe ffd0 	bl	80036f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004758:	e02e      	b.n	80047b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b21      	cmp	r3, #33	; 0x21
 800475e:	d126      	bne.n	80047ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <I2C_Slave_AF+0xdc>)
 8004764:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800478a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004794:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe ff84 	bl	80036b4 <HAL_I2C_SlaveTxCpltCallback>
}
 80047ac:	e004      	b.n	80047b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b6:	615a      	str	r2, [r3, #20]
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d002      	beq.n	80047e8 <I2C_ITError+0x24>
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d10a      	bne.n	80047fe <I2C_ITError+0x3a>
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b22      	cmp	r3, #34	; 0x22
 80047ec:	d107      	bne.n	80047fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004804:	2b28      	cmp	r3, #40	; 0x28
 8004806:	d107      	bne.n	8004818 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2228      	movs	r2, #40	; 0x28
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004816:	e015      	b.n	8004844 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d00a      	beq.n	800483e <I2C_ITError+0x7a>
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b60      	cmp	r3, #96	; 0x60
 800482c:	d007      	beq.n	800483e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004852:	d162      	bne.n	800491a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004862:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d020      	beq.n	80048b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4a6a      	ldr	r2, [pc, #424]	; (8004a20 <I2C_ITError+0x25c>)
 8004878:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fc60 	bl	8002144 <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8089 	beq.w	800499e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ae:	4610      	mov	r0, r2
 80048b0:	4798      	blx	r3
 80048b2:	e074      	b.n	800499e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	4a59      	ldr	r2, [pc, #356]	; (8004a20 <I2C_ITError+0x25c>)
 80048ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fd fc3f 	bl	8002144 <HAL_DMA_Abort_IT>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d068      	beq.n	800499e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d10b      	bne.n	80048f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
 8004918:	e041      	b.n	800499e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b60      	cmp	r3, #96	; 0x60
 8004924:	d125      	bne.n	8004972 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10b      	bne.n	800495a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fe feec 	bl	8003748 <HAL_I2C_AbortCpltCallback>
 8004970:	e015      	b.n	800499e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d10b      	bne.n	8004998 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fe fecb 	bl	8003734 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d113      	bne.n	8004a18 <I2C_ITError+0x254>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b28      	cmp	r3, #40	; 0x28
 80049f4:	d110      	bne.n	8004a18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <I2C_ITError+0x260>)
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fe fe70 	bl	80036f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	08004cc9 	.word	0x08004cc9
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	460b      	mov	r3, r1
 8004a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d006      	beq.n	8004a52 <I2C_MasterRequestWrite+0x2a>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d003      	beq.n	8004a52 <I2C_MasterRequestWrite+0x2a>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a50:	d108      	bne.n	8004a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e00b      	b.n	8004a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b12      	cmp	r3, #18
 8004a6a:	d107      	bne.n	8004a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f9c5 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00d      	beq.n	8004ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	d103      	bne.n	8004aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e035      	b.n	8004b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab8:	d108      	bne.n	8004acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ac8:	611a      	str	r2, [r3, #16]
 8004aca:	e01b      	b.n	8004b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	11db      	asrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f063 030f 	orn	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	490e      	ldr	r1, [pc, #56]	; (8004b24 <I2C_MasterRequestWrite+0xfc>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f9eb 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e010      	b.n	8004b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004afa:	897b      	ldrh	r3, [r7, #10]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4907      	ldr	r1, [pc, #28]	; (8004b28 <I2C_MasterRequestWrite+0x100>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f9db 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	00010008 	.word	0x00010008
 8004b28:	00010002 	.word	0x00010002

08004b2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d006      	beq.n	8004b66 <I2C_MasterRequestRead+0x3a>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d003      	beq.n	8004b66 <I2C_MasterRequestRead+0x3a>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b64:	d108      	bne.n	8004b78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e00b      	b.n	8004b90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	2b11      	cmp	r3, #17
 8004b7e:	d107      	bne.n	8004b90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f93b 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb6:	d103      	bne.n	8004bc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e079      	b.n	8004cb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bcc:	d108      	bne.n	8004be0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bce:	897b      	ldrh	r3, [r7, #10]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	e05f      	b.n	8004ca0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004be0:	897b      	ldrh	r3, [r7, #10]
 8004be2:	11db      	asrs	r3, r3, #7
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f003 0306 	and.w	r3, r3, #6
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f063 030f 	orn	r3, r3, #15
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4930      	ldr	r1, [pc, #192]	; (8004cc0 <I2C_MasterRequestRead+0x194>)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f961 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e054      	b.n	8004cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	4929      	ldr	r1, [pc, #164]	; (8004cc4 <I2C_MasterRequestRead+0x198>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f951 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e044      	b.n	8004cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8d9 	bl	8004e18 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d103      	bne.n	8004c84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e017      	b.n	8004cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c88:	897b      	ldrh	r3, [r7, #10]
 8004c8a:	11db      	asrs	r3, r3, #7
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f063 030e 	orn	r3, r3, #14
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <I2C_MasterRequestRead+0x198>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f90d 	bl	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	00010008 	.word	0x00010008
 8004cc4:	00010002 	.word	0x00010002

08004cc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <I2C_DMAAbort+0x148>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <I2C_DMAAbort+0x14c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	0a1a      	lsrs	r2, r3, #8
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d0e:	e00a      	b.n	8004d26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d0ea      	beq.n	8004cfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	2200      	movs	r2, #0
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2200      	movs	r2, #0
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	2200      	movs	r2, #0
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d10e      	bne.n	8004db6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7fe fcca 	bl	8003748 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004db4:	e027      	b.n	8004e06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dbc:	2b28      	cmp	r3, #40	; 0x28
 8004dbe:	d117      	bne.n	8004df0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2228      	movs	r2, #40	; 0x28
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dee:	e007      	b.n	8004e00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f7fe fc97 	bl	8003734 <HAL_I2C_ErrorCallback>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000004 	.word	0x20000004
 8004e14:	14f8b589 	.word	0x14f8b589

08004e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e28:	e025      	b.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d021      	beq.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fc f8d7 	bl	8000fe4 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e023      	b.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10d      	bne.n	8004e9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	e00c      	b.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d0b6      	beq.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed4:	e051      	b.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d123      	bne.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004efe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0204 	orr.w	r2, r3, #4
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e046      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d021      	beq.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fc f855 	bl	8000fe4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d116      	bne.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e020      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10c      	bne.n	8004f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e00b      	b.n	8004fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d18d      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd0:	e02d      	b.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f900 	bl	80051d8 <I2C_IsAcknowledgeFailed>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e02d      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d021      	beq.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fb fffb 	bl	8000fe4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e007      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d1ca      	bne.n	8004fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005052:	e02d      	b.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8bf 	bl	80051d8 <I2C_IsAcknowledgeFailed>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e02d      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d021      	beq.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506c:	f7fb ffba 	bl	8000fe4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	d302      	bcc.n	8005082 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d116      	bne.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e007      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d1ca      	bne.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	4a13      	ldr	r2, [pc, #76]	; (8005128 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	0a1a      	lsrs	r2, r3, #8
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e008      	b.n	8005118 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d0e9      	beq.n	80050ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	20000004 	.word	0x20000004
 8005128:	14f8b589 	.word	0x14f8b589

0800512c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005138:	e042      	b.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	d119      	bne.n	800517c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e029      	b.n	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517c:	f7fb ff32 	bl	8000fe4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d116      	bne.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e007      	b.n	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d1b5      	bne.n	800513a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d11b      	bne.n	8005228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0204 	orr.w	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005246:	d103      	bne.n	8005250 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800524e:	e007      	b.n	8005260 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005258:	d102      	bne.n	8005260 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0cc      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b68      	ldr	r3, [pc, #416]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d90c      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b65      	ldr	r3, [pc, #404]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b63      	ldr	r3, [pc, #396]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0b8      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c0:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a58      	ldr	r2, [pc, #352]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d8:	4b53      	ldr	r3, [pc, #332]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a52      	ldr	r2, [pc, #328]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e4:	4b50      	ldr	r3, [pc, #320]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	494d      	ldr	r1, [pc, #308]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d044      	beq.n	800538c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b47      	ldr	r3, [pc, #284]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d119      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e07f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d003      	beq.n	800532a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005326:	2b03      	cmp	r3, #3
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532a:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e06f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e067      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b37      	ldr	r3, [pc, #220]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4934      	ldr	r1, [pc, #208]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800535c:	f7fb fe42 	bl	8000fe4 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fb fe3e 	bl	8000fe4 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e04f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 020c 	and.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	429a      	cmp	r2, r3
 800538a:	d1eb      	bne.n	8005364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d20c      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e032      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4916      	ldr	r1, [pc, #88]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	490e      	ldr	r1, [pc, #56]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053f2:	f000 f855 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	490a      	ldr	r1, [pc, #40]	; (800542c <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	5ccb      	ldrb	r3, [r1, r3]
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb fda2 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023c00 	.word	0x40023c00
 8005428:	40023800 	.word	0x40023800
 800542c:	08006ad8 	.word	0x08006ad8
 8005430:	20000004 	.word	0x20000004
 8005434:	20000008 	.word	0x20000008

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCC_GetHCLKFreq+0x14>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000004 	.word	0x20000004

08005450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005454:	f7ff fff0 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	08006ae8 	.word	0x08006ae8

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800547c:	f7ff ffdc 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	0b5b      	lsrs	r3, r3, #13
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4903      	ldr	r1, [pc, #12]	; (800549c <HAL_RCC_GetPCLK2Freq+0x24>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40023800 	.word	0x40023800
 800549c:	08006ae8 	.word	0x08006ae8

080054a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b0ae      	sub	sp, #184	; 0xb8
 80054a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c6:	4bcb      	ldr	r3, [pc, #812]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	f200 8206 	bhi.w	80058e0 <HAL_RCC_GetSysClockFreq+0x440>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005511 	.word	0x08005511
 80054e0:	080058e1 	.word	0x080058e1
 80054e4:	080058e1 	.word	0x080058e1
 80054e8:	080058e1 	.word	0x080058e1
 80054ec:	08005519 	.word	0x08005519
 80054f0:	080058e1 	.word	0x080058e1
 80054f4:	080058e1 	.word	0x080058e1
 80054f8:	080058e1 	.word	0x080058e1
 80054fc:	08005521 	.word	0x08005521
 8005500:	080058e1 	.word	0x080058e1
 8005504:	080058e1 	.word	0x080058e1
 8005508:	080058e1 	.word	0x080058e1
 800550c:	08005711 	.word	0x08005711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4bb9      	ldr	r3, [pc, #740]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005516:	e1e7      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005518:	4bb8      	ldr	r3, [pc, #736]	; (80057fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800551a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800551e:	e1e3      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005520:	4bb4      	ldr	r3, [pc, #720]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800552c:	4bb1      	ldr	r3, [pc, #708]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d071      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005538:	4bae      	ldr	r3, [pc, #696]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	099b      	lsrs	r3, r3, #6
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005544:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800555a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	0159      	lsls	r1, r3, #5
 800556c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005570:	0150      	lsls	r0, r2, #5
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4621      	mov	r1, r4
 8005578:	1a51      	subs	r1, r2, r1
 800557a:	6439      	str	r1, [r7, #64]	; 0x40
 800557c:	4629      	mov	r1, r5
 800557e:	eb63 0301 	sbc.w	r3, r3, r1
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005590:	4649      	mov	r1, r9
 8005592:	018b      	lsls	r3, r1, #6
 8005594:	4641      	mov	r1, r8
 8005596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800559a:	4641      	mov	r1, r8
 800559c:	018a      	lsls	r2, r1, #6
 800559e:	4641      	mov	r1, r8
 80055a0:	1a51      	subs	r1, r2, r1
 80055a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a4:	4649      	mov	r1, r9
 80055a6:	eb63 0301 	sbc.w	r3, r3, r1
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80055b8:	4649      	mov	r1, r9
 80055ba:	00cb      	lsls	r3, r1, #3
 80055bc:	4641      	mov	r1, r8
 80055be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c2:	4641      	mov	r1, r8
 80055c4:	00ca      	lsls	r2, r1, #3
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	4622      	mov	r2, r4
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	633b      	str	r3, [r7, #48]	; 0x30
 80055d2:	462b      	mov	r3, r5
 80055d4:	460a      	mov	r2, r1
 80055d6:	eb42 0303 	adc.w	r3, r2, r3
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055e8:	4629      	mov	r1, r5
 80055ea:	024b      	lsls	r3, r1, #9
 80055ec:	4621      	mov	r1, r4
 80055ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055f2:	4621      	mov	r1, r4
 80055f4:	024a      	lsls	r2, r1, #9
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005608:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800560c:	f7fa fdfa 	bl	8000204 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800561a:	e067      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561c:	4b75      	ldr	r3, [pc, #468]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005628:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800562c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	67bb      	str	r3, [r7, #120]	; 0x78
 8005636:	2300      	movs	r3, #0
 8005638:	67fb      	str	r3, [r7, #124]	; 0x7c
 800563a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800563e:	4622      	mov	r2, r4
 8005640:	462b      	mov	r3, r5
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	0159      	lsls	r1, r3, #5
 800564c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4621      	mov	r1, r4
 8005658:	1a51      	subs	r1, r2, r1
 800565a:	62b9      	str	r1, [r7, #40]	; 0x28
 800565c:	4629      	mov	r1, r5
 800565e:	eb63 0301 	sbc.w	r3, r3, r1
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005670:	4649      	mov	r1, r9
 8005672:	018b      	lsls	r3, r1, #6
 8005674:	4641      	mov	r1, r8
 8005676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800567a:	4641      	mov	r1, r8
 800567c:	018a      	lsls	r2, r1, #6
 800567e:	4641      	mov	r1, r8
 8005680:	ebb2 0a01 	subs.w	sl, r2, r1
 8005684:	4649      	mov	r1, r9
 8005686:	eb63 0b01 	sbc.w	fp, r3, r1
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005696:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800569a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800569e:	4692      	mov	sl, r2
 80056a0:	469b      	mov	fp, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	eb1a 0303 	adds.w	r3, sl, r3
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	462b      	mov	r3, r5
 80056ac:	eb4b 0303 	adc.w	r3, fp, r3
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80056be:	4629      	mov	r1, r5
 80056c0:	028b      	lsls	r3, r1, #10
 80056c2:	4621      	mov	r1, r4
 80056c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056c8:	4621      	mov	r1, r4
 80056ca:	028a      	lsls	r2, r1, #10
 80056cc:	4610      	mov	r0, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056d4:	2200      	movs	r2, #0
 80056d6:	673b      	str	r3, [r7, #112]	; 0x70
 80056d8:	677a      	str	r2, [r7, #116]	; 0x74
 80056da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056de:	f7fa fd91 	bl	8000204 <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4613      	mov	r3, r2
 80056e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ec:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80056fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800570e:	e0eb      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005710:	4b38      	ldr	r3, [pc, #224]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d06b      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4b32      	ldr	r3, [pc, #200]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	2200      	movs	r2, #0
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
 8005732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	663b      	str	r3, [r7, #96]	; 0x60
 800573c:	2300      	movs	r3, #0
 800573e:	667b      	str	r3, [r7, #100]	; 0x64
 8005740:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f04f 0000 	mov.w	r0, #0
 800574c:	f04f 0100 	mov.w	r1, #0
 8005750:	0159      	lsls	r1, r3, #5
 8005752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005756:	0150      	lsls	r0, r2, #5
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4621      	mov	r1, r4
 800575e:	1a51      	subs	r1, r2, r1
 8005760:	61b9      	str	r1, [r7, #24]
 8005762:	4629      	mov	r1, r5
 8005764:	eb63 0301 	sbc.w	r3, r3, r1
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005776:	4659      	mov	r1, fp
 8005778:	018b      	lsls	r3, r1, #6
 800577a:	4651      	mov	r1, sl
 800577c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005780:	4651      	mov	r1, sl
 8005782:	018a      	lsls	r2, r1, #6
 8005784:	4651      	mov	r1, sl
 8005786:	ebb2 0801 	subs.w	r8, r2, r1
 800578a:	4659      	mov	r1, fp
 800578c:	eb63 0901 	sbc.w	r9, r3, r1
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a4:	4690      	mov	r8, r2
 80057a6:	4699      	mov	r9, r3
 80057a8:	4623      	mov	r3, r4
 80057aa:	eb18 0303 	adds.w	r3, r8, r3
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	462b      	mov	r3, r5
 80057b2:	eb49 0303 	adc.w	r3, r9, r3
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057c4:	4629      	mov	r1, r5
 80057c6:	024b      	lsls	r3, r1, #9
 80057c8:	4621      	mov	r1, r4
 80057ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057ce:	4621      	mov	r1, r4
 80057d0:	024a      	lsls	r2, r1, #9
 80057d2:	4610      	mov	r0, r2
 80057d4:	4619      	mov	r1, r3
 80057d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057da:	2200      	movs	r2, #0
 80057dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057e4:	f7fa fd0e 	bl	8000204 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4613      	mov	r3, r2
 80057ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057f2:	e065      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x420>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	00f42400 	.word	0x00f42400
 80057fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005800:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	099b      	lsrs	r3, r3, #6
 8005806:	2200      	movs	r2, #0
 8005808:	4618      	mov	r0, r3
 800580a:	4611      	mov	r1, r2
 800580c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005810:	653b      	str	r3, [r7, #80]	; 0x50
 8005812:	2300      	movs	r3, #0
 8005814:	657b      	str	r3, [r7, #84]	; 0x54
 8005816:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800581a:	4642      	mov	r2, r8
 800581c:	464b      	mov	r3, r9
 800581e:	f04f 0000 	mov.w	r0, #0
 8005822:	f04f 0100 	mov.w	r1, #0
 8005826:	0159      	lsls	r1, r3, #5
 8005828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800582c:	0150      	lsls	r0, r2, #5
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4641      	mov	r1, r8
 8005834:	1a51      	subs	r1, r2, r1
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	4649      	mov	r1, r9
 800583a:	eb63 0301 	sbc.w	r3, r3, r1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800584c:	4659      	mov	r1, fp
 800584e:	018b      	lsls	r3, r1, #6
 8005850:	4651      	mov	r1, sl
 8005852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005856:	4651      	mov	r1, sl
 8005858:	018a      	lsls	r2, r1, #6
 800585a:	4651      	mov	r1, sl
 800585c:	1a54      	subs	r4, r2, r1
 800585e:	4659      	mov	r1, fp
 8005860:	eb63 0501 	sbc.w	r5, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	00eb      	lsls	r3, r5, #3
 800586e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005872:	00e2      	lsls	r2, r4, #3
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	4643      	mov	r3, r8
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	464b      	mov	r3, r9
 8005880:	eb45 0303 	adc.w	r3, r5, r3
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005892:	4629      	mov	r1, r5
 8005894:	028b      	lsls	r3, r1, #10
 8005896:	4621      	mov	r1, r4
 8005898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800589c:	4621      	mov	r1, r4
 800589e:	028a      	lsls	r2, r1, #10
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a8:	2200      	movs	r2, #0
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058b2:	f7fa fca7 	bl	8000204 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4613      	mov	r3, r2
 80058bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	0f1b      	lsrs	r3, r3, #28
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80058ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058de:	e003      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80058e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	37b8      	adds	r7, #184	; 0xb8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	00f42400 	.word	0x00f42400

08005900 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e28d      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8083 	beq.w	8005a26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b04      	cmp	r3, #4
 800592a:	d019      	beq.n	8005960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800592c:	4b91      	ldr	r3, [pc, #580]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005934:	2b08      	cmp	r3, #8
 8005936:	d106      	bne.n	8005946 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005938:	4b8e      	ldr	r3, [pc, #568]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005944:	d00c      	beq.n	8005960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005946:	4b8b      	ldr	r3, [pc, #556]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d112      	bne.n	8005978 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005952:	4b88      	ldr	r3, [pc, #544]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595e:	d10b      	bne.n	8005978 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	4b84      	ldr	r3, [pc, #528]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d05b      	beq.n	8005a24 <HAL_RCC_OscConfig+0x124>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d157      	bne.n	8005a24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e25a      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x90>
 8005982:	4b7c      	ldr	r3, [pc, #496]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7b      	ldr	r2, [pc, #492]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e01d      	b.n	80059cc <HAL_RCC_OscConfig+0xcc>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0xb4>
 800599a:	4b76      	ldr	r3, [pc, #472]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a75      	ldr	r2, [pc, #468]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a72      	ldr	r2, [pc, #456]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0xcc>
 80059b4:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6e      	ldr	r2, [pc, #440]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6b      	ldr	r2, [pc, #428]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fb fb06 	bl	8000fe4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fb fb02 	bl	8000fe4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	; 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e21f      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0xdc>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fb faf2 	bl	8000fe4 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fb faee 	bl	8000fe4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e20b      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	4b57      	ldr	r3, [pc, #348]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x104>
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d06f      	beq.n	8005b12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a32:	4b50      	ldr	r3, [pc, #320]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a3e:	4b4d      	ldr	r3, [pc, #308]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d105      	bne.n	8005a56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a56:	4b47      	ldr	r3, [pc, #284]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d11c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a62:	4b44      	ldr	r3, [pc, #272]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_RCC_OscConfig+0x186>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d001      	beq.n	8005a86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e1d3      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a86:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4937      	ldr	r1, [pc, #220]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9a:	e03a      	b.n	8005b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d020      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa4:	4b34      	ldr	r3, [pc, #208]	; (8005b78 <HAL_RCC_OscConfig+0x278>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fb fa9b 	bl	8000fe4 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab2:	f7fb fa97 	bl	8000fe4 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e1b4      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad0:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4925      	ldr	r1, [pc, #148]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	600b      	str	r3, [r1, #0]
 8005ae4:	e015      	b.n	8005b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <HAL_RCC_OscConfig+0x278>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fb fa7a 	bl	8000fe4 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af4:	f7fb fa76 	bl	8000fe4 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e193      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b06:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d036      	beq.n	8005b8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d016      	beq.n	8005b54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <HAL_RCC_OscConfig+0x27c>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fb fa5a 	bl	8000fe4 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b34:	f7fb fa56 	bl	8000fe4 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e173      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x234>
 8005b52:	e01b      	b.n	8005b8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_RCC_OscConfig+0x27c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5a:	f7fb fa43 	bl	8000fe4 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	e00e      	b.n	8005b80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b62:	f7fb fa3f 	bl	8000fe4 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d907      	bls.n	8005b80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e15c      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
 8005b74:	40023800 	.word	0x40023800
 8005b78:	42470000 	.word	0x42470000
 8005b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b80:	4b8a      	ldr	r3, [pc, #552]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ea      	bne.n	8005b62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8097 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9e:	4b83      	ldr	r3, [pc, #524]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	4b7f      	ldr	r3, [pc, #508]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a7e      	ldr	r2, [pc, #504]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bba:	4b7c      	ldr	r3, [pc, #496]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bca:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <HAL_RCC_OscConfig+0x4b0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d118      	bne.n	8005c08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd6:	4b76      	ldr	r3, [pc, #472]	; (8005db0 <HAL_RCC_OscConfig+0x4b0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a75      	ldr	r2, [pc, #468]	; (8005db0 <HAL_RCC_OscConfig+0x4b0>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be2:	f7fb f9ff 	bl	8000fe4 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fb f9fb 	bl	8000fe4 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e118      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfc:	4b6c      	ldr	r3, [pc, #432]	; (8005db0 <HAL_RCC_OscConfig+0x4b0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d106      	bne.n	8005c1e <HAL_RCC_OscConfig+0x31e>
 8005c10:	4b66      	ldr	r3, [pc, #408]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	4a65      	ldr	r2, [pc, #404]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1c:	e01c      	b.n	8005c58 <HAL_RCC_OscConfig+0x358>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d10c      	bne.n	8005c40 <HAL_RCC_OscConfig+0x340>
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a60      	ldr	r2, [pc, #384]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c2c:	f043 0304 	orr.w	r3, r3, #4
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
 8005c32:	4b5e      	ldr	r3, [pc, #376]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	4a5d      	ldr	r2, [pc, #372]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3e:	e00b      	b.n	8005c58 <HAL_RCC_OscConfig+0x358>
 8005c40:	4b5a      	ldr	r3, [pc, #360]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a59      	ldr	r2, [pc, #356]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c46:	f023 0301 	bic.w	r3, r3, #1
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	4b57      	ldr	r3, [pc, #348]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	4a56      	ldr	r2, [pc, #344]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c52:	f023 0304 	bic.w	r3, r3, #4
 8005c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c60:	f7fb f9c0 	bl	8000fe4 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c68:	f7fb f9bc 	bl	8000fe4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0d7      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7e:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0ee      	beq.n	8005c68 <HAL_RCC_OscConfig+0x368>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f7fb f9aa 	bl	8000fe4 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fb f9a6 	bl	8000fe4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0c1      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005caa:	4b40      	ldr	r3, [pc, #256]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1ee      	bne.n	8005c94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80ad 	beq.w	8005e2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d060      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d145      	bne.n	8005d72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce6:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <HAL_RCC_OscConfig+0x4b4>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fb f97a 	bl	8000fe4 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fb f976 	bl	8000fe4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e093      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	4b29      	ldr	r3, [pc, #164]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	019b      	lsls	r3, r3, #6
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	071b      	lsls	r3, r3, #28
 8005d3e:	491b      	ldr	r1, [pc, #108]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x4b4>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fb f94b 	bl	8000fe4 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fb f947 	bl	8000fe4 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e064      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x452>
 8005d70:	e05c      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <HAL_RCC_OscConfig+0x4b4>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fb f934 	bl	8000fe4 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d80:	f7fb f930 	bl	8000fe4 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e04d      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <HAL_RCC_OscConfig+0x4ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x480>
 8005d9e:	e045      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d107      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e040      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
 8005dac:	40023800 	.word	0x40023800
 8005db0:	40007000 	.word	0x40007000
 8005db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005db8:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <HAL_RCC_OscConfig+0x538>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d030      	beq.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d129      	bne.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d122      	bne.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005de8:	4013      	ands	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d119      	bne.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	3b01      	subs	r3, #1
 8005e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d10f      	bne.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d107      	bne.n	8005e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40023800 	.word	0x40023800

08005e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e03f      	b.n	8005ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fa ff66 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f929 	bl	80060d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08a      	sub	sp, #40	; 0x28
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d17c      	bne.n	8005ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_Transmit+0x2c>
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e075      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Transmit+0x3e>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e06e      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f2a:	f7fb f85b 	bl	8000fe4 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d108      	bne.n	8005f58 <HAL_UART_Transmit+0x82>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	e003      	b.n	8005f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f68:	e02a      	b.n	8005fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f840 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e036      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e007      	b.n	8005fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1cf      	bne.n	8005f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2140      	movs	r1, #64	; 0x40
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f810 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e006      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b090      	sub	sp, #64	; 0x40
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	e050      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d04c      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0x30>
 800601a:	f7fa ffe3 	bl	8000fe4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006026:	429a      	cmp	r2, r3
 8006028:	d241      	bcs.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800604a:	637a      	str	r2, [r7, #52]	; 0x34
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	613b      	str	r3, [r7, #16]
   return(result);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607e:	623a      	str	r2, [r7, #32]
 8006080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	61bb      	str	r3, [r7, #24]
   return(result);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e00f      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d09f      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3740      	adds	r7, #64	; 0x40
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060dc:	b0c0      	sub	sp, #256	; 0x100
 80060de:	af00      	add	r7, sp, #0
 80060e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	ea40 0301 	orr.w	r3, r0, r1
 8006100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	431a      	orrs	r2, r3
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	431a      	orrs	r2, r3
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006130:	f021 010c 	bic.w	r1, r1, #12
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613e:	430b      	orrs	r3, r1
 8006140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006152:	6999      	ldr	r1, [r3, #24]
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	ea40 0301 	orr.w	r3, r0, r1
 800615e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <UART_SetConfig+0x2cc>)
 8006168:	429a      	cmp	r2, r3
 800616a:	d005      	beq.n	8006178 <UART_SetConfig+0xa0>
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <UART_SetConfig+0x2d0>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d104      	bne.n	8006182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006178:	f7ff f97e 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 800617c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006180:	e003      	b.n	800618a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006182:	f7ff f965 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8006186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006194:	f040 810c 	bne.w	80063b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619c:	2200      	movs	r2, #0
 800619e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061aa:	4622      	mov	r2, r4
 80061ac:	462b      	mov	r3, r5
 80061ae:	1891      	adds	r1, r2, r2
 80061b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061b2:	415b      	adcs	r3, r3
 80061b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061ba:	4621      	mov	r1, r4
 80061bc:	eb12 0801 	adds.w	r8, r2, r1
 80061c0:	4629      	mov	r1, r5
 80061c2:	eb43 0901 	adc.w	r9, r3, r1
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061da:	4690      	mov	r8, r2
 80061dc:	4699      	mov	r9, r3
 80061de:	4623      	mov	r3, r4
 80061e0:	eb18 0303 	adds.w	r3, r8, r3
 80061e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e8:	462b      	mov	r3, r5
 80061ea:	eb49 0303 	adc.w	r3, r9, r3
 80061ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006206:	460b      	mov	r3, r1
 8006208:	18db      	adds	r3, r3, r3
 800620a:	653b      	str	r3, [r7, #80]	; 0x50
 800620c:	4613      	mov	r3, r2
 800620e:	eb42 0303 	adc.w	r3, r2, r3
 8006212:	657b      	str	r3, [r7, #84]	; 0x54
 8006214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800621c:	f7f9 fff2 	bl	8000204 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4b61      	ldr	r3, [pc, #388]	; (80063ac <UART_SetConfig+0x2d4>)
 8006226:	fba3 2302 	umull	r2, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	011c      	lsls	r4, r3, #4
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800623c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	1891      	adds	r1, r2, r2
 8006246:	64b9      	str	r1, [r7, #72]	; 0x48
 8006248:	415b      	adcs	r3, r3
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006250:	4641      	mov	r1, r8
 8006252:	eb12 0a01 	adds.w	sl, r2, r1
 8006256:	4649      	mov	r1, r9
 8006258:	eb43 0b01 	adc.w	fp, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800626c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006270:	4692      	mov	sl, r2
 8006272:	469b      	mov	fp, r3
 8006274:	4643      	mov	r3, r8
 8006276:	eb1a 0303 	adds.w	r3, sl, r3
 800627a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627e:	464b      	mov	r3, r9
 8006280:	eb4b 0303 	adc.w	r3, fp, r3
 8006284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800629c:	460b      	mov	r3, r1
 800629e:	18db      	adds	r3, r3, r3
 80062a0:	643b      	str	r3, [r7, #64]	; 0x40
 80062a2:	4613      	mov	r3, r2
 80062a4:	eb42 0303 	adc.w	r3, r2, r3
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062b2:	f7f9 ffa7 	bl	8000204 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	4b3b      	ldr	r3, [pc, #236]	; (80063ac <UART_SetConfig+0x2d4>)
 80062be:	fba3 2301 	umull	r2, r3, r3, r1
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	2264      	movs	r2, #100	; 0x64
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	1acb      	subs	r3, r1, r3
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062d2:	4b36      	ldr	r3, [pc, #216]	; (80063ac <UART_SetConfig+0x2d4>)
 80062d4:	fba3 2302 	umull	r2, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062e0:	441c      	add	r4, r3
 80062e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	1891      	adds	r1, r2, r2
 80062fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80062fc:	415b      	adcs	r3, r3
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006304:	4641      	mov	r1, r8
 8006306:	1851      	adds	r1, r2, r1
 8006308:	6339      	str	r1, [r7, #48]	; 0x30
 800630a:	4649      	mov	r1, r9
 800630c:	414b      	adcs	r3, r1
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800631c:	4659      	mov	r1, fp
 800631e:	00cb      	lsls	r3, r1, #3
 8006320:	4651      	mov	r1, sl
 8006322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006326:	4651      	mov	r1, sl
 8006328:	00ca      	lsls	r2, r1, #3
 800632a:	4610      	mov	r0, r2
 800632c:	4619      	mov	r1, r3
 800632e:	4603      	mov	r3, r0
 8006330:	4642      	mov	r2, r8
 8006332:	189b      	adds	r3, r3, r2
 8006334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006338:	464b      	mov	r3, r9
 800633a:	460a      	mov	r2, r1
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006358:	460b      	mov	r3, r1
 800635a:	18db      	adds	r3, r3, r3
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
 800635e:	4613      	mov	r3, r2
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800636a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800636e:	f7f9 ff49 	bl	8000204 <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <UART_SetConfig+0x2d4>)
 8006378:	fba3 1302 	umull	r1, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	2164      	movs	r1, #100	; 0x64
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	3332      	adds	r3, #50	; 0x32
 800638a:	4a08      	ldr	r2, [pc, #32]	; (80063ac <UART_SetConfig+0x2d4>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	f003 0207 	and.w	r2, r3, #7
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4422      	add	r2, r4
 800639e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063a0:	e105      	b.n	80065ae <UART_SetConfig+0x4d6>
 80063a2:	bf00      	nop
 80063a4:	40011000 	.word	0x40011000
 80063a8:	40011400 	.word	0x40011400
 80063ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063c2:	4642      	mov	r2, r8
 80063c4:	464b      	mov	r3, r9
 80063c6:	1891      	adds	r1, r2, r2
 80063c8:	6239      	str	r1, [r7, #32]
 80063ca:	415b      	adcs	r3, r3
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
 80063ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063d2:	4641      	mov	r1, r8
 80063d4:	1854      	adds	r4, r2, r1
 80063d6:	4649      	mov	r1, r9
 80063d8:	eb43 0501 	adc.w	r5, r3, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	00eb      	lsls	r3, r5, #3
 80063e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ea:	00e2      	lsls	r2, r4, #3
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	4643      	mov	r3, r8
 80063f2:	18e3      	adds	r3, r4, r3
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063f8:	464b      	mov	r3, r9
 80063fa:	eb45 0303 	adc.w	r3, r5, r3
 80063fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800641e:	4629      	mov	r1, r5
 8006420:	008b      	lsls	r3, r1, #2
 8006422:	4621      	mov	r1, r4
 8006424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006428:	4621      	mov	r1, r4
 800642a:	008a      	lsls	r2, r1, #2
 800642c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006430:	f7f9 fee8 	bl	8000204 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b60      	ldr	r3, [pc, #384]	; (80065bc <UART_SetConfig+0x4e4>)
 800643a:	fba3 2302 	umull	r2, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	011c      	lsls	r4, r3, #4
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800644c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	61b9      	str	r1, [r7, #24]
 800645c:	415b      	adcs	r3, r3
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006464:	4641      	mov	r1, r8
 8006466:	1851      	adds	r1, r2, r1
 8006468:	6139      	str	r1, [r7, #16]
 800646a:	4649      	mov	r1, r9
 800646c:	414b      	adcs	r3, r1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800647c:	4659      	mov	r1, fp
 800647e:	00cb      	lsls	r3, r1, #3
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006486:	4651      	mov	r1, sl
 8006488:	00ca      	lsls	r2, r1, #3
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	4603      	mov	r3, r0
 8006490:	4642      	mov	r2, r8
 8006492:	189b      	adds	r3, r3, r2
 8006494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006498:	464b      	mov	r3, r9
 800649a:	460a      	mov	r2, r1
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064bc:	4649      	mov	r1, r9
 80064be:	008b      	lsls	r3, r1, #2
 80064c0:	4641      	mov	r1, r8
 80064c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c6:	4641      	mov	r1, r8
 80064c8:	008a      	lsls	r2, r1, #2
 80064ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ce:	f7f9 fe99 	bl	8000204 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <UART_SetConfig+0x4e4>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a34      	ldr	r2, [pc, #208]	; (80065bc <UART_SetConfig+0x4e4>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f6:	441c      	add	r4, r3
 80064f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fc:	2200      	movs	r2, #0
 80064fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006500:	677a      	str	r2, [r7, #116]	; 0x74
 8006502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	1891      	adds	r1, r2, r2
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	415b      	adcs	r3, r3
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006516:	4641      	mov	r1, r8
 8006518:	1851      	adds	r1, r2, r1
 800651a:	6039      	str	r1, [r7, #0]
 800651c:	4649      	mov	r1, r9
 800651e:	414b      	adcs	r3, r1
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800652e:	4659      	mov	r1, fp
 8006530:	00cb      	lsls	r3, r1, #3
 8006532:	4651      	mov	r1, sl
 8006534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006538:	4651      	mov	r1, sl
 800653a:	00ca      	lsls	r2, r1, #3
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	4603      	mov	r3, r0
 8006542:	4642      	mov	r2, r8
 8006544:	189b      	adds	r3, r3, r2
 8006546:	66bb      	str	r3, [r7, #104]	; 0x68
 8006548:	464b      	mov	r3, r9
 800654a:	460a      	mov	r2, r1
 800654c:	eb42 0303 	adc.w	r3, r2, r3
 8006550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	663b      	str	r3, [r7, #96]	; 0x60
 800655c:	667a      	str	r2, [r7, #100]	; 0x64
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800656a:	4649      	mov	r1, r9
 800656c:	008b      	lsls	r3, r1, #2
 800656e:	4641      	mov	r1, r8
 8006570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006574:	4641      	mov	r1, r8
 8006576:	008a      	lsls	r2, r1, #2
 8006578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800657c:	f7f9 fe42 	bl	8000204 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <UART_SetConfig+0x4e4>)
 8006586:	fba3 1302 	umull	r1, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2164      	movs	r1, #100	; 0x64
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	3332      	adds	r3, #50	; 0x32
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <UART_SetConfig+0x4e4>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4422      	add	r2, r4
 80065ac:	609a      	str	r2, [r3, #8]
}
 80065ae:	bf00      	nop
 80065b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ba:	bf00      	nop
 80065bc:	51eb851f 	.word	0x51eb851f

080065c0 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80065d2:	232d      	movs	r3, #45	; 0x2d
 80065d4:	73bb      	strb	r3, [r7, #14]
 80065d6:	e011      	b.n	80065fc <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	b299      	uxth	r1, r3
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	3b2d      	subs	r3, #45	; 0x2d
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <VL53L1X_SensorInit+0xd4>)
 80065e2:	5cd2      	ldrb	r2, [r2, r3]
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f972 	bl	80068d0 <VL53L1_WrByte>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80065f6:	7bbb      	ldrb	r3, [r7, #14]
 80065f8:	3301      	adds	r3, #1
 80065fa:	73bb      	strb	r3, [r7, #14]
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2b87      	cmp	r3, #135	; 0x87
 8006600:	d9ea      	bls.n	80065d8 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f889 	bl	800671c <VL53L1X_StartRanging>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	4313      	orrs	r3, r2
 8006612:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8006618:	e00b      	b.n	8006632 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800661a:	f107 020d 	add.w	r2, r7, #13
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f8aa 	bl	800677c <VL53L1X_CheckForDataReady>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	4313      	orrs	r3, r2
 8006630:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8006632:	7b7b      	ldrb	r3, [r7, #13]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f82c 	bl	8006698 <VL53L1X_ClearInterrupt>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	4313      	orrs	r3, r2
 8006648:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f87d 	bl	800674c <VL53L1X_StopRanging>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	4313      	orrs	r3, r2
 800665a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	2209      	movs	r2, #9
 8006660:	2108      	movs	r1, #8
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f934 	bl	80068d0 <VL53L1_WrByte>
 8006668:	4603      	mov	r3, r0
 800666a:	461a      	mov	r2, r3
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	4313      	orrs	r3, r2
 8006670:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	2200      	movs	r2, #0
 8006676:	210b      	movs	r1, #11
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f929 	bl	80068d0 <VL53L1_WrByte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	4313      	orrs	r3, r2
 8006686:	73fb      	strb	r3, [r7, #15]
	return status;
 8006688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	08006af8 	.word	0x08006af8

08006698 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	2201      	movs	r2, #1
 80066aa:	2186      	movs	r1, #134	; 0x86
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 f90f 	bl	80068d0 <VL53L1_WrByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	73fb      	strb	r3, [r7, #15]
	return status;
 80066bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80066d8:	f107 020e 	add.w	r2, r7, #14
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2130      	movs	r1, #48	; 0x30
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f921 	bl	8006928 <VL53L1_RdByte>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	091b      	lsrs	r3, r3, #4
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	701a      	strb	r2, [r3, #0]
	return status;
 8006710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2240      	movs	r2, #64	; 0x40
 800672e:	2187      	movs	r1, #135	; 0x87
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f8cd 	bl	80068d0 <VL53L1_WrByte>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	4313      	orrs	r3, r2
 800673e:	73fb      	strb	r3, [r7, #15]
	return status;
 8006740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2200      	movs	r2, #0
 800675e:	2187      	movs	r1, #135	; 0x87
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f8b5 	bl	80068d0 <VL53L1_WrByte>
 8006766:	4603      	mov	r3, r0
 8006768:	461a      	mov	r2, r3
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	4313      	orrs	r3, r2
 800676e:	73fb      	strb	r3, [r7, #15]
	return status;
 8006770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 800678c:	f107 020d 	add.w	r2, r7, #13
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff ff97 	bl	80066c8 <VL53L1X_GetInterruptPolarity>
 800679a:	4603      	mov	r3, r0
 800679c:	461a      	mov	r2, r3
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80067a4:	f107 020e 	add.w	r2, r7, #14
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	2131      	movs	r1, #49	; 0x31
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f8bb 	bl	8006928 <VL53L1_RdByte>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80067bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10c      	bne.n	80067de <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	7b7a      	ldrb	r2, [r7, #13]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d103      	bne.n	80067d8 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e002      	b.n	80067de <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80067de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	4603      	mov	r3, r0
 80067f2:	6039      	str	r1, [r7, #0]
 80067f4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80067fe:	f107 020e 	add.w	r2, r7, #14
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	21e5      	movs	r1, #229	; 0xe5
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f88e 	bl	8006928 <VL53L1_RdByte>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	4313      	orrs	r3, r2
 8006814:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8006816:	7bba      	ldrb	r2, [r7, #14]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	701a      	strb	r2, [r3, #0]
	return status;
 800681c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8006838:	f107 020c 	add.w	r2, r7, #12
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	2196      	movs	r1, #150	; 0x96
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f8a9 	bl	8006998 <VL53L1_RdWord>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	4313      	orrs	r3, r2
 800684e:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006850:	89ba      	ldrh	r2, [r7, #12]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	801a      	strh	r2, [r3, #0]
	return status;
 8006856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af02      	add	r7, sp, #8
 800686a:	4603      	mov	r3, r0
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	b29b      	uxth	r3, r3
 8006876:	89f9      	ldrh	r1, [r7, #14]
 8006878:	220a      	movs	r2, #10
 800687a:	9200      	str	r2, [sp, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <_I2CWrite+0x30>)
 8006880:	f7fc f9c8 	bl	8002c14 <HAL_I2C_Master_Transmit>
 8006884:	4603      	mov	r3, r0
 8006886:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006888:	697b      	ldr	r3, [r7, #20]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000054 	.word	0x20000054

08006898 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	4603      	mov	r3, r0
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	b299      	uxth	r1, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	220a      	movs	r2, #10
 80068b4:	9200      	str	r2, [sp, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4804      	ldr	r0, [pc, #16]	; (80068cc <_I2CRead+0x34>)
 80068ba:	f7fc faa9 	bl	8002e10 <HAL_I2C_Master_Receive>
 80068be:	4603      	mov	r3, r0
 80068c0:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000054 	.word	0x20000054

080068d0 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	80fb      	strh	r3, [r7, #6]
 80068da:	460b      	mov	r3, r1
 80068dc:	80bb      	strh	r3, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80068e6:	88bb      	ldrh	r3, [r7, #4]
 80068e8:	0a1b      	lsrs	r3, r3, #8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <VL53L1_WrByte+0x54>)
 80068f0:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <VL53L1_WrByte+0x54>)
 80068f8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80068fa:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <VL53L1_WrByte+0x54>)
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2203      	movs	r2, #3
 8006904:	4907      	ldr	r1, [pc, #28]	; (8006924 <VL53L1_WrByte+0x54>)
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff ffac 	bl	8006864 <_I2CWrite>
 800690c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006914:	23f3      	movs	r3, #243	; 0xf3
 8006916:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8006918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000224 	.word	0x20000224

08006928 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	603a      	str	r2, [r7, #0]
 8006932:	80fb      	strh	r3, [r7, #6]
 8006934:	460b      	mov	r3, r1
 8006936:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800693c:	88bb      	ldrh	r3, [r7, #4]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b29b      	uxth	r3, r3
 8006942:	b2da      	uxtb	r2, r3
 8006944:	4b13      	ldr	r3, [pc, #76]	; (8006994 <VL53L1_RdByte+0x6c>)
 8006946:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006948:	88bb      	ldrh	r3, [r7, #4]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <VL53L1_RdByte+0x6c>)
 800694e:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	2202      	movs	r2, #2
 8006954:	490f      	ldr	r1, [pc, #60]	; (8006994 <VL53L1_RdByte+0x6c>)
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff84 	bl	8006864 <_I2CWrite>
 800695c:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006964:	23f3      	movs	r3, #243	; 0xf3
 8006966:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006968:	e00d      	b.n	8006986 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2201      	movs	r2, #1
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff91 	bl	8006898 <_I2CRead>
 8006976:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800697e:	23f3      	movs	r3, #243	; 0xf3
 8006980:	73fb      	strb	r3, [r7, #15]
 8006982:	e000      	b.n	8006986 <VL53L1_RdByte+0x5e>
    }
done:
 8006984:	bf00      	nop
    return Status;
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000224 	.word	0x20000224

08006998 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	603a      	str	r2, [r7, #0]
 80069a2:	80fb      	strh	r3, [r7, #6]
 80069a4:	460b      	mov	r3, r1
 80069a6:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80069ac:	88bb      	ldrh	r3, [r7, #4]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <VL53L1_RdWord+0x80>)
 80069b6:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80069b8:	88bb      	ldrh	r3, [r7, #4]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <VL53L1_RdWord+0x80>)
 80069be:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	2202      	movs	r2, #2
 80069c4:	4914      	ldr	r1, [pc, #80]	; (8006a18 <VL53L1_RdWord+0x80>)
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff ff4c 	bl	8006864 <_I2CWrite>
 80069cc:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80069d4:	23f3      	movs	r3, #243	; 0xf3
 80069d6:	73fb      	strb	r3, [r7, #15]
        goto done;
 80069d8:	e018      	b.n	8006a0c <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2202      	movs	r2, #2
 80069de:	490e      	ldr	r1, [pc, #56]	; (8006a18 <VL53L1_RdWord+0x80>)
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff ff59 	bl	8006898 <_I2CRead>
 80069e6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80069ee:	23f3      	movs	r3, #243	; 0xf3
 80069f0:	73fb      	strb	r3, [r7, #15]
        goto done;
 80069f2:	e00b      	b.n	8006a0c <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <VL53L1_RdWord+0x80>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <VL53L1_RdWord+0x80>)
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8006a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000224 	.word	0x20000224

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4d0d      	ldr	r5, [pc, #52]	; (8006a54 <__libc_init_array+0x38>)
 8006a20:	4c0d      	ldr	r4, [pc, #52]	; (8006a58 <__libc_init_array+0x3c>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	2600      	movs	r6, #0
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	4d0b      	ldr	r5, [pc, #44]	; (8006a5c <__libc_init_array+0x40>)
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	; (8006a60 <__libc_init_array+0x44>)
 8006a30:	f000 f820 	bl	8006a74 <_init>
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	2600      	movs	r6, #0
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	08006b5c 	.word	0x08006b5c
 8006a58:	08006b5c 	.word	0x08006b5c
 8006a5c:	08006b5c 	.word	0x08006b5c
 8006a60:	08006b60 	.word	0x08006b60

08006a64 <memset>:
 8006a64:	4402      	add	r2, r0
 8006a66:	4603      	mov	r3, r0
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d100      	bne.n	8006a6e <memset+0xa>
 8006a6c:	4770      	bx	lr
 8006a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a72:	e7f9      	b.n	8006a68 <memset+0x4>

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
