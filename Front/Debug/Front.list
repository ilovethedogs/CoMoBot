
Front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800826c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000080  080082ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080082ec  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016022  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b01  00000000  00000000  000360d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00039fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244cb  00000000  00000000  0003b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001706f  00000000  00000000  0005f763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d96b3  00000000  00000000  000767d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fe85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  0014fed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080e0 	.word	0x080080e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080080e0 	.word	0x080080e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f005 ff3c 	bl	8006446 <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000160 	.word	0x20000160

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 f83a 	bl	8001658 <HAL_Init>

  /* USER CODE BEGIN Init */
  dis = calloc(nof, 16 * nof);
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <main+0x98>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <main+0x98>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f006 fd20 	bl	8007038 <calloc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <main+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f83e 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f972 	bl	80008ec <MX_GPIO_Init>
  MX_CAN1_Init();
 8000608:	f000 f8ac 	bl	8000764 <MX_CAN1_Init>
  MX_I2C1_Init();
 800060c:	f000 f8e0 	bl	80007d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f942 	bl	8000898 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000614:	f000 f90a 	bl	800082c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000618:	2007      	movs	r0, #7
 800061a:	f002 f874 	bl	8002706 <HAL_NVIC_DisableIRQ>

  CAN_Filter_Init();
 800061e:	f000 fccb 	bl	8000fb8 <CAN_Filter_Init>
//	HAL_Delay(5);
//	VL53L1X_SensorInit(dev);
//	VL53L1X_SetInterruptPolarity(dev, 0);
//	VL53L1X_StartRanging(dev);

  if (!(ChangeAddresses(nof))) {
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0x98>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fc04 	bl	8000e34 <ChangeAddresses>
	  //HAL_UART_Transmit(&huart2, fail, 6, 10);
  }
  else {
	  //HAL_UART_Transmit(&huart2, succ, 6, 10);
  }
  VL53L1X_SetInterruptPolarity(devs[0], 0);
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0xa0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f006 fb1d 	bl	8006c74 <VL53L1X_SetInterruptPolarity>
  VL53L1X_ClearInterrupt(devs[0]);
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0xa0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f006 faff 	bl	8006c44 <VL53L1X_ClearInterrupt>
  HAL_Delay(100);
 8000646:	2064      	movs	r0, #100	; 0x64
 8000648:	f001 f878 	bl	800173c <HAL_Delay>
  	  GetAllData(nof, dis);
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <main+0x98>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <main+0x9c>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fc44 	bl	8000ee4 <GetAllData>
  	  PrintAllData(nof, dis);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <main+0x98>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <main+0x9c>)
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fc84 	bl	8000f74 <PrintAllData>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800066c:	2007      	movs	r0, #7
 800066e:	f002 f83c 	bl	80026ea <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_TIM_Base_Start_IT(&htim7);
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x96>
 8000674:	20000002 	.word	0x20000002
 8000678:	200001a4 	.word	0x200001a4
 800067c:	20000004 	.word	0x20000004

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 fd04 	bl	800709c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a2b      	ldr	r2, [pc, #172]	; (800075c <SystemClock_Config+0xdc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <SystemClock_Config+0xe0>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f4:	23b4      	movs	r3, #180	; 0xb4
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f005 f901 	bl	8005910 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000714:	f000 fd4e 	bl	80011b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f004 fd60 	bl	80051dc <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 fd47 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000732:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2105      	movs	r1, #5
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fd99 	bl	800527c <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000750:	f000 fd30 	bl	80011b4 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_CAN1_Init+0x64>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_CAN1_Init+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 50;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_CAN1_Init+0x64>)
 8000770:	2232      	movs	r2, #50	; 0x32
 8000772:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_CAN1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_CAN1_Init+0x64>)
 8000782:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000786:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_CAN1_Init+0x64>)
 800078a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800078e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_CAN1_Init+0x64>)
 8000798:	2201      	movs	r2, #1
 800079a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_CAN1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_CAN1_Init+0x64>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_CAN1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_CAN1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_CAN1_Init+0x64>)
 80007b6:	f000 ffe5 	bl	8001784 <HAL_CAN_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 fcf8 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	40006400 	.word	0x40006400

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f002 f98b 	bl	8002b28 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fccc 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000c4 	.word	0x200000c4
 8000824:	40005400 	.word	0x40005400
 8000828:	00061a80 	.word	0x00061a80

0800082c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM7_Init+0x64>)
 800083c:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_TIM7_Init+0x68>)
 800083e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 720-1;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_TIM7_Init+0x64>)
 8000842:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000846:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_TIM7_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_TIM7_Init+0x64>)
 8000850:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000854:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_TIM7_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_TIM7_Init+0x64>)
 800085e:	f005 faf5 	bl	8005e4c <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000868:	f000 fca4 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_TIM7_Init+0x64>)
 800087a:	f005 fd07 	bl	800628c <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 fc96 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000118 	.word	0x20000118
 8000894:	40001400 	.word	0x40001400

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f005 fd6c 	bl	80063ac <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 fc6b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000160 	.word	0x20000160
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a52      	ldr	r2, [pc, #328]	; (8000a54 <MX_GPIO_Init+0x168>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4b      	ldr	r2, [pc, #300]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <MX_GPIO_Init+0x168>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <MX_GPIO_Init+0x168>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a36      	ldr	r2, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x168>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <MX_GPIO_Init+0x168>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800098e:	2200      	movs	r2, #0
 8000990:	f643 411c 	movw	r1, #15388	; 0x3c1c
 8000994:	4830      	ldr	r0, [pc, #192]	; (8000a58 <MX_GPIO_Init+0x16c>)
 8000996:	f002 f895 	bl	8002ac4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2104      	movs	r1, #4
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <MX_GPIO_Init+0x170>)
 80009a0:	f002 f890 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	482d      	ldr	r0, [pc, #180]	; (8000a60 <MX_GPIO_Init+0x174>)
 80009aa:	f002 f88b 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80009ae:	f643 031c 	movw	r3, #14364	; 0x381c
 80009b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b4:	2311      	movs	r3, #17
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x16c>)
 80009c8:	f001 fee8 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	481d      	ldr	r0, [pc, #116]	; (8000a58 <MX_GPIO_Init+0x16c>)
 80009e2:	f001 fedb 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0x16c>)
 8000a00:	f001 fecc 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a04:	2304      	movs	r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4810      	ldr	r0, [pc, #64]	; (8000a5c <MX_GPIO_Init+0x170>)
 8000a1c:	f001 febe 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a20:	2308      	movs	r3, #8
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a24:	2311      	movs	r3, #17
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000a38:	f001 feb0 	bl	800279c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2007      	movs	r0, #7
 8000a42:	f001 fe36 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f001 fe4f 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020400 	.word	0x40020400

08000a64 <TurnOffAll>:

/* USER CODE BEGIN 4 */
void TurnOffAll(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <TurnOffAll+0x6c>)
 8000a70:	f002 f828 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <TurnOffAll+0x6c>)
 8000a7c:	f002 f822 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <TurnOffAll+0x6c>)
 8000a88:	f002 f81c 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <TurnOffAll+0x70>)
 8000a92:	f002 f817 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <TurnOffAll+0x6c>)
 8000a9e:	f002 f811 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <TurnOffAll+0x6c>)
 8000aa8:	f002 f80c 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <TurnOffAll+0x6c>)
 8000ab2:	f002 f807 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <TurnOffAll+0x6c>)
 8000abc:	f002 f802 	bl	8002ac4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TurnOffAll+0x6c>)
 8000ac6:	f001 fffd 	bl	8002ac4 <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <TurnOnAt>:

uint8_t TurnOnAt(uint8_t i) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t bootState = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot[8] = {66, 79, 79, 84, 48, 13, 10, 0};
 8000ae6:	4ace      	ldr	r2, [pc, #824]	; (8000e20 <TurnOnAt+0x348>)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (i) {
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	f200 818d 	bhi.w	8000e16 <TurnOnAt+0x33e>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <TurnOnAt+0x2c>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b29 	.word	0x08000b29
 8000b08:	08000b7b 	.word	0x08000b7b
 8000b0c:	08000bd1 	.word	0x08000bd1
 8000b10:	08000c27 	.word	0x08000c27
 8000b14:	08000c79 	.word	0x08000c79
 8000b18:	08000ccf 	.word	0x08000ccf
 8000b1c:	08000d21 	.word	0x08000d21
 8000b20:	08000d73 	.word	0x08000d73
 8000b24:	08000dc5 	.word	0x08000dc5
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	48bd      	ldr	r0, [pc, #756]	; (8000e24 <TurnOnAt+0x34c>)
 8000b30:	f001 ffc8 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 fe01 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000b3a:	e01a      	b.n	8000b72 <TurnOnAt+0x9a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	48b8      	ldr	r0, [pc, #736]	; (8000e24 <TurnOnAt+0x34c>)
 8000b44:	f001 ffbe 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f000 fdf7 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000b4e:	4bb6      	ldr	r3, [pc, #728]	; (8000e28 <TurnOnAt+0x350>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	f107 0217 	add.w	r2, r7, #23
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 f954 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000b5e:	f107 010c 	add.w	r1, r7, #12
 8000b62:	230a      	movs	r3, #10
 8000b64:	2208      	movs	r2, #8
 8000b66:	48b1      	ldr	r0, [pc, #708]	; (8000e2c <TurnOnAt+0x354>)
 8000b68:	f005 fc6d 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f000 fde5 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0e1      	beq.n	8000b3c <TurnOnAt+0x64>
		}
		break;
 8000b78:	e14d      	b.n	8000e16 <TurnOnAt+0x33e>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b80:	48a8      	ldr	r0, [pc, #672]	; (8000e24 <TurnOnAt+0x34c>)
 8000b82:	f001 ff9f 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000b86:	200a      	movs	r0, #10
 8000b88:	f000 fdd8 	bl	800173c <HAL_Delay>
		boot[4] = 49;
 8000b8c:	2331      	movs	r3, #49	; 0x31
 8000b8e:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000b90:	e01a      	b.n	8000bc8 <TurnOnAt+0xf0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	48a2      	ldr	r0, [pc, #648]	; (8000e24 <TurnOnAt+0x34c>)
 8000b9a:	f001 ff93 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f000 fdcc 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000ba4:	4ba0      	ldr	r3, [pc, #640]	; (8000e28 <TurnOnAt+0x350>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	f107 0217 	add.w	r2, r7, #23
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f006 f929 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000bb4:	f107 010c 	add.w	r1, r7, #12
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2208      	movs	r2, #8
 8000bbc:	489b      	ldr	r0, [pc, #620]	; (8000e2c <TurnOnAt+0x354>)
 8000bbe:	f005 fc42 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f000 fdba 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0e1      	beq.n	8000b92 <TurnOnAt+0xba>
		}
		break;
 8000bce:	e122      	b.n	8000e16 <TurnOnAt+0x33e>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4893      	ldr	r0, [pc, #588]	; (8000e24 <TurnOnAt+0x34c>)
 8000bd8:	f001 ff74 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 fdad 	bl	800173c <HAL_Delay>
		boot[4] = 50;
 8000be2:	2332      	movs	r3, #50	; 0x32
 8000be4:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000be6:	e01a      	b.n	8000c1e <TurnOnAt+0x146>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	488d      	ldr	r0, [pc, #564]	; (8000e24 <TurnOnAt+0x34c>)
 8000bf0:	f001 ff68 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f000 fda1 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000bfa:	4b8b      	ldr	r3, [pc, #556]	; (8000e28 <TurnOnAt+0x350>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	f107 0217 	add.w	r2, r7, #23
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 f8fe 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000c0a:	f107 010c 	add.w	r1, r7, #12
 8000c0e:	230a      	movs	r3, #10
 8000c10:	2208      	movs	r2, #8
 8000c12:	4886      	ldr	r0, [pc, #536]	; (8000e2c <TurnOnAt+0x354>)
 8000c14:	f005 fc17 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 fd8f 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0e1      	beq.n	8000be8 <TurnOnAt+0x110>
		}
		break;
 8000c24:	e0f7      	b.n	8000e16 <TurnOnAt+0x33e>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4881      	ldr	r0, [pc, #516]	; (8000e30 <TurnOnAt+0x358>)
 8000c2c:	f001 ff4a 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fd83 	bl	800173c <HAL_Delay>
		boot[4] = 51;
 8000c36:	2333      	movs	r3, #51	; 0x33
 8000c38:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000c3a:	e019      	b.n	8000c70 <TurnOnAt+0x198>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2104      	movs	r1, #4
 8000c40:	487b      	ldr	r0, [pc, #492]	; (8000e30 <TurnOnAt+0x358>)
 8000c42:	f001 ff3f 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f000 fd78 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000c4c:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <TurnOnAt+0x350>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	f107 0217 	add.w	r2, r7, #23
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 f8d5 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000c5c:	f107 010c 	add.w	r1, r7, #12
 8000c60:	230a      	movs	r3, #10
 8000c62:	2208      	movs	r2, #8
 8000c64:	4871      	ldr	r0, [pc, #452]	; (8000e2c <TurnOnAt+0x354>)
 8000c66:	f005 fbee 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f000 fd66 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0e2      	beq.n	8000c3c <TurnOnAt+0x164>
		}
		break;
 8000c76:	e0ce      	b.n	8000e16 <TurnOnAt+0x33e>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7e:	4869      	ldr	r0, [pc, #420]	; (8000e24 <TurnOnAt+0x34c>)
 8000c80:	f001 ff20 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 fd59 	bl	800173c <HAL_Delay>
		boot[4] = 52;
 8000c8a:	2334      	movs	r3, #52	; 0x34
 8000c8c:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000c8e:	e01a      	b.n	8000cc6 <TurnOnAt+0x1ee>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4863      	ldr	r0, [pc, #396]	; (8000e24 <TurnOnAt+0x34c>)
 8000c98:	f001 ff14 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f000 fd4d 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000ca2:	4b61      	ldr	r3, [pc, #388]	; (8000e28 <TurnOnAt+0x350>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	f107 0217 	add.w	r2, r7, #23
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 f8aa 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000cb2:	f107 010c 	add.w	r1, r7, #12
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2208      	movs	r2, #8
 8000cba:	485c      	ldr	r0, [pc, #368]	; (8000e2c <TurnOnAt+0x354>)
 8000cbc:	f005 fbc3 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 fd3b 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0e1      	beq.n	8000c90 <TurnOnAt+0x1b8>
		}
		break;
 8000ccc:	e0a3      	b.n	8000e16 <TurnOnAt+0x33e>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4854      	ldr	r0, [pc, #336]	; (8000e24 <TurnOnAt+0x34c>)
 8000cd4:	f001 fef6 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fd2f 	bl	800173c <HAL_Delay>
		boot[4] = 53;
 8000cde:	2335      	movs	r3, #53	; 0x35
 8000ce0:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000ce2:	e019      	b.n	8000d18 <TurnOnAt+0x240>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	484e      	ldr	r0, [pc, #312]	; (8000e24 <TurnOnAt+0x34c>)
 8000cea:	f001 feeb 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f000 fd24 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <TurnOnAt+0x350>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	f107 0217 	add.w	r2, r7, #23
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f006 f881 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	230a      	movs	r3, #10
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	4847      	ldr	r0, [pc, #284]	; (8000e2c <TurnOnAt+0x354>)
 8000d0e:	f005 fb9a 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 fd12 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0e2      	beq.n	8000ce4 <TurnOnAt+0x20c>
		}
		break;
 8000d1e:	e07a      	b.n	8000e16 <TurnOnAt+0x33e>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2108      	movs	r1, #8
 8000d24:	483f      	ldr	r0, [pc, #252]	; (8000e24 <TurnOnAt+0x34c>)
 8000d26:	f001 fecd 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f000 fd06 	bl	800173c <HAL_Delay>
		boot[4] = 54;
 8000d30:	2336      	movs	r3, #54	; 0x36
 8000d32:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000d34:	e019      	b.n	8000d6a <TurnOnAt+0x292>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2108      	movs	r1, #8
 8000d3a:	483a      	ldr	r0, [pc, #232]	; (8000e24 <TurnOnAt+0x34c>)
 8000d3c:	f001 fec2 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f000 fcfb 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <TurnOnAt+0x350>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f107 0217 	add.w	r2, r7, #23
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 f858 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000d56:	f107 010c 	add.w	r1, r7, #12
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	4833      	ldr	r0, [pc, #204]	; (8000e2c <TurnOnAt+0x354>)
 8000d60:	f005 fb71 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000d64:	2002      	movs	r0, #2
 8000d66:	f000 fce9 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0e2      	beq.n	8000d36 <TurnOnAt+0x25e>
		}
		break;
 8000d70:	e051      	b.n	8000e16 <TurnOnAt+0x33e>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2101      	movs	r1, #1
 8000d76:	482b      	ldr	r0, [pc, #172]	; (8000e24 <TurnOnAt+0x34c>)
 8000d78:	f001 fea4 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f000 fcdd 	bl	800173c <HAL_Delay>
		boot[4] = 55;
 8000d82:	2337      	movs	r3, #55	; 0x37
 8000d84:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000d86:	e019      	b.n	8000dbc <TurnOnAt+0x2e4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <TurnOnAt+0x34c>)
 8000d8e:	f001 fe99 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 fcd2 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <TurnOnAt+0x350>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	f107 0217 	add.w	r2, r7, #23
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f82f 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000da8:	f107 010c 	add.w	r1, r7, #12
 8000dac:	230a      	movs	r3, #10
 8000dae:	2208      	movs	r2, #8
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <TurnOnAt+0x354>)
 8000db2:	f005 fb48 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 fcc0 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0e2      	beq.n	8000d88 <TurnOnAt+0x2b0>
		}
		break;
 8000dc2:	e028      	b.n	8000e16 <TurnOnAt+0x33e>
	case 8:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <TurnOnAt+0x34c>)
 8000dca:	f001 fe7b 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f000 fcb4 	bl	800173c <HAL_Delay>
		boot[4] = 56;
 8000dd4:	2338      	movs	r3, #56	; 0x38
 8000dd6:	743b      	strb	r3, [r7, #16]
		while(bootState==0){
 8000dd8:	e019      	b.n	8000e0e <TurnOnAt+0x336>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <TurnOnAt+0x34c>)
 8000de0:	f001 fe70 	bl	8002ac4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000de4:	200a      	movs	r0, #10
 8000de6:	f000 fca9 	bl	800173c <HAL_Delay>
			VL53L1X_BootState(dev, &bootState);
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <TurnOnAt+0x350>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	f107 0217 	add.w	r2, r7, #23
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 f806 	bl	8006e06 <VL53L1X_BootState>
			HAL_UART_Transmit(&huart2, boot, 8, 10);
 8000dfa:	f107 010c 	add.w	r1, r7, #12
 8000dfe:	230a      	movs	r3, #10
 8000e00:	2208      	movs	r2, #8
 8000e02:	480a      	ldr	r0, [pc, #40]	; (8000e2c <TurnOnAt+0x354>)
 8000e04:	f005 fb1f 	bl	8006446 <HAL_UART_Transmit>
			HAL_Delay(2);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 fc97 	bl	800173c <HAL_Delay>
		while(bootState==0){
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0e2      	beq.n	8000dda <TurnOnAt+0x302>
		}
		break;
 8000e14:	bf00      	nop
	default:
		;
		// shit
	}
	return bootState;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	080080f8 	.word	0x080080f8
 8000e24:	40020800 	.word	0x40020800
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000160 	.word	0x20000160
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <ChangeAddresses>:

uint16_t ChangeAddresses(uint8_t num_of_tof) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t success = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
	TurnOffAll();
 8000e42:	f7ff fe0f 	bl	8000a64 <TurnOffAll>
	HAL_Delay(10);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f000 fc78 	bl	800173c <HAL_Delay>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73bb      	strb	r3, [r7, #14]
 8000e50:	e033      	b.n	8000eba <ChangeAddresses+0x86>
		success *= TurnOnAt(i);
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe3f 	bl	8000ad8 <TurnOnAt>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	fb12 f303 	smulbb	r3, r2, r3
 8000e64:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8000e66:	2005      	movs	r0, #5
 8000e68:	f000 fc68 	bl	800173c <HAL_Delay>
		printf("try init: %d\r\n", i);
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <ChangeAddresses+0x9c>)
 8000e72:	f006 f9c5 	bl	8007200 <iprintf>
		VL53L1X_SensorInit(dev);
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <ChangeAddresses+0xa0>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fe76 	bl	8006b6c <VL53L1X_SensorInit>
		printf("try addr change: %d\r\n", i);
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <ChangeAddresses+0xa4>)
 8000e86:	f006 f9bb 	bl	8007200 <iprintf>
		VL53L1X_SetI2CAddress(dev, devs[i]);
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <ChangeAddresses+0xa0>)
 8000e8c:	881a      	ldrh	r2, [r3, #0]
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	4912      	ldr	r1, [pc, #72]	; (8000edc <ChangeAddresses+0xa8>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4610      	mov	r0, r2
 8000e98:	f005 fe4a 	bl	8006b30 <VL53L1X_SetI2CAddress>
		VL53L1X_StartRanging(devs[i]);
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <ChangeAddresses+0xa8>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 ff47 	bl	8006d38 <VL53L1X_StartRanging>
		printf("done: %d\r\n", i);
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	4619      	mov	r1, r3
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <ChangeAddresses+0xac>)
 8000eb0:	f006 f9a6 	bl	8007200 <iprintf>
	for (uint8_t i = 0; i != num_of_tof; ++i) {
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73bb      	strb	r3, [r7, #14]
 8000eba:	7bba      	ldrb	r2, [r7, #14]
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d1c7      	bne.n	8000e52 <ChangeAddresses+0x1e>
	}
	return success;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	08008100 	.word	0x08008100
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	08008110 	.word	0x08008110
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	08008128 	.word	0x08008128

08000ee4 <GetAllData>:

uint8_t GetAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
	//printf("getting %d\r\n", 0);
	//HAL_Delay(2);
	//printf("WTF1 %d\r\n", 0);
	VL53L1X_GetDistance(devs[0], &dis[0]);
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <GetAllData+0x8c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f005 ffa3 	bl	8006e44 <VL53L1X_GetDistance>
	//printf("WTF2 %d\r\n", 0);
	VL53L1X_ClearInterrupt(devs[0]);
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <GetAllData+0x8c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 fe9d 	bl	8006c44 <VL53L1X_ClearInterrupt>
	//printf("WTF3 %d\r\n", 0);

	uint8_t dataReady = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 1; i != num_of_tof; ++i) {
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e024      	b.n	8000f5e <GetAllData+0x7a>
		dataReady = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73bb      	strb	r3, [r7, #14]
		while (dataReady == 0){
 8000f18:	e009      	b.n	8000f2e <GetAllData+0x4a>
			VL53L1X_CheckForDataReady(devs[i], &dataReady);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <GetAllData+0x8c>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f107 020e 	add.w	r2, r7, #14
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 ff35 	bl	8006d98 <VL53L1X_CheckForDataReady>
		while (dataReady == 0){
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f2      	beq.n	8000f1a <GetAllData+0x36>
			//printf("getting %d\r\n", i);
			//HAL_Delay(2);
		}
		VL53L1X_GetDistance(devs[i], &dis[i]);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <GetAllData+0x8c>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f005 ff7d 	bl	8006e44 <VL53L1X_GetDistance>
		VL53L1X_ClearInterrupt(devs[i]);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <GetAllData+0x8c>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fe76 	bl	8006c44 <VL53L1X_ClearInterrupt>
	for (uint8_t i = 1; i != num_of_tof; ++i) {
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d1d6      	bne.n	8000f14 <GetAllData+0x30>
	}
	//HAL_Delay(50);
}
 8000f66:	bf00      	nop
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000004 	.word	0x20000004

08000f74 <PrintAllData>:

void PrintAllData(uint8_t num_of_tof, uint16_t dis[num_of_tof]) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i != num_of_tof; ++i) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e00c      	b.n	8000fa0 <PrintAllData+0x2c>
		printf("%d:%d\r\n", i, dis[i]);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <PrintAllData+0x40>)
 8000f96:	f006 f933 	bl	8007200 <iprintf>
	for (int i = 0; i != num_of_tof; ++i) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1ee      	bne.n	8000f86 <PrintAllData+0x12>
	}
	//HAL_Delay(500);
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08008134 	.word	0x08008134

08000fb8 <CAN_Filter_Init>:

void CAN_Filter_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	//Receiving CAN data via 0x102~0x10E
//	canFilter1.FilterMaskIdHigh = 0x7F3 << 5; // Shift 5 bit
//	canFilter1.FilterIdHigh = 0x106 << 5;
//	canFilter1.FilterMaskIdLow = 0x7F3 << 5; // Shift 5 bit
//	canFilter1.FilterIdLow = 0x106 << 5;
	canFilter1.FilterMaskIdHigh = 0x000 << 5; // Shift 5 bit
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	canFilter1.FilterIdHigh = 0x000 << 5;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	canFilter1.FilterMaskIdLow = 0x000 << 5; // Shift 5 bit
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
	canFilter1.FilterIdLow = 0x000 << 5;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
	canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
	canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
	canFilter1.FilterBank = 0;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
	canFilter1.FilterActivation = ENABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <CAN_Filter_Init+0x68>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	621a      	str	r2, [r3, #32]

	/* Set options for messages; ID type(standard), Length(8 byte) */
	can1TxHeader.RTR = CAN_RTR_DATA;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <CAN_Filter_Init+0x6c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	can1TxHeader.IDE = CAN_ID_STD;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <CAN_Filter_Init+0x6c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
	can1TxHeader.DLC = 8;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <CAN_Filter_Init+0x6c>)
 8001000:	2208      	movs	r2, #8
 8001002:	611a      	str	r2, [r3, #16]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8001004:	4906      	ldr	r1, [pc, #24]	; (8001020 <CAN_Filter_Init+0x68>)
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <CAN_Filter_Init+0x70>)
 8001008:	f000 fcb8 	bl	800197c <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100c:	2102      	movs	r1, #2
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <CAN_Filter_Init+0x70>)
 8001010:	f000 fffa 	bl	8002008 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <CAN_Filter_Init+0x70>)
 8001016:	f000 fd91 	bl	8001b3c <HAL_CAN_Start>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001a8 	.word	0x200001a8
 8001024:	200001ec 	.word	0x200001ec
 8001028:	2000009c 	.word	0x2000009c

0800102c <CAN_Send>:

void CAN_Send(uint8_t ID, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4623      	mov	r3, r4
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	4603      	mov	r3, r0
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	460b      	mov	r3, r1
 8001044:	717b      	strb	r3, [r7, #5]
 8001046:	4613      	mov	r3, r2
 8001048:	713b      	strb	r3, [r7, #4]
	  /* Set options for messages; Address */
	  can1TxHeader.StdId = ID;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <CAN_Send+0x7c>)
 800104e:	6013      	str	r3, [r2, #0]

	  can1Tx0Data[7] = data7;
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <CAN_Send+0x80>)
 8001052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001056:	71d3      	strb	r3, [r2, #7]
	  can1Tx0Data[6] = data6;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <CAN_Send+0x80>)
 800105a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800105e:	7193      	strb	r3, [r2, #6]
	  can1Tx0Data[5] = data5;
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <CAN_Send+0x80>)
 8001062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001066:	7153      	strb	r3, [r2, #5]
	  can1Tx0Data[4] = data4;
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <CAN_Send+0x80>)
 800106a:	7f3b      	ldrb	r3, [r7, #28]
 800106c:	7113      	strb	r3, [r2, #4]
	  can1Tx0Data[3] = data3;
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <CAN_Send+0x80>)
 8001070:	7e3b      	ldrb	r3, [r7, #24]
 8001072:	70d3      	strb	r3, [r2, #3]
	  can1Tx0Data[2] = data2;
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <CAN_Send+0x80>)
 8001076:	793b      	ldrb	r3, [r7, #4]
 8001078:	7093      	strb	r3, [r2, #2]
	  can1Tx0Data[1] = data1;
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <CAN_Send+0x80>)
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	7053      	strb	r3, [r2, #1]
	  can1Tx0Data[0] = data0;
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <CAN_Send+0x80>)
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	7013      	strb	r3, [r2, #0]
//	  can1Tx0Data[3] = 108;
//	  can1Tx0Data[2] = 108;
//	  can1Tx0Data[1] = 101;
//	  can1Tx0Data[0] = 72;

	  TxMailBox1 = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <CAN_Send+0x84>)
 8001088:	f000 fe77 	bl	8001d7a <HAL_CAN_GetTxMailboxesFreeLevel>
 800108c:	4603      	mov	r3, r0
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <CAN_Send+0x88>)
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, &can1Tx0Data[0], &TxMailBox1);
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <CAN_Send+0x88>)
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <CAN_Send+0x80>)
 8001096:	4904      	ldr	r1, [pc, #16]	; (80010a8 <CAN_Send+0x7c>)
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <CAN_Send+0x84>)
 800109a:	f000 fd93 	bl	8001bc4 <HAL_CAN_AddTxMessage>
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001ec 	.word	0x200001ec
 80010ac:	20000210 	.word	0x20000210
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	2000020c 	.word	0x2000020c

080010b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Receiving CAN Data */
/* Get CAN1 message Through FIFO0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1RxHeader, &can1Rx0Data[0]);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80010c8:	f000 fe8c 	bl	8001de4 <HAL_CAN_GetRxMessage>
//	can1_rx0_flag = 1;
	printf("1231241\r\n");
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80010ce:	f006 f91d 	bl	800730c <puts>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000204 	.word	0x20000204
 80010e0:	200001d0 	.word	0x200001d0
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	0800813c 	.word	0x0800813c

080010ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	printf("%d\r\n", dis[0]);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010fe:	f006 f87f 	bl	8007200 <iprintf>
	//CAN_Send(0x10, dis[0] >> 8, dis[0] & 0xFF, dis[1] >> 8, dis[1] & 0xFF, dis[2] >> 8, dis[2] & 0xFF, dis[3] >> 8, dis[3] & 0xFF);
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001a4 	.word	0x200001a4
 8001110:	08008148 	.word	0x08008148

08001114 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af06      	add	r7, sp, #24
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
	GetAllData(nof, dis);
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_GPIO_EXTI_Callback+0x98>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fedb 	bl	8000ee4 <GetAllData>
	CAN_Send(0x10, dis[0] >> 8, dis[0] & 0xFF, dis[1] >> 8, dis[1] & 0xFF, dis[2] >> 8, dis[2] & 0xFF, dis[3] >> 8, dis[3] & 0xFF);
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2dd      	uxtb	r5, r3
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b2de      	uxtb	r6, r3
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3302      	adds	r3, #2
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	fa5f fc83 	uxtb.w	ip, r3
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3302      	adds	r3, #2
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	3204      	adds	r2, #4
 8001162:	8812      	ldrh	r2, [r2, #0]
 8001164:	0a12      	lsrs	r2, r2, #8
 8001166:	b292      	uxth	r2, r2
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	4911      	ldr	r1, [pc, #68]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800116c:	6809      	ldr	r1, [r1, #0]
 800116e:	3104      	adds	r1, #4
 8001170:	8809      	ldrh	r1, [r1, #0]
 8001172:	b2c9      	uxtb	r1, r1
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001176:	6800      	ldr	r0, [r0, #0]
 8001178:	3006      	adds	r0, #6
 800117a:	8800      	ldrh	r0, [r0, #0]
 800117c:	0a00      	lsrs	r0, r0, #8
 800117e:	b280      	uxth	r0, r0
 8001180:	b2c0      	uxtb	r0, r0
 8001182:	4c0b      	ldr	r4, [pc, #44]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001184:	6824      	ldr	r4, [r4, #0]
 8001186:	3406      	adds	r4, #6
 8001188:	8824      	ldrh	r4, [r4, #0]
 800118a:	b2e4      	uxtb	r4, r4
 800118c:	9404      	str	r4, [sp, #16]
 800118e:	9003      	str	r0, [sp, #12]
 8001190:	9102      	str	r1, [sp, #8]
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4663      	mov	r3, ip
 8001198:	4632      	mov	r2, r6
 800119a:	4629      	mov	r1, r5
 800119c:	2010      	movs	r0, #16
 800119e:	f7ff ff45 	bl	800102c <CAN_Send>
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000002 	.word	0x20000002
 80011b0:	200001a4 	.word	0x200001a4

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fe:	2007      	movs	r0, #7
 8001200:	f001 fa4c 	bl	800269c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_CAN_MspInit+0x94>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d134      	bne.n	800129c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 800123c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_CAN_MspInit+0x98>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800127c:	2309      	movs	r3, #9
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <HAL_CAN_MspInit+0x9c>)
 8001288:	f001 fa88 	bl	800279c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2014      	movs	r0, #20
 8001292:	f001 fa0e 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001296:	2014      	movs	r0, #20
 8001298:	f001 fa27 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40006400 	.word	0x40006400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_I2C_MspInit+0x94>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d134      	bne.n	800133c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_I2C_MspInit+0x98>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_I2C_MspInit+0x98>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_I2C_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_I2C_MspInit+0x9c>)
 800130c:	f001 fa46 	bl	800279c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_I2C_MspInit+0x98>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_I2C_MspInit+0x98>)
 800131a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_I2C_MspInit+0x98>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	201f      	movs	r0, #31
 8001332:	f001 f9be 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001336:	201f      	movs	r0, #31
 8001338:	f001 f9d7 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_TIM_Base_MspInit+0x48>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d115      	bne.n	800138e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_Base_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_TIM_Base_MspInit+0x4c>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_TIM_Base_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2037      	movs	r0, #55	; 0x37
 8001384:	f001 f995 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001388:	2037      	movs	r0, #55	; 0x37
 800138a:	f001 f9ae 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40001400 	.word	0x40001400
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_UART_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12b      	bne.n	800141a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140a:	2307      	movs	r3, #7
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_UART_MspInit+0x8c>)
 8001416:	f001 f9c1 	bl	800279c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40004400 	.word	0x40004400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147c:	f000 f93e 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001488:	2002      	movs	r0, #2
 800148a:	f001 fb35 	bl	8002af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <CAN1_RX0_IRQHandler+0x10>)
 800149a:	f000 fddb 	bl	8002054 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000009c 	.word	0x2000009c

080014a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <I2C1_EV_IRQHandler+0x10>)
 80014ae:	f001 ffa3 	bl	80033f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000c4 	.word	0x200000c4

080014bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM7_IRQHandler+0x10>)
 80014c2:	f004 fd12 	bl	8005eea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000118 	.word	0x20000118

080014d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
	}

return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:
	}
	return len;
}

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f005 fd50 	bl	8007048 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000218 	.word	0x20000218
 80015dc:	20000330 	.word	0x20000330

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd7 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f005 fd0f 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7fe ffd1 	bl	80005dc <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001648:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 800164c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001650:	20000330 	.word	0x20000330

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f001 f80b 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fd98 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f831 	bl	8002722 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 ffeb 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000010 	.word	0x20000010
 80016f4:	20000018 	.word	0x20000018
 80016f8:	20000014 	.word	0x20000014

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000018 	.word	0x20000018
 8001720:	2000021c 	.word	0x2000021c

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000021c 	.word	0x2000021c

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000018 	.word	0x20000018

08001784 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0ed      	b.n	8001972 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fd34 	bl	8001210 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b8:	f7ff ffb4 	bl	8001724 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017be:	e012      	b.n	80017e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c0:	f7ff ffb0 	bl	8001724 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b0a      	cmp	r3, #10
 80017cc:	d90b      	bls.n	80017e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0c5      	b.n	8001972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0e5      	beq.n	80017c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0202 	bic.w	r2, r2, #2
 8001802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001804:	f7ff ff8e 	bl	8001724 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800180a:	e012      	b.n	8001832 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800180c:	f7ff ff8a 	bl	8001724 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d90b      	bls.n	8001832 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2205      	movs	r2, #5
 800182a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e09f      	b.n	8001972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e5      	bne.n	800180c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e1b      	ldrb	r3, [r3, #24]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e007      	b.n	800186a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7e5b      	ldrb	r3, [r3, #25]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e007      	b.n	8001894 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e9b      	ldrb	r3, [r3, #26]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e007      	b.n	80018be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0220 	bic.w	r2, r2, #32
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7edb      	ldrb	r3, [r3, #27]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0210 	bic.w	r2, r2, #16
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e007      	b.n	80018e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0210 	orr.w	r2, r2, #16
 80018e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7f1b      	ldrb	r3, [r3, #28]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0208 	orr.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e007      	b.n	8001912 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0208 	bic.w	r2, r2, #8
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7f5b      	ldrb	r3, [r3, #29]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e007      	b.n	800193c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	ea42 0103 	orr.w	r1, r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001992:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001994:	7cfb      	ldrb	r3, [r7, #19]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d003      	beq.n	80019a2 <HAL_CAN_ConfigFilter+0x26>
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 80be 	bne.w	8001b1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_CAN_ConfigFilter+0x1bc>)
 80019a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2201      	movs	r2, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d123      	bne.n	8001a4c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3248      	adds	r2, #72	; 0x48
 8001a2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	3348      	adds	r3, #72	; 0x48
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d122      	bne.n	8001a9a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3248      	adds	r2, #72	; 0x48
 8001a7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	3348      	adds	r3, #72	; 0x48
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ab4:	e007      	b.n	8001ac6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b10:	f023 0201 	bic.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40006400 	.word	0x40006400

08001b3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d12e      	bne.n	8001bae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fddc 	bl	8001724 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b6e:	e012      	b.n	8001b96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b70:	f7ff fdd8 	bl	8001724 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d90b      	bls.n	8001b96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e012      	b.n	8001bbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e5      	bne.n	8001b70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e006      	b.n	8001bbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_AddTxMessage+0x2c>
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f040 80b8 	bne.w	8001d60 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a0 	beq.w	8001d50 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	0e1b      	lsrs	r3, r3, #24
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d907      	bls.n	8001c30 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e09e      	b.n	8001d6e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c30:	2201      	movs	r2, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	409a      	lsls	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	6809      	ldr	r1, [r1, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3318      	adds	r3, #24
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	440b      	add	r3, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00f      	b.n	8001c7e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3318      	adds	r3, #24
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3304      	adds	r3, #4
 8001c90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	7d1b      	ldrb	r3, [r3, #20]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d111      	bne.n	8001cbe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	3304      	adds	r3, #4
 8001cbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	061a      	lsls	r2, r3, #24
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3305      	adds	r3, #5
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	3204      	adds	r2, #4
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	6811      	ldr	r1, [r2, #0]
 8001ce6:	ea43 0200 	orr.w	r2, r3, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001cf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	061a      	lsls	r2, r3, #24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3302      	adds	r3, #2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4313      	orrs	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	4610      	mov	r0, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	ea43 0200 	orr.w	r2, r3, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3318      	adds	r3, #24
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3318      	adds	r3, #24
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e00e      	b.n	8001d6e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e006      	b.n	8001d6e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d002      	beq.n	8001d9a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d11d      	bne.n	8001dd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d003      	beq.n	8001e08 <HAL_CAN_GetRxMessage+0x24>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	f040 80f3 	bne.w	8001fee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10e      	bne.n	8001e2c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0e7      	b.n	8001ffc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0d8      	b.n	8001ffc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	331b      	adds	r3, #27
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0204 	and.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	331b      	adds	r3, #27
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0d5b      	lsrs	r3, r3, #21
 8001e78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e00b      	b.n	8001e9a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	331b      	adds	r3, #27
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	331b      	adds	r3, #27
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0202 	and.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	331b      	adds	r3, #27
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	331b      	adds	r3, #27
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	331b      	adds	r3, #27
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0a1a      	lsrs	r2, r3, #8
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0c1a      	lsrs	r2, r3, #16
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e1a      	lsrs	r2, r3, #24
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	3303      	adds	r3, #3
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0a1a      	lsrs	r2, r3, #8
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3305      	adds	r3, #5
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0c1a      	lsrs	r2, r3, #16
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e1a      	lsrs	r2, r3, #24
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	3307      	adds	r3, #7
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d108      	bne.n	8001fda <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	e007      	b.n	8001fea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e006      	b.n	8001ffc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
  }
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002018:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d002      	beq.n	8002026 <HAL_CAN_ActivateNotification+0x1e>
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d109      	bne.n	800203a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6959      	ldr	r1, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e006      	b.n	8002048 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d07c      	beq.n	8002194 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f983 	bl	80023c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80020bc:	e016      	b.n	80020ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	e00c      	b.n	80020ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	e002      	b.n	80020ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f989 	bl	80023fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f963 	bl	80023d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002110:	e016      	b.n	8002140 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e00c      	b.n	8002140 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
 8002138:	e002      	b.n	8002140 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f969 	bl	8002412 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d024      	beq.n	8002194 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002152:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f943 	bl	80023ea <HAL_CAN_TxMailbox2CompleteCallback>
 8002164:	e016      	b.n	8002194 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e00c      	b.n	8002194 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	e002      	b.n	8002194 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f949 	bl	8002426 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2210      	movs	r2, #16
 80021b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2208      	movs	r2, #8
 80021d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f930 	bl	800243a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff60 	bl	80010b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2210      	movs	r2, #16
 800221a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f912 	bl	8002462 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8f9 	bl	800244e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2210      	movs	r2, #16
 8002276:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f8fc 	bl	8002476 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2208      	movs	r2, #8
 8002298:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8f5 	bl	800248a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07b      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d072      	beq.n	800239a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230e:	2b00      	cmp	r3, #0
 8002310:	d043      	beq.n	800239a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03e      	beq.n	800239a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002322:	2b60      	cmp	r3, #96	; 0x60
 8002324:	d02b      	beq.n	800237e <HAL_CAN_IRQHandler+0x32a>
 8002326:	2b60      	cmp	r3, #96	; 0x60
 8002328:	d82e      	bhi.n	8002388 <HAL_CAN_IRQHandler+0x334>
 800232a:	2b50      	cmp	r3, #80	; 0x50
 800232c:	d022      	beq.n	8002374 <HAL_CAN_IRQHandler+0x320>
 800232e:	2b50      	cmp	r3, #80	; 0x50
 8002330:	d82a      	bhi.n	8002388 <HAL_CAN_IRQHandler+0x334>
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d019      	beq.n	800236a <HAL_CAN_IRQHandler+0x316>
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d826      	bhi.n	8002388 <HAL_CAN_IRQHandler+0x334>
 800233a:	2b30      	cmp	r3, #48	; 0x30
 800233c:	d010      	beq.n	8002360 <HAL_CAN_IRQHandler+0x30c>
 800233e:	2b30      	cmp	r3, #48	; 0x30
 8002340:	d822      	bhi.n	8002388 <HAL_CAN_IRQHandler+0x334>
 8002342:	2b10      	cmp	r3, #16
 8002344:	d002      	beq.n	800234c <HAL_CAN_IRQHandler+0x2f8>
 8002346:	2b20      	cmp	r3, #32
 8002348:	d005      	beq.n	8002356 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800234a:	e01d      	b.n	8002388 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002354:	e019      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235e:	e014      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002368:	e00f      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002372:	e00a      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800237c:	e005      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002386:	e000      	b.n	800238a <HAL_CAN_IRQHandler+0x336>
            break;
 8002388:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002398:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f872 	bl	800249e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db12      	blt.n	800258c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	490a      	ldr	r1, [pc, #40]	; (8002598 <__NVIC_DisableIRQ+0x44>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	3320      	adds	r3, #32
 800257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002580:	f3bf 8f4f 	dsb	sy
}
 8002584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002586:	f3bf 8f6f 	isb	sy
}
 800258a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff8e 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff05 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff1a 	bl	80024fc <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff8e 	bl	80025f0 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5d 	bl	800259c <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff0d 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff1d 	bl	8002554 <__NVIC_DisableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff94 	bl	8002658 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d004      	beq.n	8002758 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e00c      	b.n	8002772 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2205      	movs	r2, #5
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278c:	b2db      	uxtb	r3, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e165      	b.n	8002a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	f040 8154 	bne.w	8002a7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d005      	beq.n	80027ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d130      	bne.n	8002850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d017      	beq.n	800288c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d123      	bne.n	80028e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80ae 	beq.w	8002a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_GPIO_Init+0x300>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a5c      	ldr	r2, [pc, #368]	; (8002a9c <HAL_GPIO_Init+0x300>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <HAL_GPIO_Init+0x300>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_GPIO_Init+0x304>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_Init+0x308>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x21a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4e      	ldr	r2, [pc, #312]	; (8002aa8 <HAL_GPIO_Init+0x30c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x216>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_GPIO_Init+0x310>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x212>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <HAL_GPIO_Init+0x314>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_GPIO_Init+0x318>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x20a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_GPIO_Init+0x31c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x206>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a49      	ldr	r2, [pc, #292]	; (8002abc <HAL_GPIO_Init+0x320>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x202>
 800299a:	2306      	movs	r3, #6
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x21c>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_GPIO_Init+0x304>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_GPIO_Init+0x324>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae96 	bls.w	80027b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae0:	e003      	b.n	8002aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	041a      	lsls	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fafc 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e12b      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fbae 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f002 fc68 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4a81      	ldr	r2, [pc, #516]	; (8002d9c <HAL_I2C_Init+0x274>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d807      	bhi.n	8002bac <HAL_I2C_Init+0x84>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a80      	ldr	r2, [pc, #512]	; (8002da0 <HAL_I2C_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf94      	ite	ls
 8002ba4:	2301      	movls	r3, #1
 8002ba6:	2300      	movhi	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e006      	b.n	8002bba <HAL_I2C_Init+0x92>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a7d      	ldr	r2, [pc, #500]	; (8002da4 <HAL_I2C_Init+0x27c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0e7      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a78      	ldr	r2, [pc, #480]	; (8002da8 <HAL_I2C_Init+0x280>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_I2C_Init+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d802      	bhi.n	8002bfc <HAL_I2C_Init+0xd4>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	e009      	b.n	8002c10 <HAL_I2C_Init+0xe8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a69      	ldr	r2, [pc, #420]	; (8002dac <HAL_I2C_Init+0x284>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	3301      	adds	r3, #1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	495c      	ldr	r1, [pc, #368]	; (8002d9c <HAL_I2C_Init+0x274>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	d819      	bhi.n	8002c64 <HAL_I2C_Init+0x13c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e59      	subs	r1, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c44:	400b      	ands	r3, r1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_I2C_Init+0x138>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e59      	subs	r1, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	e051      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e04f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_I2C_Init+0x168>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_I2C_Init+0x18e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	0099      	lsls	r1, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x196>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_I2C_Init+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	440b      	add	r3, r1
 8002cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6809      	ldr	r1, [r1, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6911      	ldr	r1, [r2, #16]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	000186a0 	.word	0x000186a0
 8002da0:	001e847f 	.word	0x001e847f
 8002da4:	003d08ff 	.word	0x003d08ff
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	10624dd3 	.word	0x10624dd3

08002db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7fe fcae 	bl	8001724 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	f040 80e0 	bne.w	8002f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2319      	movs	r3, #25
 8002dde:	2201      	movs	r2, #1
 8002de0:	4970      	ldr	r1, [pc, #448]	; (8002fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f001 ffd0 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0d3      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2C_Master_Transmit+0x50>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0cc      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d007      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2221      	movs	r2, #33	; 0x21
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2210      	movs	r2, #16
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	893a      	ldrh	r2, [r7, #8]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a50      	ldr	r2, [pc, #320]	; (8002fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f001 fd92 	bl	8004998 <I2C_MasterRequestWrite>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e08d      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e94:	e066      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f002 f84a 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06b      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d11b      	bne.n	8002f38 <HAL_I2C_Master_Transmit+0x188>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d017      	beq.n	8002f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	6a39      	ldr	r1, [r7, #32]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f002 f83a 	bl	8004fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d107      	bne.n	8002f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e01a      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d194      	bne.n	8002e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	00100002 	.word	0x00100002
 8002fa8:	ffff0000 	.word	0xffff0000

08002fac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7fe fbb0 	bl	8001724 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	f040 820b 	bne.w	80033ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	497c      	ldr	r1, [pc, #496]	; (80031d0 <HAL_I2C_Master_Receive+0x224>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f001 fed2 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e1fe      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_I2C_Master_Receive+0x50>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e1f7      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d007      	beq.n	8003022 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2222      	movs	r2, #34	; 0x22
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2210      	movs	r2, #16
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_I2C_Master_Receive+0x228>)
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003064:	8979      	ldrh	r1, [r7, #10]
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f001 fd16 	bl	8004a9c <I2C_MasterRequestRead>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1b8      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d113      	bne.n	80030aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e18c      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d11b      	bne.n	80030ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e16c      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d11b      	bne.n	800312a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	e14c      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003150:	e138      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b03      	cmp	r3, #3
 8003158:	f200 80f1 	bhi.w	800333e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b01      	cmp	r3, #1
 8003162:	d123      	bne.n	80031ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f001 ff97 	bl	800509c <I2C_WaitOnRXNEFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e139      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031aa:	e10b      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d14e      	bne.n	8003252 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	2200      	movs	r2, #0
 80031bc:	4906      	ldr	r1, [pc, #24]	; (80031d8 <HAL_I2C_Master_Receive+0x22c>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f001 fde2 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e10e      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
 80031ce:	bf00      	nop
 80031d0:	00100002 	.word	0x00100002
 80031d4:	ffff0000 	.word	0xffff0000
 80031d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003250:	e0b8      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	4966      	ldr	r1, [pc, #408]	; (80033f4 <HAL_I2C_Master_Receive+0x448>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f001 fd93 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0bf      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2200      	movs	r2, #0
 80032b6:	494f      	ldr	r1, [pc, #316]	; (80033f4 <HAL_I2C_Master_Receive+0x448>)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f001 fd65 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e091      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800333c:	e042      	b.n	80033c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f001 feaa 	bl	800509c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e04c      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d118      	bne.n	80033c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f47f aec2 	bne.w	8003152 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	00010004 	.word	0x00010004

080033f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003418:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d003      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x38>
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	f040 80c1 	bne.w	80035b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_I2C_EV_IRQHandler+0x6e>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003450:	d003      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0x62>
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003458:	d101      	bne.n	800345e <HAL_I2C_EV_IRQHandler+0x66>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_I2C_EV_IRQHandler+0x68>
 800345e:	2300      	movs	r3, #0
 8003460:	2b01      	cmp	r3, #1
 8003462:	f000 8132 	beq.w	80036ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x92>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f001 fe92 	bl	80051a6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fcdc 	bl	8003e40 <I2C_Master_SB>
 8003488:	e092      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xb2>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fd52 	bl	8003f4c <I2C_Master_ADD10>
 80034a8:	e082      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0xd2>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fd6c 	bl	8003fa0 <I2C_Master_ADDR>
 80034c8:	e072      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03b      	beq.n	800354e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e4:	f000 80f3 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	09db      	lsrs	r3, r3, #7
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00f      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f94c 	bl	80037aa <I2C_MasterTransmit_TXE>
 8003512:	e04d      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80d6 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80cf 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	2b21      	cmp	r3, #33	; 0x21
 8003534:	d103      	bne.n	800353e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9d3 	bl	80038e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353c:	e0c7      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	f040 80c4 	bne.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa41 	bl	80039ce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354c:	e0bf      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355c:	f000 80b7 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fab6 	bl	8003af6 <I2C_MasterReceive_RXNE>
 800358a:	e011      	b.n	80035b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 809a 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8093 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb5f 	bl	8003c6c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ae:	e08e      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80035b0:	e08d      	b.n	80036ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e007      	b.n	80035d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x20e>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 ff1d 	bl	800443e <I2C_Slave_ADDR>
 8003604:	e066      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x22e>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	0a5b      	lsrs	r3, r3, #9
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 ff58 	bl	80044d4 <I2C_Slave_STOPF>
 8003624:	e056      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d002      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0x23a>
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	2b29      	cmp	r3, #41	; 0x29
 8003630:	d125      	bne.n	800367e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	09db      	lsrs	r3, r3, #7
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00f      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0a9b      	lsrs	r3, r3, #10
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fe33 	bl	80042c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365c:	e039      	b.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d033      	beq.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0a5b      	lsrs	r3, r3, #9
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02d      	beq.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fe60 	bl	800433c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367c:	e029      	b.n	80036d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00f      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	0a9b      	lsrs	r3, r3, #10
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fe6b 	bl	800437e <I2C_SlaveReceive_RXNE>
 80036a8:	e014      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0a5b      	lsrs	r3, r3, #9
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fe99 	bl	80043fa <I2C_SlaveReceive_BTF>
 80036c8:	e004      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
 8003736:	4613      	mov	r3, r2
 8003738:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d150      	bne.n	8003872 <I2C_MasterTransmit_TXE+0xc8>
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b21      	cmp	r3, #33	; 0x21
 80037d4:	d14d      	bne.n	8003872 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d01d      	beq.n	8003818 <I2C_MasterTransmit_TXE+0x6e>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d01a      	beq.n	8003818 <I2C_MasterTransmit_TXE+0x6e>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e8:	d016      	beq.n	8003818 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2211      	movs	r2, #17
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff62 	bl	80036da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003816:	e060      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003826:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d107      	bne.n	8003862 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff7d 	bl	800375a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003860:	e03b      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff35 	bl	80036da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003870:	e033      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d005      	beq.n	8003884 <I2C_MasterTransmit_TXE+0xda>
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d12d      	bne.n	80038da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b22      	cmp	r3, #34	; 0x22
 8003882:	d12a      	bne.n	80038da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800389e:	e01c      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d103      	bne.n	80038b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f88e 	bl	80039ce <I2C_MemoryTransmit_TXE_BTF>
}
 80038b2:	e012      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038d8:	e7ff      	b.n	80038da <I2C_MasterTransmit_TXE+0x130>
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b21      	cmp	r3, #33	; 0x21
 80038fa:	d164      	bne.n	80039c6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800392a:	e04c      	b.n	80039c6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d01d      	beq.n	800396e <I2C_MasterTransmit_BTF+0x8c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b20      	cmp	r3, #32
 8003936:	d01a      	beq.n	800396e <I2C_MasterTransmit_BTF+0x8c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393e:	d016      	beq.n	800396e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2211      	movs	r2, #17
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff feb7 	bl	80036da <HAL_I2C_MasterTxCpltCallback>
}
 800396c:	e02b      	b.n	80039c6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fed2 	bl	800375a <HAL_I2C_MemTxCpltCallback>
}
 80039b6:	e006      	b.n	80039c6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fe8a 	bl	80036da <HAL_I2C_MasterTxCpltCallback>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10b      	bne.n	8003a06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a04:	e073      	b.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	121b      	asrs	r3, r3, #8
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a20:	e065      	b.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10b      	bne.n	8003a42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a40:	e055      	b.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d151      	bne.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b22      	cmp	r3, #34	; 0x22
 8003a4e:	d10d      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a6a:	e040      	b.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b21      	cmp	r3, #33	; 0x21
 8003a7a:	d112      	bne.n	8003aa2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aa0:	e025      	b.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d120      	bne.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b21      	cmp	r3, #33	; 0x21
 8003ab0:	d11d      	bne.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fe36 	bl	800375a <HAL_I2C_MemTxCpltCallback>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b22      	cmp	r3, #34	; 0x22
 8003b08:	f040 80ac 	bne.w	8003c64 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d921      	bls.n	8003b5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	f040 808c 	bne.w	8003c64 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b5c:	e082      	b.n	8003c64 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d075      	beq.n	8003c52 <I2C_MasterReceive_RXNE+0x15c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <I2C_MasterReceive_RXNE+0x7c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d16f      	bne.n	8003c52 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f001 fa60 	bl	8005038 <I2C_WaitOnSTOPRequestThroughIT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d142      	bne.n	8003c04 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d10a      	bne.n	8003bee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fdc1 	bl	800376e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bec:	e03a      	b.n	8003c64 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2212      	movs	r2, #18
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fd76 	bl	80036ee <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c02:	e02f      	b.n	8003c64 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fd99 	bl	8003782 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c50:	e008      	b.n	8003c64 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c60:	605a      	str	r2, [r3, #4]
}
 8003c62:	e7ff      	b.n	8003c64 <I2C_MasterReceive_RXNE+0x16e>
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c92:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cba:	e0bd      	b.n	8003e38 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d129      	bne.n	8003d1a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d00a      	beq.n	8003cf2 <I2C_MasterReceive_BTF+0x86>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d007      	beq.n	8003cf2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d18:	e08e      	b.n	8003e38 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d176      	bne.n	8003e12 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <I2C_MasterReceive_BTF+0xc4>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d108      	bne.n	8003d42 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e019      	b.n	8003d76 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d002      	beq.n	8003d4e <I2C_MasterReceive_BTF+0xe2>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d108      	bne.n	8003d60 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e00a      	b.n	8003d76 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d007      	beq.n	8003d76 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dd0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d10a      	bne.n	8003dfc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fcba 	bl	800376e <HAL_I2C_MemRxCpltCallback>
}
 8003dfa:	e01d      	b.n	8003e38 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2212      	movs	r2, #18
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fc6f 	bl	80036ee <HAL_I2C_MasterRxCpltCallback>
}
 8003e10:	e012      	b.n	8003e38 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d117      	bne.n	8003e84 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e6c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e6e:	e067      	b.n	8003f40 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]
}
 8003e82:	e05d      	b.n	8003f40 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8c:	d133      	bne.n	8003ef6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b21      	cmp	r3, #33	; 0x21
 8003e98:	d109      	bne.n	8003eae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eaa:	611a      	str	r2, [r3, #16]
 8003eac:	e008      	b.n	8003ec0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <I2C_Master_SB+0x92>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d032      	beq.n	8003f40 <I2C_Master_SB+0x100>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02d      	beq.n	8003f40 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef2:	605a      	str	r2, [r3, #4]
}
 8003ef4:	e024      	b.n	8003f40 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10e      	bne.n	8003f1c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	11db      	asrs	r3, r3, #7
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0306 	and.w	r3, r3, #6
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f063 030f 	orn	r3, r3, #15
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
}
 8003f1a:	e011      	b.n	8003f40 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10d      	bne.n	8003f40 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	11db      	asrs	r3, r3, #7
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 0306 	and.w	r3, r3, #6
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f063 030e 	orn	r3, r3, #14
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <I2C_Master_ADD10+0x26>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <I2C_Master_ADD10+0x48>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f92:	605a      	str	r2, [r3, #4]
  }
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b091      	sub	sp, #68	; 0x44
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b22      	cmp	r3, #34	; 0x22
 8003fc8:	f040 8169 	bne.w	800429e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10f      	bne.n	8003ff4 <I2C_Master_ADDR+0x54>
 8003fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d10b      	bne.n	8003ff4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	e160      	b.n	80042b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d11d      	bne.n	8004038 <I2C_Master_ADDR+0x98>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004004:	d118      	bne.n	8004038 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
 8004036:	e13e      	b.n	80042b6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d113      	bne.n	800406a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e115      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 808a 	bne.w	800418a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800407c:	d137      	bne.n	80040ee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	d113      	bne.n	80040c6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	e0e7      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e0d3      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d02e      	beq.n	8004152 <I2C_Master_ADDR+0x1b2>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d02b      	beq.n	8004152 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	2b12      	cmp	r3, #18
 80040fe:	d102      	bne.n	8004106 <I2C_Master_ADDR+0x166>
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	2b01      	cmp	r3, #1
 8004104:	d125      	bne.n	8004152 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	2b04      	cmp	r3, #4
 800410a:	d00e      	beq.n	800412a <I2C_Master_ADDR+0x18a>
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	2b02      	cmp	r3, #2
 8004110:	d00b      	beq.n	800412a <I2C_Master_ADDR+0x18a>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b10      	cmp	r3, #16
 8004116:	d008      	beq.n	800412a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e007      	b.n	800413a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	e0a1      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e085      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d14d      	bne.n	8004230 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	2b04      	cmp	r3, #4
 8004198:	d016      	beq.n	80041c8 <I2C_Master_ADDR+0x228>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b02      	cmp	r3, #2
 800419e:	d013      	beq.n	80041c8 <I2C_Master_ADDR+0x228>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d010      	beq.n	80041c8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e007      	b.n	80041d8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041d6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d117      	bne.n	8004218 <I2C_Master_ADDR+0x278>
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ee:	d00b      	beq.n	8004208 <I2C_Master_ADDR+0x268>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d008      	beq.n	8004208 <I2C_Master_ADDR+0x268>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d005      	beq.n	8004208 <I2C_Master_ADDR+0x268>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d002      	beq.n	8004208 <I2C_Master_ADDR+0x268>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004216:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	e032      	b.n	8004296 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800423e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424e:	d117      	bne.n	8004280 <I2C_Master_ADDR+0x2e0>
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004256:	d00b      	beq.n	8004270 <I2C_Master_ADDR+0x2d0>
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2b01      	cmp	r3, #1
 800425c:	d008      	beq.n	8004270 <I2C_Master_ADDR+0x2d0>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b08      	cmp	r3, #8
 8004262:	d005      	beq.n	8004270 <I2C_Master_ADDR+0x2d0>
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	2b10      	cmp	r3, #16
 8004268:	d002      	beq.n	8004270 <I2C_Master_ADDR+0x2d0>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b20      	cmp	r3, #32
 800426e:	d107      	bne.n	8004280 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800427e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800429c:	e00b      	b.n	80042b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	e7ff      	b.n	80042b6 <I2C_Master_ADDR+0x316>
 80042b6:	bf00      	nop
 80042b8:	3744      	adds	r7, #68	; 0x44
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02b      	beq.n	8004334 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d114      	bne.n	8004334 <I2C_SlaveTransmit_TXE+0x72>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b29      	cmp	r3, #41	; 0x29
 800430e:	d111      	bne.n	8004334 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2221      	movs	r2, #33	; 0x21
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2228      	movs	r2, #40	; 0x28
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff f9e7 	bl	8003702 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d011      	beq.n	8004372 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02c      	beq.n	80043f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d114      	bne.n	80043f2 <I2C_SlaveReceive_RXNE+0x74>
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b2a      	cmp	r3, #42	; 0x2a
 80043cc:	d111      	bne.n	80043f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2222      	movs	r2, #34	; 0x22
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2228      	movs	r2, #40	; 0x28
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff f992 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004458:	2b28      	cmp	r3, #40	; 0x28
 800445a:	d127      	bne.n	80044ac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d103      	bne.n	8004490 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	81bb      	strh	r3, [r7, #12]
 800448e:	e002      	b.n	8004496 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800449e:	89ba      	ldrh	r2, [r7, #12]
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff f940 	bl	800372a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044aa:	e00e      	b.n	80044ca <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004530:	d172      	bne.n	8004618 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b22      	cmp	r3, #34	; 0x22
 8004536:	d002      	beq.n	800453e <I2C_Slave_STOPF+0x6a>
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b2a      	cmp	r3, #42	; 0x2a
 800453c:	d135      	bne.n	80045aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0204 	orr.w	r2, r3, #4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004570:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f901 	bl	800277e <HAL_DMA_GetState>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d049      	beq.n	8004616 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4a69      	ldr	r2, [pc, #420]	; (800472c <I2C_Slave_STOPF+0x258>)
 8004588:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe f8d3 	bl	800273a <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d03d      	beq.n	8004616 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045a8:	e035      	b.n	8004616 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0204 	orr.w	r2, r3, #4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f8cb 	bl	800277e <HAL_DMA_GetState>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d014      	beq.n	8004618 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	4a4e      	ldr	r2, [pc, #312]	; (800472c <I2C_Slave_STOPF+0x258>)
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f89d 	bl	800273a <HAL_DMA_Abort_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004610:	4610      	mov	r0, r2
 8004612:	4798      	blx	r3
 8004614:	e000      	b.n	8004618 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004616:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03e      	beq.n	80046a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d112      	bne.n	8004656 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d112      	bne.n	800468a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f043 0204 	orr.w	r2, r3, #4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f843 	bl	8004734 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046ae:	e039      	b.n	8004724 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b2a      	cmp	r3, #42	; 0x2a
 80046b4:	d109      	bne.n	80046ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2228      	movs	r2, #40	; 0x28
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff f826 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b28      	cmp	r3, #40	; 0x28
 80046d4:	d111      	bne.n	80046fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <I2C_Slave_STOPF+0x25c>)
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff f827 	bl	8003746 <HAL_I2C_ListenCpltCallback>
}
 80046f8:	e014      	b.n	8004724 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	d002      	beq.n	8004708 <I2C_Slave_STOPF+0x234>
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b22      	cmp	r3, #34	; 0x22
 8004706:	d10d      	bne.n	8004724 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe fff9 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	08004c39 	.word	0x08004c39
 8004730:	ffff0000 	.word	0xffff0000

08004734 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b10      	cmp	r3, #16
 8004750:	d002      	beq.n	8004758 <I2C_ITError+0x24>
 8004752:	7bbb      	ldrb	r3, [r7, #14]
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d10a      	bne.n	800476e <I2C_ITError+0x3a>
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b22      	cmp	r3, #34	; 0x22
 800475c:	d107      	bne.n	800476e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004774:	2b28      	cmp	r3, #40	; 0x28
 8004776:	d107      	bne.n	8004788 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2228      	movs	r2, #40	; 0x28
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004786:	e015      	b.n	80047b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004796:	d00a      	beq.n	80047ae <I2C_ITError+0x7a>
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b60      	cmp	r3, #96	; 0x60
 800479c:	d007      	beq.n	80047ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d162      	bne.n	800488a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d020      	beq.n	8004824 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	4a6a      	ldr	r2, [pc, #424]	; (8004990 <I2C_ITError+0x25c>)
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd ffa3 	bl	800273a <HAL_DMA_Abort_IT>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8089 	beq.w	800490e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800481e:	4610      	mov	r0, r2
 8004820:	4798      	blx	r3
 8004822:	e074      	b.n	800490e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	4a59      	ldr	r2, [pc, #356]	; (8004990 <I2C_ITError+0x25c>)
 800482a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	4618      	mov	r0, r3
 8004832:	f7fd ff82 	bl	800273a <HAL_DMA_Abort_IT>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d068      	beq.n	800490e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d10b      	bne.n	8004862 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
 8004888:	e041      	b.n	800490e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b60      	cmp	r3, #96	; 0x60
 8004894:	d125      	bne.n	80048e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d10b      	bne.n	80048ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fe ff5b 	bl	8003796 <HAL_I2C_AbortCpltCallback>
 80048e0:	e015      	b.n	800490e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d10b      	bne.n	8004908 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fe ff3a 	bl	8003782 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10e      	bne.n	800493c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d113      	bne.n	8004988 <I2C_ITError+0x254>
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b28      	cmp	r3, #40	; 0x28
 8004964:	d110      	bne.n	8004988 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <I2C_ITError+0x260>)
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe fedf 	bl	8003746 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08004c39 	.word	0x08004c39
 8004994:	ffff0000 	.word	0xffff0000

08004998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d006      	beq.n	80049c2 <I2C_MasterRequestWrite+0x2a>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d003      	beq.n	80049c2 <I2C_MasterRequestWrite+0x2a>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049c0:	d108      	bne.n	80049d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e00b      	b.n	80049ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	2b12      	cmp	r3, #18
 80049da:	d107      	bne.n	80049ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f9c5 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d103      	bne.n	8004a1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e035      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a38:	611a      	str	r2, [r3, #16]
 8004a3a:	e01b      	b.n	8004a74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a3c:	897b      	ldrh	r3, [r7, #10]
 8004a3e:	11db      	asrs	r3, r3, #7
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0306 	and.w	r3, r3, #6
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f063 030f 	orn	r3, r3, #15
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <I2C_MasterRequestWrite+0xfc>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f9eb 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e010      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4907      	ldr	r1, [pc, #28]	; (8004a98 <I2C_MasterRequestWrite+0x100>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f9db 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	00010008 	.word	0x00010008
 8004a98:	00010002 	.word	0x00010002

08004a9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d006      	beq.n	8004ad6 <I2C_MasterRequestRead+0x3a>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d003      	beq.n	8004ad6 <I2C_MasterRequestRead+0x3a>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad4:	d108      	bne.n	8004ae8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e00b      	b.n	8004b00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	2b11      	cmp	r3, #17
 8004aee:	d107      	bne.n	8004b00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f93b 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b26:	d103      	bne.n	8004b30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e079      	b.n	8004c28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d108      	bne.n	8004b50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	e05f      	b.n	8004c10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b50:	897b      	ldrh	r3, [r7, #10]
 8004b52:	11db      	asrs	r3, r3, #7
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f063 030f 	orn	r3, r3, #15
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4930      	ldr	r1, [pc, #192]	; (8004c30 <I2C_MasterRequestRead+0x194>)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f961 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e054      	b.n	8004c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b7e:	897b      	ldrh	r3, [r7, #10]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4929      	ldr	r1, [pc, #164]	; (8004c34 <I2C_MasterRequestRead+0x198>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f951 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e044      	b.n	8004c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f8d9 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	d103      	bne.n	8004bf4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e017      	b.n	8004c28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bf8:	897b      	ldrh	r3, [r7, #10]
 8004bfa:	11db      	asrs	r3, r3, #7
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0306 	and.w	r3, r3, #6
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f063 030e 	orn	r3, r3, #14
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4907      	ldr	r1, [pc, #28]	; (8004c34 <I2C_MasterRequestRead+0x198>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f90d 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	00010008 	.word	0x00010008
 8004c34:	00010002 	.word	0x00010002

08004c38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c52:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <I2C_DMAAbort+0x148>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <I2C_DMAAbort+0x14c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c7e:	e00a      	b.n	8004c96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d0ea      	beq.n	8004c6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	2200      	movs	r2, #0
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	2200      	movs	r2, #0
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d10e      	bne.n	8004d26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7fe fd39 	bl	8003796 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d24:	e027      	b.n	8004d76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d2c:	2b28      	cmp	r3, #40	; 0x28
 8004d2e:	d117      	bne.n	8004d60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d5e:	e007      	b.n	8004d70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d70:	6978      	ldr	r0, [r7, #20]
 8004d72:	f7fe fd06 	bl	8003782 <HAL_I2C_ErrorCallback>
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000010 	.word	0x20000010
 8004d84:	14f8b589 	.word	0x14f8b589

08004d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d98:	e025      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d021      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fc fcbf 	bl	8001724 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e023      	b.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10d      	bne.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	e00c      	b.n	8004e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d0b6      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e44:	e051      	b.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d123      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e046      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d021      	beq.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fc fc3d 	bl	8001724 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e020      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10c      	bne.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e00b      	b.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d18d      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f40:	e02d      	b.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f900 	bl	8005148 <I2C_IsAcknowledgeFailed>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02d      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d021      	beq.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fc fbe3 	bl	8001724 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e007      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d1ca      	bne.n	8004f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc2:	e02d      	b.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f8bf 	bl	8005148 <I2C_IsAcknowledgeFailed>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e02d      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d021      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7fc fba2 	bl	8001724 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e007      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d1ca      	bne.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	4a13      	ldr	r2, [pc, #76]	; (8005098 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	0a1a      	lsrs	r2, r3, #8
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b01      	subs	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e008      	b.n	8005088 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005084:	d0e9      	beq.n	800505a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20000010 	.word	0x20000010
 8005098:	14f8b589 	.word	0x14f8b589

0800509c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050a8:	e042      	b.n	8005130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d119      	bne.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0210 	mvn.w	r2, #16
 80050c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e029      	b.n	8005140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7fc fb1a 	bl	8001724 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d116      	bne.n	8005130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e007      	b.n	8005140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d1b5      	bne.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	d11b      	bne.n	8005198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f043 0204 	orr.w	r2, r3, #4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051b6:	d103      	bne.n	80051c0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051be:	e007      	b.n	80051d0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051c8:	d102      	bne.n	80051d0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_PWREx_EnableOverDrive+0x90>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_PWREx_EnableOverDrive+0x90>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_PWREx_EnableOverDrive+0x90>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <HAL_PWREx_EnableOverDrive+0x94>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005208:	f7fc fa8c 	bl	8001724 <HAL_GetTick>
 800520c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800520e:	e009      	b.n	8005224 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005210:	f7fc fa88 	bl	8001724 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521e:	d901      	bls.n	8005224 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e01f      	b.n	8005264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_PWREx_EnableOverDrive+0x98>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d1ee      	bne.n	8005210 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005238:	f7fc fa74 	bl	8001724 <HAL_GetTick>
 800523c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800523e:	e009      	b.n	8005254 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005240:	f7fc fa70 	bl	8001724 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800524e:	d901      	bls.n	8005254 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e007      	b.n	8005264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_PWREx_EnableOverDrive+0x98>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005260:	d1ee      	bne.n	8005240 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	420e0040 	.word	0x420e0040
 8005274:	40007000 	.word	0x40007000
 8005278:	420e0044 	.word	0x420e0044

0800527c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cc      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b68      	ldr	r3, [pc, #416]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d90c      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b65      	ldr	r3, [pc, #404]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0b8      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d0:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a58      	ldr	r2, [pc, #352]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e8:	4b53      	ldr	r3, [pc, #332]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a52      	ldr	r2, [pc, #328]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	494d      	ldr	r1, [pc, #308]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d044      	beq.n	800539c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d119      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e07f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d003      	beq.n	800533a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	2b03      	cmp	r3, #3
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e06f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534a:	4b3b      	ldr	r3, [pc, #236]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e067      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800535a:	4b37      	ldr	r3, [pc, #220]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4934      	ldr	r1, [pc, #208]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800536c:	f7fc f9da 	bl	8001724 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fc f9d6 	bl	8001724 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e04f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 020c 	and.w	r2, r3, #12
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d1eb      	bne.n	8005374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d20c      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e032      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4916      	ldr	r1, [pc, #88]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	490e      	ldr	r1, [pc, #56]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005402:	f000 f855 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	490a      	ldr	r1, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	5ccb      	ldrb	r3, [r1, r3]
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fc f93a 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023c00 	.word	0x40023c00
 8005438:	40023800 	.word	0x40023800
 800543c:	08008150 	.word	0x08008150
 8005440:	20000010 	.word	0x20000010
 8005444:	20000014 	.word	0x20000014

08005448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <HAL_RCC_GetHCLKFreq+0x14>)
 800544e:	681b      	ldr	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000010 	.word	0x20000010

08005460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005464:	f7ff fff0 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8005468:	4602      	mov	r2, r0
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	0a9b      	lsrs	r3, r3, #10
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	4903      	ldr	r1, [pc, #12]	; (8005484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005476:	5ccb      	ldrb	r3, [r1, r3]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40023800 	.word	0x40023800
 8005484:	08008160 	.word	0x08008160

08005488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800548c:	f7ff ffdc 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	0b5b      	lsrs	r3, r3, #13
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4903      	ldr	r1, [pc, #12]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023800 	.word	0x40023800
 80054ac:	08008160 	.word	0x08008160

080054b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b4:	b0ae      	sub	sp, #184	; 0xb8
 80054b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d6:	4bcb      	ldr	r3, [pc, #812]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	f200 8206 	bhi.w	80058f0 <HAL_RCC_GetSysClockFreq+0x440>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005521 	.word	0x08005521
 80054f0:	080058f1 	.word	0x080058f1
 80054f4:	080058f1 	.word	0x080058f1
 80054f8:	080058f1 	.word	0x080058f1
 80054fc:	08005529 	.word	0x08005529
 8005500:	080058f1 	.word	0x080058f1
 8005504:	080058f1 	.word	0x080058f1
 8005508:	080058f1 	.word	0x080058f1
 800550c:	08005531 	.word	0x08005531
 8005510:	080058f1 	.word	0x080058f1
 8005514:	080058f1 	.word	0x080058f1
 8005518:	080058f1 	.word	0x080058f1
 800551c:	08005721 	.word	0x08005721
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4bb9      	ldr	r3, [pc, #740]	; (8005808 <HAL_RCC_GetSysClockFreq+0x358>)
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005526:	e1e7      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005528:	4bb8      	ldr	r3, [pc, #736]	; (800580c <HAL_RCC_GetSysClockFreq+0x35c>)
 800552a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800552e:	e1e3      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005530:	4bb4      	ldr	r3, [pc, #720]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800553c:	4bb1      	ldr	r3, [pc, #708]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d071      	beq.n	800562c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005548:	4bae      	ldr	r3, [pc, #696]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005554:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800555c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800556a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	0159      	lsls	r1, r3, #5
 800557c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005580:	0150      	lsls	r0, r2, #5
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4621      	mov	r1, r4
 8005588:	1a51      	subs	r1, r2, r1
 800558a:	6439      	str	r1, [r7, #64]	; 0x40
 800558c:	4629      	mov	r1, r5
 800558e:	eb63 0301 	sbc.w	r3, r3, r1
 8005592:	647b      	str	r3, [r7, #68]	; 0x44
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80055a0:	4649      	mov	r1, r9
 80055a2:	018b      	lsls	r3, r1, #6
 80055a4:	4641      	mov	r1, r8
 80055a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055aa:	4641      	mov	r1, r8
 80055ac:	018a      	lsls	r2, r1, #6
 80055ae:	4641      	mov	r1, r8
 80055b0:	1a51      	subs	r1, r2, r1
 80055b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b4:	4649      	mov	r1, r9
 80055b6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80055c8:	4649      	mov	r1, r9
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4641      	mov	r1, r8
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4622      	mov	r2, r4
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	633b      	str	r3, [r7, #48]	; 0x30
 80055e2:	462b      	mov	r3, r5
 80055e4:	460a      	mov	r2, r1
 80055e6:	eb42 0303 	adc.w	r3, r2, r3
 80055ea:	637b      	str	r3, [r7, #52]	; 0x34
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055f8:	4629      	mov	r1, r5
 80055fa:	024b      	lsls	r3, r1, #9
 80055fc:	4621      	mov	r1, r4
 80055fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005602:	4621      	mov	r1, r4
 8005604:	024a      	lsls	r2, r1, #9
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005618:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800561c:	f7fa fe48 	bl	80002b0 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800562a:	e067      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562c:	4b75      	ldr	r3, [pc, #468]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	099b      	lsrs	r3, r3, #6
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005638:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800563c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	67bb      	str	r3, [r7, #120]	; 0x78
 8005646:	2300      	movs	r3, #0
 8005648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800564a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4621      	mov	r1, r4
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	62b9      	str	r1, [r7, #40]	; 0x28
 800566c:	4629      	mov	r1, r5
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005680:	4649      	mov	r1, r9
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4641      	mov	r1, r8
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4641      	mov	r1, r8
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4641      	mov	r1, r8
 8005690:	ebb2 0a01 	subs.w	sl, r2, r1
 8005694:	4649      	mov	r1, r9
 8005696:	eb63 0b01 	sbc.w	fp, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ae:	4692      	mov	sl, r2
 80056b0:	469b      	mov	fp, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb1a 0303 	adds.w	r3, sl, r3
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	462b      	mov	r3, r5
 80056bc:	eb4b 0303 	adc.w	r3, fp, r3
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80056ce:	4629      	mov	r1, r5
 80056d0:	028b      	lsls	r3, r1, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d8:	4621      	mov	r1, r4
 80056da:	028a      	lsls	r2, r1, #10
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056e4:	2200      	movs	r2, #0
 80056e6:	673b      	str	r3, [r7, #112]	; 0x70
 80056e8:	677a      	str	r2, [r7, #116]	; 0x74
 80056ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056ee:	f7fa fddf 	bl	80002b0 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4613      	mov	r3, r2
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056fc:	4b41      	ldr	r3, [pc, #260]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	3301      	adds	r3, #1
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800570e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800571e:	e0eb      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005720:	4b38      	ldr	r3, [pc, #224]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800572c:	4b35      	ldr	r3, [pc, #212]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d06b      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005738:	4b32      	ldr	r3, [pc, #200]	; (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	2200      	movs	r2, #0
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
 8005742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	663b      	str	r3, [r7, #96]	; 0x60
 800574c:	2300      	movs	r3, #0
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
 8005750:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	f04f 0000 	mov.w	r0, #0
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	0159      	lsls	r1, r3, #5
 8005762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005766:	0150      	lsls	r0, r2, #5
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4621      	mov	r1, r4
 800576e:	1a51      	subs	r1, r2, r1
 8005770:	61b9      	str	r1, [r7, #24]
 8005772:	4629      	mov	r1, r5
 8005774:	eb63 0301 	sbc.w	r3, r3, r1
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005786:	4659      	mov	r1, fp
 8005788:	018b      	lsls	r3, r1, #6
 800578a:	4651      	mov	r1, sl
 800578c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005790:	4651      	mov	r1, sl
 8005792:	018a      	lsls	r2, r1, #6
 8005794:	4651      	mov	r1, sl
 8005796:	ebb2 0801 	subs.w	r8, r2, r1
 800579a:	4659      	mov	r1, fp
 800579c:	eb63 0901 	sbc.w	r9, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b4:	4690      	mov	r8, r2
 80057b6:	4699      	mov	r9, r3
 80057b8:	4623      	mov	r3, r4
 80057ba:	eb18 0303 	adds.w	r3, r8, r3
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	462b      	mov	r3, r5
 80057c2:	eb49 0303 	adc.w	r3, r9, r3
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057d4:	4629      	mov	r1, r5
 80057d6:	024b      	lsls	r3, r1, #9
 80057d8:	4621      	mov	r1, r4
 80057da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057de:	4621      	mov	r1, r4
 80057e0:	024a      	lsls	r2, r1, #9
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ea:	2200      	movs	r2, #0
 80057ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057f4:	f7fa fd5c 	bl	80002b0 <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4613      	mov	r3, r2
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005802:	e065      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x420>
 8005804:	40023800 	.word	0x40023800
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005810:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCC_GetSysClockFreq+0x458>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	2200      	movs	r2, #0
 8005818:	4618      	mov	r0, r3
 800581a:	4611      	mov	r1, r2
 800581c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005820:	653b      	str	r3, [r7, #80]	; 0x50
 8005822:	2300      	movs	r3, #0
 8005824:	657b      	str	r3, [r7, #84]	; 0x54
 8005826:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800582a:	4642      	mov	r2, r8
 800582c:	464b      	mov	r3, r9
 800582e:	f04f 0000 	mov.w	r0, #0
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	0159      	lsls	r1, r3, #5
 8005838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800583c:	0150      	lsls	r0, r2, #5
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4641      	mov	r1, r8
 8005844:	1a51      	subs	r1, r2, r1
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	4649      	mov	r1, r9
 800584a:	eb63 0301 	sbc.w	r3, r3, r1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800585c:	4659      	mov	r1, fp
 800585e:	018b      	lsls	r3, r1, #6
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005866:	4651      	mov	r1, sl
 8005868:	018a      	lsls	r2, r1, #6
 800586a:	4651      	mov	r1, sl
 800586c:	1a54      	subs	r4, r2, r1
 800586e:	4659      	mov	r1, fp
 8005870:	eb63 0501 	sbc.w	r5, r3, r1
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	00eb      	lsls	r3, r5, #3
 800587e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005882:	00e2      	lsls	r2, r4, #3
 8005884:	4614      	mov	r4, r2
 8005886:	461d      	mov	r5, r3
 8005888:	4643      	mov	r3, r8
 800588a:	18e3      	adds	r3, r4, r3
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	464b      	mov	r3, r9
 8005890:	eb45 0303 	adc.w	r3, r5, r3
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a2:	4629      	mov	r1, r5
 80058a4:	028b      	lsls	r3, r1, #10
 80058a6:	4621      	mov	r1, r4
 80058a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058ac:	4621      	mov	r1, r4
 80058ae:	028a      	lsls	r2, r1, #10
 80058b0:	4610      	mov	r0, r2
 80058b2:	4619      	mov	r1, r3
 80058b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b8:	2200      	movs	r2, #0
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80058bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058c2:	f7fa fcf5 	bl	80002b0 <__aeabi_uldivmod>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4613      	mov	r3, r2
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058d0:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <HAL_RCC_GetSysClockFreq+0x458>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0f1b      	lsrs	r3, r3, #28
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80058de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058ee:	e003      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_GetSysClockFreq+0x45c>)
 80058f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	37b8      	adds	r7, #184	; 0xb8
 8005900:	46bd      	mov	sp, r7
 8005902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	00f42400 	.word	0x00f42400

08005910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e28d      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8083 	beq.w	8005a36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005930:	4b94      	ldr	r3, [pc, #592]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b04      	cmp	r3, #4
 800593a:	d019      	beq.n	8005970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800593c:	4b91      	ldr	r3, [pc, #580]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005944:	2b08      	cmp	r3, #8
 8005946:	d106      	bne.n	8005956 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005948:	4b8e      	ldr	r3, [pc, #568]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005954:	d00c      	beq.n	8005970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005956:	4b8b      	ldr	r3, [pc, #556]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d112      	bne.n	8005988 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005962:	4b88      	ldr	r3, [pc, #544]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005970:	4b84      	ldr	r3, [pc, #528]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x124>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d157      	bne.n	8005a34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e25a      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x90>
 8005992:	4b7c      	ldr	r3, [pc, #496]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a7b      	ldr	r2, [pc, #492]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xcc>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0xb4>
 80059aa:	4b76      	ldr	r3, [pc, #472]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a75      	ldr	r2, [pc, #468]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b73      	ldr	r3, [pc, #460]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a72      	ldr	r2, [pc, #456]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xcc>
 80059c4:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6b      	ldr	r2, [pc, #428]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fb fe9e 	bl	8001724 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fb fe9a 	bl	8001724 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e21f      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b61      	ldr	r3, [pc, #388]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xdc>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fb fe8a 	bl	8001724 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fb fe86 	bl	8001724 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e20b      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a26:	4b57      	ldr	r3, [pc, #348]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x104>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d06f      	beq.n	8005b22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a42:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a4e:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d105      	bne.n	8005a66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a5a:	4b4a      	ldr	r3, [pc, #296]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d11c      	bne.n	8005aac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a72:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d116      	bne.n	8005aac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	4b41      	ldr	r3, [pc, #260]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCC_OscConfig+0x186>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e1d3      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a96:	4b3b      	ldr	r3, [pc, #236]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4937      	ldr	r1, [pc, #220]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aaa:	e03a      	b.n	8005b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab4:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <HAL_RCC_OscConfig+0x278>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fb fe33 	bl	8001724 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fb fe2f 	bl	8001724 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e1b4      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4925      	ldr	r1, [pc, #148]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_RCC_OscConfig+0x278>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fb fe12 	bl	8001724 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b04:	f7fb fe0e 	bl	8001724 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e193      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d036      	beq.n	8005b9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fb fdf2 	bl	8001724 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b44:	f7fb fdee 	bl	8001724 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e173      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x234>
 8005b62:	e01b      	b.n	8005b9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fb fddb 	bl	8001724 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b70:	e00e      	b.n	8005b90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b72:	f7fb fdd7 	bl	8001724 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d907      	bls.n	8005b90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e15c      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005b84:	40023800 	.word	0x40023800
 8005b88:	42470000 	.word	0x42470000
 8005b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b90:	4b8a      	ldr	r3, [pc, #552]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ea      	bne.n	8005b72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8097 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bae:	4b83      	ldr	r3, [pc, #524]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	4a7e      	ldr	r2, [pc, #504]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bca:	4b7c      	ldr	r3, [pc, #496]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bda:	4b79      	ldr	r3, [pc, #484]	; (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d118      	bne.n	8005c18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be6:	4b76      	ldr	r3, [pc, #472]	; (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a75      	ldr	r2, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf2:	f7fb fd97 	bl	8001724 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bfa:	f7fb fd93 	bl	8001724 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e118      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	4b6c      	ldr	r3, [pc, #432]	; (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCC_OscConfig+0x31e>
 8005c20:	4b66      	ldr	r3, [pc, #408]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	4a65      	ldr	r2, [pc, #404]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x340>
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	4a60      	ldr	r2, [pc, #384]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	f043 0304 	orr.w	r3, r3, #4
 8005c40:	6713      	str	r3, [r2, #112]	; 0x70
 8005c42:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c50:	4b5a      	ldr	r3, [pc, #360]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	4a59      	ldr	r2, [pc, #356]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5c:	4b57      	ldr	r3, [pc, #348]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c60:	4a56      	ldr	r2, [pc, #344]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c62:	f023 0304 	bic.w	r3, r3, #4
 8005c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d015      	beq.n	8005c9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fb fd58 	bl	8001724 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7fb fd54 	bl	8001724 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0d7      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8e:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ee      	beq.n	8005c78 <HAL_RCC_OscConfig+0x368>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9c:	f7fb fd42 	bl	8001724 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca4:	f7fb fd3e 	bl	8001724 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0c1      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cba:	4b40      	ldr	r3, [pc, #256]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ee      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80ad 	beq.w	8005e3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ce2:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d060      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d145      	bne.n	8005d82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fb fd12 	bl	8001724 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fb fd0e 	bl	8001724 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e093      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	491b      	ldr	r1, [pc, #108]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d54:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5a:	f7fb fce3 	bl	8001724 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d62:	f7fb fcdf 	bl	8001724 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e064      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d74:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x452>
 8005d80:	e05c      	b.n	8005e3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fb fccc 	bl	8001724 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fb fcc8 	bl	8001724 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e04d      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x480>
 8005dae:	e045      	b.n	8005e3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e040      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40007000 	.word	0x40007000
 8005dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <HAL_RCC_OscConfig+0x538>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d030      	beq.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d129      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d122      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d119      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	3b01      	subs	r3, #1
 8005e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d10f      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800

08005e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e041      	b.n	8005ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fa6c 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f000 f95e 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d122      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d11b      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f06f 0202 	mvn.w	r2, #2
 8005f16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8ee 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005f32:	e005      	b.n	8005f40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8e0 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8f1 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d122      	bne.n	8005f9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d11b      	bne.n	8005f9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f06f 0204 	mvn.w	r2, #4
 8005f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8c4 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005f86:	e005      	b.n	8005f94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f8b6 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8c7 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d122      	bne.n	8005fee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d11b      	bne.n	8005fee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f06f 0208 	mvn.w	r2, #8
 8005fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f89a 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005fda:	e005      	b.n	8005fe8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f88c 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f89d 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d122      	bne.n	8006042 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d11b      	bne.n	8006042 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0210 	mvn.w	r2, #16
 8006012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2208      	movs	r2, #8
 8006018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f870 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 800602e:	e005      	b.n	800603c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f862 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f873 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10e      	bne.n	800606e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f06f 0201 	mvn.w	r2, #1
 8006066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fb f83f 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d10e      	bne.n	800609a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d107      	bne.n	800609a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f97f 	bl	8006398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d10e      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f838 	bl	8006136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d10e      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d107      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0220 	mvn.w	r2, #32
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f949 	bl	8006384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a40      	ldr	r2, [pc, #256]	; (8006260 <TIM_Base_SetConfig+0x114>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d00f      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3d      	ldr	r2, [pc, #244]	; (8006264 <TIM_Base_SetConfig+0x118>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3c      	ldr	r2, [pc, #240]	; (8006268 <TIM_Base_SetConfig+0x11c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3b      	ldr	r2, [pc, #236]	; (800626c <TIM_Base_SetConfig+0x120>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a3a      	ldr	r2, [pc, #232]	; (8006270 <TIM_Base_SetConfig+0x124>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a2f      	ldr	r2, [pc, #188]	; (8006260 <TIM_Base_SetConfig+0x114>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ac:	d027      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <TIM_Base_SetConfig+0x118>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d023      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <TIM_Base_SetConfig+0x11c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01f      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2a      	ldr	r2, [pc, #168]	; (800626c <TIM_Base_SetConfig+0x120>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a29      	ldr	r2, [pc, #164]	; (8006270 <TIM_Base_SetConfig+0x124>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d017      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a28      	ldr	r2, [pc, #160]	; (8006274 <TIM_Base_SetConfig+0x128>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a27      	ldr	r2, [pc, #156]	; (8006278 <TIM_Base_SetConfig+0x12c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a26      	ldr	r2, [pc, #152]	; (800627c <TIM_Base_SetConfig+0x130>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a25      	ldr	r2, [pc, #148]	; (8006280 <TIM_Base_SetConfig+0x134>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a24      	ldr	r2, [pc, #144]	; (8006284 <TIM_Base_SetConfig+0x138>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a23      	ldr	r2, [pc, #140]	; (8006288 <TIM_Base_SetConfig+0x13c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <TIM_Base_SetConfig+0x114>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0xf8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <TIM_Base_SetConfig+0x124>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d103      	bne.n	800624c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	615a      	str	r2, [r3, #20]
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40010400 	.word	0x40010400
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800
 8006280:	40001800 	.word	0x40001800
 8006284:	40001c00 	.word	0x40001c00
 8006288:	40002000 	.word	0x40002000

0800628c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e05a      	b.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a21      	ldr	r2, [pc, #132]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d01d      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d018      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a17      	ldr	r2, [pc, #92]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a15      	ldr	r2, [pc, #84]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d10c      	bne.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40010400 	.word	0x40010400
 800637c:	40014000 	.word	0x40014000
 8006380:	40001800 	.word	0x40001800

08006384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e03f      	b.n	800643e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa ffe4 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f929 	bl	8006648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08a      	sub	sp, #40	; 0x28
 800644a:	af02      	add	r7, sp, #8
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b20      	cmp	r3, #32
 8006464:	d17c      	bne.n	8006560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_UART_Transmit+0x2c>
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e075      	b.n	8006562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_UART_Transmit+0x3e>
 8006480:	2302      	movs	r3, #2
 8006482:	e06e      	b.n	8006562 <HAL_UART_Transmit+0x11c>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649a:	f7fb f943 	bl	8001724 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x82>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064d8:	e02a      	b.n	8006530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f840 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e036      	b.n	8006562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3302      	adds	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e007      	b.n	8006522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1cf      	bne.n	80064da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	2140      	movs	r1, #64	; 0x40
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f810 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e006      	b.n	8006562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b090      	sub	sp, #64	; 0x40
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657a:	e050      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d04c      	beq.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0x30>
 800658a:	f7fb f8cb 	bl	8001724 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006596:	429a      	cmp	r2, r3
 8006598:	d241      	bcs.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065ba:	637a      	str	r2, [r7, #52]	; 0x34
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3314      	adds	r3, #20
 80065d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	613b      	str	r3, [r7, #16]
   return(result);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ee:	623a      	str	r2, [r7, #32]
 80065f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	69f9      	ldr	r1, [r7, #28]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e00f      	b.n	800663e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4013      	ands	r3, r2
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	bf0c      	ite	eq
 800662e:	2301      	moveq	r3, #1
 8006630:	2300      	movne	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	429a      	cmp	r2, r3
 800663a:	d09f      	beq.n	800657c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3740      	adds	r7, #64	; 0x40
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800664c:	b0c0      	sub	sp, #256	; 0x100
 800664e:	af00      	add	r7, sp, #0
 8006650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	68d9      	ldr	r1, [r3, #12]
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	ea40 0301 	orr.w	r3, r0, r1
 8006670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	431a      	orrs	r2, r3
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	431a      	orrs	r2, r3
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066a0:	f021 010c 	bic.w	r1, r1, #12
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ae:	430b      	orrs	r3, r1
 80066b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	6999      	ldr	r1, [r3, #24]
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	ea40 0301 	orr.w	r3, r0, r1
 80066ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b8f      	ldr	r3, [pc, #572]	; (8006914 <UART_SetConfig+0x2cc>)
 80066d8:	429a      	cmp	r2, r3
 80066da:	d005      	beq.n	80066e8 <UART_SetConfig+0xa0>
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b8d      	ldr	r3, [pc, #564]	; (8006918 <UART_SetConfig+0x2d0>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d104      	bne.n	80066f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fe fece 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 80066ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066f0:	e003      	b.n	80066fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066f2:	f7fe feb5 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 80066f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006704:	f040 810c 	bne.w	8006920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800670c:	2200      	movs	r2, #0
 800670e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	1891      	adds	r1, r2, r2
 8006720:	65b9      	str	r1, [r7, #88]	; 0x58
 8006722:	415b      	adcs	r3, r3
 8006724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800672a:	4621      	mov	r1, r4
 800672c:	eb12 0801 	adds.w	r8, r2, r1
 8006730:	4629      	mov	r1, r5
 8006732:	eb43 0901 	adc.w	r9, r3, r1
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800674a:	4690      	mov	r8, r2
 800674c:	4699      	mov	r9, r3
 800674e:	4623      	mov	r3, r4
 8006750:	eb18 0303 	adds.w	r3, r8, r3
 8006754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006758:	462b      	mov	r3, r5
 800675a:	eb49 0303 	adc.w	r3, r9, r3
 800675e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800676e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006776:	460b      	mov	r3, r1
 8006778:	18db      	adds	r3, r3, r3
 800677a:	653b      	str	r3, [r7, #80]	; 0x50
 800677c:	4613      	mov	r3, r2
 800677e:	eb42 0303 	adc.w	r3, r2, r3
 8006782:	657b      	str	r3, [r7, #84]	; 0x54
 8006784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800678c:	f7f9 fd90 	bl	80002b0 <__aeabi_uldivmod>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4b61      	ldr	r3, [pc, #388]	; (800691c <UART_SetConfig+0x2d4>)
 8006796:	fba3 2302 	umull	r2, r3, r3, r2
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	011c      	lsls	r4, r3, #4
 800679e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067b0:	4642      	mov	r2, r8
 80067b2:	464b      	mov	r3, r9
 80067b4:	1891      	adds	r1, r2, r2
 80067b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80067b8:	415b      	adcs	r3, r3
 80067ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067c0:	4641      	mov	r1, r8
 80067c2:	eb12 0a01 	adds.w	sl, r2, r1
 80067c6:	4649      	mov	r1, r9
 80067c8:	eb43 0b01 	adc.w	fp, r3, r1
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e0:	4692      	mov	sl, r2
 80067e2:	469b      	mov	fp, r3
 80067e4:	4643      	mov	r3, r8
 80067e6:	eb1a 0303 	adds.w	r3, sl, r3
 80067ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067ee:	464b      	mov	r3, r9
 80067f0:	eb4b 0303 	adc.w	r3, fp, r3
 80067f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800680c:	460b      	mov	r3, r1
 800680e:	18db      	adds	r3, r3, r3
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
 8006812:	4613      	mov	r3, r2
 8006814:	eb42 0303 	adc.w	r3, r2, r3
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
 800681a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800681e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006822:	f7f9 fd45 	bl	80002b0 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4611      	mov	r1, r2
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <UART_SetConfig+0x2d4>)
 800682e:	fba3 2301 	umull	r2, r3, r3, r1
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2264      	movs	r2, #100	; 0x64
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	1acb      	subs	r3, r1, r3
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006842:	4b36      	ldr	r3, [pc, #216]	; (800691c <UART_SetConfig+0x2d4>)
 8006844:	fba3 2302 	umull	r2, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006850:	441c      	add	r4, r3
 8006852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800685c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	1891      	adds	r1, r2, r2
 800686a:	63b9      	str	r1, [r7, #56]	; 0x38
 800686c:	415b      	adcs	r3, r3
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006874:	4641      	mov	r1, r8
 8006876:	1851      	adds	r1, r2, r1
 8006878:	6339      	str	r1, [r7, #48]	; 0x30
 800687a:	4649      	mov	r1, r9
 800687c:	414b      	adcs	r3, r1
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800688c:	4659      	mov	r1, fp
 800688e:	00cb      	lsls	r3, r1, #3
 8006890:	4651      	mov	r1, sl
 8006892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006896:	4651      	mov	r1, sl
 8006898:	00ca      	lsls	r2, r1, #3
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	4603      	mov	r3, r0
 80068a0:	4642      	mov	r2, r8
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a8:	464b      	mov	r3, r9
 80068aa:	460a      	mov	r2, r1
 80068ac:	eb42 0303 	adc.w	r3, r2, r3
 80068b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068c8:	460b      	mov	r3, r1
 80068ca:	18db      	adds	r3, r3, r3
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ce:	4613      	mov	r3, r2
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068de:	f7f9 fce7 	bl	80002b0 <__aeabi_uldivmod>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4b0d      	ldr	r3, [pc, #52]	; (800691c <UART_SetConfig+0x2d4>)
 80068e8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	2164      	movs	r1, #100	; 0x64
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	3332      	adds	r3, #50	; 0x32
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <UART_SetConfig+0x2d4>)
 80068fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	f003 0207 	and.w	r2, r3, #7
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4422      	add	r2, r4
 800690e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006910:	e105      	b.n	8006b1e <UART_SetConfig+0x4d6>
 8006912:	bf00      	nop
 8006914:	40011000 	.word	0x40011000
 8006918:	40011400 	.word	0x40011400
 800691c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006924:	2200      	movs	r2, #0
 8006926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800692a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800692e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006932:	4642      	mov	r2, r8
 8006934:	464b      	mov	r3, r9
 8006936:	1891      	adds	r1, r2, r2
 8006938:	6239      	str	r1, [r7, #32]
 800693a:	415b      	adcs	r3, r3
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006942:	4641      	mov	r1, r8
 8006944:	1854      	adds	r4, r2, r1
 8006946:	4649      	mov	r1, r9
 8006948:	eb43 0501 	adc.w	r5, r3, r1
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	00eb      	lsls	r3, r5, #3
 8006956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800695a:	00e2      	lsls	r2, r4, #3
 800695c:	4614      	mov	r4, r2
 800695e:	461d      	mov	r5, r3
 8006960:	4643      	mov	r3, r8
 8006962:	18e3      	adds	r3, r4, r3
 8006964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006968:	464b      	mov	r3, r9
 800696a:	eb45 0303 	adc.w	r3, r5, r3
 800696e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800697e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800698e:	4629      	mov	r1, r5
 8006990:	008b      	lsls	r3, r1, #2
 8006992:	4621      	mov	r1, r4
 8006994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006998:	4621      	mov	r1, r4
 800699a:	008a      	lsls	r2, r1, #2
 800699c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069a0:	f7f9 fc86 	bl	80002b0 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4b60      	ldr	r3, [pc, #384]	; (8006b2c <UART_SetConfig+0x4e4>)
 80069aa:	fba3 2302 	umull	r2, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	011c      	lsls	r4, r3, #4
 80069b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	1891      	adds	r1, r2, r2
 80069ca:	61b9      	str	r1, [r7, #24]
 80069cc:	415b      	adcs	r3, r3
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d4:	4641      	mov	r1, r8
 80069d6:	1851      	adds	r1, r2, r1
 80069d8:	6139      	str	r1, [r7, #16]
 80069da:	4649      	mov	r1, r9
 80069dc:	414b      	adcs	r3, r1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ec:	4659      	mov	r1, fp
 80069ee:	00cb      	lsls	r3, r1, #3
 80069f0:	4651      	mov	r1, sl
 80069f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069f6:	4651      	mov	r1, sl
 80069f8:	00ca      	lsls	r2, r1, #3
 80069fa:	4610      	mov	r0, r2
 80069fc:	4619      	mov	r1, r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	4642      	mov	r2, r8
 8006a02:	189b      	adds	r3, r3, r2
 8006a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a08:	464b      	mov	r3, r9
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	eb42 0303 	adc.w	r3, r2, r3
 8006a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	008b      	lsls	r3, r1, #2
 8006a30:	4641      	mov	r1, r8
 8006a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a36:	4641      	mov	r1, r8
 8006a38:	008a      	lsls	r2, r1, #2
 8006a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a3e:	f7f9 fc37 	bl	80002b0 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <UART_SetConfig+0x4e4>)
 8006a48:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	2164      	movs	r1, #100	; 0x64
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	3332      	adds	r3, #50	; 0x32
 8006a5a:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <UART_SetConfig+0x4e4>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a66:	441c      	add	r4, r3
 8006a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a70:	677a      	str	r2, [r7, #116]	; 0x74
 8006a72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a76:	4642      	mov	r2, r8
 8006a78:	464b      	mov	r3, r9
 8006a7a:	1891      	adds	r1, r2, r2
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	415b      	adcs	r3, r3
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a86:	4641      	mov	r1, r8
 8006a88:	1851      	adds	r1, r2, r1
 8006a8a:	6039      	str	r1, [r7, #0]
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	414b      	adcs	r3, r1
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	00cb      	lsls	r3, r1, #3
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	00ca      	lsls	r2, r1, #3
 8006aac:	4610      	mov	r0, r2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab8:	464b      	mov	r3, r9
 8006aba:	460a      	mov	r2, r1
 8006abc:	eb42 0303 	adc.w	r3, r2, r3
 8006ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	663b      	str	r3, [r7, #96]	; 0x60
 8006acc:	667a      	str	r2, [r7, #100]	; 0x64
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ada:	4649      	mov	r1, r9
 8006adc:	008b      	lsls	r3, r1, #2
 8006ade:	4641      	mov	r1, r8
 8006ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	008a      	lsls	r2, r1, #2
 8006ae8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aec:	f7f9 fbe0 	bl	80002b0 <__aeabi_uldivmod>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <UART_SetConfig+0x4e4>)
 8006af6:	fba3 1302 	umull	r1, r3, r3, r2
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	2164      	movs	r1, #100	; 0x64
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	3332      	adds	r3, #50	; 0x32
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <UART_SetConfig+0x4e4>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	f003 020f 	and.w	r2, r3, #15
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4422      	add	r2, r4
 8006b1c:	609a      	str	r2, [r3, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b2a:	bf00      	nop
 8006b2c:	51eb851f 	.word	0x51eb851f

08006b30 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	460a      	mov	r2, r1
 8006b3a:	80fb      	strh	r3, [r7, #6]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8006b44:	797b      	ldrb	r3, [r7, #5]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 f9cc 	bl	8006eec <VL53L1_WrByte>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	73fb      	strb	r3, [r7, #15]
	return status;
 8006b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006b7e:	232d      	movs	r3, #45	; 0x2d
 8006b80:	73bb      	strb	r3, [r7, #14]
 8006b82:	e011      	b.n	8006ba8 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	b299      	uxth	r1, r3
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	3b2d      	subs	r3, #45	; 0x2d
 8006b8c:	4a2c      	ldr	r2, [pc, #176]	; (8006c40 <VL53L1X_SensorInit+0xd4>)
 8006b8e:	5cd2      	ldrb	r2, [r2, r3]
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f9aa 	bl	8006eec <VL53L1_WrByte>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	73bb      	strb	r3, [r7, #14]
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b87      	cmp	r3, #135	; 0x87
 8006bac:	d9ea      	bls.n	8006b84 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f8c1 	bl	8006d38 <VL53L1X_StartRanging>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8006bc4:	e00b      	b.n	8006bde <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8006bc6:	f107 020d 	add.w	r2, r7, #13
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f8e2 	bl	8006d98 <VL53L1X_CheckForDataReady>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8006bde:	7b7b      	ldrb	r3, [r7, #13]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f82c 	bl	8006c44 <VL53L1X_ClearInterrupt>
 8006bec:	4603      	mov	r3, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f8b5 	bl	8006d68 <VL53L1X_StopRanging>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2209      	movs	r2, #9
 8006c0c:	2108      	movs	r1, #8
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f96c 	bl	8006eec <VL53L1_WrByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2200      	movs	r2, #0
 8006c22:	210b      	movs	r1, #11
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f961 	bl	8006eec <VL53L1_WrByte>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	73fb      	strb	r3, [r7, #15]
	return status;
 8006c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08008168 	.word	0x08008168

08006c44 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2201      	movs	r2, #1
 8006c56:	2186      	movs	r1, #134	; 0x86
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f947 	bl	8006eec <VL53L1_WrByte>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	73fb      	strb	r3, [r7, #15]
	return status;
 8006c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <VL53L1X_SetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_SetInterruptPolarity(uint16_t dev, uint8_t NewPolarity)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	80fb      	strh	r3, [r7, #6]
 8006c80:	4613      	mov	r3, r2
 8006c82:	717b      	strb	r3, [r7, #5]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8006c88:	f107 020e 	add.w	r2, r7, #14
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2130      	movs	r1, #48	; 0x30
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f957 	bl	8006f44 <VL53L1_RdByte>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461a      	mov	r2, r3
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0xEF;
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	73bb      	strb	r3, [r7, #14]
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
 8006caa:	797b      	ldrb	r3, [r7, #5]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <VL53L1X_SetInterruptPolarity+0x44>
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	e000      	b.n	8006cba <VL53L1X_SetInterruptPolarity+0x46>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2130      	movs	r1, #48	; 0x30
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f90f 	bl	8006eec <VL53L1_WrByte>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	73fb      	strb	r3, [r7, #15]
	return status;
 8006cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <VL53L1X_GetInterruptPolarity>:

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8006cf4:	f107 020e 	add.w	r2, r7, #14
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	2130      	movs	r1, #48	; 0x30
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f921 	bl	8006f44 <VL53L1_RdByte>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	701a      	strb	r2, [r3, #0]
	return status;
 8006d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2240      	movs	r2, #64	; 0x40
 8006d4a:	2187      	movs	r1, #135	; 0x87
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 f8cd 	bl	8006eec <VL53L1_WrByte>
 8006d52:	4603      	mov	r3, r0
 8006d54:	461a      	mov	r2, r3
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2187      	movs	r1, #135	; 0x87
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 f8b5 	bl	8006eec <VL53L1_WrByte>
 8006d82:	4603      	mov	r3, r0
 8006d84:	461a      	mov	r2, r3
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	73fb      	strb	r3, [r7, #15]
	return status;
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8006da8:	f107 020d 	add.w	r2, r7, #13
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff97 	bl	8006ce4 <VL53L1X_GetInterruptPolarity>
 8006db6:	4603      	mov	r3, r0
 8006db8:	461a      	mov	r2, r3
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8006dc0:	f107 020e 	add.w	r2, r7, #14
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	2131      	movs	r1, #49	; 0x31
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f8bb 	bl	8006f44 <VL53L1_RdByte>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8006dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10c      	bne.n	8006dfa <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	7b7a      	ldrb	r2, [r7, #13]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d103      	bne.n	8006df4 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2201      	movs	r2, #1
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e002      	b.n	8006dfa <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8006dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	6039      	str	r1, [r7, #0]
 8006e10:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8006e1a:	f107 020e 	add.w	r2, r7, #14
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	21e5      	movs	r1, #229	; 0xe5
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f88e 	bl	8006f44 <VL53L1_RdByte>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8006e32:	7bba      	ldrb	r2, [r7, #14]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	701a      	strb	r2, [r3, #0]
	return status;
 8006e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8006e54:	f107 020c 	add.w	r2, r7, #12
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2196      	movs	r1, #150	; 0x96
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 f8a9 	bl	8006fb4 <VL53L1_RdWord>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006e6c:	89ba      	ldrh	r2, [r7, #12]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	801a      	strh	r2, [r3, #0]
	return status;
 8006e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	4603      	mov	r3, r0
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	89f9      	ldrh	r1, [r7, #14]
 8006e94:	220a      	movs	r2, #10
 8006e96:	9200      	str	r2, [sp, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	4805      	ldr	r0, [pc, #20]	; (8006eb0 <_I2CWrite+0x30>)
 8006e9c:	f7fb ff88 	bl	8002db0 <HAL_I2C_Master_Transmit>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006ea4:	697b      	ldr	r3, [r7, #20]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	200000c4 	.word	0x200000c4

08006eb4 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	4603      	mov	r3, r0
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	b299      	uxth	r1, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	220a      	movs	r2, #10
 8006ed0:	9200      	str	r2, [sp, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4804      	ldr	r0, [pc, #16]	; (8006ee8 <_I2CRead+0x34>)
 8006ed6:	f7fc f869 	bl	8002fac <HAL_I2C_Master_Receive>
 8006eda:	4603      	mov	r3, r0
 8006edc:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006ede:	697b      	ldr	r3, [r7, #20]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200000c4 	.word	0x200000c4

08006eec <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	80fb      	strh	r3, [r7, #6]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	80bb      	strh	r3, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006f02:	88bb      	ldrh	r3, [r7, #4]
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <VL53L1_WrByte+0x54>)
 8006f0c:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <VL53L1_WrByte+0x54>)
 8006f14:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <VL53L1_WrByte+0x54>)
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	4907      	ldr	r1, [pc, #28]	; (8006f40 <VL53L1_WrByte+0x54>)
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ffac 	bl	8006e80 <_I2CWrite>
 8006f28:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f30:	23f3      	movs	r3, #243	; 0xf3
 8006f32:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8006f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000220 	.word	0x20000220

08006f44 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	603a      	str	r2, [r7, #0]
 8006f4e:	80fb      	strh	r3, [r7, #6]
 8006f50:	460b      	mov	r3, r1
 8006f52:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006f58:	88bb      	ldrh	r3, [r7, #4]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <VL53L1_RdByte+0x6c>)
 8006f62:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006f64:	88bb      	ldrh	r3, [r7, #4]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <VL53L1_RdByte+0x6c>)
 8006f6a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	490f      	ldr	r1, [pc, #60]	; (8006fb0 <VL53L1_RdByte+0x6c>)
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff84 	bl	8006e80 <_I2CWrite>
 8006f78:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f80:	23f3      	movs	r3, #243	; 0xf3
 8006f82:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006f84:	e00d      	b.n	8006fa2 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ff91 	bl	8006eb4 <_I2CRead>
 8006f92:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f9a:	23f3      	movs	r3, #243	; 0xf3
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	e000      	b.n	8006fa2 <VL53L1_RdByte+0x5e>
    }
done:
 8006fa0:	bf00      	nop
    return Status;
 8006fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000220 	.word	0x20000220

08006fb4 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	603a      	str	r2, [r7, #0]
 8006fbe:	80fb      	strh	r3, [r7, #6]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006fc8:	88bb      	ldrh	r3, [r7, #4]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	4b18      	ldr	r3, [pc, #96]	; (8007034 <VL53L1_RdWord+0x80>)
 8006fd2:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006fd4:	88bb      	ldrh	r3, [r7, #4]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <VL53L1_RdWord+0x80>)
 8006fda:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	4914      	ldr	r1, [pc, #80]	; (8007034 <VL53L1_RdWord+0x80>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff4c 	bl	8006e80 <_I2CWrite>
 8006fe8:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006ff0:	23f3      	movs	r3, #243	; 0xf3
 8006ff2:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006ff4:	e018      	b.n	8007028 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	490e      	ldr	r1, [pc, #56]	; (8007034 <VL53L1_RdWord+0x80>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff59 	bl	8006eb4 <_I2CRead>
 8007002:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800700a:	23f3      	movs	r3, #243	; 0xf3
 800700c:	73fb      	strb	r3, [r7, #15]
        goto done;
 800700e:	e00b      	b.n	8007028 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <VL53L1_RdWord+0x80>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	b29a      	uxth	r2, r3
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <VL53L1_RdWord+0x80>)
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	b29b      	uxth	r3, r3
 8007020:	4413      	add	r3, r2
 8007022:	b29a      	uxth	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8007028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000220 	.word	0x20000220

08007038 <calloc>:
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <calloc+0xc>)
 800703a:	460a      	mov	r2, r1
 800703c:	4601      	mov	r1, r0
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	f000 b834 	b.w	80070ac <_calloc_r>
 8007044:	2000001c 	.word	0x2000001c

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	; (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2000001c 	.word	0x2000001c

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f001 f83a 	bl	80080e0 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	08008264 	.word	0x08008264
 8007090:	08008264 	.word	0x08008264
 8007094:	08008264 	.word	0x08008264
 8007098:	08008268 	.word	0x08008268

0800709c <memset>:
 800709c:	4402      	add	r2, r0
 800709e:	4603      	mov	r3, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>

080070ac <_calloc_r>:
 80070ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ae:	fba1 2402 	umull	r2, r4, r1, r2
 80070b2:	b94c      	cbnz	r4, 80070c8 <_calloc_r+0x1c>
 80070b4:	4611      	mov	r1, r2
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	f000 f82e 	bl	8007118 <_malloc_r>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	4605      	mov	r5, r0
 80070c0:	b930      	cbnz	r0, 80070d0 <_calloc_r+0x24>
 80070c2:	4628      	mov	r0, r5
 80070c4:	b003      	add	sp, #12
 80070c6:	bd30      	pop	{r4, r5, pc}
 80070c8:	220c      	movs	r2, #12
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	2500      	movs	r5, #0
 80070ce:	e7f8      	b.n	80070c2 <_calloc_r+0x16>
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7ff ffe3 	bl	800709c <memset>
 80070d6:	e7f4      	b.n	80070c2 <_calloc_r+0x16>

080070d8 <sbrk_aligned>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4e0e      	ldr	r6, [pc, #56]	; (8007114 <sbrk_aligned+0x3c>)
 80070dc:	460c      	mov	r4, r1
 80070de:	6831      	ldr	r1, [r6, #0]
 80070e0:	4605      	mov	r5, r0
 80070e2:	b911      	cbnz	r1, 80070ea <sbrk_aligned+0x12>
 80070e4:	f000 f91a 	bl	800731c <_sbrk_r>
 80070e8:	6030      	str	r0, [r6, #0]
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f000 f915 	bl	800731c <_sbrk_r>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	d00a      	beq.n	800710c <sbrk_aligned+0x34>
 80070f6:	1cc4      	adds	r4, r0, #3
 80070f8:	f024 0403 	bic.w	r4, r4, #3
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d007      	beq.n	8007110 <sbrk_aligned+0x38>
 8007100:	1a21      	subs	r1, r4, r0
 8007102:	4628      	mov	r0, r5
 8007104:	f000 f90a 	bl	800731c <_sbrk_r>
 8007108:	3001      	adds	r0, #1
 800710a:	d101      	bne.n	8007110 <sbrk_aligned+0x38>
 800710c:	f04f 34ff 	mov.w	r4, #4294967295
 8007110:	4620      	mov	r0, r4
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	20000324 	.word	0x20000324

08007118 <_malloc_r>:
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	1ccd      	adds	r5, r1, #3
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	2d00      	cmp	r5, #0
 800712c:	4607      	mov	r7, r0
 800712e:	db01      	blt.n	8007134 <_malloc_r+0x1c>
 8007130:	42a9      	cmp	r1, r5
 8007132:	d905      	bls.n	8007140 <_malloc_r+0x28>
 8007134:	230c      	movs	r3, #12
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	2600      	movs	r6, #0
 800713a:	4630      	mov	r0, r6
 800713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007140:	4e2e      	ldr	r6, [pc, #184]	; (80071fc <_malloc_r+0xe4>)
 8007142:	f000 fbdb 	bl	80078fc <__malloc_lock>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	461c      	mov	r4, r3
 800714a:	bb34      	cbnz	r4, 800719a <_malloc_r+0x82>
 800714c:	4629      	mov	r1, r5
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ffc2 	bl	80070d8 <sbrk_aligned>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	4604      	mov	r4, r0
 8007158:	d14d      	bne.n	80071f6 <_malloc_r+0xde>
 800715a:	6834      	ldr	r4, [r6, #0]
 800715c:	4626      	mov	r6, r4
 800715e:	2e00      	cmp	r6, #0
 8007160:	d140      	bne.n	80071e4 <_malloc_r+0xcc>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	4631      	mov	r1, r6
 8007166:	4638      	mov	r0, r7
 8007168:	eb04 0803 	add.w	r8, r4, r3
 800716c:	f000 f8d6 	bl	800731c <_sbrk_r>
 8007170:	4580      	cmp	r8, r0
 8007172:	d13a      	bne.n	80071ea <_malloc_r+0xd2>
 8007174:	6821      	ldr	r1, [r4, #0]
 8007176:	3503      	adds	r5, #3
 8007178:	1a6d      	subs	r5, r5, r1
 800717a:	f025 0503 	bic.w	r5, r5, #3
 800717e:	3508      	adds	r5, #8
 8007180:	2d0c      	cmp	r5, #12
 8007182:	bf38      	it	cc
 8007184:	250c      	movcc	r5, #12
 8007186:	4629      	mov	r1, r5
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff ffa5 	bl	80070d8 <sbrk_aligned>
 800718e:	3001      	adds	r0, #1
 8007190:	d02b      	beq.n	80071ea <_malloc_r+0xd2>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	442b      	add	r3, r5
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	e00e      	b.n	80071b8 <_malloc_r+0xa0>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	1b52      	subs	r2, r2, r5
 800719e:	d41e      	bmi.n	80071de <_malloc_r+0xc6>
 80071a0:	2a0b      	cmp	r2, #11
 80071a2:	d916      	bls.n	80071d2 <_malloc_r+0xba>
 80071a4:	1961      	adds	r1, r4, r5
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	6025      	str	r5, [r4, #0]
 80071aa:	bf18      	it	ne
 80071ac:	6059      	strne	r1, [r3, #4]
 80071ae:	6863      	ldr	r3, [r4, #4]
 80071b0:	bf08      	it	eq
 80071b2:	6031      	streq	r1, [r6, #0]
 80071b4:	5162      	str	r2, [r4, r5]
 80071b6:	604b      	str	r3, [r1, #4]
 80071b8:	4638      	mov	r0, r7
 80071ba:	f104 060b 	add.w	r6, r4, #11
 80071be:	f000 fba3 	bl	8007908 <__malloc_unlock>
 80071c2:	f026 0607 	bic.w	r6, r6, #7
 80071c6:	1d23      	adds	r3, r4, #4
 80071c8:	1af2      	subs	r2, r6, r3
 80071ca:	d0b6      	beq.n	800713a <_malloc_r+0x22>
 80071cc:	1b9b      	subs	r3, r3, r6
 80071ce:	50a3      	str	r3, [r4, r2]
 80071d0:	e7b3      	b.n	800713a <_malloc_r+0x22>
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	bf0c      	ite	eq
 80071d8:	6032      	streq	r2, [r6, #0]
 80071da:	605a      	strne	r2, [r3, #4]
 80071dc:	e7ec      	b.n	80071b8 <_malloc_r+0xa0>
 80071de:	4623      	mov	r3, r4
 80071e0:	6864      	ldr	r4, [r4, #4]
 80071e2:	e7b2      	b.n	800714a <_malloc_r+0x32>
 80071e4:	4634      	mov	r4, r6
 80071e6:	6876      	ldr	r6, [r6, #4]
 80071e8:	e7b9      	b.n	800715e <_malloc_r+0x46>
 80071ea:	230c      	movs	r3, #12
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4638      	mov	r0, r7
 80071f0:	f000 fb8a 	bl	8007908 <__malloc_unlock>
 80071f4:	e7a1      	b.n	800713a <_malloc_r+0x22>
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	e7de      	b.n	80071b8 <_malloc_r+0xa0>
 80071fa:	bf00      	nop
 80071fc:	20000320 	.word	0x20000320

08007200 <iprintf>:
 8007200:	b40f      	push	{r0, r1, r2, r3}
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <iprintf+0x2c>)
 8007204:	b513      	push	{r0, r1, r4, lr}
 8007206:	681c      	ldr	r4, [r3, #0]
 8007208:	b124      	cbz	r4, 8007214 <iprintf+0x14>
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	b913      	cbnz	r3, 8007214 <iprintf+0x14>
 800720e:	4620      	mov	r0, r4
 8007210:	f000 fa6e 	bl	80076f0 <__sinit>
 8007214:	ab05      	add	r3, sp, #20
 8007216:	9a04      	ldr	r2, [sp, #16]
 8007218:	68a1      	ldr	r1, [r4, #8]
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fbef 	bl	8007a00 <_vfiprintf_r>
 8007222:	b002      	add	sp, #8
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	2000001c 	.word	0x2000001c

08007230 <_puts_r>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	460e      	mov	r6, r1
 8007234:	4605      	mov	r5, r0
 8007236:	b118      	cbz	r0, 8007240 <_puts_r+0x10>
 8007238:	6983      	ldr	r3, [r0, #24]
 800723a:	b90b      	cbnz	r3, 8007240 <_puts_r+0x10>
 800723c:	f000 fa58 	bl	80076f0 <__sinit>
 8007240:	69ab      	ldr	r3, [r5, #24]
 8007242:	68ac      	ldr	r4, [r5, #8]
 8007244:	b913      	cbnz	r3, 800724c <_puts_r+0x1c>
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fa52 	bl	80076f0 <__sinit>
 800724c:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <_puts_r+0xd0>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d120      	bne.n	8007294 <_puts_r+0x64>
 8007252:	686c      	ldr	r4, [r5, #4]
 8007254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007256:	07db      	lsls	r3, r3, #31
 8007258:	d405      	bmi.n	8007266 <_puts_r+0x36>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	0598      	lsls	r0, r3, #22
 800725e:	d402      	bmi.n	8007266 <_puts_r+0x36>
 8007260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007262:	f000 fae3 	bl	800782c <__retarget_lock_acquire_recursive>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d51d      	bpl.n	80072a8 <_puts_r+0x78>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	b1db      	cbz	r3, 80072a8 <_puts_r+0x78>
 8007270:	3e01      	subs	r6, #1
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007278:	3b01      	subs	r3, #1
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	bb39      	cbnz	r1, 80072ce <_puts_r+0x9e>
 800727e:	2b00      	cmp	r3, #0
 8007280:	da38      	bge.n	80072f4 <_puts_r+0xc4>
 8007282:	4622      	mov	r2, r4
 8007284:	210a      	movs	r1, #10
 8007286:	4628      	mov	r0, r5
 8007288:	f000 f858 	bl	800733c <__swbuf_r>
 800728c:	3001      	adds	r0, #1
 800728e:	d011      	beq.n	80072b4 <_puts_r+0x84>
 8007290:	250a      	movs	r5, #10
 8007292:	e011      	b.n	80072b8 <_puts_r+0x88>
 8007294:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <_puts_r+0xd4>)
 8007296:	429c      	cmp	r4, r3
 8007298:	d101      	bne.n	800729e <_puts_r+0x6e>
 800729a:	68ac      	ldr	r4, [r5, #8]
 800729c:	e7da      	b.n	8007254 <_puts_r+0x24>
 800729e:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <_puts_r+0xd8>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	bf08      	it	eq
 80072a4:	68ec      	ldreq	r4, [r5, #12]
 80072a6:	e7d5      	b.n	8007254 <_puts_r+0x24>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f898 	bl	80073e0 <__swsetup_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0dd      	beq.n	8007270 <_puts_r+0x40>
 80072b4:	f04f 35ff 	mov.w	r5, #4294967295
 80072b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ba:	07da      	lsls	r2, r3, #31
 80072bc:	d405      	bmi.n	80072ca <_puts_r+0x9a>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	059b      	lsls	r3, r3, #22
 80072c2:	d402      	bmi.n	80072ca <_puts_r+0x9a>
 80072c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c6:	f000 fab2 	bl	800782e <__retarget_lock_release_recursive>
 80072ca:	4628      	mov	r0, r5
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da04      	bge.n	80072dc <_puts_r+0xac>
 80072d2:	69a2      	ldr	r2, [r4, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	dc06      	bgt.n	80072e6 <_puts_r+0xb6>
 80072d8:	290a      	cmp	r1, #10
 80072da:	d004      	beq.n	80072e6 <_puts_r+0xb6>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	e7c5      	b.n	8007272 <_puts_r+0x42>
 80072e6:	4622      	mov	r2, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 f827 	bl	800733c <__swbuf_r>
 80072ee:	3001      	adds	r0, #1
 80072f0:	d1bf      	bne.n	8007272 <_puts_r+0x42>
 80072f2:	e7df      	b.n	80072b4 <_puts_r+0x84>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	250a      	movs	r5, #10
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	6022      	str	r2, [r4, #0]
 80072fc:	701d      	strb	r5, [r3, #0]
 80072fe:	e7db      	b.n	80072b8 <_puts_r+0x88>
 8007300:	080081e8 	.word	0x080081e8
 8007304:	08008208 	.word	0x08008208
 8007308:	080081c8 	.word	0x080081c8

0800730c <puts>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <puts+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f7ff bf8d 	b.w	8007230 <_puts_r>
 8007316:	bf00      	nop
 8007318:	2000001c 	.word	0x2000001c

0800731c <_sbrk_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d06      	ldr	r5, [pc, #24]	; (8007338 <_sbrk_r+0x1c>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7fa f924 	bl	8001574 <_sbrk>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_sbrk_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_sbrk_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	2000032c 	.word	0x2000032c

0800733c <__swbuf_r>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	460e      	mov	r6, r1
 8007340:	4614      	mov	r4, r2
 8007342:	4605      	mov	r5, r0
 8007344:	b118      	cbz	r0, 800734e <__swbuf_r+0x12>
 8007346:	6983      	ldr	r3, [r0, #24]
 8007348:	b90b      	cbnz	r3, 800734e <__swbuf_r+0x12>
 800734a:	f000 f9d1 	bl	80076f0 <__sinit>
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <__swbuf_r+0x98>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d12b      	bne.n	80073ac <__swbuf_r+0x70>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	69a3      	ldr	r3, [r4, #24]
 8007358:	60a3      	str	r3, [r4, #8]
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	071a      	lsls	r2, r3, #28
 800735e:	d52f      	bpl.n	80073c0 <__swbuf_r+0x84>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	b36b      	cbz	r3, 80073c0 <__swbuf_r+0x84>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	1ac0      	subs	r0, r0, r3
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	b2f6      	uxtb	r6, r6
 800736e:	4283      	cmp	r3, r0
 8007370:	4637      	mov	r7, r6
 8007372:	dc04      	bgt.n	800737e <__swbuf_r+0x42>
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 f926 	bl	80075c8 <_fflush_r>
 800737c:	bb30      	cbnz	r0, 80073cc <__swbuf_r+0x90>
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	3b01      	subs	r3, #1
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	701e      	strb	r6, [r3, #0]
 800738c:	6963      	ldr	r3, [r4, #20]
 800738e:	3001      	adds	r0, #1
 8007390:	4283      	cmp	r3, r0
 8007392:	d004      	beq.n	800739e <__swbuf_r+0x62>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d506      	bpl.n	80073a8 <__swbuf_r+0x6c>
 800739a:	2e0a      	cmp	r6, #10
 800739c:	d104      	bne.n	80073a8 <__swbuf_r+0x6c>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f911 	bl	80075c8 <_fflush_r>
 80073a6:	b988      	cbnz	r0, 80073cc <__swbuf_r+0x90>
 80073a8:	4638      	mov	r0, r7
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <__swbuf_r+0x9c>)
 80073ae:	429c      	cmp	r4, r3
 80073b0:	d101      	bne.n	80073b6 <__swbuf_r+0x7a>
 80073b2:	68ac      	ldr	r4, [r5, #8]
 80073b4:	e7cf      	b.n	8007356 <__swbuf_r+0x1a>
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <__swbuf_r+0xa0>)
 80073b8:	429c      	cmp	r4, r3
 80073ba:	bf08      	it	eq
 80073bc:	68ec      	ldreq	r4, [r5, #12]
 80073be:	e7ca      	b.n	8007356 <__swbuf_r+0x1a>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f80c 	bl	80073e0 <__swsetup_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0cb      	beq.n	8007364 <__swbuf_r+0x28>
 80073cc:	f04f 37ff 	mov.w	r7, #4294967295
 80073d0:	e7ea      	b.n	80073a8 <__swbuf_r+0x6c>
 80073d2:	bf00      	nop
 80073d4:	080081e8 	.word	0x080081e8
 80073d8:	08008208 	.word	0x08008208
 80073dc:	080081c8 	.word	0x080081c8

080073e0 <__swsetup_r>:
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <__swsetup_r+0xcc>)
 80073e2:	b570      	push	{r4, r5, r6, lr}
 80073e4:	681d      	ldr	r5, [r3, #0]
 80073e6:	4606      	mov	r6, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	b125      	cbz	r5, 80073f6 <__swsetup_r+0x16>
 80073ec:	69ab      	ldr	r3, [r5, #24]
 80073ee:	b913      	cbnz	r3, 80073f6 <__swsetup_r+0x16>
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 f97d 	bl	80076f0 <__sinit>
 80073f6:	4b2e      	ldr	r3, [pc, #184]	; (80074b0 <__swsetup_r+0xd0>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d10f      	bne.n	800741c <__swsetup_r+0x3c>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007404:	0719      	lsls	r1, r3, #28
 8007406:	d42c      	bmi.n	8007462 <__swsetup_r+0x82>
 8007408:	06dd      	lsls	r5, r3, #27
 800740a:	d411      	bmi.n	8007430 <__swsetup_r+0x50>
 800740c:	2309      	movs	r3, #9
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	e03e      	b.n	800749a <__swsetup_r+0xba>
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <__swsetup_r+0xd4>)
 800741e:	429c      	cmp	r4, r3
 8007420:	d101      	bne.n	8007426 <__swsetup_r+0x46>
 8007422:	68ac      	ldr	r4, [r5, #8]
 8007424:	e7eb      	b.n	80073fe <__swsetup_r+0x1e>
 8007426:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <__swsetup_r+0xd8>)
 8007428:	429c      	cmp	r4, r3
 800742a:	bf08      	it	eq
 800742c:	68ec      	ldreq	r4, [r5, #12]
 800742e:	e7e6      	b.n	80073fe <__swsetup_r+0x1e>
 8007430:	0758      	lsls	r0, r3, #29
 8007432:	d512      	bpl.n	800745a <__swsetup_r+0x7a>
 8007434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007436:	b141      	cbz	r1, 800744a <__swsetup_r+0x6a>
 8007438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <__swsetup_r+0x66>
 8007440:	4630      	mov	r0, r6
 8007442:	f000 fa67 	bl	8007914 <_free_r>
 8007446:	2300      	movs	r3, #0
 8007448:	6363      	str	r3, [r4, #52]	; 0x34
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	2300      	movs	r3, #0
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f043 0308 	orr.w	r3, r3, #8
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	b94b      	cbnz	r3, 800747a <__swsetup_r+0x9a>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007470:	d003      	beq.n	800747a <__swsetup_r+0x9a>
 8007472:	4621      	mov	r1, r4
 8007474:	4630      	mov	r0, r6
 8007476:	f000 fa01 	bl	800787c <__smakebuf_r>
 800747a:	89a0      	ldrh	r0, [r4, #12]
 800747c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007480:	f010 0301 	ands.w	r3, r0, #1
 8007484:	d00a      	beq.n	800749c <__swsetup_r+0xbc>
 8007486:	2300      	movs	r3, #0
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	6963      	ldr	r3, [r4, #20]
 800748c:	425b      	negs	r3, r3
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	b943      	cbnz	r3, 80074a6 <__swsetup_r+0xc6>
 8007494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007498:	d1ba      	bne.n	8007410 <__swsetup_r+0x30>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	0781      	lsls	r1, r0, #30
 800749e:	bf58      	it	pl
 80074a0:	6963      	ldrpl	r3, [r4, #20]
 80074a2:	60a3      	str	r3, [r4, #8]
 80074a4:	e7f4      	b.n	8007490 <__swsetup_r+0xb0>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e7f7      	b.n	800749a <__swsetup_r+0xba>
 80074aa:	bf00      	nop
 80074ac:	2000001c 	.word	0x2000001c
 80074b0:	080081e8 	.word	0x080081e8
 80074b4:	08008208 	.word	0x08008208
 80074b8:	080081c8 	.word	0x080081c8

080074bc <__sflush_r>:
 80074bc:	898a      	ldrh	r2, [r1, #12]
 80074be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	0710      	lsls	r0, r2, #28
 80074c6:	460c      	mov	r4, r1
 80074c8:	d458      	bmi.n	800757c <__sflush_r+0xc0>
 80074ca:	684b      	ldr	r3, [r1, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc05      	bgt.n	80074dc <__sflush_r+0x20>
 80074d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dc02      	bgt.n	80074dc <__sflush_r+0x20>
 80074d6:	2000      	movs	r0, #0
 80074d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d0f9      	beq.n	80074d6 <__sflush_r+0x1a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e8:	682f      	ldr	r7, [r5, #0]
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	d032      	beq.n	8007554 <__sflush_r+0x98>
 80074ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	075a      	lsls	r2, r3, #29
 80074f4:	d505      	bpl.n	8007502 <__sflush_r+0x46>
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	1ac0      	subs	r0, r0, r3
 80074fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074fc:	b10b      	cbz	r3, 8007502 <__sflush_r+0x46>
 80074fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007500:	1ac0      	subs	r0, r0, r3
 8007502:	2300      	movs	r3, #0
 8007504:	4602      	mov	r2, r0
 8007506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007508:	6a21      	ldr	r1, [r4, #32]
 800750a:	4628      	mov	r0, r5
 800750c:	47b0      	blx	r6
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	d106      	bne.n	8007522 <__sflush_r+0x66>
 8007514:	6829      	ldr	r1, [r5, #0]
 8007516:	291d      	cmp	r1, #29
 8007518:	d82c      	bhi.n	8007574 <__sflush_r+0xb8>
 800751a:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <__sflush_r+0x108>)
 800751c:	40ca      	lsrs	r2, r1
 800751e:	07d6      	lsls	r6, r2, #31
 8007520:	d528      	bpl.n	8007574 <__sflush_r+0xb8>
 8007522:	2200      	movs	r2, #0
 8007524:	6062      	str	r2, [r4, #4]
 8007526:	04d9      	lsls	r1, r3, #19
 8007528:	6922      	ldr	r2, [r4, #16]
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	d504      	bpl.n	8007538 <__sflush_r+0x7c>
 800752e:	1c42      	adds	r2, r0, #1
 8007530:	d101      	bne.n	8007536 <__sflush_r+0x7a>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	b903      	cbnz	r3, 8007538 <__sflush_r+0x7c>
 8007536:	6560      	str	r0, [r4, #84]	; 0x54
 8007538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753a:	602f      	str	r7, [r5, #0]
 800753c:	2900      	cmp	r1, #0
 800753e:	d0ca      	beq.n	80074d6 <__sflush_r+0x1a>
 8007540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007544:	4299      	cmp	r1, r3
 8007546:	d002      	beq.n	800754e <__sflush_r+0x92>
 8007548:	4628      	mov	r0, r5
 800754a:	f000 f9e3 	bl	8007914 <_free_r>
 800754e:	2000      	movs	r0, #0
 8007550:	6360      	str	r0, [r4, #52]	; 0x34
 8007552:	e7c1      	b.n	80074d8 <__sflush_r+0x1c>
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	2301      	movs	r3, #1
 8007558:	4628      	mov	r0, r5
 800755a:	47b0      	blx	r6
 800755c:	1c41      	adds	r1, r0, #1
 800755e:	d1c7      	bne.n	80074f0 <__sflush_r+0x34>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0c4      	beq.n	80074f0 <__sflush_r+0x34>
 8007566:	2b1d      	cmp	r3, #29
 8007568:	d001      	beq.n	800756e <__sflush_r+0xb2>
 800756a:	2b16      	cmp	r3, #22
 800756c:	d101      	bne.n	8007572 <__sflush_r+0xb6>
 800756e:	602f      	str	r7, [r5, #0]
 8007570:	e7b1      	b.n	80074d6 <__sflush_r+0x1a>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	e7ad      	b.n	80074d8 <__sflush_r+0x1c>
 800757c:	690f      	ldr	r7, [r1, #16]
 800757e:	2f00      	cmp	r7, #0
 8007580:	d0a9      	beq.n	80074d6 <__sflush_r+0x1a>
 8007582:	0793      	lsls	r3, r2, #30
 8007584:	680e      	ldr	r6, [r1, #0]
 8007586:	bf08      	it	eq
 8007588:	694b      	ldreq	r3, [r1, #20]
 800758a:	600f      	str	r7, [r1, #0]
 800758c:	bf18      	it	ne
 800758e:	2300      	movne	r3, #0
 8007590:	eba6 0807 	sub.w	r8, r6, r7
 8007594:	608b      	str	r3, [r1, #8]
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	dd9c      	ble.n	80074d6 <__sflush_r+0x1a>
 800759c:	6a21      	ldr	r1, [r4, #32]
 800759e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075a0:	4643      	mov	r3, r8
 80075a2:	463a      	mov	r2, r7
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b0      	blx	r6
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dc06      	bgt.n	80075ba <__sflush_r+0xfe>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e78e      	b.n	80074d8 <__sflush_r+0x1c>
 80075ba:	4407      	add	r7, r0
 80075bc:	eba8 0800 	sub.w	r8, r8, r0
 80075c0:	e7e9      	b.n	8007596 <__sflush_r+0xda>
 80075c2:	bf00      	nop
 80075c4:	20400001 	.word	0x20400001

080075c8 <_fflush_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	4605      	mov	r5, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	b913      	cbnz	r3, 80075d8 <_fflush_r+0x10>
 80075d2:	2500      	movs	r5, #0
 80075d4:	4628      	mov	r0, r5
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	b118      	cbz	r0, 80075e2 <_fflush_r+0x1a>
 80075da:	6983      	ldr	r3, [r0, #24]
 80075dc:	b90b      	cbnz	r3, 80075e2 <_fflush_r+0x1a>
 80075de:	f000 f887 	bl	80076f0 <__sinit>
 80075e2:	4b14      	ldr	r3, [pc, #80]	; (8007634 <_fflush_r+0x6c>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d11b      	bne.n	8007620 <_fflush_r+0x58>
 80075e8:	686c      	ldr	r4, [r5, #4]
 80075ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0ef      	beq.n	80075d2 <_fflush_r+0xa>
 80075f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075f4:	07d0      	lsls	r0, r2, #31
 80075f6:	d404      	bmi.n	8007602 <_fflush_r+0x3a>
 80075f8:	0599      	lsls	r1, r3, #22
 80075fa:	d402      	bmi.n	8007602 <_fflush_r+0x3a>
 80075fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fe:	f000 f915 	bl	800782c <__retarget_lock_acquire_recursive>
 8007602:	4628      	mov	r0, r5
 8007604:	4621      	mov	r1, r4
 8007606:	f7ff ff59 	bl	80074bc <__sflush_r>
 800760a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800760c:	07da      	lsls	r2, r3, #31
 800760e:	4605      	mov	r5, r0
 8007610:	d4e0      	bmi.n	80075d4 <_fflush_r+0xc>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	059b      	lsls	r3, r3, #22
 8007616:	d4dd      	bmi.n	80075d4 <_fflush_r+0xc>
 8007618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800761a:	f000 f908 	bl	800782e <__retarget_lock_release_recursive>
 800761e:	e7d9      	b.n	80075d4 <_fflush_r+0xc>
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <_fflush_r+0x70>)
 8007622:	429c      	cmp	r4, r3
 8007624:	d101      	bne.n	800762a <_fflush_r+0x62>
 8007626:	68ac      	ldr	r4, [r5, #8]
 8007628:	e7df      	b.n	80075ea <_fflush_r+0x22>
 800762a:	4b04      	ldr	r3, [pc, #16]	; (800763c <_fflush_r+0x74>)
 800762c:	429c      	cmp	r4, r3
 800762e:	bf08      	it	eq
 8007630:	68ec      	ldreq	r4, [r5, #12]
 8007632:	e7da      	b.n	80075ea <_fflush_r+0x22>
 8007634:	080081e8 	.word	0x080081e8
 8007638:	08008208 	.word	0x08008208
 800763c:	080081c8 	.word	0x080081c8

08007640 <std>:
 8007640:	2300      	movs	r3, #0
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
 8007646:	e9c0 3300 	strd	r3, r3, [r0]
 800764a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800764e:	6083      	str	r3, [r0, #8]
 8007650:	8181      	strh	r1, [r0, #12]
 8007652:	6643      	str	r3, [r0, #100]	; 0x64
 8007654:	81c2      	strh	r2, [r0, #14]
 8007656:	6183      	str	r3, [r0, #24]
 8007658:	4619      	mov	r1, r3
 800765a:	2208      	movs	r2, #8
 800765c:	305c      	adds	r0, #92	; 0x5c
 800765e:	f7ff fd1d 	bl	800709c <memset>
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <std+0x38>)
 8007664:	6263      	str	r3, [r4, #36]	; 0x24
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <std+0x3c>)
 8007668:	62a3      	str	r3, [r4, #40]	; 0x28
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <std+0x40>)
 800766c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <std+0x44>)
 8007670:	6224      	str	r4, [r4, #32]
 8007672:	6323      	str	r3, [r4, #48]	; 0x30
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	08007f89 	.word	0x08007f89
 800767c:	08007fab 	.word	0x08007fab
 8007680:	08007fe3 	.word	0x08007fe3
 8007684:	08008007 	.word	0x08008007

08007688 <_cleanup_r>:
 8007688:	4901      	ldr	r1, [pc, #4]	; (8007690 <_cleanup_r+0x8>)
 800768a:	f000 b8af 	b.w	80077ec <_fwalk_reent>
 800768e:	bf00      	nop
 8007690:	080075c9 	.word	0x080075c9

08007694 <__sfmoreglue>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	2268      	movs	r2, #104	; 0x68
 8007698:	1e4d      	subs	r5, r1, #1
 800769a:	4355      	muls	r5, r2
 800769c:	460e      	mov	r6, r1
 800769e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076a2:	f7ff fd39 	bl	8007118 <_malloc_r>
 80076a6:	4604      	mov	r4, r0
 80076a8:	b140      	cbz	r0, 80076bc <__sfmoreglue+0x28>
 80076aa:	2100      	movs	r1, #0
 80076ac:	e9c0 1600 	strd	r1, r6, [r0]
 80076b0:	300c      	adds	r0, #12
 80076b2:	60a0      	str	r0, [r4, #8]
 80076b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076b8:	f7ff fcf0 	bl	800709c <memset>
 80076bc:	4620      	mov	r0, r4
 80076be:	bd70      	pop	{r4, r5, r6, pc}

080076c0 <__sfp_lock_acquire>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__sfp_lock_acquire+0x8>)
 80076c2:	f000 b8b3 	b.w	800782c <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	20000329 	.word	0x20000329

080076cc <__sfp_lock_release>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__sfp_lock_release+0x8>)
 80076ce:	f000 b8ae 	b.w	800782e <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	20000329 	.word	0x20000329

080076d8 <__sinit_lock_acquire>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__sinit_lock_acquire+0x8>)
 80076da:	f000 b8a7 	b.w	800782c <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	2000032a 	.word	0x2000032a

080076e4 <__sinit_lock_release>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__sinit_lock_release+0x8>)
 80076e6:	f000 b8a2 	b.w	800782e <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	2000032a 	.word	0x2000032a

080076f0 <__sinit>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	f7ff fff0 	bl	80076d8 <__sinit_lock_acquire>
 80076f8:	69a3      	ldr	r3, [r4, #24]
 80076fa:	b11b      	cbz	r3, 8007704 <__sinit+0x14>
 80076fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007700:	f7ff bff0 	b.w	80076e4 <__sinit_lock_release>
 8007704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007708:	6523      	str	r3, [r4, #80]	; 0x50
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <__sinit+0x68>)
 800770c:	4a13      	ldr	r2, [pc, #76]	; (800775c <__sinit+0x6c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	62a2      	str	r2, [r4, #40]	; 0x28
 8007712:	42a3      	cmp	r3, r4
 8007714:	bf04      	itt	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	61a3      	streq	r3, [r4, #24]
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f820 	bl	8007760 <__sfp>
 8007720:	6060      	str	r0, [r4, #4]
 8007722:	4620      	mov	r0, r4
 8007724:	f000 f81c 	bl	8007760 <__sfp>
 8007728:	60a0      	str	r0, [r4, #8]
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f818 	bl	8007760 <__sfp>
 8007730:	2200      	movs	r2, #0
 8007732:	60e0      	str	r0, [r4, #12]
 8007734:	2104      	movs	r1, #4
 8007736:	6860      	ldr	r0, [r4, #4]
 8007738:	f7ff ff82 	bl	8007640 <std>
 800773c:	68a0      	ldr	r0, [r4, #8]
 800773e:	2201      	movs	r2, #1
 8007740:	2109      	movs	r1, #9
 8007742:	f7ff ff7d 	bl	8007640 <std>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	2202      	movs	r2, #2
 800774a:	2112      	movs	r1, #18
 800774c:	f7ff ff78 	bl	8007640 <std>
 8007750:	2301      	movs	r3, #1
 8007752:	61a3      	str	r3, [r4, #24]
 8007754:	e7d2      	b.n	80076fc <__sinit+0xc>
 8007756:	bf00      	nop
 8007758:	080081c4 	.word	0x080081c4
 800775c:	08007689 	.word	0x08007689

08007760 <__sfp>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	4607      	mov	r7, r0
 8007764:	f7ff ffac 	bl	80076c0 <__sfp_lock_acquire>
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <__sfp+0x84>)
 800776a:	681e      	ldr	r6, [r3, #0]
 800776c:	69b3      	ldr	r3, [r6, #24]
 800776e:	b913      	cbnz	r3, 8007776 <__sfp+0x16>
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff ffbd 	bl	80076f0 <__sinit>
 8007776:	3648      	adds	r6, #72	; 0x48
 8007778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800777c:	3b01      	subs	r3, #1
 800777e:	d503      	bpl.n	8007788 <__sfp+0x28>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	b30b      	cbz	r3, 80077c8 <__sfp+0x68>
 8007784:	6836      	ldr	r6, [r6, #0]
 8007786:	e7f7      	b.n	8007778 <__sfp+0x18>
 8007788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800778c:	b9d5      	cbnz	r5, 80077c4 <__sfp+0x64>
 800778e:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <__sfp+0x88>)
 8007790:	60e3      	str	r3, [r4, #12]
 8007792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007796:	6665      	str	r5, [r4, #100]	; 0x64
 8007798:	f000 f847 	bl	800782a <__retarget_lock_init_recursive>
 800779c:	f7ff ff96 	bl	80076cc <__sfp_lock_release>
 80077a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	61a5      	str	r5, [r4, #24]
 80077ac:	2208      	movs	r2, #8
 80077ae:	4629      	mov	r1, r5
 80077b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077b4:	f7ff fc72 	bl	800709c <memset>
 80077b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077c0:	4620      	mov	r0, r4
 80077c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c4:	3468      	adds	r4, #104	; 0x68
 80077c6:	e7d9      	b.n	800777c <__sfp+0x1c>
 80077c8:	2104      	movs	r1, #4
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ff62 	bl	8007694 <__sfmoreglue>
 80077d0:	4604      	mov	r4, r0
 80077d2:	6030      	str	r0, [r6, #0]
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d1d5      	bne.n	8007784 <__sfp+0x24>
 80077d8:	f7ff ff78 	bl	80076cc <__sfp_lock_release>
 80077dc:	230c      	movs	r3, #12
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	e7ee      	b.n	80077c0 <__sfp+0x60>
 80077e2:	bf00      	nop
 80077e4:	080081c4 	.word	0x080081c4
 80077e8:	ffff0001 	.word	0xffff0001

080077ec <_fwalk_reent>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4606      	mov	r6, r0
 80077f2:	4688      	mov	r8, r1
 80077f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077f8:	2700      	movs	r7, #0
 80077fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007802:	d505      	bpl.n	8007810 <_fwalk_reent+0x24>
 8007804:	6824      	ldr	r4, [r4, #0]
 8007806:	2c00      	cmp	r4, #0
 8007808:	d1f7      	bne.n	80077fa <_fwalk_reent+0xe>
 800780a:	4638      	mov	r0, r7
 800780c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007810:	89ab      	ldrh	r3, [r5, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d907      	bls.n	8007826 <_fwalk_reent+0x3a>
 8007816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800781a:	3301      	adds	r3, #1
 800781c:	d003      	beq.n	8007826 <_fwalk_reent+0x3a>
 800781e:	4629      	mov	r1, r5
 8007820:	4630      	mov	r0, r6
 8007822:	47c0      	blx	r8
 8007824:	4307      	orrs	r7, r0
 8007826:	3568      	adds	r5, #104	; 0x68
 8007828:	e7e9      	b.n	80077fe <_fwalk_reent+0x12>

0800782a <__retarget_lock_init_recursive>:
 800782a:	4770      	bx	lr

0800782c <__retarget_lock_acquire_recursive>:
 800782c:	4770      	bx	lr

0800782e <__retarget_lock_release_recursive>:
 800782e:	4770      	bx	lr

08007830 <__swhatbuf_r>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	460e      	mov	r6, r1
 8007834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007838:	2900      	cmp	r1, #0
 800783a:	b096      	sub	sp, #88	; 0x58
 800783c:	4614      	mov	r4, r2
 800783e:	461d      	mov	r5, r3
 8007840:	da08      	bge.n	8007854 <__swhatbuf_r+0x24>
 8007842:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	602a      	str	r2, [r5, #0]
 800784a:	061a      	lsls	r2, r3, #24
 800784c:	d410      	bmi.n	8007870 <__swhatbuf_r+0x40>
 800784e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007852:	e00e      	b.n	8007872 <__swhatbuf_r+0x42>
 8007854:	466a      	mov	r2, sp
 8007856:	f000 fbfd 	bl	8008054 <_fstat_r>
 800785a:	2800      	cmp	r0, #0
 800785c:	dbf1      	blt.n	8007842 <__swhatbuf_r+0x12>
 800785e:	9a01      	ldr	r2, [sp, #4]
 8007860:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007864:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007868:	425a      	negs	r2, r3
 800786a:	415a      	adcs	r2, r3
 800786c:	602a      	str	r2, [r5, #0]
 800786e:	e7ee      	b.n	800784e <__swhatbuf_r+0x1e>
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	2000      	movs	r0, #0
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	b016      	add	sp, #88	; 0x58
 8007878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800787c <__smakebuf_r>:
 800787c:	898b      	ldrh	r3, [r1, #12]
 800787e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007880:	079d      	lsls	r5, r3, #30
 8007882:	4606      	mov	r6, r0
 8007884:	460c      	mov	r4, r1
 8007886:	d507      	bpl.n	8007898 <__smakebuf_r+0x1c>
 8007888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	2301      	movs	r3, #1
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	b002      	add	sp, #8
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	ab01      	add	r3, sp, #4
 800789a:	466a      	mov	r2, sp
 800789c:	f7ff ffc8 	bl	8007830 <__swhatbuf_r>
 80078a0:	9900      	ldr	r1, [sp, #0]
 80078a2:	4605      	mov	r5, r0
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff fc37 	bl	8007118 <_malloc_r>
 80078aa:	b948      	cbnz	r0, 80078c0 <__smakebuf_r+0x44>
 80078ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b0:	059a      	lsls	r2, r3, #22
 80078b2:	d4ef      	bmi.n	8007894 <__smakebuf_r+0x18>
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	e7e3      	b.n	8007888 <__smakebuf_r+0xc>
 80078c0:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <__smakebuf_r+0x7c>)
 80078c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	6163      	str	r3, [r4, #20]
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	6120      	str	r0, [r4, #16]
 80078d6:	b15b      	cbz	r3, 80078f0 <__smakebuf_r+0x74>
 80078d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 fbcb 	bl	8008078 <_isatty_r>
 80078e2:	b128      	cbz	r0, 80078f0 <__smakebuf_r+0x74>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	89a0      	ldrh	r0, [r4, #12]
 80078f2:	4305      	orrs	r5, r0
 80078f4:	81a5      	strh	r5, [r4, #12]
 80078f6:	e7cd      	b.n	8007894 <__smakebuf_r+0x18>
 80078f8:	08007689 	.word	0x08007689

080078fc <__malloc_lock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__malloc_lock+0x8>)
 80078fe:	f7ff bf95 	b.w	800782c <__retarget_lock_acquire_recursive>
 8007902:	bf00      	nop
 8007904:	20000328 	.word	0x20000328

08007908 <__malloc_unlock>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__malloc_unlock+0x8>)
 800790a:	f7ff bf90 	b.w	800782e <__retarget_lock_release_recursive>
 800790e:	bf00      	nop
 8007910:	20000328 	.word	0x20000328

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d044      	beq.n	80079a4 <_free_r+0x90>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f7ff ffe7 	bl	80078fc <__malloc_lock>
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <_free_r+0x94>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x30>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007940:	f7ff bfe2 	b.w	8007908 <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x46>
 8007948:	6825      	ldr	r5, [r4, #0]
 800794a:	1961      	adds	r1, r4, r5
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x22>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x50>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x46>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1855      	adds	r5, r2, r1
 8007968:	42a5      	cmp	r5, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x70>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	4421      	add	r1, r4
 8007970:	1854      	adds	r4, r2, r1
 8007972:	42a3      	cmp	r3, r4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x26>
 8007978:	681c      	ldr	r4, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	4421      	add	r1, r4
 8007980:	6011      	str	r1, [r2, #0]
 8007982:	e7da      	b.n	800793a <_free_r+0x26>
 8007984:	d902      	bls.n	800798c <_free_r+0x78>
 8007986:	230c      	movs	r3, #12
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x26>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7ca      	b.n	800793a <_free_r+0x26>
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	20000320 	.word	0x20000320

080079ac <__sfputc_r>:
 80079ac:	6893      	ldr	r3, [r2, #8]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	b410      	push	{r4}
 80079b4:	6093      	str	r3, [r2, #8]
 80079b6:	da08      	bge.n	80079ca <__sfputc_r+0x1e>
 80079b8:	6994      	ldr	r4, [r2, #24]
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	db01      	blt.n	80079c2 <__sfputc_r+0x16>
 80079be:	290a      	cmp	r1, #10
 80079c0:	d103      	bne.n	80079ca <__sfputc_r+0x1e>
 80079c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c6:	f7ff bcb9 	b.w	800733c <__swbuf_r>
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	1c58      	adds	r0, r3, #1
 80079ce:	6010      	str	r0, [r2, #0]
 80079d0:	7019      	strb	r1, [r3, #0]
 80079d2:	4608      	mov	r0, r1
 80079d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079d8:	4770      	bx	lr

080079da <__sfputs_r>:
 80079da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079dc:	4606      	mov	r6, r0
 80079de:	460f      	mov	r7, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	18d5      	adds	r5, r2, r3
 80079e4:	42ac      	cmp	r4, r5
 80079e6:	d101      	bne.n	80079ec <__sfputs_r+0x12>
 80079e8:	2000      	movs	r0, #0
 80079ea:	e007      	b.n	80079fc <__sfputs_r+0x22>
 80079ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f0:	463a      	mov	r2, r7
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7ff ffda 	bl	80079ac <__sfputc_r>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d1f3      	bne.n	80079e4 <__sfputs_r+0xa>
 80079fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a00 <_vfiprintf_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	460d      	mov	r5, r1
 8007a06:	b09d      	sub	sp, #116	; 0x74
 8007a08:	4614      	mov	r4, r2
 8007a0a:	4698      	mov	r8, r3
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	b118      	cbz	r0, 8007a18 <_vfiprintf_r+0x18>
 8007a10:	6983      	ldr	r3, [r0, #24]
 8007a12:	b90b      	cbnz	r3, 8007a18 <_vfiprintf_r+0x18>
 8007a14:	f7ff fe6c 	bl	80076f0 <__sinit>
 8007a18:	4b89      	ldr	r3, [pc, #548]	; (8007c40 <_vfiprintf_r+0x240>)
 8007a1a:	429d      	cmp	r5, r3
 8007a1c:	d11b      	bne.n	8007a56 <_vfiprintf_r+0x56>
 8007a1e:	6875      	ldr	r5, [r6, #4]
 8007a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	d405      	bmi.n	8007a32 <_vfiprintf_r+0x32>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	059a      	lsls	r2, r3, #22
 8007a2a:	d402      	bmi.n	8007a32 <_vfiprintf_r+0x32>
 8007a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a2e:	f7ff fefd 	bl	800782c <__retarget_lock_acquire_recursive>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	071b      	lsls	r3, r3, #28
 8007a36:	d501      	bpl.n	8007a3c <_vfiprintf_r+0x3c>
 8007a38:	692b      	ldr	r3, [r5, #16]
 8007a3a:	b9eb      	cbnz	r3, 8007a78 <_vfiprintf_r+0x78>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f7ff fcce 	bl	80073e0 <__swsetup_r>
 8007a44:	b1c0      	cbz	r0, 8007a78 <_vfiprintf_r+0x78>
 8007a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a48:	07dc      	lsls	r4, r3, #31
 8007a4a:	d50e      	bpl.n	8007a6a <_vfiprintf_r+0x6a>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	b01d      	add	sp, #116	; 0x74
 8007a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a56:	4b7b      	ldr	r3, [pc, #492]	; (8007c44 <_vfiprintf_r+0x244>)
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	d101      	bne.n	8007a60 <_vfiprintf_r+0x60>
 8007a5c:	68b5      	ldr	r5, [r6, #8]
 8007a5e:	e7df      	b.n	8007a20 <_vfiprintf_r+0x20>
 8007a60:	4b79      	ldr	r3, [pc, #484]	; (8007c48 <_vfiprintf_r+0x248>)
 8007a62:	429d      	cmp	r5, r3
 8007a64:	bf08      	it	eq
 8007a66:	68f5      	ldreq	r5, [r6, #12]
 8007a68:	e7da      	b.n	8007a20 <_vfiprintf_r+0x20>
 8007a6a:	89ab      	ldrh	r3, [r5, #12]
 8007a6c:	0598      	lsls	r0, r3, #22
 8007a6e:	d4ed      	bmi.n	8007a4c <_vfiprintf_r+0x4c>
 8007a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a72:	f7ff fedc 	bl	800782e <__retarget_lock_release_recursive>
 8007a76:	e7e9      	b.n	8007a4c <_vfiprintf_r+0x4c>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a86:	2330      	movs	r3, #48	; 0x30
 8007a88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c4c <_vfiprintf_r+0x24c>
 8007a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a90:	f04f 0901 	mov.w	r9, #1
 8007a94:	4623      	mov	r3, r4
 8007a96:	469a      	mov	sl, r3
 8007a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a9c:	b10a      	cbz	r2, 8007aa2 <_vfiprintf_r+0xa2>
 8007a9e:	2a25      	cmp	r2, #37	; 0x25
 8007aa0:	d1f9      	bne.n	8007a96 <_vfiprintf_r+0x96>
 8007aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa6:	d00b      	beq.n	8007ac0 <_vfiprintf_r+0xc0>
 8007aa8:	465b      	mov	r3, fp
 8007aaa:	4622      	mov	r2, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ff93 	bl	80079da <__sfputs_r>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	f000 80aa 	beq.w	8007c0e <_vfiprintf_r+0x20e>
 8007aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007abc:	445a      	add	r2, fp
 8007abe:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80a2 	beq.w	8007c0e <_vfiprintf_r+0x20e>
 8007aca:	2300      	movs	r3, #0
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ad4:	f10a 0a01 	add.w	sl, sl, #1
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ae2:	4654      	mov	r4, sl
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aea:	4858      	ldr	r0, [pc, #352]	; (8007c4c <_vfiprintf_r+0x24c>)
 8007aec:	f7f8 fb90 	bl	8000210 <memchr>
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	b9d8      	cbnz	r0, 8007b2c <_vfiprintf_r+0x12c>
 8007af4:	06d1      	lsls	r1, r2, #27
 8007af6:	bf44      	itt	mi
 8007af8:	2320      	movmi	r3, #32
 8007afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afe:	0713      	lsls	r3, r2, #28
 8007b00:	bf44      	itt	mi
 8007b02:	232b      	movmi	r3, #43	; 0x2b
 8007b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b08:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0e:	d015      	beq.n	8007b3c <_vfiprintf_r+0x13c>
 8007b10:	9a07      	ldr	r2, [sp, #28]
 8007b12:	4654      	mov	r4, sl
 8007b14:	2000      	movs	r0, #0
 8007b16:	f04f 0c0a 	mov.w	ip, #10
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b20:	3b30      	subs	r3, #48	; 0x30
 8007b22:	2b09      	cmp	r3, #9
 8007b24:	d94e      	bls.n	8007bc4 <_vfiprintf_r+0x1c4>
 8007b26:	b1b0      	cbz	r0, 8007b56 <_vfiprintf_r+0x156>
 8007b28:	9207      	str	r2, [sp, #28]
 8007b2a:	e014      	b.n	8007b56 <_vfiprintf_r+0x156>
 8007b2c:	eba0 0308 	sub.w	r3, r0, r8
 8007b30:	fa09 f303 	lsl.w	r3, r9, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	46a2      	mov	sl, r4
 8007b3a:	e7d2      	b.n	8007ae2 <_vfiprintf_r+0xe2>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	1d19      	adds	r1, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	9103      	str	r1, [sp, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfbb      	ittet	lt
 8007b48:	425b      	neglt	r3, r3
 8007b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b4e:	9307      	strge	r3, [sp, #28]
 8007b50:	9307      	strlt	r3, [sp, #28]
 8007b52:	bfb8      	it	lt
 8007b54:	9204      	strlt	r2, [sp, #16]
 8007b56:	7823      	ldrb	r3, [r4, #0]
 8007b58:	2b2e      	cmp	r3, #46	; 0x2e
 8007b5a:	d10c      	bne.n	8007b76 <_vfiprintf_r+0x176>
 8007b5c:	7863      	ldrb	r3, [r4, #1]
 8007b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b60:	d135      	bne.n	8007bce <_vfiprintf_r+0x1ce>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	1d1a      	adds	r2, r3, #4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	9203      	str	r2, [sp, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfb8      	it	lt
 8007b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b72:	3402      	adds	r4, #2
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c5c <_vfiprintf_r+0x25c>
 8007b7a:	7821      	ldrb	r1, [r4, #0]
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	4650      	mov	r0, sl
 8007b80:	f7f8 fb46 	bl	8000210 <memchr>
 8007b84:	b140      	cbz	r0, 8007b98 <_vfiprintf_r+0x198>
 8007b86:	2340      	movs	r3, #64	; 0x40
 8007b88:	eba0 000a 	sub.w	r0, r0, sl
 8007b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	4303      	orrs	r3, r0
 8007b94:	3401      	adds	r4, #1
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9c:	482c      	ldr	r0, [pc, #176]	; (8007c50 <_vfiprintf_r+0x250>)
 8007b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	f7f8 fb34 	bl	8000210 <memchr>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d03f      	beq.n	8007c2c <_vfiprintf_r+0x22c>
 8007bac:	4b29      	ldr	r3, [pc, #164]	; (8007c54 <_vfiprintf_r+0x254>)
 8007bae:	bb1b      	cbnz	r3, 8007bf8 <_vfiprintf_r+0x1f8>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	3307      	adds	r3, #7
 8007bb4:	f023 0307 	bic.w	r3, r3, #7
 8007bb8:	3308      	adds	r3, #8
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbe:	443b      	add	r3, r7
 8007bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc2:	e767      	b.n	8007a94 <_vfiprintf_r+0x94>
 8007bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc8:	460c      	mov	r4, r1
 8007bca:	2001      	movs	r0, #1
 8007bcc:	e7a5      	b.n	8007b1a <_vfiprintf_r+0x11a>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f04f 0c0a 	mov.w	ip, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be0:	3a30      	subs	r2, #48	; 0x30
 8007be2:	2a09      	cmp	r2, #9
 8007be4:	d903      	bls.n	8007bee <_vfiprintf_r+0x1ee>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0c5      	beq.n	8007b76 <_vfiprintf_r+0x176>
 8007bea:	9105      	str	r1, [sp, #20]
 8007bec:	e7c3      	b.n	8007b76 <_vfiprintf_r+0x176>
 8007bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e7f0      	b.n	8007bda <_vfiprintf_r+0x1da>
 8007bf8:	ab03      	add	r3, sp, #12
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	462a      	mov	r2, r5
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <_vfiprintf_r+0x258>)
 8007c00:	a904      	add	r1, sp, #16
 8007c02:	4630      	mov	r0, r6
 8007c04:	f3af 8000 	nop.w
 8007c08:	4607      	mov	r7, r0
 8007c0a:	1c78      	adds	r0, r7, #1
 8007c0c:	d1d6      	bne.n	8007bbc <_vfiprintf_r+0x1bc>
 8007c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c10:	07d9      	lsls	r1, r3, #31
 8007c12:	d405      	bmi.n	8007c20 <_vfiprintf_r+0x220>
 8007c14:	89ab      	ldrh	r3, [r5, #12]
 8007c16:	059a      	lsls	r2, r3, #22
 8007c18:	d402      	bmi.n	8007c20 <_vfiprintf_r+0x220>
 8007c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c1c:	f7ff fe07 	bl	800782e <__retarget_lock_release_recursive>
 8007c20:	89ab      	ldrh	r3, [r5, #12]
 8007c22:	065b      	lsls	r3, r3, #25
 8007c24:	f53f af12 	bmi.w	8007a4c <_vfiprintf_r+0x4c>
 8007c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c2a:	e711      	b.n	8007a50 <_vfiprintf_r+0x50>
 8007c2c:	ab03      	add	r3, sp, #12
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	462a      	mov	r2, r5
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <_vfiprintf_r+0x258>)
 8007c34:	a904      	add	r1, sp, #16
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 f880 	bl	8007d3c <_printf_i>
 8007c3c:	e7e4      	b.n	8007c08 <_vfiprintf_r+0x208>
 8007c3e:	bf00      	nop
 8007c40:	080081e8 	.word	0x080081e8
 8007c44:	08008208 	.word	0x08008208
 8007c48:	080081c8 	.word	0x080081c8
 8007c4c:	08008228 	.word	0x08008228
 8007c50:	08008232 	.word	0x08008232
 8007c54:	00000000 	.word	0x00000000
 8007c58:	080079db 	.word	0x080079db
 8007c5c:	0800822e 	.word	0x0800822e

08007c60 <_printf_common>:
 8007c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	4616      	mov	r6, r2
 8007c66:	4699      	mov	r9, r3
 8007c68:	688a      	ldr	r2, [r1, #8]
 8007c6a:	690b      	ldr	r3, [r1, #16]
 8007c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	bfb8      	it	lt
 8007c74:	4613      	movlt	r3, r2
 8007c76:	6033      	str	r3, [r6, #0]
 8007c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	b10a      	cbz	r2, 8007c86 <_printf_common+0x26>
 8007c82:	3301      	adds	r3, #1
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	0699      	lsls	r1, r3, #26
 8007c8a:	bf42      	ittt	mi
 8007c8c:	6833      	ldrmi	r3, [r6, #0]
 8007c8e:	3302      	addmi	r3, #2
 8007c90:	6033      	strmi	r3, [r6, #0]
 8007c92:	6825      	ldr	r5, [r4, #0]
 8007c94:	f015 0506 	ands.w	r5, r5, #6
 8007c98:	d106      	bne.n	8007ca8 <_printf_common+0x48>
 8007c9a:	f104 0a19 	add.w	sl, r4, #25
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	6832      	ldr	r2, [r6, #0]
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dc26      	bgt.n	8007cf6 <_printf_common+0x96>
 8007ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cac:	1e13      	subs	r3, r2, #0
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	bf18      	it	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	0692      	lsls	r2, r2, #26
 8007cb6:	d42b      	bmi.n	8007d10 <_printf_common+0xb0>
 8007cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	47c0      	blx	r8
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d01e      	beq.n	8007d04 <_printf_common+0xa4>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	68e5      	ldr	r5, [r4, #12]
 8007cca:	6832      	ldr	r2, [r6, #0]
 8007ccc:	f003 0306 	and.w	r3, r3, #6
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	bf08      	it	eq
 8007cd4:	1aad      	subeq	r5, r5, r2
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	6922      	ldr	r2, [r4, #16]
 8007cda:	bf0c      	ite	eq
 8007cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce0:	2500      	movne	r5, #0
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	bfc4      	itt	gt
 8007ce6:	1a9b      	subgt	r3, r3, r2
 8007ce8:	18ed      	addgt	r5, r5, r3
 8007cea:	2600      	movs	r6, #0
 8007cec:	341a      	adds	r4, #26
 8007cee:	42b5      	cmp	r5, r6
 8007cf0:	d11a      	bne.n	8007d28 <_printf_common+0xc8>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e008      	b.n	8007d08 <_printf_common+0xa8>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	47c0      	blx	r8
 8007d00:	3001      	adds	r0, #1
 8007d02:	d103      	bne.n	8007d0c <_printf_common+0xac>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	e7c6      	b.n	8007c9e <_printf_common+0x3e>
 8007d10:	18e1      	adds	r1, r4, r3
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	2030      	movs	r0, #48	; 0x30
 8007d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1a:	4422      	add	r2, r4
 8007d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d24:	3302      	adds	r3, #2
 8007d26:	e7c7      	b.n	8007cb8 <_printf_common+0x58>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c0      	blx	r8
 8007d32:	3001      	adds	r0, #1
 8007d34:	d0e6      	beq.n	8007d04 <_printf_common+0xa4>
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7d9      	b.n	8007cee <_printf_common+0x8e>
	...

08007d3c <_printf_i>:
 8007d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	7e0f      	ldrb	r7, [r1, #24]
 8007d42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d44:	2f78      	cmp	r7, #120	; 0x78
 8007d46:	4691      	mov	r9, r2
 8007d48:	4680      	mov	r8, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	469a      	mov	sl, r3
 8007d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d52:	d807      	bhi.n	8007d64 <_printf_i+0x28>
 8007d54:	2f62      	cmp	r7, #98	; 0x62
 8007d56:	d80a      	bhi.n	8007d6e <_printf_i+0x32>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f000 80d8 	beq.w	8007f0e <_printf_i+0x1d2>
 8007d5e:	2f58      	cmp	r7, #88	; 0x58
 8007d60:	f000 80a3 	beq.w	8007eaa <_printf_i+0x16e>
 8007d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d6c:	e03a      	b.n	8007de4 <_printf_i+0xa8>
 8007d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d72:	2b15      	cmp	r3, #21
 8007d74:	d8f6      	bhi.n	8007d64 <_printf_i+0x28>
 8007d76:	a101      	add	r1, pc, #4	; (adr r1, 8007d7c <_printf_i+0x40>)
 8007d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d7c:	08007dd5 	.word	0x08007dd5
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007d65 	.word	0x08007d65
 8007d88:	08007d65 	.word	0x08007d65
 8007d8c:	08007d65 	.word	0x08007d65
 8007d90:	08007d65 	.word	0x08007d65
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007d65 	.word	0x08007d65
 8007d9c:	08007d65 	.word	0x08007d65
 8007da0:	08007d65 	.word	0x08007d65
 8007da4:	08007d65 	.word	0x08007d65
 8007da8:	08007ef5 	.word	0x08007ef5
 8007dac:	08007e19 	.word	0x08007e19
 8007db0:	08007ed7 	.word	0x08007ed7
 8007db4:	08007d65 	.word	0x08007d65
 8007db8:	08007d65 	.word	0x08007d65
 8007dbc:	08007f17 	.word	0x08007f17
 8007dc0:	08007d65 	.word	0x08007d65
 8007dc4:	08007e19 	.word	0x08007e19
 8007dc8:	08007d65 	.word	0x08007d65
 8007dcc:	08007d65 	.word	0x08007d65
 8007dd0:	08007edf 	.word	0x08007edf
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	602a      	str	r2, [r5, #0]
 8007ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de4:	2301      	movs	r3, #1
 8007de6:	e0a3      	b.n	8007f30 <_printf_i+0x1f4>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	6829      	ldr	r1, [r5, #0]
 8007dec:	0606      	lsls	r6, r0, #24
 8007dee:	f101 0304 	add.w	r3, r1, #4
 8007df2:	d50a      	bpl.n	8007e0a <_printf_i+0xce>
 8007df4:	680e      	ldr	r6, [r1, #0]
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	da03      	bge.n	8007e04 <_printf_i+0xc8>
 8007dfc:	232d      	movs	r3, #45	; 0x2d
 8007dfe:	4276      	negs	r6, r6
 8007e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e04:	485e      	ldr	r0, [pc, #376]	; (8007f80 <_printf_i+0x244>)
 8007e06:	230a      	movs	r3, #10
 8007e08:	e019      	b.n	8007e3e <_printf_i+0x102>
 8007e0a:	680e      	ldr	r6, [r1, #0]
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e12:	bf18      	it	ne
 8007e14:	b236      	sxthne	r6, r6
 8007e16:	e7ef      	b.n	8007df8 <_printf_i+0xbc>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	6820      	ldr	r0, [r4, #0]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	6029      	str	r1, [r5, #0]
 8007e20:	0601      	lsls	r1, r0, #24
 8007e22:	d501      	bpl.n	8007e28 <_printf_i+0xec>
 8007e24:	681e      	ldr	r6, [r3, #0]
 8007e26:	e002      	b.n	8007e2e <_printf_i+0xf2>
 8007e28:	0646      	lsls	r6, r0, #25
 8007e2a:	d5fb      	bpl.n	8007e24 <_printf_i+0xe8>
 8007e2c:	881e      	ldrh	r6, [r3, #0]
 8007e2e:	4854      	ldr	r0, [pc, #336]	; (8007f80 <_printf_i+0x244>)
 8007e30:	2f6f      	cmp	r7, #111	; 0x6f
 8007e32:	bf0c      	ite	eq
 8007e34:	2308      	moveq	r3, #8
 8007e36:	230a      	movne	r3, #10
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e3e:	6865      	ldr	r5, [r4, #4]
 8007e40:	60a5      	str	r5, [r4, #8]
 8007e42:	2d00      	cmp	r5, #0
 8007e44:	bfa2      	ittt	ge
 8007e46:	6821      	ldrge	r1, [r4, #0]
 8007e48:	f021 0104 	bicge.w	r1, r1, #4
 8007e4c:	6021      	strge	r1, [r4, #0]
 8007e4e:	b90e      	cbnz	r6, 8007e54 <_printf_i+0x118>
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	d04d      	beq.n	8007ef0 <_printf_i+0x1b4>
 8007e54:	4615      	mov	r5, r2
 8007e56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e5e:	5dc7      	ldrb	r7, [r0, r7]
 8007e60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e64:	4637      	mov	r7, r6
 8007e66:	42bb      	cmp	r3, r7
 8007e68:	460e      	mov	r6, r1
 8007e6a:	d9f4      	bls.n	8007e56 <_printf_i+0x11a>
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d10b      	bne.n	8007e88 <_printf_i+0x14c>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	07de      	lsls	r6, r3, #31
 8007e74:	d508      	bpl.n	8007e88 <_printf_i+0x14c>
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	bfde      	ittt	le
 8007e7e:	2330      	movle	r3, #48	; 0x30
 8007e80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e88:	1b52      	subs	r2, r2, r5
 8007e8a:	6122      	str	r2, [r4, #16]
 8007e8c:	f8cd a000 	str.w	sl, [sp]
 8007e90:	464b      	mov	r3, r9
 8007e92:	aa03      	add	r2, sp, #12
 8007e94:	4621      	mov	r1, r4
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7ff fee2 	bl	8007c60 <_printf_common>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d14c      	bne.n	8007f3a <_printf_i+0x1fe>
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	b004      	add	sp, #16
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	4835      	ldr	r0, [pc, #212]	; (8007f80 <_printf_i+0x244>)
 8007eac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007eb0:	6829      	ldr	r1, [r5, #0]
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007eb8:	6029      	str	r1, [r5, #0]
 8007eba:	061d      	lsls	r5, r3, #24
 8007ebc:	d514      	bpl.n	8007ee8 <_printf_i+0x1ac>
 8007ebe:	07df      	lsls	r7, r3, #31
 8007ec0:	bf44      	itt	mi
 8007ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ec6:	6023      	strmi	r3, [r4, #0]
 8007ec8:	b91e      	cbnz	r6, 8007ed2 <_printf_i+0x196>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	f023 0320 	bic.w	r3, r3, #32
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	2310      	movs	r3, #16
 8007ed4:	e7b0      	b.n	8007e38 <_printf_i+0xfc>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	f043 0320 	orr.w	r3, r3, #32
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	2378      	movs	r3, #120	; 0x78
 8007ee0:	4828      	ldr	r0, [pc, #160]	; (8007f84 <_printf_i+0x248>)
 8007ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee6:	e7e3      	b.n	8007eb0 <_printf_i+0x174>
 8007ee8:	0659      	lsls	r1, r3, #25
 8007eea:	bf48      	it	mi
 8007eec:	b2b6      	uxthmi	r6, r6
 8007eee:	e7e6      	b.n	8007ebe <_printf_i+0x182>
 8007ef0:	4615      	mov	r5, r2
 8007ef2:	e7bb      	b.n	8007e6c <_printf_i+0x130>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	6826      	ldr	r6, [r4, #0]
 8007ef8:	6961      	ldr	r1, [r4, #20]
 8007efa:	1d18      	adds	r0, r3, #4
 8007efc:	6028      	str	r0, [r5, #0]
 8007efe:	0635      	lsls	r5, r6, #24
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	d501      	bpl.n	8007f08 <_printf_i+0x1cc>
 8007f04:	6019      	str	r1, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <_printf_i+0x1d2>
 8007f08:	0670      	lsls	r0, r6, #25
 8007f0a:	d5fb      	bpl.n	8007f04 <_printf_i+0x1c8>
 8007f0c:	8019      	strh	r1, [r3, #0]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	4615      	mov	r5, r2
 8007f14:	e7ba      	b.n	8007e8c <_printf_i+0x150>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	602a      	str	r2, [r5, #0]
 8007f1c:	681d      	ldr	r5, [r3, #0]
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	2100      	movs	r1, #0
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7f8 f974 	bl	8000210 <memchr>
 8007f28:	b108      	cbz	r0, 8007f2e <_printf_i+0x1f2>
 8007f2a:	1b40      	subs	r0, r0, r5
 8007f2c:	6060      	str	r0, [r4, #4]
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	2300      	movs	r3, #0
 8007f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f38:	e7a8      	b.n	8007e8c <_printf_i+0x150>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	47d0      	blx	sl
 8007f44:	3001      	adds	r0, #1
 8007f46:	d0ab      	beq.n	8007ea0 <_printf_i+0x164>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	079b      	lsls	r3, r3, #30
 8007f4c:	d413      	bmi.n	8007f76 <_printf_i+0x23a>
 8007f4e:	68e0      	ldr	r0, [r4, #12]
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	4298      	cmp	r0, r3
 8007f54:	bfb8      	it	lt
 8007f56:	4618      	movlt	r0, r3
 8007f58:	e7a4      	b.n	8007ea4 <_printf_i+0x168>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	47d0      	blx	sl
 8007f64:	3001      	adds	r0, #1
 8007f66:	d09b      	beq.n	8007ea0 <_printf_i+0x164>
 8007f68:	3501      	adds	r5, #1
 8007f6a:	68e3      	ldr	r3, [r4, #12]
 8007f6c:	9903      	ldr	r1, [sp, #12]
 8007f6e:	1a5b      	subs	r3, r3, r1
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dcf2      	bgt.n	8007f5a <_printf_i+0x21e>
 8007f74:	e7eb      	b.n	8007f4e <_printf_i+0x212>
 8007f76:	2500      	movs	r5, #0
 8007f78:	f104 0619 	add.w	r6, r4, #25
 8007f7c:	e7f5      	b.n	8007f6a <_printf_i+0x22e>
 8007f7e:	bf00      	nop
 8007f80:	08008239 	.word	0x08008239
 8007f84:	0800824a 	.word	0x0800824a

08007f88 <__sread>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f894 	bl	80080bc <_read_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	bfab      	itete	ge
 8007f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f9c:	181b      	addge	r3, r3, r0
 8007f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fa2:	bfac      	ite	ge
 8007fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fa6:	81a3      	strhlt	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f868 	bl	8008098 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b817 	b.w	8008010 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f855 	bl	8008098 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b813 	b.w	8008034 <_close_r>
	...

08008010 <_write_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4d07      	ldr	r5, [pc, #28]	; (8008030 <_write_r+0x20>)
 8008014:	4604      	mov	r4, r0
 8008016:	4608      	mov	r0, r1
 8008018:	4611      	mov	r1, r2
 800801a:	2200      	movs	r2, #0
 800801c:	602a      	str	r2, [r5, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	f7f8 fac8 	bl	80005b4 <_write>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_write_r+0x1e>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_write_r+0x1e>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	2000032c 	.word	0x2000032c

08008034 <_close_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d06      	ldr	r5, [pc, #24]	; (8008050 <_close_r+0x1c>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	f7f9 fa63 	bl	800150a <_close>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_close_r+0x1a>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_close_r+0x1a>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	2000032c 	.word	0x2000032c

08008054 <_fstat_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	; (8008074 <_fstat_r+0x20>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f7f9 fa5e 	bl	8001522 <_fstat>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d102      	bne.n	8008070 <_fstat_r+0x1c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b103      	cbz	r3, 8008070 <_fstat_r+0x1c>
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	2000032c 	.word	0x2000032c

08008078 <_isatty_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	; (8008094 <_isatty_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fa5d 	bl	8001542 <_isatty>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_isatty_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_isatty_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	2000032c 	.word	0x2000032c

08008098 <_lseek_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d07      	ldr	r5, [pc, #28]	; (80080b8 <_lseek_r+0x20>)
 800809c:	4604      	mov	r4, r0
 800809e:	4608      	mov	r0, r1
 80080a0:	4611      	mov	r1, r2
 80080a2:	2200      	movs	r2, #0
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7f9 fa56 	bl	8001558 <_lseek>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_lseek_r+0x1e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_lseek_r+0x1e>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	2000032c 	.word	0x2000032c

080080bc <_read_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d07      	ldr	r5, [pc, #28]	; (80080dc <_read_r+0x20>)
 80080c0:	4604      	mov	r4, r0
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	2200      	movs	r2, #0
 80080c8:	602a      	str	r2, [r5, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f7f9 fa00 	bl	80014d0 <_read>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_read_r+0x1e>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_read_r+0x1e>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	2000032c 	.word	0x2000032c

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
