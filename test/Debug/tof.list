
tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec8  08006ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed0  08006ed0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08006f48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08006f48  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec33  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  0002ecd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000319e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e18  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd82  00000000  00000000  000553c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce4dc  00000000  00000000  0006514a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba4  00000000  00000000  00133678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d88 	.word	0x08006d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006d88 	.word	0x08006d88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 16);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f004 fa28 	bl	8004a1e <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000e0 	.word	0x200000e0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb77 	bl	8000cd4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f865 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f927 	bl	800083c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ee:	f000 f8cd 	bl	800078c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 f8f9 	bl	80007e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sensorState = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]
  uint8_t boot[6] = {66, 79, 79, 84, 10, 0};
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <main+0xc4>)
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000604:	6018      	str	r0, [r3, #0]
 8000606:	3304      	adds	r3, #4
 8000608:	8019      	strh	r1, [r3, #0]
  while(sensorState==0){
 800060a:	e00f      	b.n	800062c <main+0x50>
		VL53L1X_BootState(dev, &sensorState);
 800060c:	f107 031f 	add.w	r3, r7, #31
 8000610:	4619      	mov	r1, r3
 8000612:	2052      	movs	r0, #82	; 0x52
 8000614:	f005 fadf 	bl	8005bd6 <VL53L1X_BootState>
		HAL_UART_Transmit(&huart2, boot, 6, 10);
 8000618:	f107 0118 	add.w	r1, r7, #24
 800061c:	230a      	movs	r3, #10
 800061e:	2206      	movs	r2, #6
 8000620:	4820      	ldr	r0, [pc, #128]	; (80006a4 <main+0xc8>)
 8000622:	f004 f9fc 	bl	8004a1e <HAL_UART_Transmit>
		HAL_Delay(2);
 8000626:	2002      	movs	r0, #2
 8000628:	f000 fbc6 	bl	8000db8 <HAL_Delay>
  while(sensorState==0){
 800062c:	7ffb      	ldrb	r3, [r7, #31]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0ec      	beq.n	800060c <main+0x30>
  }

  VL53L1X_SensorInit(dev);
 8000632:	2052      	movs	r0, #82	; 0x52
 8000634:	f005 f9ba 	bl	80059ac <VL53L1X_SensorInit>
  VL53L1X_StartRanging(dev);
 8000638:	2052      	movs	r0, #82	; 0x52
 800063a:	f005 fa65 	bl	8005b08 <VL53L1X_StartRanging>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dataReady = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	75fb      	strb	r3, [r7, #23]
  uint8_t getting[6] = {71, 69, 84, 83, 10, 0};
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <main+0xcc>)
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064c:	6018      	str	r0, [r3, #0]
 800064e:	3304      	adds	r3, #4
 8000650:	8019      	strh	r1, [r3, #0]
  uint8_t data[6] = {68, 65, 84, 65, 10, 0};
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xd0>)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	8019      	strh	r1, [r3, #0]
  uint16_t dis = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
	  while (dataReady == 0){
 8000666:	e008      	b.n	800067a <main+0x9e>
		  VL53L1X_CheckForDataReady(dev, &dataReady);
 8000668:	f107 0317 	add.w	r3, r7, #23
 800066c:	4619      	mov	r1, r3
 800066e:	2052      	movs	r0, #82	; 0x52
 8000670:	f005 fa7a 	bl	8005b68 <VL53L1X_CheckForDataReady>
		  //HAL_UART_Transmit(&huart2, getting, 6, 10);
		  HAL_Delay(2);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fb9f 	bl	8000db8 <HAL_Delay>
	  while (dataReady == 0){
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0f3      	beq.n	8000668 <main+0x8c>
	  }
	  VL53L1X_GetDistance(dev, &dis);
 8000680:	1dbb      	adds	r3, r7, #6
 8000682:	4619      	mov	r1, r3
 8000684:	2052      	movs	r0, #82	; 0x52
 8000686:	f005 fac5 	bl	8005c14 <VL53L1X_GetDistance>
	  //HAL_UART_Transmit(&huart2, data, 6, 10);
	  printf("%d\n", dis);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	4619      	mov	r1, r3
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <main+0xd4>)
 8000690:	f005 fbec 	bl	8005e6c <iprintf>
	  dataReady = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	75fb      	strb	r3, [r7, #23]
	  HAL_Delay(50);
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f000 fb8d 	bl	8000db8 <HAL_Delay>
	  while (dataReady == 0){
 800069e:	e7ec      	b.n	800067a <main+0x9e>
 80006a0:	08006da4 	.word	0x08006da4
 80006a4:	200000e0 	.word	0x200000e0
 80006a8:	08006dac 	.word	0x08006dac
 80006ac:	08006db4 	.word	0x08006db4
 80006b0:	08006da0 	.word	0x08006da0

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fbca 	bl	8005e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <SystemClock_Config+0xd0>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd4>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	; 0xa8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fe83 	bl	8004448 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000748:	f000 f8da 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2105      	movs	r1, #5
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fb22 	bl	8003db4 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000776:	f000 f8c3 	bl	8000900 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f000 fe83 	bl	80014d4 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f894 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f004 f8b0 	bl	8004984 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f869 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000e0 	.word	0x200000e0
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xbc>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <MX_GPIO_Init+0xbc>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_GPIO_Init+0xbc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_GPIO_Init+0xbc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_GPIO_Init+0xbc>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_GPIO_Init+0xbc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0xc0>)
 80008da:	f000 fc43 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2017      	movs	r0, #23
 80008e4:	f000 fb67 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008e8:	2017      	movs	r0, #23
 80008ea:	f000 fb80 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_I2C_MspInit+0xa4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d13b      	bne.n	80009f6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800099a:	23c0      	movs	r3, #192	; 0xc0
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	2312      	movs	r3, #18
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009aa:	2304      	movs	r3, #4
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4814      	ldr	r0, [pc, #80]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009b6:	f000 fbd5 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 80009c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	201f      	movs	r0, #31
 80009dc:	f000 faeb 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009e0:	201f      	movs	r0, #31
 80009e2:	f000 fb04 	bl	8000fee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2020      	movs	r0, #32
 80009ec:	f000 fae3 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009f0:	2020      	movs	r0, #32
 80009f2:	f000 fafc 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <HAL_UART_MspInit+0x94>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d133      	bne.n	8000a96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a82:	f000 fb6f 	bl	8001164 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2026      	movs	r0, #38	; 0x26
 8000a8c:	f000 fa93 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a90:	2026      	movs	r0, #38	; 0x26
 8000a92:	f000 faac 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f93e 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b08:	f000 fcc0 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <I2C1_EV_IRQHandler+0x10>)
 8000b16:	f001 f945 	bl	8001da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000008c 	.word	0x2000008c

08000b24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <I2C1_ER_IRQHandler+0x10>)
 8000b2a:	f001 faac 	bl	8002086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000008c 	.word	0x2000008c

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <USART2_IRQHandler+0x10>)
 8000b3e:	f004 f801 	bl	8004b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000e0 	.word	0x200000e0

08000b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f005 f8f2 	bl	8005e08 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000124 	.word	0x20000124
 8000c58:	20000240 	.word	0x20000240

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f005 f8b1 	bl	8005e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc93 	bl	80005dc <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	2000023c 	.word	0x2000023c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f94f 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe00 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f967 	bl	800100a <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f92f 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000128 	.word	0x20000128

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000128 	.word	0x20000128

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff feb6 	bl	8000da0 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d008      	beq.n	8001054 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e052      	b.n	80010fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0216 	bic.w	r2, r2, #22
 8001062:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001072:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <HAL_DMA_Abort+0x62>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0208 	bic.w	r2, r2, #8
 8001092:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a4:	e013      	b.n	80010ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a6:	f7ff fe7b 	bl	8000da0 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d90c      	bls.n	80010ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e015      	b.n	80010fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e4      	bne.n	80010a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	223f      	movs	r2, #63	; 0x3f
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d004      	beq.n	8001120 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00c      	b.n	800113a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2205      	movs	r2, #5
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e165      	b.n	800144c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8154 	bne.w	8001446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80ae 	beq.w	8001446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x300>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a5c      	ldr	r2, [pc, #368]	; (8001464 <HAL_GPIO_Init+0x300>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_GPIO_Init+0x300>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x304>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4f      	ldr	r2, [pc, #316]	; (800146c <HAL_GPIO_Init+0x308>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x21a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_GPIO_Init+0x30c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x216>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_GPIO_Init+0x310>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x212>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_GPIO_Init+0x314>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_GPIO_Init+0x318>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x20a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_GPIO_Init+0x31c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x206>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a49      	ldr	r2, [pc, #292]	; (8001484 <HAL_GPIO_Init+0x320>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x202>
 8001362:	2306      	movs	r3, #6
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001366:	2307      	movs	r3, #7
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x304>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <HAL_GPIO_Init+0x324>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a31      	ldr	r2, [pc, #196]	; (8001488 <HAL_GPIO_Init+0x324>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x324>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a26      	ldr	r2, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x324>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_GPIO_Init+0x324>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_GPIO_Init+0x324>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_GPIO_Init+0x324>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_GPIO_Init+0x324>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae96 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f806 	bl	80014bc <HAL_GPIO_EXTI_Callback>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e12b      	b.n	800173e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fa2e 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001538:	f002 fd2e 	bl	8003f98 <HAL_RCC_GetPCLK1Freq>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a81      	ldr	r2, [pc, #516]	; (8001748 <HAL_I2C_Init+0x274>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d807      	bhi.n	8001558 <HAL_I2C_Init+0x84>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a80      	ldr	r2, [pc, #512]	; (800174c <HAL_I2C_Init+0x278>)
 800154c:	4293      	cmp	r3, r2
 800154e:	bf94      	ite	ls
 8001550:	2301      	movls	r3, #1
 8001552:	2300      	movhi	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e006      	b.n	8001566 <HAL_I2C_Init+0x92>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a7d      	ldr	r2, [pc, #500]	; (8001750 <HAL_I2C_Init+0x27c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0e7      	b.n	800173e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a78      	ldr	r2, [pc, #480]	; (8001754 <HAL_I2C_Init+0x280>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a6a      	ldr	r2, [pc, #424]	; (8001748 <HAL_I2C_Init+0x274>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d802      	bhi.n	80015a8 <HAL_I2C_Init+0xd4>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	e009      	b.n	80015bc <HAL_I2C_Init+0xe8>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	4a69      	ldr	r2, [pc, #420]	; (8001758 <HAL_I2C_Init+0x284>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	3301      	adds	r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	495c      	ldr	r1, [pc, #368]	; (8001748 <HAL_I2C_Init+0x274>)
 80015d8:	428b      	cmp	r3, r1
 80015da:	d819      	bhi.n	8001610 <HAL_I2C_Init+0x13c>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e59      	subs	r1, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ea:	1c59      	adds	r1, r3, #1
 80015ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015f0:	400b      	ands	r3, r1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <HAL_I2C_Init+0x138>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1e59      	subs	r1, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fbb1 f3f3 	udiv	r3, r1, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160a:	e051      	b.n	80016b0 <HAL_I2C_Init+0x1dc>
 800160c:	2304      	movs	r3, #4
 800160e:	e04f      	b.n	80016b0 <HAL_I2C_Init+0x1dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d111      	bne.n	800163c <HAL_I2C_Init+0x168>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e012      	b.n	8001662 <HAL_I2C_Init+0x18e>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Init+0x196>
 8001666:	2301      	movs	r3, #1
 8001668:	e022      	b.n	80016b0 <HAL_I2C_Init+0x1dc>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10e      	bne.n	8001690 <HAL_I2C_Init+0x1bc>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1e58      	subs	r0, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	440b      	add	r3, r1
 8001680:	fbb0 f3f3 	udiv	r3, r0, r3
 8001684:	3301      	adds	r3, #1
 8001686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168e:	e00f      	b.n	80016b0 <HAL_I2C_Init+0x1dc>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	0099      	lsls	r1, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	6809      	ldr	r1, [r1, #0]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6911      	ldr	r1, [r2, #16]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68d2      	ldr	r2, [r2, #12]
 80016ea:	4311      	orrs	r1, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2220      	movs	r2, #32
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	000186a0 	.word	0x000186a0
 800174c:	001e847f 	.word	0x001e847f
 8001750:	003d08ff 	.word	0x003d08ff
 8001754:	431bde83 	.word	0x431bde83
 8001758:	10624dd3 	.word	0x10624dd3

0800175c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	461a      	mov	r2, r3
 8001768:	460b      	mov	r3, r1
 800176a:	817b      	strh	r3, [r7, #10]
 800176c:	4613      	mov	r3, r2
 800176e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff fb16 	bl	8000da0 <HAL_GetTick>
 8001774:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b20      	cmp	r3, #32
 8001780:	f040 80e0 	bne.w	8001944 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2319      	movs	r3, #25
 800178a:	2201      	movs	r2, #1
 800178c:	4970      	ldr	r1, [pc, #448]	; (8001950 <HAL_I2C_Master_Transmit+0x1f4>)
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f002 f8e6 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800179a:	2302      	movs	r3, #2
 800179c:	e0d3      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2C_Master_Transmit+0x50>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e0cc      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d007      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2221      	movs	r2, #33	; 0x21
 80017e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2210      	movs	r2, #16
 80017ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <HAL_I2C_Master_Transmit+0x1f8>)
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001814:	8979      	ldrh	r1, [r7, #10]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f001 fea8 	bl	8003570 <I2C_MasterRequestWrite>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e08d      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001840:	e066      	b.n	8001910 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f002 f960 	bl	8003b0c <I2C_WaitOnTXEFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00d      	beq.n	800186e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2b04      	cmp	r3, #4
 8001858:	d107      	bne.n	800186a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06b      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d11b      	bne.n	80018e4 <HAL_I2C_Master_Transmit+0x188>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d017      	beq.n	80018e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f002 f950 	bl	8003b8e <I2C_WaitOnBTFFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00d      	beq.n	8001910 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d107      	bne.n	800190c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e01a      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d194      	bne.n	8001842 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	00100002 	.word	0x00100002
 8001954:	ffff0000 	.word	0xffff0000

08001958 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	817b      	strh	r3, [r7, #10]
 8001968:	4613      	mov	r3, r2
 800196a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fa18 	bl	8000da0 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	f040 820b 	bne.w	8001d96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2319      	movs	r3, #25
 8001986:	2201      	movs	r2, #1
 8001988:	497c      	ldr	r1, [pc, #496]	; (8001b7c <HAL_I2C_Master_Receive+0x224>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f001 ffe8 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	e1fe      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_I2C_Master_Receive+0x50>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e1f7      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d007      	beq.n	80019ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2222      	movs	r2, #34	; 0x22
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2210      	movs	r2, #16
 80019ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a5c      	ldr	r2, [pc, #368]	; (8001b80 <HAL_I2C_Master_Receive+0x228>)
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a10:	8979      	ldrh	r1, [r7, #10]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f001 fe2c 	bl	8003674 <I2C_MasterRequestRead>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1b8      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d113      	bne.n	8001a56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e18c      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d11b      	bne.n	8001a96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e16c      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	e14c      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001afc:	e138      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f200 80f1 	bhi.w	8001cea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d123      	bne.n	8001b58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f002 f8ad 	bl	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e139      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b56:	e10b      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d14e      	bne.n	8001bfe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	2200      	movs	r2, #0
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <HAL_I2C_Master_Receive+0x22c>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 fef8 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e10e      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
 8001b7a:	bf00      	nop
 8001b7c:	00100002 	.word	0x00100002
 8001b80:	ffff0000 	.word	0xffff0000
 8001b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bfc:	e0b8      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	2200      	movs	r2, #0
 8001c06:	4966      	ldr	r1, [pc, #408]	; (8001da0 <HAL_I2C_Master_Receive+0x448>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f001 fea9 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0bf      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	2200      	movs	r2, #0
 8001c62:	494f      	ldr	r1, [pc, #316]	; (8001da0 <HAL_I2C_Master_Receive+0x448>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f001 fe7b 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e091      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ce8:	e042      	b.n	8001d70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f001 ffc0 	bl	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e04c      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d118      	bne.n	8001d70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aec2 	bne.w	8001afe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	00010004 	.word	0x00010004

08001da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0x38>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	f040 80c1 	bne.w	8001f5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001dfc:	d003      	beq.n	8001e06 <HAL_I2C_EV_IRQHandler+0x62>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_EV_IRQHandler+0x66>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x68>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f000 8132 	beq.w	8002076 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x92>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 ffa8 	bl	8003d7e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fd83 	bl	800293a <I2C_Master_SB>
 8001e34:	e092      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fdf9 	bl	8002a46 <I2C_Master_ADD10>
 8001e54:	e082      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	0a5b      	lsrs	r3, r3, #9
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fe13 	bl	8002a9a <I2C_Master_ADDR>
 8001e74:	e072      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03b      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	f000 80f3 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	09db      	lsrs	r3, r3, #7
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f9f3 	bl	80022a4 <I2C_MasterTransmit_TXE>
 8001ebe:	e04d      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80d6 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	0a5b      	lsrs	r3, r3, #9
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80cf 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	2b21      	cmp	r3, #33	; 0x21
 8001ee0:	d103      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa7a 	bl	80023dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee8:	e0c7      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	f040 80c4 	bne.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fae8 	bl	80024c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef8:	e0bf      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f08:	f000 80b7 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00f      	beq.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fb5d 	bl	80025f0 <I2C_MasterReceive_RXNE>
 8001f36:	e011      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 809a 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	0a5b      	lsrs	r3, r3, #9
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8093 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fc06 	bl	8002766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f5a:	e08e      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f5c:	e08d      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e007      	b.n	8001f80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 ffc4 	bl	8002f38 <I2C_Slave_ADDR>
 8001fb0:	e066      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fffe 	bl	8002fcc <I2C_Slave_STOPF>
 8001fd0:	e056      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d002      	beq.n	8001fde <HAL_I2C_EV_IRQHandler+0x23a>
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b29      	cmp	r3, #41	; 0x29
 8001fdc:	d125      	bne.n	800202a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	0a9b      	lsrs	r3, r3, #10
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 feda 	bl	8002dbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002008:	e039      	b.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d033      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02d      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 ff07 	bl	8002e36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002028:	e029      	b.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00f      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0a9b      	lsrs	r3, r3, #10
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff12 	bl	8002e78 <I2C_SlaveReceive_RXNE>
 8002054:	e014      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	0a5b      	lsrs	r3, r3, #9
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 ff40 	bl	8002ef4 <I2C_SlaveReceive_BTF>
 8002074:	e004      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800207e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08a      	sub	sp, #40	; 0x28
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00e      	beq.n	80020d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	0a5b      	lsrs	r3, r3, #9
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00e      	beq.n	80020fe <HAL_I2C_ER_IRQHandler+0x78>
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	0a9b      	lsrs	r3, r3, #10
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03f      	beq.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d039      	beq.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002116:	7efb      	ldrb	r3, [r7, #27]
 8002118:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002130:	7ebb      	ldrb	r3, [r7, #26]
 8002132:	2b20      	cmp	r3, #32
 8002134:	d112      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	2b21      	cmp	r3, #33	; 0x21
 8002140:	d008      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b29      	cmp	r3, #41	; 0x29
 8002146:	d005      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0xce>
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b28      	cmp	r3, #40	; 0x28
 800214c:	d106      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b21      	cmp	r3, #33	; 0x21
 8002152:	d103      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 f869 	bl	800322c <I2C_Slave_AF>
 800215a:	e016      	b.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002164:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800216e:	7efb      	ldrb	r3, [r7, #27]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d002      	beq.n	800217a <HAL_I2C_ER_IRQHandler+0xf4>
 8002174:	7efb      	ldrb	r3, [r7, #27]
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d107      	bne.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002188:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	0adb      	lsrs	r3, r3, #11
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00e      	beq.n	80021b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80021b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 f8a0 	bl	800330c <I2C_ITError>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
 8002230:	4613      	mov	r3, r2
 8002232:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d150      	bne.n	800236c <I2C_MasterTransmit_TXE+0xc8>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b21      	cmp	r3, #33	; 0x21
 80022ce:	d14d      	bne.n	800236c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d01d      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d01a      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d016      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2211      	movs	r2, #17
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff62 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002310:	e060      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002320:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d107      	bne.n	800235c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff7d 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800235a:	e03b      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff35 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236a:	e033      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b21      	cmp	r3, #33	; 0x21
 8002370:	d005      	beq.n	800237e <I2C_MasterTransmit_TXE+0xda>
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d12d      	bne.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b22      	cmp	r3, #34	; 0x22
 800237c:	d12a      	bne.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002396:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002398:	e01c      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d103      	bne.n	80023ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f88e 	bl	80024c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80023ac:	e012      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023d2:	e7ff      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b21      	cmp	r3, #33	; 0x21
 80023f4:	d164      	bne.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002424:	e04c      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d01d      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d01a      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002438:	d016      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002448:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2211      	movs	r2, #17
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff feb7 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
}
 8002466:	e02b      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002476:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d107      	bne.n	80024b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fed2 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
}
 80024b0:	e006      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe8a 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11d      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10b      	bne.n	8002500 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	1c9a      	adds	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80024fe:	e073      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	b29b      	uxth	r3, r3
 8002506:	121b      	asrs	r3, r3, #8
 8002508:	b2da      	uxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
}
 800251a:	e065      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10b      	bne.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	b2da      	uxtb	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	651a      	str	r2, [r3, #80]	; 0x50
}
 800253a:	e055      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	2b02      	cmp	r3, #2
 8002542:	d151      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b22      	cmp	r3, #34	; 0x22
 8002548:	d10d      	bne.n	8002566 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002558:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002564:	e040      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b21      	cmp	r3, #33	; 0x21
 8002574:	d112      	bne.n	800259c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800259a:	e025      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d120      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b21      	cmp	r3, #33	; 0x21
 80025aa:	d11d      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fe36 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b22      	cmp	r3, #34	; 0x22
 8002602:	f040 80ac 	bne.w	800275e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d921      	bls.n	8002658 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b03      	cmp	r3, #3
 8002642:	f040 808c 	bne.w	800275e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002656:	e082      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b02      	cmp	r3, #2
 800265e:	d075      	beq.n	800274c <I2C_MasterReceive_RXNE+0x15c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <I2C_MasterReceive_RXNE+0x7c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d16f      	bne.n	800274c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f001 facf 	bl	8003c10 <I2C_WaitOnSTOPRequestThroughIT>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d142      	bne.n	80026fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002696:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d10a      	bne.n	80026e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fdc1 	bl	8002268 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026e6:	e03a      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2212      	movs	r2, #18
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fd76 	bl	80021e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026fc:	e02f      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800270c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fd99 	bl	800227c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800274a:	e008      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275a:	605a      	str	r2, [r3, #4]
}
 800275c:	e7ff      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b04      	cmp	r3, #4
 800277c:	d11b      	bne.n	80027b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027b4:	e0bd      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d129      	bne.n	8002814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00a      	beq.n	80027ec <I2C_MasterReceive_BTF+0x86>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d007      	beq.n	80027ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002812:	e08e      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d176      	bne.n	800290c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d002      	beq.n	800282a <I2C_MasterReceive_BTF+0xc4>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b10      	cmp	r3, #16
 8002828:	d108      	bne.n	800283c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e019      	b.n	8002870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <I2C_MasterReceive_BTF+0xe2>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d108      	bne.n	800285a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e00a      	b.n	8002870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d007      	beq.n	8002870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d10a      	bne.n	80028f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fcba 	bl	8002268 <HAL_I2C_MemRxCpltCallback>
}
 80028f4:	e01d      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2212      	movs	r2, #18
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fc6f 	bl	80021e8 <HAL_I2C_MasterRxCpltCallback>
}
 800290a:	e012      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d117      	bne.n	800297e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002968:	e067      	b.n	8002a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
}
 800297c:	e05d      	b.n	8002a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002986:	d133      	bne.n	80029f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b21      	cmp	r3, #33	; 0x21
 8002992:	d109      	bne.n	80029a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	e008      	b.n	80029ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <I2C_Master_SB+0x92>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d032      	beq.n	8002a3a <I2C_Master_SB+0x100>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02d      	beq.n	8002a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	605a      	str	r2, [r3, #4]
}
 80029ee:	e024      	b.n	8002a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10e      	bne.n	8002a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	11db      	asrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 030f 	orn	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
}
 8002a14:	e011      	b.n	8002a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	11db      	asrs	r3, r3, #7
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0306 	and.w	r3, r3, #6
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f063 030e 	orn	r3, r3, #14
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <I2C_Master_ADD10+0x26>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <I2C_Master_ADD10+0x48>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	605a      	str	r2, [r3, #4]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b091      	sub	sp, #68	; 0x44
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b22      	cmp	r3, #34	; 0x22
 8002ac2:	f040 8169 	bne.w	8002d98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <I2C_Master_ADDR+0x54>
 8002ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	d10b      	bne.n	8002aee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	e160      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <I2C_Master_ADDR+0x98>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002afe:	d118      	bne.n	8002b32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b30:	e13e      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d113      	bne.n	8002b64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e115      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 808a 	bne.w	8002c84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b76:	d137      	bne.n	8002be8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d113      	bne.n	8002bc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	e0e7      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e0d3      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d02e      	beq.n	8002c4c <I2C_Master_ADDR+0x1b2>
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d02b      	beq.n	8002c4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	2b12      	cmp	r3, #18
 8002bf8:	d102      	bne.n	8002c00 <I2C_Master_ADDR+0x166>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d125      	bne.n	8002c4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d00e      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d00b      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d008      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	e0a1      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e085      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d14d      	bne.n	8002d2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d016      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d013      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d010      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e007      	b.n	8002cd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	d117      	bne.n	8002d12 <I2C_Master_ADDR+0x278>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce8:	d00b      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d008      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d005      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d002      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d107      	bne.n	8002d12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e032      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d117      	bne.n	8002d7a <I2C_Master_ADDR+0x2e0>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d50:	d00b      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d008      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d005      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d002      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d107      	bne.n	8002d7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d96:	e00b      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	e7ff      	b.n	8002db0 <I2C_Master_ADDR+0x316>
 8002db0:	bf00      	nop
 8002db2:	3744      	adds	r7, #68	; 0x44
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02b      	beq.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d114      	bne.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b29      	cmp	r3, #41	; 0x29
 8002e08:	d111      	bne.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2228      	movs	r2, #40	; 0x28
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff f9e7 	bl	80021fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d011      	beq.n	8002e6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02c      	beq.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d114      	bne.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec6:	d111      	bne.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2222      	movs	r2, #34	; 0x22
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2228      	movs	r2, #40	; 0x28
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f992 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f52:	2b28      	cmp	r3, #40	; 0x28
 8002f54:	d127      	bne.n	8002fa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	09db      	lsrs	r3, r3, #7
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	81bb      	strh	r3, [r7, #12]
 8002f88:	e002      	b.n	8002f90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f98:	89ba      	ldrh	r2, [r7, #12]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff f940 	bl	8002224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fa4:	e00e      	b.n	8002fc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003028:	d172      	bne.n	8003110 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b22      	cmp	r3, #34	; 0x22
 800302e:	d002      	beq.n	8003036 <I2C_Slave_STOPF+0x6a>
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b2a      	cmp	r3, #42	; 0x2a
 8003034:	d135      	bne.n	80030a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29a      	uxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f869 	bl	8001146 <HAL_DMA_GetState>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d049      	beq.n	800310e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4a69      	ldr	r2, [pc, #420]	; (8003224 <I2C_Slave_STOPF+0x258>)
 8003080:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f83b 	bl	8001102 <HAL_DMA_Abort_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03d      	beq.n	800310e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030a0:	e035      	b.n	800310e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f833 	bl	8001146 <HAL_DMA_GetState>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d014      	beq.n	8003110 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	4a4e      	ldr	r2, [pc, #312]	; (8003224 <I2C_Slave_STOPF+0x258>)
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe f805 	bl	8001102 <HAL_DMA_Abort_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003108:	4610      	mov	r0, r2
 800310a:	4798      	blx	r3
 800310c:	e000      	b.n	8003110 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800310e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03e      	beq.n	8003198 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b04      	cmp	r3, #4
 8003126:	d112      	bne.n	800314e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d112      	bne.n	8003182 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8b3 	bl	800330c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031a6:	e039      	b.n	800321c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b2a      	cmp	r3, #42	; 0x2a
 80031ac:	d109      	bne.n	80031c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2228      	movs	r2, #40	; 0x28
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff f827 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b28      	cmp	r3, #40	; 0x28
 80031cc:	d111      	bne.n	80031f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <I2C_Slave_STOPF+0x25c>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff f828 	bl	8002240 <HAL_I2C_ListenCpltCallback>
}
 80031f0:	e014      	b.n	800321c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	2b22      	cmp	r3, #34	; 0x22
 80031f8:	d002      	beq.n	8003200 <I2C_Slave_STOPF+0x234>
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	d10d      	bne.n	800321c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fffa 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08003811 	.word	0x08003811
 8003228:	ffff0000 	.word	0xffff0000

0800322c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d002      	beq.n	800324e <I2C_Slave_AF+0x22>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b20      	cmp	r3, #32
 800324c:	d129      	bne.n	80032a2 <I2C_Slave_AF+0x76>
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b28      	cmp	r3, #40	; 0x28
 8003252:	d126      	bne.n	80032a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <I2C_Slave_AF+0xdc>)
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003268:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003272:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe ffd0 	bl	8002240 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032a0:	e02e      	b.n	8003300 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b21      	cmp	r3, #33	; 0x21
 80032a6:	d126      	bne.n	80032f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <I2C_Slave_AF+0xdc>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2221      	movs	r2, #33	; 0x21
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe ff84 	bl	80021fc <HAL_I2C_SlaveTxCpltCallback>
}
 80032f4:	e004      	b.n	8003300 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fe:	615a      	str	r2, [r3, #20]
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	ffff0000 	.word	0xffff0000

0800330c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d002      	beq.n	8003330 <I2C_ITError+0x24>
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d10a      	bne.n	8003346 <I2C_ITError+0x3a>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b22      	cmp	r3, #34	; 0x22
 8003334:	d107      	bne.n	8003346 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003344:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334c:	2b28      	cmp	r3, #40	; 0x28
 800334e:	d107      	bne.n	8003360 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2228      	movs	r2, #40	; 0x28
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800335e:	e015      	b.n	800338c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d00a      	beq.n	8003386 <I2C_ITError+0x7a>
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b60      	cmp	r3, #96	; 0x60
 8003374:	d007      	beq.n	8003386 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339a:	d162      	bne.n	8003462 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d020      	beq.n	80033fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <I2C_ITError+0x25c>)
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fe9b 	bl	8001102 <HAL_DMA_Abort_IT>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8089 	beq.w	80034e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f6:	4610      	mov	r0, r2
 80033f8:	4798      	blx	r3
 80033fa:	e074      	b.n	80034e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	4a59      	ldr	r2, [pc, #356]	; (8003568 <I2C_ITError+0x25c>)
 8003402:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fe7a 	bl	8001102 <HAL_DMA_Abort_IT>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d068      	beq.n	80034e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d10b      	bne.n	800343a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	4610      	mov	r0, r2
 800345e:	4798      	blx	r3
 8003460:	e041      	b.n	80034e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b60      	cmp	r3, #96	; 0x60
 800346c:	d125      	bne.n	80034ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d10b      	bne.n	80034a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe feec 	bl	8002290 <HAL_I2C_AbortCpltCallback>
 80034b8:	e015      	b.n	80034e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10b      	bne.n	80034e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fe fecb 	bl	800227c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d113      	bne.n	8003560 <I2C_ITError+0x254>
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b28      	cmp	r3, #40	; 0x28
 800353c:	d110      	bne.n	8003560 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <I2C_ITError+0x260>)
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fe70 	bl	8002240 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08003811 	.word	0x08003811
 800356c:	ffff0000 	.word	0xffff0000

08003570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d006      	beq.n	800359a <I2C_MasterRequestWrite+0x2a>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d003      	beq.n	800359a <I2C_MasterRequestWrite+0x2a>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003598:	d108      	bne.n	80035ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e00b      	b.n	80035c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	2b12      	cmp	r3, #18
 80035b2:	d107      	bne.n	80035c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f9c5 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d103      	bne.n	80035f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e035      	b.n	8003664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003600:	d108      	bne.n	8003614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003610:	611a      	str	r2, [r3, #16]
 8003612:	e01b      	b.n	800364c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003614:	897b      	ldrh	r3, [r7, #10]
 8003616:	11db      	asrs	r3, r3, #7
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0306 	and.w	r3, r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f063 030f 	orn	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <I2C_MasterRequestWrite+0xfc>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f9eb 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e010      	b.n	8003664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4907      	ldr	r1, [pc, #28]	; (8003670 <I2C_MasterRequestWrite+0x100>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f9db 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	00010008 	.word	0x00010008
 8003670:	00010002 	.word	0x00010002

08003674 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003698:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d006      	beq.n	80036ae <I2C_MasterRequestRead+0x3a>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d003      	beq.n	80036ae <I2C_MasterRequestRead+0x3a>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ac:	d108      	bne.n	80036c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00b      	b.n	80036d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	2b11      	cmp	r3, #17
 80036c6:	d107      	bne.n	80036d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f93b 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d103      	bne.n	8003708 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e079      	b.n	8003800 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003714:	d108      	bne.n	8003728 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
 8003726:	e05f      	b.n	80037e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003728:	897b      	ldrh	r3, [r7, #10]
 800372a:	11db      	asrs	r3, r3, #7
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0306 	and.w	r3, r3, #6
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f063 030f 	orn	r3, r3, #15
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4930      	ldr	r1, [pc, #192]	; (8003808 <I2C_MasterRequestRead+0x194>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f961 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e054      	b.n	8003800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4929      	ldr	r1, [pc, #164]	; (800380c <I2C_MasterRequestRead+0x198>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f951 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e044      	b.n	8003800 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8d9 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d103      	bne.n	80037cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e017      	b.n	8003800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037d0:	897b      	ldrh	r3, [r7, #10]
 80037d2:	11db      	asrs	r3, r3, #7
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 0306 	and.w	r3, r3, #6
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f063 030e 	orn	r3, r3, #14
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <I2C_MasterRequestRead+0x198>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f90d 	bl	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	00010008 	.word	0x00010008
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800382a:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <I2C_DMAAbort+0x148>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <I2C_DMAAbort+0x14c>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0a1a      	lsrs	r2, r3, #8
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	00da      	lsls	r2, r3, #3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003856:	e00a      	b.n	800386e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3b01      	subs	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d0ea      	beq.n	8003844 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	2200      	movs	r2, #0
 800388c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	2200      	movs	r2, #0
 80038b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2200      	movs	r2, #0
 80038c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	d10e      	bne.n	80038fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7fe fcca 	bl	8002290 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038fc:	e027      	b.n	800394e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003904:	2b28      	cmp	r3, #40	; 0x28
 8003906:	d117      	bne.n	8003938 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003926:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2228      	movs	r2, #40	; 0x28
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003936:	e007      	b.n	8003948 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f7fe fc97 	bl	800227c <HAL_I2C_ErrorCallback>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000
 800395c:	14f8b589 	.word	0x14f8b589

08003960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	e025      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d021      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fd fa11 	bl	8000da0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d116      	bne.n	80039be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e023      	b.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10d      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	e00c      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d0b6      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1c:	e051      	b.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2c:	d123      	bne.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e046      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d021      	beq.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fd f98f 	bl	8000da0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e020      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10c      	bne.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	e00b      	b.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d18d      	bne.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b18:	e02d      	b.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f900 	bl	8003d20 <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02d      	b.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d021      	beq.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd f935 	bl	8000da0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b80      	cmp	r3, #128	; 0x80
 8003b82:	d1ca      	bne.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9a:	e02d      	b.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8bf 	bl	8003d20 <I2C_IsAcknowledgeFailed>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e02d      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d021      	beq.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fd f8f4 	bl	8000da0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e007      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d1ca      	bne.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	08db      	lsrs	r3, r3, #3
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	0a1a      	lsrs	r2, r3, #8
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e008      	b.n	8003c60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5c:	d0e9      	beq.n	8003c32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	14f8b589 	.word	0x14f8b589

08003c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c80:	e042      	b.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d119      	bne.n	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0210 	mvn.w	r2, #16
 8003c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e029      	b.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fd f86c 	bl	8000da0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e007      	b.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d1b5      	bne.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d11b      	bne.n	8003d70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f043 0204 	orr.w	r2, r3, #4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d8e:	d103      	bne.n	8003d98 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d96:	e007      	b.n	8003da8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003da0:	d102      	bne.n	8003da8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2208      	movs	r2, #8
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cc      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d90c      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e067      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4934      	ldr	r1, [pc, #208]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fc ff7c 	bl	8000da0 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fc ff78 	bl	8000da0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e04f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d20c      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f855 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fedc 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	08006dbc 	.word	0x08006dbc
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000

08003f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f9c:	f7ff fff0 	bl	8003f80 <HAL_RCC_GetHCLKFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	0a9b      	lsrs	r3, r3, #10
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	4903      	ldr	r1, [pc, #12]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	08006dcc 	.word	0x08006dcc

08003fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fc4:	f7ff ffdc 	bl	8003f80 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0b5b      	lsrs	r3, r3, #13
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08006dcc 	.word	0x08006dcc

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fec:	b0ae      	sub	sp, #184	; 0xb8
 8003fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400e:	4bcb      	ldr	r3, [pc, #812]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b0c      	cmp	r3, #12
 8004018:	f200 8206 	bhi.w	8004428 <HAL_RCC_GetSysClockFreq+0x440>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCC_GetSysClockFreq+0x3c>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004059 	.word	0x08004059
 8004028:	08004429 	.word	0x08004429
 800402c:	08004429 	.word	0x08004429
 8004030:	08004429 	.word	0x08004429
 8004034:	08004061 	.word	0x08004061
 8004038:	08004429 	.word	0x08004429
 800403c:	08004429 	.word	0x08004429
 8004040:	08004429 	.word	0x08004429
 8004044:	08004069 	.word	0x08004069
 8004048:	08004429 	.word	0x08004429
 800404c:	08004429 	.word	0x08004429
 8004050:	08004429 	.word	0x08004429
 8004054:	08004259 	.word	0x08004259
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4bb9      	ldr	r3, [pc, #740]	; (8004340 <HAL_RCC_GetSysClockFreq+0x358>)
 800405a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800405e:	e1e7      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004060:	4bb8      	ldr	r3, [pc, #736]	; (8004344 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004066:	e1e3      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4bb4      	ldr	r3, [pc, #720]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004074:	4bb1      	ldr	r3, [pc, #708]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d071      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4bae      	ldr	r3, [pc, #696]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800408c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040a6:	4622      	mov	r2, r4
 80040a8:	462b      	mov	r3, r5
 80040aa:	f04f 0000 	mov.w	r0, #0
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	0159      	lsls	r1, r3, #5
 80040b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b8:	0150      	lsls	r0, r2, #5
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4621      	mov	r1, r4
 80040c0:	1a51      	subs	r1, r2, r1
 80040c2:	6439      	str	r1, [r7, #64]	; 0x40
 80040c4:	4629      	mov	r1, r5
 80040c6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80040d8:	4649      	mov	r1, r9
 80040da:	018b      	lsls	r3, r1, #6
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e2:	4641      	mov	r1, r8
 80040e4:	018a      	lsls	r2, r1, #6
 80040e6:	4641      	mov	r1, r8
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80040ec:	4649      	mov	r1, r9
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004100:	4649      	mov	r1, r9
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4641      	mov	r1, r8
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4641      	mov	r1, r8
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4622      	mov	r2, r4
 8004116:	189b      	adds	r3, r3, r2
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
 800411a:	462b      	mov	r3, r5
 800411c:	460a      	mov	r2, r1
 800411e:	eb42 0303 	adc.w	r3, r2, r3
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004130:	4629      	mov	r1, r5
 8004132:	024b      	lsls	r3, r1, #9
 8004134:	4621      	mov	r1, r4
 8004136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800413a:	4621      	mov	r1, r4
 800413c:	024a      	lsls	r2, r1, #9
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800414c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004150:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004154:	f7fc f8ac 	bl	80002b0 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004162:	e067      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004164:	4b75      	ldr	r3, [pc, #468]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004170:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	67bb      	str	r3, [r7, #120]	; 0x78
 800417e:	2300      	movs	r3, #0
 8004180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004182:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004186:	4622      	mov	r2, r4
 8004188:	462b      	mov	r3, r5
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004198:	0150      	lsls	r0, r2, #5
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4621      	mov	r1, r4
 80041a0:	1a51      	subs	r1, r2, r1
 80041a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80041a4:	4629      	mov	r1, r5
 80041a6:	eb63 0301 	sbc.w	r3, r3, r1
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80041b8:	4649      	mov	r1, r9
 80041ba:	018b      	lsls	r3, r1, #6
 80041bc:	4641      	mov	r1, r8
 80041be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c2:	4641      	mov	r1, r8
 80041c4:	018a      	lsls	r2, r1, #6
 80041c6:	4641      	mov	r1, r8
 80041c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80041cc:	4649      	mov	r1, r9
 80041ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e6:	4692      	mov	sl, r2
 80041e8:	469b      	mov	fp, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	eb1a 0303 	adds.w	r3, sl, r3
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	462b      	mov	r3, r5
 80041f4:	eb4b 0303 	adc.w	r3, fp, r3
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004206:	4629      	mov	r1, r5
 8004208:	028b      	lsls	r3, r1, #10
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004210:	4621      	mov	r1, r4
 8004212:	028a      	lsls	r2, r1, #10
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800421c:	2200      	movs	r2, #0
 800421e:	673b      	str	r3, [r7, #112]	; 0x70
 8004220:	677a      	str	r2, [r7, #116]	; 0x74
 8004222:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004226:	f7fc f843 	bl	80002b0 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4613      	mov	r3, r2
 8004230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800424e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004256:	e0eb      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004258:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004264:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d06b      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004270:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCC_GetSysClockFreq+0x354>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	2200      	movs	r2, #0
 8004278:	66bb      	str	r3, [r7, #104]	; 0x68
 800427a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800427c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	663b      	str	r3, [r7, #96]	; 0x60
 8004284:	2300      	movs	r3, #0
 8004286:	667b      	str	r3, [r7, #100]	; 0x64
 8004288:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800428c:	4622      	mov	r2, r4
 800428e:	462b      	mov	r3, r5
 8004290:	f04f 0000 	mov.w	r0, #0
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	0159      	lsls	r1, r3, #5
 800429a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429e:	0150      	lsls	r0, r2, #5
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4621      	mov	r1, r4
 80042a6:	1a51      	subs	r1, r2, r1
 80042a8:	61b9      	str	r1, [r7, #24]
 80042aa:	4629      	mov	r1, r5
 80042ac:	eb63 0301 	sbc.w	r3, r3, r1
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80042be:	4659      	mov	r1, fp
 80042c0:	018b      	lsls	r3, r1, #6
 80042c2:	4651      	mov	r1, sl
 80042c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c8:	4651      	mov	r1, sl
 80042ca:	018a      	lsls	r2, r1, #6
 80042cc:	4651      	mov	r1, sl
 80042ce:	ebb2 0801 	subs.w	r8, r2, r1
 80042d2:	4659      	mov	r1, fp
 80042d4:	eb63 0901 	sbc.w	r9, r3, r1
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ec:	4690      	mov	r8, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	4623      	mov	r3, r4
 80042f2:	eb18 0303 	adds.w	r3, r8, r3
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	462b      	mov	r3, r5
 80042fa:	eb49 0303 	adc.w	r3, r9, r3
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800430c:	4629      	mov	r1, r5
 800430e:	024b      	lsls	r3, r1, #9
 8004310:	4621      	mov	r1, r4
 8004312:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004316:	4621      	mov	r1, r4
 8004318:	024a      	lsls	r2, r1, #9
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004322:	2200      	movs	r2, #0
 8004324:	65bb      	str	r3, [r7, #88]	; 0x58
 8004326:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004328:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800432c:	f7fb ffc0 	bl	80002b0 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800433a:	e065      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x420>
 800433c:	40023800 	.word	0x40023800
 8004340:	00f42400 	.word	0x00f42400
 8004344:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004348:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCC_GetSysClockFreq+0x458>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	2200      	movs	r2, #0
 8004350:	4618      	mov	r0, r3
 8004352:	4611      	mov	r1, r2
 8004354:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
 800435a:	2300      	movs	r3, #0
 800435c:	657b      	str	r3, [r7, #84]	; 0x54
 800435e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004362:	4642      	mov	r2, r8
 8004364:	464b      	mov	r3, r9
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	0159      	lsls	r1, r3, #5
 8004370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004374:	0150      	lsls	r0, r2, #5
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4641      	mov	r1, r8
 800437c:	1a51      	subs	r1, r2, r1
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	4649      	mov	r1, r9
 8004382:	eb63 0301 	sbc.w	r3, r3, r1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004394:	4659      	mov	r1, fp
 8004396:	018b      	lsls	r3, r1, #6
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439e:	4651      	mov	r1, sl
 80043a0:	018a      	lsls	r2, r1, #6
 80043a2:	4651      	mov	r1, sl
 80043a4:	1a54      	subs	r4, r2, r1
 80043a6:	4659      	mov	r1, fp
 80043a8:	eb63 0501 	sbc.w	r5, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	00eb      	lsls	r3, r5, #3
 80043b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ba:	00e2      	lsls	r2, r4, #3
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	4643      	mov	r3, r8
 80043c2:	18e3      	adds	r3, r4, r3
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	464b      	mov	r3, r9
 80043c8:	eb45 0303 	adc.w	r3, r5, r3
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043da:	4629      	mov	r1, r5
 80043dc:	028b      	lsls	r3, r1, #10
 80043de:	4621      	mov	r1, r4
 80043e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e4:	4621      	mov	r1, r4
 80043e6:	028a      	lsls	r2, r1, #10
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f0:	2200      	movs	r2, #0
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043fa:	f7fb ff59 	bl	80002b0 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4613      	mov	r3, r2
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RCC_GetSysClockFreq+0x458>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0f1b      	lsrs	r3, r3, #28
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800441a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004426:	e003      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_GetSysClockFreq+0x45c>)
 800442a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800442e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004430:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004434:	4618      	mov	r0, r3
 8004436:	37b8      	adds	r7, #184	; 0xb8
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	00f42400 	.word	0x00f42400

08004448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e28d      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8083 	beq.w	800456e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004468:	4b94      	ldr	r3, [pc, #592]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b04      	cmp	r3, #4
 8004472:	d019      	beq.n	80044a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004474:	4b91      	ldr	r3, [pc, #580]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800447c:	2b08      	cmp	r3, #8
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004480:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d00c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448e:	4b8b      	ldr	r3, [pc, #556]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d112      	bne.n	80044c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449a:	4b88      	ldr	r3, [pc, #544]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	4b84      	ldr	r3, [pc, #528]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05b      	beq.n	800456c <HAL_RCC_OscConfig+0x124>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d157      	bne.n	800456c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e25a      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x90>
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7b      	ldr	r2, [pc, #492]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xcc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0xb4>
 80044e2:	4b76      	ldr	r3, [pc, #472]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a75      	ldr	r2, [pc, #468]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a72      	ldr	r2, [pc, #456]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xcc>
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6e      	ldr	r2, [pc, #440]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b6c      	ldr	r3, [pc, #432]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6b      	ldr	r2, [pc, #428]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fc fc40 	bl	8000da0 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004524:	f7fc fc3c 	bl	8000da0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e21f      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b61      	ldr	r3, [pc, #388]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xdc>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fc fc2c 	bl	8000da0 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454c:	f7fc fc28 	bl	8000da0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e20b      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	4b57      	ldr	r3, [pc, #348]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x104>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d06f      	beq.n	800465a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800457a:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004586:	4b4d      	ldr	r3, [pc, #308]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800458e:	2b08      	cmp	r3, #8
 8004590:	d105      	bne.n	800459e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004592:	4b4a      	ldr	r3, [pc, #296]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b44      	ldr	r3, [pc, #272]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x186>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1d3      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4937      	ldr	r1, [pc, #220]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	e03a      	b.n	800465a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ec:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCC_OscConfig+0x278>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fc fbd5 	bl	8000da0 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fc fbd1 	bl	8000da0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e1b4      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b28      	ldr	r3, [pc, #160]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4925      	ldr	r1, [pc, #148]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	e015      	b.n	800465a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x278>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fc fbb4 	bl	8000da0 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463c:	f7fc fbb0 	bl	8000da0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e193      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d036      	beq.n	80046d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fc fb94 	bl	8000da0 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467c:	f7fc fb90 	bl	8000da0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e173      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 8004690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x234>
 800469a:	e01b      	b.n	80046d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fc fb7d 	bl	8000da0 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	e00e      	b.n	80046c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fc fb79 	bl	8000da0 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d907      	bls.n	80046c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e15c      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
 80046bc:	40023800 	.word	0x40023800
 80046c0:	42470000 	.word	0x42470000
 80046c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	4b8a      	ldr	r3, [pc, #552]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ea      	bne.n	80046aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8097 	beq.w	8004810 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e6:	4b83      	ldr	r3, [pc, #524]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	4b7f      	ldr	r3, [pc, #508]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a7e      	ldr	r2, [pc, #504]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b7c      	ldr	r3, [pc, #496]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004712:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fc fb39 	bl	8000da0 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fc fb35 	bl	8000da0 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e118      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x31e>
 8004758:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	e01c      	b.n	80047a0 <HAL_RCC_OscConfig+0x358>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b05      	cmp	r3, #5
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x340>
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a60      	ldr	r2, [pc, #384]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004774:	f043 0304 	orr.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
 800477a:	4b5e      	ldr	r3, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0x358>
 8004788:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	4a59      	ldr	r2, [pc, #356]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6713      	str	r3, [r2, #112]	; 0x70
 8004794:	4b57      	ldr	r3, [pc, #348]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4a56      	ldr	r2, [pc, #344]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800479a:	f023 0304 	bic.w	r3, r3, #4
 800479e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fc fafa 	bl	8000da0 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fc faf6 	bl	8000da0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0d7      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <HAL_RCC_OscConfig+0x368>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fc fae4 	bl	8000da0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fc fae0 	bl	8000da0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0c1      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ee      	bne.n	80047dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800480a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80ad 	beq.w	8004974 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d060      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d145      	bne.n	80048ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482e:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_RCC_OscConfig+0x4b4>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fc fab4 	bl	8000da0 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483c:	f7fc fab0 	bl	8000da0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e093      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	3b01      	subs	r3, #1
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	071b      	lsls	r3, r3, #28
 8004886:	491b      	ldr	r1, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x4b4>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc fa85 	bl	8000da0 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489a:	f7fc fa81 	bl	8000da0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e064      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x452>
 80048b8:	e05c      	b.n	8004974 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_OscConfig+0x4b4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc fa6e 	bl	8000da0 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fc fa6a 	bl	8000da0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e04d      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x480>
 80048e6:	e045      	b.n	8004974 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e040      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x538>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d030      	beq.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d129      	bne.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d122      	bne.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	4293      	cmp	r3, r2
 800493a:	d119      	bne.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d10f      	bne.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800

08004984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e03f      	b.n	8004a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc f82e 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fd7b 	bl	80054c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08a      	sub	sp, #40	; 0x28
 8004a22:	af02      	add	r7, sp, #8
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d17c      	bne.n	8004b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Transmit+0x2c>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e075      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Transmit+0x3e>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e06e      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2221      	movs	r2, #33	; 0x21
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fc f995 	bl	8000da0 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d108      	bne.n	8004aa0 <HAL_UART_Transmit+0x82>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e003      	b.n	8004aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab0:	e02a      	b.n	8004b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 faf9 	bl	80050b4 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e036      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e007      	b.n	8004afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cf      	bne.n	8004ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2140      	movs	r1, #64	; 0x40
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fac9 	bl	80050b4 <UART_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e006      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b0ba      	sub	sp, #232	; 0xe8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_UART_IRQHandler+0x66>
 8004b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fbd3 	bl	800534e <UART_Receive_IT>
      return;
 8004ba8:	e256      	b.n	8005058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80de 	beq.w	8004d70 <HAL_UART_IRQHandler+0x22c>
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80d1 	beq.w	8004d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_UART_IRQHandler+0xae>
 8004bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <HAL_UART_IRQHandler+0xd2>
 8004bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0202 	orr.w	r2, r3, #2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_UART_IRQHandler+0xf6>
 8004c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0204 	orr.w	r2, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <HAL_UART_IRQHandler+0x126>
 8004c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0208 	orr.w	r2, r3, #8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 81ed 	beq.w	800504e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_UART_IRQHandler+0x14e>
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb5e 	bl	800534e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <HAL_UART_IRQHandler+0x17a>
 8004cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04f      	beq.n	8004d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa66 	bl	8005190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d141      	bne.n	8004d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1d9      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d013      	beq.n	8004d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	4a7d      	ldr	r2, [pc, #500]	; (8004f20 <HAL_UART_IRQHandler+0x3dc>)
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fc f9e5 	bl	8001102 <HAL_DMA_Abort_IT>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e00e      	b.n	8004d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f99a 	bl	8005088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	e00a      	b.n	8004d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f996 	bl	8005088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	e006      	b.n	8004d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f992 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d6a:	e170      	b.n	800504e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	bf00      	nop
    return;
 8004d6e:	e16e      	b.n	800504e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	f040 814a 	bne.w	800500e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8143 	beq.w	800500e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 813c 	beq.w	800500e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	f040 80b4 	bne.w	8004f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8140 	beq.w	8005052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f080 8139 	bcs.w	8005052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df2:	f000 8088 	beq.w	8004f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1d9      	bne.n	8004df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e1      	bne.n	8004e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e3      	bne.n	8004e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	f023 0310 	bic.w	r3, r3, #16
 8004eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e3      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fc f88e 	bl	8001022 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8c0 	bl	800509c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f1c:	e099      	b.n	8005052 <HAL_UART_IRQHandler+0x50e>
 8004f1e:	bf00      	nop
 8004f20:	08005257 	.word	0x08005257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 808b 	beq.w	8005056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8086 	beq.w	8005056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e3      	bne.n	8004f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	623b      	str	r3, [r7, #32]
   return(result);
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e3      	bne.n	8004f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fec:	61fa      	str	r2, [r7, #28]
 8004fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e3      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f848 	bl	800509c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800500c:	e023      	b.n	8005056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_UART_IRQHandler+0x4ea>
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f929 	bl	800527e <UART_Transmit_IT>
    return;
 800502c:	e014      	b.n	8005058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00e      	beq.n	8005058 <HAL_UART_IRQHandler+0x514>
 800503a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f969 	bl	800531e <UART_EndTransmit_IT>
    return;
 800504c:	e004      	b.n	8005058 <HAL_UART_IRQHandler+0x514>
    return;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <HAL_UART_IRQHandler+0x514>
      return;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HAL_UART_IRQHandler+0x514>
      return;
 8005056:	bf00      	nop
  }
}
 8005058:	37e8      	adds	r7, #232	; 0xe8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop

08005060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b090      	sub	sp, #64	; 0x40
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c4:	e050      	b.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d04c      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d4:	f7fb fe64 	bl	8000da0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d241      	bcs.n	8005168 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005104:	637a      	str	r2, [r7, #52]	; 0x34
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005138:	623a      	str	r2, [r7, #32]
 800513a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	61bb      	str	r3, [r7, #24]
   return(result);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e00f      	b.n	8005188 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d09f      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3740      	adds	r7, #64	; 0x40
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b095      	sub	sp, #84	; 0x54
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051b8:	643a      	str	r2, [r7, #64]	; 0x40
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	61fb      	str	r3, [r7, #28]
   return(result);
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	2b01      	cmp	r3, #1
 8005206:	d119      	bne.n	800523c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60bb      	str	r3, [r7, #8]
   return(result);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	647b      	str	r3, [r7, #68]	; 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	61ba      	str	r2, [r7, #24]
 800522a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	613b      	str	r3, [r7, #16]
   return(result);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800524a:	bf00      	nop
 800524c:	3754      	adds	r7, #84	; 0x54
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ff09 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b21      	cmp	r3, #33	; 0x21
 8005290:	d13e      	bne.n	8005310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529a:	d114      	bne.n	80052c6 <UART_Transmit_IT+0x48>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d110      	bne.n	80052c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]
 80052c4:	e008      	b.n	80052d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6211      	str	r1, [r2, #32]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4619      	mov	r1, r3
 80052e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10f      	bne.n	800530c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe8e 	bl	8005060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b08c      	sub	sp, #48	; 0x30
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b22      	cmp	r3, #34	; 0x22
 8005360:	f040 80ab 	bne.w	80054ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536c:	d117      	bne.n	800539e <UART_Receive_IT+0x50>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d113      	bne.n	800539e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538c:	b29a      	uxth	r2, r3
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
 800539c:	e026      	b.n	80053ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b0:	d007      	beq.n	80053c2 <UART_Receive_IT+0x74>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <UART_Receive_IT+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e008      	b.n	80053e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4619      	mov	r1, r3
 80053fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d15a      	bne.n	80054b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0220 	bic.w	r2, r2, #32
 800540e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800541e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	2b01      	cmp	r3, #1
 800543e:	d135      	bne.n	80054ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	623a      	str	r2, [r7, #32]
 8005468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	61bb      	str	r3, [r7, #24]
   return(result);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d10a      	bne.n	800549e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fdf9 	bl	800509c <HAL_UARTEx_RxEventCallback>
 80054aa:	e002      	b.n	80054b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fde1 	bl	8005074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e002      	b.n	80054bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e000      	b.n	80054bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
  }
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	; 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b0c0      	sub	sp, #256	; 0x100
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	ea40 0301 	orr.w	r3, r0, r1
 80054ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	431a      	orrs	r2, r3
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800551c:	f021 010c 	bic.w	r1, r1, #12
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800552a:	430b      	orrs	r3, r1
 800552c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553e:	6999      	ldr	r1, [r3, #24]
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	ea40 0301 	orr.w	r3, r0, r1
 800554a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <UART_SetConfig+0x2cc>)
 8005554:	429a      	cmp	r2, r3
 8005556:	d005      	beq.n	8005564 <UART_SetConfig+0xa0>
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b8d      	ldr	r3, [pc, #564]	; (8005794 <UART_SetConfig+0x2d0>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d104      	bne.n	800556e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7fe fd2c 	bl	8003fc0 <HAL_RCC_GetPCLK2Freq>
 8005568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800556c:	e003      	b.n	8005576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800556e:	f7fe fd13 	bl	8003f98 <HAL_RCC_GetPCLK1Freq>
 8005572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005580:	f040 810c 	bne.w	800579c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005588:	2200      	movs	r2, #0
 800558a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800558e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005596:	4622      	mov	r2, r4
 8005598:	462b      	mov	r3, r5
 800559a:	1891      	adds	r1, r2, r2
 800559c:	65b9      	str	r1, [r7, #88]	; 0x58
 800559e:	415b      	adcs	r3, r3
 80055a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055a6:	4621      	mov	r1, r4
 80055a8:	eb12 0801 	adds.w	r8, r2, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	eb43 0901 	adc.w	r9, r3, r1
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055c6:	4690      	mov	r8, r2
 80055c8:	4699      	mov	r9, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	eb18 0303 	adds.w	r3, r8, r3
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055d4:	462b      	mov	r3, r5
 80055d6:	eb49 0303 	adc.w	r3, r9, r3
 80055da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055f2:	460b      	mov	r3, r1
 80055f4:	18db      	adds	r3, r3, r3
 80055f6:	653b      	str	r3, [r7, #80]	; 0x50
 80055f8:	4613      	mov	r3, r2
 80055fa:	eb42 0303 	adc.w	r3, r2, r3
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005608:	f7fa fe52 	bl	80002b0 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4b61      	ldr	r3, [pc, #388]	; (8005798 <UART_SetConfig+0x2d4>)
 8005612:	fba3 2302 	umull	r2, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	011c      	lsls	r4, r3, #4
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	64b9      	str	r1, [r7, #72]	; 0x48
 8005634:	415b      	adcs	r3, r3
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800563c:	4641      	mov	r1, r8
 800563e:	eb12 0a01 	adds.w	sl, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb43 0b01 	adc.w	fp, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565c:	4692      	mov	sl, r2
 800565e:	469b      	mov	fp, r3
 8005660:	4643      	mov	r3, r8
 8005662:	eb1a 0303 	adds.w	r3, sl, r3
 8005666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800566a:	464b      	mov	r3, r9
 800566c:	eb4b 0303 	adc.w	r3, fp, r3
 8005670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005688:	460b      	mov	r3, r1
 800568a:	18db      	adds	r3, r3, r3
 800568c:	643b      	str	r3, [r7, #64]	; 0x40
 800568e:	4613      	mov	r3, r2
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
 8005696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800569a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800569e:	f7fa fe07 	bl	80002b0 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <UART_SetConfig+0x2d4>)
 80056aa:	fba3 2301 	umull	r2, r3, r3, r1
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	2264      	movs	r2, #100	; 0x64
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <UART_SetConfig+0x2d4>)
 80056c0:	fba3 2302 	umull	r2, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056cc:	441c      	add	r4, r3
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e8:	415b      	adcs	r3, r3
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056f0:	4641      	mov	r1, r8
 80056f2:	1851      	adds	r1, r2, r1
 80056f4:	6339      	str	r1, [r7, #48]	; 0x30
 80056f6:	4649      	mov	r1, r9
 80056f8:	414b      	adcs	r3, r1
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005708:	4659      	mov	r1, fp
 800570a:	00cb      	lsls	r3, r1, #3
 800570c:	4651      	mov	r1, sl
 800570e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005712:	4651      	mov	r1, sl
 8005714:	00ca      	lsls	r2, r1, #3
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	4603      	mov	r3, r0
 800571c:	4642      	mov	r2, r8
 800571e:	189b      	adds	r3, r3, r2
 8005720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800573c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005744:	460b      	mov	r3, r1
 8005746:	18db      	adds	r3, r3, r3
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
 800574a:	4613      	mov	r3, r2
 800574c:	eb42 0303 	adc.w	r3, r2, r3
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800575a:	f7fa fda9 	bl	80002b0 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <UART_SetConfig+0x2d4>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	3332      	adds	r3, #50	; 0x32
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <UART_SetConfig+0x2d4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 0207 	and.w	r2, r3, #7
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4422      	add	r2, r4
 800578a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800578c:	e105      	b.n	800599a <UART_SetConfig+0x4d6>
 800578e:	bf00      	nop
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057ae:	4642      	mov	r2, r8
 80057b0:	464b      	mov	r3, r9
 80057b2:	1891      	adds	r1, r2, r2
 80057b4:	6239      	str	r1, [r7, #32]
 80057b6:	415b      	adcs	r3, r3
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057be:	4641      	mov	r1, r8
 80057c0:	1854      	adds	r4, r2, r1
 80057c2:	4649      	mov	r1, r9
 80057c4:	eb43 0501 	adc.w	r5, r3, r1
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	00eb      	lsls	r3, r5, #3
 80057d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d6:	00e2      	lsls	r2, r4, #3
 80057d8:	4614      	mov	r4, r2
 80057da:	461d      	mov	r5, r3
 80057dc:	4643      	mov	r3, r8
 80057de:	18e3      	adds	r3, r4, r3
 80057e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057e4:	464b      	mov	r3, r9
 80057e6:	eb45 0303 	adc.w	r3, r5, r3
 80057ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800580a:	4629      	mov	r1, r5
 800580c:	008b      	lsls	r3, r1, #2
 800580e:	4621      	mov	r1, r4
 8005810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005814:	4621      	mov	r1, r4
 8005816:	008a      	lsls	r2, r1, #2
 8005818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800581c:	f7fa fd48 	bl	80002b0 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b60      	ldr	r3, [pc, #384]	; (80059a8 <UART_SetConfig+0x4e4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	011c      	lsls	r4, r3, #4
 800582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800583c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	1891      	adds	r1, r2, r2
 8005846:	61b9      	str	r1, [r7, #24]
 8005848:	415b      	adcs	r3, r3
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005850:	4641      	mov	r1, r8
 8005852:	1851      	adds	r1, r2, r1
 8005854:	6139      	str	r1, [r7, #16]
 8005856:	4649      	mov	r1, r9
 8005858:	414b      	adcs	r3, r1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005868:	4659      	mov	r1, fp
 800586a:	00cb      	lsls	r3, r1, #3
 800586c:	4651      	mov	r1, sl
 800586e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005872:	4651      	mov	r1, sl
 8005874:	00ca      	lsls	r2, r1, #3
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	4603      	mov	r3, r0
 800587c:	4642      	mov	r2, r8
 800587e:	189b      	adds	r3, r3, r2
 8005880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005884:	464b      	mov	r3, r9
 8005886:	460a      	mov	r2, r1
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	67bb      	str	r3, [r7, #120]	; 0x78
 800589a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058a8:	4649      	mov	r1, r9
 80058aa:	008b      	lsls	r3, r1, #2
 80058ac:	4641      	mov	r1, r8
 80058ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b2:	4641      	mov	r1, r8
 80058b4:	008a      	lsls	r2, r1, #2
 80058b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058ba:	f7fa fcf9 	bl	80002b0 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <UART_SetConfig+0x4e4>)
 80058c4:	fba3 1302 	umull	r1, r3, r3, r2
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	3332      	adds	r3, #50	; 0x32
 80058d6:	4a34      	ldr	r2, [pc, #208]	; (80059a8 <UART_SetConfig+0x4e4>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e2:	441c      	add	r4, r3
 80058e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e8:	2200      	movs	r2, #0
 80058ea:	673b      	str	r3, [r7, #112]	; 0x70
 80058ec:	677a      	str	r2, [r7, #116]	; 0x74
 80058ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058f2:	4642      	mov	r2, r8
 80058f4:	464b      	mov	r3, r9
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005902:	4641      	mov	r1, r8
 8005904:	1851      	adds	r1, r2, r1
 8005906:	6039      	str	r1, [r7, #0]
 8005908:	4649      	mov	r1, r9
 800590a:	414b      	adcs	r3, r1
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800591a:	4659      	mov	r1, fp
 800591c:	00cb      	lsls	r3, r1, #3
 800591e:	4651      	mov	r1, sl
 8005920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005924:	4651      	mov	r1, sl
 8005926:	00ca      	lsls	r2, r1, #3
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	4603      	mov	r3, r0
 800592e:	4642      	mov	r2, r8
 8005930:	189b      	adds	r3, r3, r2
 8005932:	66bb      	str	r3, [r7, #104]	; 0x68
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	663b      	str	r3, [r7, #96]	; 0x60
 8005948:	667a      	str	r2, [r7, #100]	; 0x64
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005956:	4649      	mov	r1, r9
 8005958:	008b      	lsls	r3, r1, #2
 800595a:	4641      	mov	r1, r8
 800595c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005960:	4641      	mov	r1, r8
 8005962:	008a      	lsls	r2, r1, #2
 8005964:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005968:	f7fa fca2 	bl	80002b0 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <UART_SetConfig+0x4e4>)
 8005972:	fba3 1302 	umull	r1, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2164      	movs	r1, #100	; 0x64
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	; 0x32
 8005984:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <UART_SetConfig+0x4e4>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4422      	add	r2, r4
 8005998:	609a      	str	r2, [r3, #8]
}
 800599a:	bf00      	nop
 800599c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059a0:	46bd      	mov	sp, r7
 80059a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a6:	bf00      	nop
 80059a8:	51eb851f 	.word	0x51eb851f

080059ac <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80059be:	232d      	movs	r3, #45	; 0x2d
 80059c0:	73bb      	strb	r3, [r7, #14]
 80059c2:	e011      	b.n	80059e8 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	b299      	uxth	r1, r3
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	3b2d      	subs	r3, #45	; 0x2d
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <VL53L1X_SensorInit+0xd4>)
 80059ce:	5cd2      	ldrb	r2, [r2, r3]
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f972 	bl	8005cbc <VL53L1_WrByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	4313      	orrs	r3, r2
 80059e0:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	3301      	adds	r3, #1
 80059e6:	73bb      	strb	r3, [r7, #14]
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b87      	cmp	r3, #135	; 0x87
 80059ec:	d9ea      	bls.n	80059c4 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f889 	bl	8005b08 <VL53L1X_StartRanging>
 80059f6:	4603      	mov	r3, r0
 80059f8:	461a      	mov	r2, r3
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8005a04:	e00b      	b.n	8005a1e <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8005a06:	f107 020d 	add.w	r2, r7, #13
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f8aa 	bl	8005b68 <VL53L1X_CheckForDataReady>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8005a1e:	7b7b      	ldrb	r3, [r7, #13]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f82c 	bl	8005a84 <VL53L1X_ClearInterrupt>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f87d 	bl	8005b38 <VL53L1X_StopRanging>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2209      	movs	r2, #9
 8005a4c:	2108      	movs	r1, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f934 	bl	8005cbc <VL53L1_WrByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	2200      	movs	r2, #0
 8005a62:	210b      	movs	r1, #11
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f929 	bl	8005cbc <VL53L1_WrByte>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	73fb      	strb	r3, [r7, #15]
	return status;
 8005a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	08006dd4 	.word	0x08006dd4

08005a84 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	2201      	movs	r2, #1
 8005a96:	2186      	movs	r1, #134	; 0x86
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f90f 	bl	8005cbc <VL53L1_WrByte>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	73fb      	strb	r3, [r7, #15]
	return status;
 8005aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8005ac4:	f107 020e 	add.w	r2, r7, #14
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	2130      	movs	r1, #48	; 0x30
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f921 	bl	8005d14 <VL53L1_RdByte>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	701a      	strb	r2, [r3, #0]
	return status;
 8005afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	2187      	movs	r1, #135	; 0x87
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f8cd 	bl	8005cbc <VL53L1_WrByte>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	73fb      	strb	r3, [r7, #15]
	return status;
 8005b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2187      	movs	r1, #135	; 0x87
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f8b5 	bl	8005cbc <VL53L1_WrByte>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	73fb      	strb	r3, [r7, #15]
	return status;
 8005b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8005b78:	f107 020d 	add.w	r2, r7, #13
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ff97 	bl	8005ab4 <VL53L1X_GetInterruptPolarity>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8005b90:	f107 020e 	add.w	r2, r7, #14
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	2131      	movs	r1, #49	; 0x31
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f8bb 	bl	8005d14 <VL53L1_RdByte>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8005ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10c      	bne.n	8005bca <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	7b7a      	ldrb	r2, [r7, #13]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e002      	b.n	8005bca <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8005bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	6039      	str	r1, [r7, #0]
 8005be0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8005bea:	f107 020e 	add.w	r2, r7, #14
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	21e5      	movs	r1, #229	; 0xe5
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f88e 	bl	8005d14 <VL53L1_RdByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8005c02:	7bba      	ldrb	r2, [r7, #14]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	701a      	strb	r2, [r3, #0]
	return status;
 8005c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8005c24:	f107 020c 	add.w	r2, r7, #12
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	2196      	movs	r1, #150	; 0x96
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f8a9 	bl	8005d84 <VL53L1_RdWord>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8005c3c:	89ba      	ldrh	r2, [r7, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	801a      	strh	r2, [r3, #0]
	return status;
 8005c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	4603      	mov	r3, r0
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, 10);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	89f9      	ldrh	r1, [r7, #14]
 8005c64:	220a      	movs	r2, #10
 8005c66:	9200      	str	r2, [sp, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4805      	ldr	r0, [pc, #20]	; (8005c80 <_I2CWrite+0x30>)
 8005c6c:	f7fb fd76 	bl	800175c <HAL_I2C_Master_Transmit>
 8005c70:	4603      	mov	r3, r0
 8005c72:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005c74:	697b      	ldr	r3, [r7, #20]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000008c 	.word	0x2000008c

08005c84 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	81fb      	strh	r3, [r7, #14]
    int status;
    //int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, 10);
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	b299      	uxth	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	9200      	str	r2, [sp, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4804      	ldr	r0, [pc, #16]	; (8005cb8 <_I2CRead+0x34>)
 8005ca6:	f7fb fe57 	bl	8001958 <HAL_I2C_Master_Receive>
 8005caa:	4603      	mov	r3, r0
 8005cac:	617b      	str	r3, [r7, #20]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005cae:	697b      	ldr	r3, [r7, #20]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	2000008c 	.word	0x2000008c

08005cbc <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	80fb      	strh	r3, [r7, #6]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	80bb      	strh	r3, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <VL53L1_WrByte+0x54>)
 8005cdc:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005cde:	88bb      	ldrh	r3, [r7, #4]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <VL53L1_WrByte+0x54>)
 8005ce4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8005ce6:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <VL53L1_WrByte+0x54>)
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	4907      	ldr	r1, [pc, #28]	; (8005d10 <VL53L1_WrByte+0x54>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ffac 	bl	8005c50 <_I2CWrite>
 8005cf8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d00:	23f3      	movs	r3, #243	; 0xf3
 8005d02:	73fb      	strb	r3, [r7, #15]
    }
    return Status;
 8005d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000012c 	.word	0x2000012c

08005d14 <VL53L1_RdByte>:
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    return Status;
}

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	603a      	str	r2, [r7, #0]
 8005d1e:	80fb      	strh	r3, [r7, #6]
 8005d20:	460b      	mov	r3, r1
 8005d22:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005d28:	88bb      	ldrh	r3, [r7, #4]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <VL53L1_RdByte+0x6c>)
 8005d32:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <VL53L1_RdByte+0x6c>)
 8005d3a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	490f      	ldr	r1, [pc, #60]	; (8005d80 <VL53L1_RdByte+0x6c>)
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff84 	bl	8005c50 <_I2CWrite>
 8005d48:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d50:	23f3      	movs	r3, #243	; 0xf3
 8005d52:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005d54:	e00d      	b.n	8005d72 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff91 	bl	8005c84 <_I2CRead>
 8005d62:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005d6a:	23f3      	movs	r3, #243	; 0xf3
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e000      	b.n	8005d72 <VL53L1_RdByte+0x5e>
    }
done:
 8005d70:	bf00      	nop
    return Status;
 8005d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000012c 	.word	0x2000012c

08005d84 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	80fb      	strh	r3, [r7, #6]
 8005d90:	460b      	mov	r3, r1
 8005d92:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005d98:	88bb      	ldrh	r3, [r7, #4]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005da2:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005da4:	88bb      	ldrh	r3, [r7, #4]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005daa:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	2202      	movs	r2, #2
 8005db0:	4914      	ldr	r1, [pc, #80]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff ff4c 	bl	8005c50 <_I2CWrite>
 8005db8:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005dc0:	23f3      	movs	r3, #243	; 0xf3
 8005dc2:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005dc4:	e018      	b.n	8005df8 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	490e      	ldr	r1, [pc, #56]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff59 	bl	8005c84 <_I2CRead>
 8005dd2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005dda:	23f3      	movs	r3, #243	; 0xf3
 8005ddc:	73fb      	strb	r3, [r7, #15]
        goto done;
 8005dde:	e00b      	b.n	8005df8 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <VL53L1_RdWord+0x80>)
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	4413      	add	r3, r2
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8005df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	2000012c 	.word	0x2000012c

08005e08 <__errno>:
 8005e08:	4b01      	ldr	r3, [pc, #4]	; (8005e10 <__errno+0x8>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c

08005e14 <__libc_init_array>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	4d0d      	ldr	r5, [pc, #52]	; (8005e4c <__libc_init_array+0x38>)
 8005e18:	4c0d      	ldr	r4, [pc, #52]	; (8005e50 <__libc_init_array+0x3c>)
 8005e1a:	1b64      	subs	r4, r4, r5
 8005e1c:	10a4      	asrs	r4, r4, #2
 8005e1e:	2600      	movs	r6, #0
 8005e20:	42a6      	cmp	r6, r4
 8005e22:	d109      	bne.n	8005e38 <__libc_init_array+0x24>
 8005e24:	4d0b      	ldr	r5, [pc, #44]	; (8005e54 <__libc_init_array+0x40>)
 8005e26:	4c0c      	ldr	r4, [pc, #48]	; (8005e58 <__libc_init_array+0x44>)
 8005e28:	f000 ffae 	bl	8006d88 <_init>
 8005e2c:	1b64      	subs	r4, r4, r5
 8005e2e:	10a4      	asrs	r4, r4, #2
 8005e30:	2600      	movs	r6, #0
 8005e32:	42a6      	cmp	r6, r4
 8005e34:	d105      	bne.n	8005e42 <__libc_init_array+0x2e>
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3c:	4798      	blx	r3
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7ee      	b.n	8005e20 <__libc_init_array+0xc>
 8005e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e46:	4798      	blx	r3
 8005e48:	3601      	adds	r6, #1
 8005e4a:	e7f2      	b.n	8005e32 <__libc_init_array+0x1e>
 8005e4c:	08006ed0 	.word	0x08006ed0
 8005e50:	08006ed0 	.word	0x08006ed0
 8005e54:	08006ed0 	.word	0x08006ed0
 8005e58:	08006ed4 	.word	0x08006ed4

08005e5c <memset>:
 8005e5c:	4402      	add	r2, r0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d100      	bne.n	8005e66 <memset+0xa>
 8005e64:	4770      	bx	lr
 8005e66:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6a:	e7f9      	b.n	8005e60 <memset+0x4>

08005e6c <iprintf>:
 8005e6c:	b40f      	push	{r0, r1, r2, r3}
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <iprintf+0x2c>)
 8005e70:	b513      	push	{r0, r1, r4, lr}
 8005e72:	681c      	ldr	r4, [r3, #0]
 8005e74:	b124      	cbz	r4, 8005e80 <iprintf+0x14>
 8005e76:	69a3      	ldr	r3, [r4, #24]
 8005e78:	b913      	cbnz	r3, 8005e80 <iprintf+0x14>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f866 	bl	8005f4c <__sinit>
 8005e80:	ab05      	add	r3, sp, #20
 8005e82:	9a04      	ldr	r2, [sp, #16]
 8005e84:	68a1      	ldr	r1, [r4, #8]
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 f9bd 	bl	8006208 <_vfiprintf_r>
 8005e8e:	b002      	add	sp, #8
 8005e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e94:	b004      	add	sp, #16
 8005e96:	4770      	bx	lr
 8005e98:	2000000c 	.word	0x2000000c

08005e9c <std>:
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eaa:	6083      	str	r3, [r0, #8]
 8005eac:	8181      	strh	r1, [r0, #12]
 8005eae:	6643      	str	r3, [r0, #100]	; 0x64
 8005eb0:	81c2      	strh	r2, [r0, #14]
 8005eb2:	6183      	str	r3, [r0, #24]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	305c      	adds	r0, #92	; 0x5c
 8005eba:	f7ff ffcf 	bl	8005e5c <memset>
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <std+0x38>)
 8005ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <std+0x3c>)
 8005ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <std+0x40>)
 8005ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <std+0x44>)
 8005ecc:	6224      	str	r4, [r4, #32]
 8005ece:	6323      	str	r3, [r4, #48]	; 0x30
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	080067b1 	.word	0x080067b1
 8005ed8:	080067d3 	.word	0x080067d3
 8005edc:	0800680b 	.word	0x0800680b
 8005ee0:	0800682f 	.word	0x0800682f

08005ee4 <_cleanup_r>:
 8005ee4:	4901      	ldr	r1, [pc, #4]	; (8005eec <_cleanup_r+0x8>)
 8005ee6:	f000 b8af 	b.w	8006048 <_fwalk_reent>
 8005eea:	bf00      	nop
 8005eec:	08006b09 	.word	0x08006b09

08005ef0 <__sfmoreglue>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	2268      	movs	r2, #104	; 0x68
 8005ef4:	1e4d      	subs	r5, r1, #1
 8005ef6:	4355      	muls	r5, r2
 8005ef8:	460e      	mov	r6, r1
 8005efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005efe:	f000 f8e5 	bl	80060cc <_malloc_r>
 8005f02:	4604      	mov	r4, r0
 8005f04:	b140      	cbz	r0, 8005f18 <__sfmoreglue+0x28>
 8005f06:	2100      	movs	r1, #0
 8005f08:	e9c0 1600 	strd	r1, r6, [r0]
 8005f0c:	300c      	adds	r0, #12
 8005f0e:	60a0      	str	r0, [r4, #8]
 8005f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f14:	f7ff ffa2 	bl	8005e5c <memset>
 8005f18:	4620      	mov	r0, r4
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}

08005f1c <__sfp_lock_acquire>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	; (8005f24 <__sfp_lock_acquire+0x8>)
 8005f1e:	f000 b8b3 	b.w	8006088 <__retarget_lock_acquire_recursive>
 8005f22:	bf00      	nop
 8005f24:	2000022d 	.word	0x2000022d

08005f28 <__sfp_lock_release>:
 8005f28:	4801      	ldr	r0, [pc, #4]	; (8005f30 <__sfp_lock_release+0x8>)
 8005f2a:	f000 b8ae 	b.w	800608a <__retarget_lock_release_recursive>
 8005f2e:	bf00      	nop
 8005f30:	2000022d 	.word	0x2000022d

08005f34 <__sinit_lock_acquire>:
 8005f34:	4801      	ldr	r0, [pc, #4]	; (8005f3c <__sinit_lock_acquire+0x8>)
 8005f36:	f000 b8a7 	b.w	8006088 <__retarget_lock_acquire_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	2000022e 	.word	0x2000022e

08005f40 <__sinit_lock_release>:
 8005f40:	4801      	ldr	r0, [pc, #4]	; (8005f48 <__sinit_lock_release+0x8>)
 8005f42:	f000 b8a2 	b.w	800608a <__retarget_lock_release_recursive>
 8005f46:	bf00      	nop
 8005f48:	2000022e 	.word	0x2000022e

08005f4c <__sinit>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	f7ff fff0 	bl	8005f34 <__sinit_lock_acquire>
 8005f54:	69a3      	ldr	r3, [r4, #24]
 8005f56:	b11b      	cbz	r3, 8005f60 <__sinit+0x14>
 8005f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f5c:	f7ff bff0 	b.w	8005f40 <__sinit_lock_release>
 8005f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f64:	6523      	str	r3, [r4, #80]	; 0x50
 8005f66:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <__sinit+0x68>)
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <__sinit+0x6c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	bf04      	itt	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	61a3      	streq	r3, [r4, #24]
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 f820 	bl	8005fbc <__sfp>
 8005f7c:	6060      	str	r0, [r4, #4]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f81c 	bl	8005fbc <__sfp>
 8005f84:	60a0      	str	r0, [r4, #8]
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f818 	bl	8005fbc <__sfp>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60e0      	str	r0, [r4, #12]
 8005f90:	2104      	movs	r1, #4
 8005f92:	6860      	ldr	r0, [r4, #4]
 8005f94:	f7ff ff82 	bl	8005e9c <std>
 8005f98:	68a0      	ldr	r0, [r4, #8]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2109      	movs	r1, #9
 8005f9e:	f7ff ff7d 	bl	8005e9c <std>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	2112      	movs	r1, #18
 8005fa8:	f7ff ff78 	bl	8005e9c <std>
 8005fac:	2301      	movs	r3, #1
 8005fae:	61a3      	str	r3, [r4, #24]
 8005fb0:	e7d2      	b.n	8005f58 <__sinit+0xc>
 8005fb2:	bf00      	nop
 8005fb4:	08006e30 	.word	0x08006e30
 8005fb8:	08005ee5 	.word	0x08005ee5

08005fbc <__sfp>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	f7ff ffac 	bl	8005f1c <__sfp_lock_acquire>
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <__sfp+0x84>)
 8005fc6:	681e      	ldr	r6, [r3, #0]
 8005fc8:	69b3      	ldr	r3, [r6, #24]
 8005fca:	b913      	cbnz	r3, 8005fd2 <__sfp+0x16>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f7ff ffbd 	bl	8005f4c <__sinit>
 8005fd2:	3648      	adds	r6, #72	; 0x48
 8005fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	d503      	bpl.n	8005fe4 <__sfp+0x28>
 8005fdc:	6833      	ldr	r3, [r6, #0]
 8005fde:	b30b      	cbz	r3, 8006024 <__sfp+0x68>
 8005fe0:	6836      	ldr	r6, [r6, #0]
 8005fe2:	e7f7      	b.n	8005fd4 <__sfp+0x18>
 8005fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fe8:	b9d5      	cbnz	r5, 8006020 <__sfp+0x64>
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <__sfp+0x88>)
 8005fec:	60e3      	str	r3, [r4, #12]
 8005fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ff4:	f000 f847 	bl	8006086 <__retarget_lock_init_recursive>
 8005ff8:	f7ff ff96 	bl	8005f28 <__sfp_lock_release>
 8005ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006004:	6025      	str	r5, [r4, #0]
 8006006:	61a5      	str	r5, [r4, #24]
 8006008:	2208      	movs	r2, #8
 800600a:	4629      	mov	r1, r5
 800600c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006010:	f7ff ff24 	bl	8005e5c <memset>
 8006014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800601c:	4620      	mov	r0, r4
 800601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006020:	3468      	adds	r4, #104	; 0x68
 8006022:	e7d9      	b.n	8005fd8 <__sfp+0x1c>
 8006024:	2104      	movs	r1, #4
 8006026:	4638      	mov	r0, r7
 8006028:	f7ff ff62 	bl	8005ef0 <__sfmoreglue>
 800602c:	4604      	mov	r4, r0
 800602e:	6030      	str	r0, [r6, #0]
 8006030:	2800      	cmp	r0, #0
 8006032:	d1d5      	bne.n	8005fe0 <__sfp+0x24>
 8006034:	f7ff ff78 	bl	8005f28 <__sfp_lock_release>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	e7ee      	b.n	800601c <__sfp+0x60>
 800603e:	bf00      	nop
 8006040:	08006e30 	.word	0x08006e30
 8006044:	ffff0001 	.word	0xffff0001

08006048 <_fwalk_reent>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	4606      	mov	r6, r0
 800604e:	4688      	mov	r8, r1
 8006050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006054:	2700      	movs	r7, #0
 8006056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800605a:	f1b9 0901 	subs.w	r9, r9, #1
 800605e:	d505      	bpl.n	800606c <_fwalk_reent+0x24>
 8006060:	6824      	ldr	r4, [r4, #0]
 8006062:	2c00      	cmp	r4, #0
 8006064:	d1f7      	bne.n	8006056 <_fwalk_reent+0xe>
 8006066:	4638      	mov	r0, r7
 8006068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606c:	89ab      	ldrh	r3, [r5, #12]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d907      	bls.n	8006082 <_fwalk_reent+0x3a>
 8006072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006076:	3301      	adds	r3, #1
 8006078:	d003      	beq.n	8006082 <_fwalk_reent+0x3a>
 800607a:	4629      	mov	r1, r5
 800607c:	4630      	mov	r0, r6
 800607e:	47c0      	blx	r8
 8006080:	4307      	orrs	r7, r0
 8006082:	3568      	adds	r5, #104	; 0x68
 8006084:	e7e9      	b.n	800605a <_fwalk_reent+0x12>

08006086 <__retarget_lock_init_recursive>:
 8006086:	4770      	bx	lr

08006088 <__retarget_lock_acquire_recursive>:
 8006088:	4770      	bx	lr

0800608a <__retarget_lock_release_recursive>:
 800608a:	4770      	bx	lr

0800608c <sbrk_aligned>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	4e0e      	ldr	r6, [pc, #56]	; (80060c8 <sbrk_aligned+0x3c>)
 8006090:	460c      	mov	r4, r1
 8006092:	6831      	ldr	r1, [r6, #0]
 8006094:	4605      	mov	r5, r0
 8006096:	b911      	cbnz	r1, 800609e <sbrk_aligned+0x12>
 8006098:	f000 fb7a 	bl	8006790 <_sbrk_r>
 800609c:	6030      	str	r0, [r6, #0]
 800609e:	4621      	mov	r1, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fb75 	bl	8006790 <_sbrk_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d00a      	beq.n	80060c0 <sbrk_aligned+0x34>
 80060aa:	1cc4      	adds	r4, r0, #3
 80060ac:	f024 0403 	bic.w	r4, r4, #3
 80060b0:	42a0      	cmp	r0, r4
 80060b2:	d007      	beq.n	80060c4 <sbrk_aligned+0x38>
 80060b4:	1a21      	subs	r1, r4, r0
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 fb6a 	bl	8006790 <_sbrk_r>
 80060bc:	3001      	adds	r0, #1
 80060be:	d101      	bne.n	80060c4 <sbrk_aligned+0x38>
 80060c0:	f04f 34ff 	mov.w	r4, #4294967295
 80060c4:	4620      	mov	r0, r4
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	20000234 	.word	0x20000234

080060cc <_malloc_r>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	1ccd      	adds	r5, r1, #3
 80060d2:	f025 0503 	bic.w	r5, r5, #3
 80060d6:	3508      	adds	r5, #8
 80060d8:	2d0c      	cmp	r5, #12
 80060da:	bf38      	it	cc
 80060dc:	250c      	movcc	r5, #12
 80060de:	2d00      	cmp	r5, #0
 80060e0:	4607      	mov	r7, r0
 80060e2:	db01      	blt.n	80060e8 <_malloc_r+0x1c>
 80060e4:	42a9      	cmp	r1, r5
 80060e6:	d905      	bls.n	80060f4 <_malloc_r+0x28>
 80060e8:	230c      	movs	r3, #12
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	2600      	movs	r6, #0
 80060ee:	4630      	mov	r0, r6
 80060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f4:	4e2e      	ldr	r6, [pc, #184]	; (80061b0 <_malloc_r+0xe4>)
 80060f6:	f000 fdbb 	bl	8006c70 <__malloc_lock>
 80060fa:	6833      	ldr	r3, [r6, #0]
 80060fc:	461c      	mov	r4, r3
 80060fe:	bb34      	cbnz	r4, 800614e <_malloc_r+0x82>
 8006100:	4629      	mov	r1, r5
 8006102:	4638      	mov	r0, r7
 8006104:	f7ff ffc2 	bl	800608c <sbrk_aligned>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	4604      	mov	r4, r0
 800610c:	d14d      	bne.n	80061aa <_malloc_r+0xde>
 800610e:	6834      	ldr	r4, [r6, #0]
 8006110:	4626      	mov	r6, r4
 8006112:	2e00      	cmp	r6, #0
 8006114:	d140      	bne.n	8006198 <_malloc_r+0xcc>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	4631      	mov	r1, r6
 800611a:	4638      	mov	r0, r7
 800611c:	eb04 0803 	add.w	r8, r4, r3
 8006120:	f000 fb36 	bl	8006790 <_sbrk_r>
 8006124:	4580      	cmp	r8, r0
 8006126:	d13a      	bne.n	800619e <_malloc_r+0xd2>
 8006128:	6821      	ldr	r1, [r4, #0]
 800612a:	3503      	adds	r5, #3
 800612c:	1a6d      	subs	r5, r5, r1
 800612e:	f025 0503 	bic.w	r5, r5, #3
 8006132:	3508      	adds	r5, #8
 8006134:	2d0c      	cmp	r5, #12
 8006136:	bf38      	it	cc
 8006138:	250c      	movcc	r5, #12
 800613a:	4629      	mov	r1, r5
 800613c:	4638      	mov	r0, r7
 800613e:	f7ff ffa5 	bl	800608c <sbrk_aligned>
 8006142:	3001      	adds	r0, #1
 8006144:	d02b      	beq.n	800619e <_malloc_r+0xd2>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	442b      	add	r3, r5
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	e00e      	b.n	800616c <_malloc_r+0xa0>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	1b52      	subs	r2, r2, r5
 8006152:	d41e      	bmi.n	8006192 <_malloc_r+0xc6>
 8006154:	2a0b      	cmp	r2, #11
 8006156:	d916      	bls.n	8006186 <_malloc_r+0xba>
 8006158:	1961      	adds	r1, r4, r5
 800615a:	42a3      	cmp	r3, r4
 800615c:	6025      	str	r5, [r4, #0]
 800615e:	bf18      	it	ne
 8006160:	6059      	strne	r1, [r3, #4]
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	bf08      	it	eq
 8006166:	6031      	streq	r1, [r6, #0]
 8006168:	5162      	str	r2, [r4, r5]
 800616a:	604b      	str	r3, [r1, #4]
 800616c:	4638      	mov	r0, r7
 800616e:	f104 060b 	add.w	r6, r4, #11
 8006172:	f000 fd83 	bl	8006c7c <__malloc_unlock>
 8006176:	f026 0607 	bic.w	r6, r6, #7
 800617a:	1d23      	adds	r3, r4, #4
 800617c:	1af2      	subs	r2, r6, r3
 800617e:	d0b6      	beq.n	80060ee <_malloc_r+0x22>
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	50a3      	str	r3, [r4, r2]
 8006184:	e7b3      	b.n	80060ee <_malloc_r+0x22>
 8006186:	6862      	ldr	r2, [r4, #4]
 8006188:	42a3      	cmp	r3, r4
 800618a:	bf0c      	ite	eq
 800618c:	6032      	streq	r2, [r6, #0]
 800618e:	605a      	strne	r2, [r3, #4]
 8006190:	e7ec      	b.n	800616c <_malloc_r+0xa0>
 8006192:	4623      	mov	r3, r4
 8006194:	6864      	ldr	r4, [r4, #4]
 8006196:	e7b2      	b.n	80060fe <_malloc_r+0x32>
 8006198:	4634      	mov	r4, r6
 800619a:	6876      	ldr	r6, [r6, #4]
 800619c:	e7b9      	b.n	8006112 <_malloc_r+0x46>
 800619e:	230c      	movs	r3, #12
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	4638      	mov	r0, r7
 80061a4:	f000 fd6a 	bl	8006c7c <__malloc_unlock>
 80061a8:	e7a1      	b.n	80060ee <_malloc_r+0x22>
 80061aa:	6025      	str	r5, [r4, #0]
 80061ac:	e7de      	b.n	800616c <_malloc_r+0xa0>
 80061ae:	bf00      	nop
 80061b0:	20000230 	.word	0x20000230

080061b4 <__sfputc_r>:
 80061b4:	6893      	ldr	r3, [r2, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	b410      	push	{r4}
 80061bc:	6093      	str	r3, [r2, #8]
 80061be:	da08      	bge.n	80061d2 <__sfputc_r+0x1e>
 80061c0:	6994      	ldr	r4, [r2, #24]
 80061c2:	42a3      	cmp	r3, r4
 80061c4:	db01      	blt.n	80061ca <__sfputc_r+0x16>
 80061c6:	290a      	cmp	r1, #10
 80061c8:	d103      	bne.n	80061d2 <__sfputc_r+0x1e>
 80061ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ce:	f000 bb33 	b.w	8006838 <__swbuf_r>
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	1c58      	adds	r0, r3, #1
 80061d6:	6010      	str	r0, [r2, #0]
 80061d8:	7019      	strb	r1, [r3, #0]
 80061da:	4608      	mov	r0, r1
 80061dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <__sfputs_r>:
 80061e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e4:	4606      	mov	r6, r0
 80061e6:	460f      	mov	r7, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	18d5      	adds	r5, r2, r3
 80061ec:	42ac      	cmp	r4, r5
 80061ee:	d101      	bne.n	80061f4 <__sfputs_r+0x12>
 80061f0:	2000      	movs	r0, #0
 80061f2:	e007      	b.n	8006204 <__sfputs_r+0x22>
 80061f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f8:	463a      	mov	r2, r7
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7ff ffda 	bl	80061b4 <__sfputc_r>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d1f3      	bne.n	80061ec <__sfputs_r+0xa>
 8006204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006208 <_vfiprintf_r>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	460d      	mov	r5, r1
 800620e:	b09d      	sub	sp, #116	; 0x74
 8006210:	4614      	mov	r4, r2
 8006212:	4698      	mov	r8, r3
 8006214:	4606      	mov	r6, r0
 8006216:	b118      	cbz	r0, 8006220 <_vfiprintf_r+0x18>
 8006218:	6983      	ldr	r3, [r0, #24]
 800621a:	b90b      	cbnz	r3, 8006220 <_vfiprintf_r+0x18>
 800621c:	f7ff fe96 	bl	8005f4c <__sinit>
 8006220:	4b89      	ldr	r3, [pc, #548]	; (8006448 <_vfiprintf_r+0x240>)
 8006222:	429d      	cmp	r5, r3
 8006224:	d11b      	bne.n	800625e <_vfiprintf_r+0x56>
 8006226:	6875      	ldr	r5, [r6, #4]
 8006228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	d405      	bmi.n	800623a <_vfiprintf_r+0x32>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	059a      	lsls	r2, r3, #22
 8006232:	d402      	bmi.n	800623a <_vfiprintf_r+0x32>
 8006234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006236:	f7ff ff27 	bl	8006088 <__retarget_lock_acquire_recursive>
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	071b      	lsls	r3, r3, #28
 800623e:	d501      	bpl.n	8006244 <_vfiprintf_r+0x3c>
 8006240:	692b      	ldr	r3, [r5, #16]
 8006242:	b9eb      	cbnz	r3, 8006280 <_vfiprintf_r+0x78>
 8006244:	4629      	mov	r1, r5
 8006246:	4630      	mov	r0, r6
 8006248:	f000 fb5a 	bl	8006900 <__swsetup_r>
 800624c:	b1c0      	cbz	r0, 8006280 <_vfiprintf_r+0x78>
 800624e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006250:	07dc      	lsls	r4, r3, #31
 8006252:	d50e      	bpl.n	8006272 <_vfiprintf_r+0x6a>
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	b01d      	add	sp, #116	; 0x74
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	4b7b      	ldr	r3, [pc, #492]	; (800644c <_vfiprintf_r+0x244>)
 8006260:	429d      	cmp	r5, r3
 8006262:	d101      	bne.n	8006268 <_vfiprintf_r+0x60>
 8006264:	68b5      	ldr	r5, [r6, #8]
 8006266:	e7df      	b.n	8006228 <_vfiprintf_r+0x20>
 8006268:	4b79      	ldr	r3, [pc, #484]	; (8006450 <_vfiprintf_r+0x248>)
 800626a:	429d      	cmp	r5, r3
 800626c:	bf08      	it	eq
 800626e:	68f5      	ldreq	r5, [r6, #12]
 8006270:	e7da      	b.n	8006228 <_vfiprintf_r+0x20>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	0598      	lsls	r0, r3, #22
 8006276:	d4ed      	bmi.n	8006254 <_vfiprintf_r+0x4c>
 8006278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800627a:	f7ff ff06 	bl	800608a <__retarget_lock_release_recursive>
 800627e:	e7e9      	b.n	8006254 <_vfiprintf_r+0x4c>
 8006280:	2300      	movs	r3, #0
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	2320      	movs	r3, #32
 8006286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800628a:	f8cd 800c 	str.w	r8, [sp, #12]
 800628e:	2330      	movs	r3, #48	; 0x30
 8006290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006454 <_vfiprintf_r+0x24c>
 8006294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006298:	f04f 0901 	mov.w	r9, #1
 800629c:	4623      	mov	r3, r4
 800629e:	469a      	mov	sl, r3
 80062a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a4:	b10a      	cbz	r2, 80062aa <_vfiprintf_r+0xa2>
 80062a6:	2a25      	cmp	r2, #37	; 0x25
 80062a8:	d1f9      	bne.n	800629e <_vfiprintf_r+0x96>
 80062aa:	ebba 0b04 	subs.w	fp, sl, r4
 80062ae:	d00b      	beq.n	80062c8 <_vfiprintf_r+0xc0>
 80062b0:	465b      	mov	r3, fp
 80062b2:	4622      	mov	r2, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ff93 	bl	80061e2 <__sfputs_r>
 80062bc:	3001      	adds	r0, #1
 80062be:	f000 80aa 	beq.w	8006416 <_vfiprintf_r+0x20e>
 80062c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c4:	445a      	add	r2, fp
 80062c6:	9209      	str	r2, [sp, #36]	; 0x24
 80062c8:	f89a 3000 	ldrb.w	r3, [sl]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a2 	beq.w	8006416 <_vfiprintf_r+0x20e>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062dc:	f10a 0a01 	add.w	sl, sl, #1
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	9307      	str	r3, [sp, #28]
 80062e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062e8:	931a      	str	r3, [sp, #104]	; 0x68
 80062ea:	4654      	mov	r4, sl
 80062ec:	2205      	movs	r2, #5
 80062ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f2:	4858      	ldr	r0, [pc, #352]	; (8006454 <_vfiprintf_r+0x24c>)
 80062f4:	f7f9 ff8c 	bl	8000210 <memchr>
 80062f8:	9a04      	ldr	r2, [sp, #16]
 80062fa:	b9d8      	cbnz	r0, 8006334 <_vfiprintf_r+0x12c>
 80062fc:	06d1      	lsls	r1, r2, #27
 80062fe:	bf44      	itt	mi
 8006300:	2320      	movmi	r3, #32
 8006302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006306:	0713      	lsls	r3, r2, #28
 8006308:	bf44      	itt	mi
 800630a:	232b      	movmi	r3, #43	; 0x2b
 800630c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006310:	f89a 3000 	ldrb.w	r3, [sl]
 8006314:	2b2a      	cmp	r3, #42	; 0x2a
 8006316:	d015      	beq.n	8006344 <_vfiprintf_r+0x13c>
 8006318:	9a07      	ldr	r2, [sp, #28]
 800631a:	4654      	mov	r4, sl
 800631c:	2000      	movs	r0, #0
 800631e:	f04f 0c0a 	mov.w	ip, #10
 8006322:	4621      	mov	r1, r4
 8006324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006328:	3b30      	subs	r3, #48	; 0x30
 800632a:	2b09      	cmp	r3, #9
 800632c:	d94e      	bls.n	80063cc <_vfiprintf_r+0x1c4>
 800632e:	b1b0      	cbz	r0, 800635e <_vfiprintf_r+0x156>
 8006330:	9207      	str	r2, [sp, #28]
 8006332:	e014      	b.n	800635e <_vfiprintf_r+0x156>
 8006334:	eba0 0308 	sub.w	r3, r0, r8
 8006338:	fa09 f303 	lsl.w	r3, r9, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	46a2      	mov	sl, r4
 8006342:	e7d2      	b.n	80062ea <_vfiprintf_r+0xe2>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	1d19      	adds	r1, r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	9103      	str	r1, [sp, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfbb      	ittet	lt
 8006350:	425b      	neglt	r3, r3
 8006352:	f042 0202 	orrlt.w	r2, r2, #2
 8006356:	9307      	strge	r3, [sp, #28]
 8006358:	9307      	strlt	r3, [sp, #28]
 800635a:	bfb8      	it	lt
 800635c:	9204      	strlt	r2, [sp, #16]
 800635e:	7823      	ldrb	r3, [r4, #0]
 8006360:	2b2e      	cmp	r3, #46	; 0x2e
 8006362:	d10c      	bne.n	800637e <_vfiprintf_r+0x176>
 8006364:	7863      	ldrb	r3, [r4, #1]
 8006366:	2b2a      	cmp	r3, #42	; 0x2a
 8006368:	d135      	bne.n	80063d6 <_vfiprintf_r+0x1ce>
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	1d1a      	adds	r2, r3, #4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	9203      	str	r2, [sp, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	bfb8      	it	lt
 8006376:	f04f 33ff 	movlt.w	r3, #4294967295
 800637a:	3402      	adds	r4, #2
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006464 <_vfiprintf_r+0x25c>
 8006382:	7821      	ldrb	r1, [r4, #0]
 8006384:	2203      	movs	r2, #3
 8006386:	4650      	mov	r0, sl
 8006388:	f7f9 ff42 	bl	8000210 <memchr>
 800638c:	b140      	cbz	r0, 80063a0 <_vfiprintf_r+0x198>
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	eba0 000a 	sub.w	r0, r0, sl
 8006394:	fa03 f000 	lsl.w	r0, r3, r0
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	4303      	orrs	r3, r0
 800639c:	3401      	adds	r4, #1
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a4:	482c      	ldr	r0, [pc, #176]	; (8006458 <_vfiprintf_r+0x250>)
 80063a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063aa:	2206      	movs	r2, #6
 80063ac:	f7f9 ff30 	bl	8000210 <memchr>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d03f      	beq.n	8006434 <_vfiprintf_r+0x22c>
 80063b4:	4b29      	ldr	r3, [pc, #164]	; (800645c <_vfiprintf_r+0x254>)
 80063b6:	bb1b      	cbnz	r3, 8006400 <_vfiprintf_r+0x1f8>
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	3307      	adds	r3, #7
 80063bc:	f023 0307 	bic.w	r3, r3, #7
 80063c0:	3308      	adds	r3, #8
 80063c2:	9303      	str	r3, [sp, #12]
 80063c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c6:	443b      	add	r3, r7
 80063c8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ca:	e767      	b.n	800629c <_vfiprintf_r+0x94>
 80063cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d0:	460c      	mov	r4, r1
 80063d2:	2001      	movs	r0, #1
 80063d4:	e7a5      	b.n	8006322 <_vfiprintf_r+0x11a>
 80063d6:	2300      	movs	r3, #0
 80063d8:	3401      	adds	r4, #1
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	4619      	mov	r1, r3
 80063de:	f04f 0c0a 	mov.w	ip, #10
 80063e2:	4620      	mov	r0, r4
 80063e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e8:	3a30      	subs	r2, #48	; 0x30
 80063ea:	2a09      	cmp	r2, #9
 80063ec:	d903      	bls.n	80063f6 <_vfiprintf_r+0x1ee>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0c5      	beq.n	800637e <_vfiprintf_r+0x176>
 80063f2:	9105      	str	r1, [sp, #20]
 80063f4:	e7c3      	b.n	800637e <_vfiprintf_r+0x176>
 80063f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063fa:	4604      	mov	r4, r0
 80063fc:	2301      	movs	r3, #1
 80063fe:	e7f0      	b.n	80063e2 <_vfiprintf_r+0x1da>
 8006400:	ab03      	add	r3, sp, #12
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	462a      	mov	r2, r5
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <_vfiprintf_r+0x258>)
 8006408:	a904      	add	r1, sp, #16
 800640a:	4630      	mov	r0, r6
 800640c:	f3af 8000 	nop.w
 8006410:	4607      	mov	r7, r0
 8006412:	1c78      	adds	r0, r7, #1
 8006414:	d1d6      	bne.n	80063c4 <_vfiprintf_r+0x1bc>
 8006416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006418:	07d9      	lsls	r1, r3, #31
 800641a:	d405      	bmi.n	8006428 <_vfiprintf_r+0x220>
 800641c:	89ab      	ldrh	r3, [r5, #12]
 800641e:	059a      	lsls	r2, r3, #22
 8006420:	d402      	bmi.n	8006428 <_vfiprintf_r+0x220>
 8006422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006424:	f7ff fe31 	bl	800608a <__retarget_lock_release_recursive>
 8006428:	89ab      	ldrh	r3, [r5, #12]
 800642a:	065b      	lsls	r3, r3, #25
 800642c:	f53f af12 	bmi.w	8006254 <_vfiprintf_r+0x4c>
 8006430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006432:	e711      	b.n	8006258 <_vfiprintf_r+0x50>
 8006434:	ab03      	add	r3, sp, #12
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	462a      	mov	r2, r5
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <_vfiprintf_r+0x258>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	4630      	mov	r0, r6
 8006440:	f000 f880 	bl	8006544 <_printf_i>
 8006444:	e7e4      	b.n	8006410 <_vfiprintf_r+0x208>
 8006446:	bf00      	nop
 8006448:	08006e54 	.word	0x08006e54
 800644c:	08006e74 	.word	0x08006e74
 8006450:	08006e34 	.word	0x08006e34
 8006454:	08006e94 	.word	0x08006e94
 8006458:	08006e9e 	.word	0x08006e9e
 800645c:	00000000 	.word	0x00000000
 8006460:	080061e3 	.word	0x080061e3
 8006464:	08006e9a 	.word	0x08006e9a

08006468 <_printf_common>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	4699      	mov	r9, r3
 8006470:	688a      	ldr	r2, [r1, #8]
 8006472:	690b      	ldr	r3, [r1, #16]
 8006474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006478:	4293      	cmp	r3, r2
 800647a:	bfb8      	it	lt
 800647c:	4613      	movlt	r3, r2
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006484:	4607      	mov	r7, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b10a      	cbz	r2, 800648e <_printf_common+0x26>
 800648a:	3301      	adds	r3, #1
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	0699      	lsls	r1, r3, #26
 8006492:	bf42      	ittt	mi
 8006494:	6833      	ldrmi	r3, [r6, #0]
 8006496:	3302      	addmi	r3, #2
 8006498:	6033      	strmi	r3, [r6, #0]
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	f015 0506 	ands.w	r5, r5, #6
 80064a0:	d106      	bne.n	80064b0 <_printf_common+0x48>
 80064a2:	f104 0a19 	add.w	sl, r4, #25
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc26      	bgt.n	80064fe <_printf_common+0x96>
 80064b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064b4:	1e13      	subs	r3, r2, #0
 80064b6:	6822      	ldr	r2, [r4, #0]
 80064b8:	bf18      	it	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	0692      	lsls	r2, r2, #26
 80064be:	d42b      	bmi.n	8006518 <_printf_common+0xb0>
 80064c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064c4:	4649      	mov	r1, r9
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	3001      	adds	r0, #1
 80064cc:	d01e      	beq.n	800650c <_printf_common+0xa4>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	68e5      	ldr	r5, [r4, #12]
 80064d2:	6832      	ldr	r2, [r6, #0]
 80064d4:	f003 0306 	and.w	r3, r3, #6
 80064d8:	2b04      	cmp	r3, #4
 80064da:	bf08      	it	eq
 80064dc:	1aad      	subeq	r5, r5, r2
 80064de:	68a3      	ldr	r3, [r4, #8]
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	bf0c      	ite	eq
 80064e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e8:	2500      	movne	r5, #0
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bfc4      	itt	gt
 80064ee:	1a9b      	subgt	r3, r3, r2
 80064f0:	18ed      	addgt	r5, r5, r3
 80064f2:	2600      	movs	r6, #0
 80064f4:	341a      	adds	r4, #26
 80064f6:	42b5      	cmp	r5, r6
 80064f8:	d11a      	bne.n	8006530 <_printf_common+0xc8>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e008      	b.n	8006510 <_printf_common+0xa8>
 80064fe:	2301      	movs	r3, #1
 8006500:	4652      	mov	r2, sl
 8006502:	4649      	mov	r1, r9
 8006504:	4638      	mov	r0, r7
 8006506:	47c0      	blx	r8
 8006508:	3001      	adds	r0, #1
 800650a:	d103      	bne.n	8006514 <_printf_common+0xac>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	3501      	adds	r5, #1
 8006516:	e7c6      	b.n	80064a6 <_printf_common+0x3e>
 8006518:	18e1      	adds	r1, r4, r3
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	2030      	movs	r0, #48	; 0x30
 800651e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006522:	4422      	add	r2, r4
 8006524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800652c:	3302      	adds	r3, #2
 800652e:	e7c7      	b.n	80064c0 <_printf_common+0x58>
 8006530:	2301      	movs	r3, #1
 8006532:	4622      	mov	r2, r4
 8006534:	4649      	mov	r1, r9
 8006536:	4638      	mov	r0, r7
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xa4>
 800653e:	3601      	adds	r6, #1
 8006540:	e7d9      	b.n	80064f6 <_printf_common+0x8e>
	...

08006544 <_printf_i>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	7e0f      	ldrb	r7, [r1, #24]
 800654a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800654c:	2f78      	cmp	r7, #120	; 0x78
 800654e:	4691      	mov	r9, r2
 8006550:	4680      	mov	r8, r0
 8006552:	460c      	mov	r4, r1
 8006554:	469a      	mov	sl, r3
 8006556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800655a:	d807      	bhi.n	800656c <_printf_i+0x28>
 800655c:	2f62      	cmp	r7, #98	; 0x62
 800655e:	d80a      	bhi.n	8006576 <_printf_i+0x32>
 8006560:	2f00      	cmp	r7, #0
 8006562:	f000 80d8 	beq.w	8006716 <_printf_i+0x1d2>
 8006566:	2f58      	cmp	r7, #88	; 0x58
 8006568:	f000 80a3 	beq.w	80066b2 <_printf_i+0x16e>
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006574:	e03a      	b.n	80065ec <_printf_i+0xa8>
 8006576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800657a:	2b15      	cmp	r3, #21
 800657c:	d8f6      	bhi.n	800656c <_printf_i+0x28>
 800657e:	a101      	add	r1, pc, #4	; (adr r1, 8006584 <_printf_i+0x40>)
 8006580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006584:	080065dd 	.word	0x080065dd
 8006588:	080065f1 	.word	0x080065f1
 800658c:	0800656d 	.word	0x0800656d
 8006590:	0800656d 	.word	0x0800656d
 8006594:	0800656d 	.word	0x0800656d
 8006598:	0800656d 	.word	0x0800656d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800656d 	.word	0x0800656d
 80065a4:	0800656d 	.word	0x0800656d
 80065a8:	0800656d 	.word	0x0800656d
 80065ac:	0800656d 	.word	0x0800656d
 80065b0:	080066fd 	.word	0x080066fd
 80065b4:	08006621 	.word	0x08006621
 80065b8:	080066df 	.word	0x080066df
 80065bc:	0800656d 	.word	0x0800656d
 80065c0:	0800656d 	.word	0x0800656d
 80065c4:	0800671f 	.word	0x0800671f
 80065c8:	0800656d 	.word	0x0800656d
 80065cc:	08006621 	.word	0x08006621
 80065d0:	0800656d 	.word	0x0800656d
 80065d4:	0800656d 	.word	0x0800656d
 80065d8:	080066e7 	.word	0x080066e7
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	602a      	str	r2, [r5, #0]
 80065e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0a3      	b.n	8006738 <_printf_i+0x1f4>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	6829      	ldr	r1, [r5, #0]
 80065f4:	0606      	lsls	r6, r0, #24
 80065f6:	f101 0304 	add.w	r3, r1, #4
 80065fa:	d50a      	bpl.n	8006612 <_printf_i+0xce>
 80065fc:	680e      	ldr	r6, [r1, #0]
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	2e00      	cmp	r6, #0
 8006602:	da03      	bge.n	800660c <_printf_i+0xc8>
 8006604:	232d      	movs	r3, #45	; 0x2d
 8006606:	4276      	negs	r6, r6
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660c:	485e      	ldr	r0, [pc, #376]	; (8006788 <_printf_i+0x244>)
 800660e:	230a      	movs	r3, #10
 8006610:	e019      	b.n	8006646 <_printf_i+0x102>
 8006612:	680e      	ldr	r6, [r1, #0]
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800661a:	bf18      	it	ne
 800661c:	b236      	sxthne	r6, r6
 800661e:	e7ef      	b.n	8006600 <_printf_i+0xbc>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	6029      	str	r1, [r5, #0]
 8006628:	0601      	lsls	r1, r0, #24
 800662a:	d501      	bpl.n	8006630 <_printf_i+0xec>
 800662c:	681e      	ldr	r6, [r3, #0]
 800662e:	e002      	b.n	8006636 <_printf_i+0xf2>
 8006630:	0646      	lsls	r6, r0, #25
 8006632:	d5fb      	bpl.n	800662c <_printf_i+0xe8>
 8006634:	881e      	ldrh	r6, [r3, #0]
 8006636:	4854      	ldr	r0, [pc, #336]	; (8006788 <_printf_i+0x244>)
 8006638:	2f6f      	cmp	r7, #111	; 0x6f
 800663a:	bf0c      	ite	eq
 800663c:	2308      	moveq	r3, #8
 800663e:	230a      	movne	r3, #10
 8006640:	2100      	movs	r1, #0
 8006642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006646:	6865      	ldr	r5, [r4, #4]
 8006648:	60a5      	str	r5, [r4, #8]
 800664a:	2d00      	cmp	r5, #0
 800664c:	bfa2      	ittt	ge
 800664e:	6821      	ldrge	r1, [r4, #0]
 8006650:	f021 0104 	bicge.w	r1, r1, #4
 8006654:	6021      	strge	r1, [r4, #0]
 8006656:	b90e      	cbnz	r6, 800665c <_printf_i+0x118>
 8006658:	2d00      	cmp	r5, #0
 800665a:	d04d      	beq.n	80066f8 <_printf_i+0x1b4>
 800665c:	4615      	mov	r5, r2
 800665e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006662:	fb03 6711 	mls	r7, r3, r1, r6
 8006666:	5dc7      	ldrb	r7, [r0, r7]
 8006668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800666c:	4637      	mov	r7, r6
 800666e:	42bb      	cmp	r3, r7
 8006670:	460e      	mov	r6, r1
 8006672:	d9f4      	bls.n	800665e <_printf_i+0x11a>
 8006674:	2b08      	cmp	r3, #8
 8006676:	d10b      	bne.n	8006690 <_printf_i+0x14c>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07de      	lsls	r6, r3, #31
 800667c:	d508      	bpl.n	8006690 <_printf_i+0x14c>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4299      	cmp	r1, r3
 8006684:	bfde      	ittt	le
 8006686:	2330      	movle	r3, #48	; 0x30
 8006688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800668c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006690:	1b52      	subs	r2, r2, r5
 8006692:	6122      	str	r2, [r4, #16]
 8006694:	f8cd a000 	str.w	sl, [sp]
 8006698:	464b      	mov	r3, r9
 800669a:	aa03      	add	r2, sp, #12
 800669c:	4621      	mov	r1, r4
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff fee2 	bl	8006468 <_printf_common>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d14c      	bne.n	8006742 <_printf_i+0x1fe>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b004      	add	sp, #16
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	4835      	ldr	r0, [pc, #212]	; (8006788 <_printf_i+0x244>)
 80066b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066b8:	6829      	ldr	r1, [r5, #0]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80066c0:	6029      	str	r1, [r5, #0]
 80066c2:	061d      	lsls	r5, r3, #24
 80066c4:	d514      	bpl.n	80066f0 <_printf_i+0x1ac>
 80066c6:	07df      	lsls	r7, r3, #31
 80066c8:	bf44      	itt	mi
 80066ca:	f043 0320 	orrmi.w	r3, r3, #32
 80066ce:	6023      	strmi	r3, [r4, #0]
 80066d0:	b91e      	cbnz	r6, 80066da <_printf_i+0x196>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f023 0320 	bic.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	2310      	movs	r3, #16
 80066dc:	e7b0      	b.n	8006640 <_printf_i+0xfc>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	f043 0320 	orr.w	r3, r3, #32
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	2378      	movs	r3, #120	; 0x78
 80066e8:	4828      	ldr	r0, [pc, #160]	; (800678c <_printf_i+0x248>)
 80066ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ee:	e7e3      	b.n	80066b8 <_printf_i+0x174>
 80066f0:	0659      	lsls	r1, r3, #25
 80066f2:	bf48      	it	mi
 80066f4:	b2b6      	uxthmi	r6, r6
 80066f6:	e7e6      	b.n	80066c6 <_printf_i+0x182>
 80066f8:	4615      	mov	r5, r2
 80066fa:	e7bb      	b.n	8006674 <_printf_i+0x130>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	6826      	ldr	r6, [r4, #0]
 8006700:	6961      	ldr	r1, [r4, #20]
 8006702:	1d18      	adds	r0, r3, #4
 8006704:	6028      	str	r0, [r5, #0]
 8006706:	0635      	lsls	r5, r6, #24
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	d501      	bpl.n	8006710 <_printf_i+0x1cc>
 800670c:	6019      	str	r1, [r3, #0]
 800670e:	e002      	b.n	8006716 <_printf_i+0x1d2>
 8006710:	0670      	lsls	r0, r6, #25
 8006712:	d5fb      	bpl.n	800670c <_printf_i+0x1c8>
 8006714:	8019      	strh	r1, [r3, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	4615      	mov	r5, r2
 800671c:	e7ba      	b.n	8006694 <_printf_i+0x150>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	602a      	str	r2, [r5, #0]
 8006724:	681d      	ldr	r5, [r3, #0]
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	2100      	movs	r1, #0
 800672a:	4628      	mov	r0, r5
 800672c:	f7f9 fd70 	bl	8000210 <memchr>
 8006730:	b108      	cbz	r0, 8006736 <_printf_i+0x1f2>
 8006732:	1b40      	subs	r0, r0, r5
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	2300      	movs	r3, #0
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006740:	e7a8      	b.n	8006694 <_printf_i+0x150>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	462a      	mov	r2, r5
 8006746:	4649      	mov	r1, r9
 8006748:	4640      	mov	r0, r8
 800674a:	47d0      	blx	sl
 800674c:	3001      	adds	r0, #1
 800674e:	d0ab      	beq.n	80066a8 <_printf_i+0x164>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	079b      	lsls	r3, r3, #30
 8006754:	d413      	bmi.n	800677e <_printf_i+0x23a>
 8006756:	68e0      	ldr	r0, [r4, #12]
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	4298      	cmp	r0, r3
 800675c:	bfb8      	it	lt
 800675e:	4618      	movlt	r0, r3
 8006760:	e7a4      	b.n	80066ac <_printf_i+0x168>
 8006762:	2301      	movs	r3, #1
 8006764:	4632      	mov	r2, r6
 8006766:	4649      	mov	r1, r9
 8006768:	4640      	mov	r0, r8
 800676a:	47d0      	blx	sl
 800676c:	3001      	adds	r0, #1
 800676e:	d09b      	beq.n	80066a8 <_printf_i+0x164>
 8006770:	3501      	adds	r5, #1
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	9903      	ldr	r1, [sp, #12]
 8006776:	1a5b      	subs	r3, r3, r1
 8006778:	42ab      	cmp	r3, r5
 800677a:	dcf2      	bgt.n	8006762 <_printf_i+0x21e>
 800677c:	e7eb      	b.n	8006756 <_printf_i+0x212>
 800677e:	2500      	movs	r5, #0
 8006780:	f104 0619 	add.w	r6, r4, #25
 8006784:	e7f5      	b.n	8006772 <_printf_i+0x22e>
 8006786:	bf00      	nop
 8006788:	08006ea5 	.word	0x08006ea5
 800678c:	08006eb6 	.word	0x08006eb6

08006790 <_sbrk_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d06      	ldr	r5, [pc, #24]	; (80067ac <_sbrk_r+0x1c>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	f7fa fa28 	bl	8000bf0 <_sbrk>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d102      	bne.n	80067aa <_sbrk_r+0x1a>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	b103      	cbz	r3, 80067aa <_sbrk_r+0x1a>
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	20000238 	.word	0x20000238

080067b0 <__sread>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	f000 fab2 	bl	8006d20 <_read_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	bfab      	itete	ge
 80067c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067c2:	89a3      	ldrhlt	r3, [r4, #12]
 80067c4:	181b      	addge	r3, r3, r0
 80067c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067ca:	bfac      	ite	ge
 80067cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ce:	81a3      	strhlt	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__swrite>:
 80067d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d6:	461f      	mov	r7, r3
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4616      	mov	r6, r2
 80067e2:	d505      	bpl.n	80067f0 <__swrite+0x1e>
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2302      	movs	r3, #2
 80067ea:	2200      	movs	r2, #0
 80067ec:	f000 f9c8 	bl	8006b80 <_lseek_r>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006806:	f000 b869 	b.w	80068dc <_write_r>

0800680a <__sseek>:
 800680a:	b510      	push	{r4, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006812:	f000 f9b5 	bl	8006b80 <_lseek_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	bf15      	itete	ne
 800681c:	6560      	strne	r0, [r4, #84]	; 0x54
 800681e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006826:	81a3      	strheq	r3, [r4, #12]
 8006828:	bf18      	it	ne
 800682a:	81a3      	strhne	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__sclose>:
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	f000 b8d3 	b.w	80069dc <_close_r>
	...

08006838 <__swbuf_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	460e      	mov	r6, r1
 800683c:	4614      	mov	r4, r2
 800683e:	4605      	mov	r5, r0
 8006840:	b118      	cbz	r0, 800684a <__swbuf_r+0x12>
 8006842:	6983      	ldr	r3, [r0, #24]
 8006844:	b90b      	cbnz	r3, 800684a <__swbuf_r+0x12>
 8006846:	f7ff fb81 	bl	8005f4c <__sinit>
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <__swbuf_r+0x98>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d12b      	bne.n	80068a8 <__swbuf_r+0x70>
 8006850:	686c      	ldr	r4, [r5, #4]
 8006852:	69a3      	ldr	r3, [r4, #24]
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	071a      	lsls	r2, r3, #28
 800685a:	d52f      	bpl.n	80068bc <__swbuf_r+0x84>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	b36b      	cbz	r3, 80068bc <__swbuf_r+0x84>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1ac0      	subs	r0, r0, r3
 8006866:	6963      	ldr	r3, [r4, #20]
 8006868:	b2f6      	uxtb	r6, r6
 800686a:	4283      	cmp	r3, r0
 800686c:	4637      	mov	r7, r6
 800686e:	dc04      	bgt.n	800687a <__swbuf_r+0x42>
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f948 	bl	8006b08 <_fflush_r>
 8006878:	bb30      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	3b01      	subs	r3, #1
 800687e:	60a3      	str	r3, [r4, #8]
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	6022      	str	r2, [r4, #0]
 8006886:	701e      	strb	r6, [r3, #0]
 8006888:	6963      	ldr	r3, [r4, #20]
 800688a:	3001      	adds	r0, #1
 800688c:	4283      	cmp	r3, r0
 800688e:	d004      	beq.n	800689a <__swbuf_r+0x62>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	07db      	lsls	r3, r3, #31
 8006894:	d506      	bpl.n	80068a4 <__swbuf_r+0x6c>
 8006896:	2e0a      	cmp	r6, #10
 8006898:	d104      	bne.n	80068a4 <__swbuf_r+0x6c>
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f933 	bl	8006b08 <_fflush_r>
 80068a2:	b988      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 80068a4:	4638      	mov	r0, r7
 80068a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <__swbuf_r+0x9c>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <__swbuf_r+0x7a>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7cf      	b.n	8006852 <__swbuf_r+0x1a>
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <__swbuf_r+0xa0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7ca      	b.n	8006852 <__swbuf_r+0x1a>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f81e 	bl	8006900 <__swsetup_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d0cb      	beq.n	8006860 <__swbuf_r+0x28>
 80068c8:	f04f 37ff 	mov.w	r7, #4294967295
 80068cc:	e7ea      	b.n	80068a4 <__swbuf_r+0x6c>
 80068ce:	bf00      	nop
 80068d0:	08006e54 	.word	0x08006e54
 80068d4:	08006e74 	.word	0x08006e74
 80068d8:	08006e34 	.word	0x08006e34

080068dc <_write_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d07      	ldr	r5, [pc, #28]	; (80068fc <_write_r+0x20>)
 80068e0:	4604      	mov	r4, r0
 80068e2:	4608      	mov	r0, r1
 80068e4:	4611      	mov	r1, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	602a      	str	r2, [r5, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7f9 fe62 	bl	80005b4 <_write>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_write_r+0x1e>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_write_r+0x1e>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	20000238 	.word	0x20000238

08006900 <__swsetup_r>:
 8006900:	4b32      	ldr	r3, [pc, #200]	; (80069cc <__swsetup_r+0xcc>)
 8006902:	b570      	push	{r4, r5, r6, lr}
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	4606      	mov	r6, r0
 8006908:	460c      	mov	r4, r1
 800690a:	b125      	cbz	r5, 8006916 <__swsetup_r+0x16>
 800690c:	69ab      	ldr	r3, [r5, #24]
 800690e:	b913      	cbnz	r3, 8006916 <__swsetup_r+0x16>
 8006910:	4628      	mov	r0, r5
 8006912:	f7ff fb1b 	bl	8005f4c <__sinit>
 8006916:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <__swsetup_r+0xd0>)
 8006918:	429c      	cmp	r4, r3
 800691a:	d10f      	bne.n	800693c <__swsetup_r+0x3c>
 800691c:	686c      	ldr	r4, [r5, #4]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006924:	0719      	lsls	r1, r3, #28
 8006926:	d42c      	bmi.n	8006982 <__swsetup_r+0x82>
 8006928:	06dd      	lsls	r5, r3, #27
 800692a:	d411      	bmi.n	8006950 <__swsetup_r+0x50>
 800692c:	2309      	movs	r3, #9
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	e03e      	b.n	80069ba <__swsetup_r+0xba>
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <__swsetup_r+0xd4>)
 800693e:	429c      	cmp	r4, r3
 8006940:	d101      	bne.n	8006946 <__swsetup_r+0x46>
 8006942:	68ac      	ldr	r4, [r5, #8]
 8006944:	e7eb      	b.n	800691e <__swsetup_r+0x1e>
 8006946:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <__swsetup_r+0xd8>)
 8006948:	429c      	cmp	r4, r3
 800694a:	bf08      	it	eq
 800694c:	68ec      	ldreq	r4, [r5, #12]
 800694e:	e7e6      	b.n	800691e <__swsetup_r+0x1e>
 8006950:	0758      	lsls	r0, r3, #29
 8006952:	d512      	bpl.n	800697a <__swsetup_r+0x7a>
 8006954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006956:	b141      	cbz	r1, 800696a <__swsetup_r+0x6a>
 8006958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800695c:	4299      	cmp	r1, r3
 800695e:	d002      	beq.n	8006966 <__swsetup_r+0x66>
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f991 	bl	8006c88 <_free_r>
 8006966:	2300      	movs	r3, #0
 8006968:	6363      	str	r3, [r4, #52]	; 0x34
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	2300      	movs	r3, #0
 8006974:	6063      	str	r3, [r4, #4]
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f043 0308 	orr.w	r3, r3, #8
 8006980:	81a3      	strh	r3, [r4, #12]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	b94b      	cbnz	r3, 800699a <__swsetup_r+0x9a>
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800698c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006990:	d003      	beq.n	800699a <__swsetup_r+0x9a>
 8006992:	4621      	mov	r1, r4
 8006994:	4630      	mov	r0, r6
 8006996:	f000 f92b 	bl	8006bf0 <__smakebuf_r>
 800699a:	89a0      	ldrh	r0, [r4, #12]
 800699c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a0:	f010 0301 	ands.w	r3, r0, #1
 80069a4:	d00a      	beq.n	80069bc <__swsetup_r+0xbc>
 80069a6:	2300      	movs	r3, #0
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	6963      	ldr	r3, [r4, #20]
 80069ac:	425b      	negs	r3, r3
 80069ae:	61a3      	str	r3, [r4, #24]
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b943      	cbnz	r3, 80069c6 <__swsetup_r+0xc6>
 80069b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069b8:	d1ba      	bne.n	8006930 <__swsetup_r+0x30>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	0781      	lsls	r1, r0, #30
 80069be:	bf58      	it	pl
 80069c0:	6963      	ldrpl	r3, [r4, #20]
 80069c2:	60a3      	str	r3, [r4, #8]
 80069c4:	e7f4      	b.n	80069b0 <__swsetup_r+0xb0>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e7f7      	b.n	80069ba <__swsetup_r+0xba>
 80069ca:	bf00      	nop
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	08006e54 	.word	0x08006e54
 80069d4:	08006e74 	.word	0x08006e74
 80069d8:	08006e34 	.word	0x08006e34

080069dc <_close_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4d06      	ldr	r5, [pc, #24]	; (80069f8 <_close_r+0x1c>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4604      	mov	r4, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	f7fa f8cd 	bl	8000b86 <_close>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_close_r+0x1a>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_close_r+0x1a>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000238 	.word	0x20000238

080069fc <__sflush_r>:
 80069fc:	898a      	ldrh	r2, [r1, #12]
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	0710      	lsls	r0, r2, #28
 8006a06:	460c      	mov	r4, r1
 8006a08:	d458      	bmi.n	8006abc <__sflush_r+0xc0>
 8006a0a:	684b      	ldr	r3, [r1, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dc05      	bgt.n	8006a1c <__sflush_r+0x20>
 8006a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc02      	bgt.n	8006a1c <__sflush_r+0x20>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d0f9      	beq.n	8006a16 <__sflush_r+0x1a>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a28:	682f      	ldr	r7, [r5, #0]
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	d032      	beq.n	8006a94 <__sflush_r+0x98>
 8006a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	075a      	lsls	r2, r3, #29
 8006a34:	d505      	bpl.n	8006a42 <__sflush_r+0x46>
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	1ac0      	subs	r0, r0, r3
 8006a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a3c:	b10b      	cbz	r3, 8006a42 <__sflush_r+0x46>
 8006a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	2300      	movs	r3, #0
 8006a44:	4602      	mov	r2, r0
 8006a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b0      	blx	r6
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	d106      	bne.n	8006a62 <__sflush_r+0x66>
 8006a54:	6829      	ldr	r1, [r5, #0]
 8006a56:	291d      	cmp	r1, #29
 8006a58:	d82c      	bhi.n	8006ab4 <__sflush_r+0xb8>
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <__sflush_r+0x108>)
 8006a5c:	40ca      	lsrs	r2, r1
 8006a5e:	07d6      	lsls	r6, r2, #31
 8006a60:	d528      	bpl.n	8006ab4 <__sflush_r+0xb8>
 8006a62:	2200      	movs	r2, #0
 8006a64:	6062      	str	r2, [r4, #4]
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	d504      	bpl.n	8006a78 <__sflush_r+0x7c>
 8006a6e:	1c42      	adds	r2, r0, #1
 8006a70:	d101      	bne.n	8006a76 <__sflush_r+0x7a>
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	b903      	cbnz	r3, 8006a78 <__sflush_r+0x7c>
 8006a76:	6560      	str	r0, [r4, #84]	; 0x54
 8006a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a7a:	602f      	str	r7, [r5, #0]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d0ca      	beq.n	8006a16 <__sflush_r+0x1a>
 8006a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <__sflush_r+0x92>
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 f8fd 	bl	8006c88 <_free_r>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	6360      	str	r0, [r4, #52]	; 0x34
 8006a92:	e7c1      	b.n	8006a18 <__sflush_r+0x1c>
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	2301      	movs	r3, #1
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b0      	blx	r6
 8006a9c:	1c41      	adds	r1, r0, #1
 8006a9e:	d1c7      	bne.n	8006a30 <__sflush_r+0x34>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0c4      	beq.n	8006a30 <__sflush_r+0x34>
 8006aa6:	2b1d      	cmp	r3, #29
 8006aa8:	d001      	beq.n	8006aae <__sflush_r+0xb2>
 8006aaa:	2b16      	cmp	r3, #22
 8006aac:	d101      	bne.n	8006ab2 <__sflush_r+0xb6>
 8006aae:	602f      	str	r7, [r5, #0]
 8006ab0:	e7b1      	b.n	8006a16 <__sflush_r+0x1a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	e7ad      	b.n	8006a18 <__sflush_r+0x1c>
 8006abc:	690f      	ldr	r7, [r1, #16]
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	d0a9      	beq.n	8006a16 <__sflush_r+0x1a>
 8006ac2:	0793      	lsls	r3, r2, #30
 8006ac4:	680e      	ldr	r6, [r1, #0]
 8006ac6:	bf08      	it	eq
 8006ac8:	694b      	ldreq	r3, [r1, #20]
 8006aca:	600f      	str	r7, [r1, #0]
 8006acc:	bf18      	it	ne
 8006ace:	2300      	movne	r3, #0
 8006ad0:	eba6 0807 	sub.w	r8, r6, r7
 8006ad4:	608b      	str	r3, [r1, #8]
 8006ad6:	f1b8 0f00 	cmp.w	r8, #0
 8006ada:	dd9c      	ble.n	8006a16 <__sflush_r+0x1a>
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b0      	blx	r6
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	dc06      	bgt.n	8006afa <__sflush_r+0xfe>
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e78e      	b.n	8006a18 <__sflush_r+0x1c>
 8006afa:	4407      	add	r7, r0
 8006afc:	eba8 0800 	sub.w	r8, r8, r0
 8006b00:	e7e9      	b.n	8006ad6 <__sflush_r+0xda>
 8006b02:	bf00      	nop
 8006b04:	20400001 	.word	0x20400001

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6983      	ldr	r3, [r0, #24]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7ff fa15 	bl	8005f4c <__sinit>
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <_fflush_r+0x6c>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	d11b      	bne.n	8006b60 <_fflush_r+0x58>
 8006b28:	686c      	ldr	r4, [r5, #4]
 8006b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ef      	beq.n	8006b12 <_fflush_r+0xa>
 8006b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b34:	07d0      	lsls	r0, r2, #31
 8006b36:	d404      	bmi.n	8006b42 <_fflush_r+0x3a>
 8006b38:	0599      	lsls	r1, r3, #22
 8006b3a:	d402      	bmi.n	8006b42 <_fflush_r+0x3a>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3e:	f7ff faa3 	bl	8006088 <__retarget_lock_acquire_recursive>
 8006b42:	4628      	mov	r0, r5
 8006b44:	4621      	mov	r1, r4
 8006b46:	f7ff ff59 	bl	80069fc <__sflush_r>
 8006b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4c:	07da      	lsls	r2, r3, #31
 8006b4e:	4605      	mov	r5, r0
 8006b50:	d4e0      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	059b      	lsls	r3, r3, #22
 8006b56:	d4dd      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5a:	f7ff fa96 	bl	800608a <__retarget_lock_release_recursive>
 8006b5e:	e7d9      	b.n	8006b14 <_fflush_r+0xc>
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <_fflush_r+0x70>)
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d101      	bne.n	8006b6a <_fflush_r+0x62>
 8006b66:	68ac      	ldr	r4, [r5, #8]
 8006b68:	e7df      	b.n	8006b2a <_fflush_r+0x22>
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <_fflush_r+0x74>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	bf08      	it	eq
 8006b70:	68ec      	ldreq	r4, [r5, #12]
 8006b72:	e7da      	b.n	8006b2a <_fflush_r+0x22>
 8006b74:	08006e54 	.word	0x08006e54
 8006b78:	08006e74 	.word	0x08006e74
 8006b7c:	08006e34 	.word	0x08006e34

08006b80 <_lseek_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	; (8006ba0 <_lseek_r+0x20>)
 8006b84:	4604      	mov	r4, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	602a      	str	r2, [r5, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7fa f820 	bl	8000bd4 <_lseek>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_lseek_r+0x1e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_lseek_r+0x1e>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000238 	.word	0x20000238

08006ba4 <__swhatbuf_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	2900      	cmp	r1, #0
 8006bae:	b096      	sub	sp, #88	; 0x58
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	da08      	bge.n	8006bc8 <__swhatbuf_r+0x24>
 8006bb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	061a      	lsls	r2, r3, #24
 8006bc0:	d410      	bmi.n	8006be4 <__swhatbuf_r+0x40>
 8006bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc6:	e00e      	b.n	8006be6 <__swhatbuf_r+0x42>
 8006bc8:	466a      	mov	r2, sp
 8006bca:	f000 f8bb 	bl	8006d44 <_fstat_r>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	dbf1      	blt.n	8006bb6 <__swhatbuf_r+0x12>
 8006bd2:	9a01      	ldr	r2, [sp, #4]
 8006bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bdc:	425a      	negs	r2, r3
 8006bde:	415a      	adcs	r2, r3
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	e7ee      	b.n	8006bc2 <__swhatbuf_r+0x1e>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	2000      	movs	r0, #0
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	b016      	add	sp, #88	; 0x58
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bf0 <__smakebuf_r>:
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bf4:	079d      	lsls	r5, r3, #30
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	d507      	bpl.n	8006c0c <__smakebuf_r+0x1c>
 8006bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	2301      	movs	r3, #1
 8006c06:	6163      	str	r3, [r4, #20]
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	ab01      	add	r3, sp, #4
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f7ff ffc8 	bl	8006ba4 <__swhatbuf_r>
 8006c14:	9900      	ldr	r1, [sp, #0]
 8006c16:	4605      	mov	r5, r0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff fa57 	bl	80060cc <_malloc_r>
 8006c1e:	b948      	cbnz	r0, 8006c34 <__smakebuf_r+0x44>
 8006c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d4ef      	bmi.n	8006c08 <__smakebuf_r+0x18>
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7e3      	b.n	8006bfc <__smakebuf_r+0xc>
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <__smakebuf_r+0x7c>)
 8006c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	6163      	str	r3, [r4, #20]
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	6120      	str	r0, [r4, #16]
 8006c4a:	b15b      	cbz	r3, 8006c64 <__smakebuf_r+0x74>
 8006c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f889 	bl	8006d68 <_isatty_r>
 8006c56:	b128      	cbz	r0, 8006c64 <__smakebuf_r+0x74>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	89a0      	ldrh	r0, [r4, #12]
 8006c66:	4305      	orrs	r5, r0
 8006c68:	81a5      	strh	r5, [r4, #12]
 8006c6a:	e7cd      	b.n	8006c08 <__smakebuf_r+0x18>
 8006c6c:	08005ee5 	.word	0x08005ee5

08006c70 <__malloc_lock>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__malloc_lock+0x8>)
 8006c72:	f7ff ba09 	b.w	8006088 <__retarget_lock_acquire_recursive>
 8006c76:	bf00      	nop
 8006c78:	2000022c 	.word	0x2000022c

08006c7c <__malloc_unlock>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__malloc_unlock+0x8>)
 8006c7e:	f7ff ba04 	b.w	800608a <__retarget_lock_release_recursive>
 8006c82:	bf00      	nop
 8006c84:	2000022c 	.word	0x2000022c

08006c88 <_free_r>:
 8006c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	d044      	beq.n	8006d18 <_free_r+0x90>
 8006c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c92:	9001      	str	r0, [sp, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f1a1 0404 	sub.w	r4, r1, #4
 8006c9a:	bfb8      	it	lt
 8006c9c:	18e4      	addlt	r4, r4, r3
 8006c9e:	f7ff ffe7 	bl	8006c70 <__malloc_lock>
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <_free_r+0x94>)
 8006ca4:	9801      	ldr	r0, [sp, #4]
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	b933      	cbnz	r3, 8006cb8 <_free_r+0x30>
 8006caa:	6063      	str	r3, [r4, #4]
 8006cac:	6014      	str	r4, [r2, #0]
 8006cae:	b003      	add	sp, #12
 8006cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb4:	f7ff bfe2 	b.w	8006c7c <__malloc_unlock>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d908      	bls.n	8006cce <_free_r+0x46>
 8006cbc:	6825      	ldr	r5, [r4, #0]
 8006cbe:	1961      	adds	r1, r4, r5
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	bf01      	itttt	eq
 8006cc4:	6819      	ldreq	r1, [r3, #0]
 8006cc6:	685b      	ldreq	r3, [r3, #4]
 8006cc8:	1949      	addeq	r1, r1, r5
 8006cca:	6021      	streq	r1, [r4, #0]
 8006ccc:	e7ed      	b.n	8006caa <_free_r+0x22>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_free_r+0x50>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d9fa      	bls.n	8006cce <_free_r+0x46>
 8006cd8:	6811      	ldr	r1, [r2, #0]
 8006cda:	1855      	adds	r5, r2, r1
 8006cdc:	42a5      	cmp	r5, r4
 8006cde:	d10b      	bne.n	8006cf8 <_free_r+0x70>
 8006ce0:	6824      	ldr	r4, [r4, #0]
 8006ce2:	4421      	add	r1, r4
 8006ce4:	1854      	adds	r4, r2, r1
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	d1e0      	bne.n	8006cae <_free_r+0x26>
 8006cec:	681c      	ldr	r4, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	4421      	add	r1, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	e7da      	b.n	8006cae <_free_r+0x26>
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x78>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	6003      	str	r3, [r0, #0]
 8006cfe:	e7d6      	b.n	8006cae <_free_r+0x26>
 8006d00:	6825      	ldr	r5, [r4, #0]
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf04      	itt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	bf04      	itt	eq
 8006d10:	1949      	addeq	r1, r1, r5
 8006d12:	6021      	streq	r1, [r4, #0]
 8006d14:	6054      	str	r4, [r2, #4]
 8006d16:	e7ca      	b.n	8006cae <_free_r+0x26>
 8006d18:	b003      	add	sp, #12
 8006d1a:	bd30      	pop	{r4, r5, pc}
 8006d1c:	20000230 	.word	0x20000230

08006d20 <_read_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d07      	ldr	r5, [pc, #28]	; (8006d40 <_read_r+0x20>)
 8006d24:	4604      	mov	r4, r0
 8006d26:	4608      	mov	r0, r1
 8006d28:	4611      	mov	r1, r2
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	602a      	str	r2, [r5, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f7f9 ff0c 	bl	8000b4c <_read>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_read_r+0x1e>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_read_r+0x1e>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20000238 	.word	0x20000238

08006d44 <_fstat_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d07      	ldr	r5, [pc, #28]	; (8006d64 <_fstat_r+0x20>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	f7f9 ff24 	bl	8000b9e <_fstat>
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	d102      	bne.n	8006d60 <_fstat_r+0x1c>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	b103      	cbz	r3, 8006d60 <_fstat_r+0x1c>
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	bd38      	pop	{r3, r4, r5, pc}
 8006d62:	bf00      	nop
 8006d64:	20000238 	.word	0x20000238

08006d68 <_isatty_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d06      	ldr	r5, [pc, #24]	; (8006d84 <_isatty_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7f9 ff23 	bl	8000bbe <_isatty>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_isatty_r+0x1a>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_isatty_r+0x1a>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20000238 	.word	0x20000238

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
