
cann.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c8  080034c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d0  080034d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003548  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003548  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001781  00000000  00000000  00026fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00028768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00028e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a1a  00000000  00000000  000293f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c2e  00000000  00000000  0004ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c98b0  00000000  00000000  00052a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  0011c338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003434 	.word	0x08003434

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003434 	.word	0x08003434

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb0f 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f819 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8af 	bl	8000678 <MX_GPIO_Init>
  MX_CAN1_Init();
 800051a:	f000 f875 	bl	8000608 <MX_CAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAN_Send(0x10, 0, 0, 0, 0, 0, 0, 0, 0);
 800051e:	2300      	movs	r3, #0
 8000520:	9304      	str	r3, [sp, #16]
 8000522:	2300      	movs	r3, #0
 8000524:	9303      	str	r3, [sp, #12]
 8000526:	2300      	movs	r3, #0
 8000528:	9302      	str	r3, [sp, #8]
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2300      	movs	r3, #0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2010      	movs	r0, #16
 800053a:	f000 f90d 	bl	8000758 <CAN_Send>
	  HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fb68 	bl	8000c14 <HAL_Delay>
	  CAN_Send(0x10, 0, 0, 0, 0, 0, 0, 0, 0);
 8000544:	e7eb      	b.n	800051e <main+0x16>
	...

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2234      	movs	r2, #52	; 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fa66 	bl	8002a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xb8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xbc>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 ff6c 	bl	8002498 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c6:	f000 f921 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fc3f 	bl	8001e6c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005f4:	f000 f90a 	bl	800080c <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_CAN1_Init+0x68>)
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <MX_CAN1_Init+0x6c>)
 8000610:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_CAN1_Init+0x68>)
 8000614:	2204      	movs	r2, #4
 8000616:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_CAN1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_CAN1_Init+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_CAN1_Init+0x68>)
 8000626:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800062a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_CAN1_Init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_CAN1_Init+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_CAN1_Init+0x68>)
 800063a:	2201      	movs	r2, #1
 800063c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_CAN1_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_CAN1_Init+0x68>)
 8000646:	2201      	movs	r2, #1
 8000648:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_CAN1_Init+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_CAN1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_CAN1_Init+0x68>)
 8000658:	f000 fb00 	bl	8000c5c <HAL_CAN_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000662:	f000 f8d3 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Filter_Init();
 8000666:	f000 f83d 	bl	80006e4 <CAN_Filter_Init>
  /* USER CODE END CAN1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	40006400 	.word	0x40006400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_GPIO_Init+0x68>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_GPIO_Init+0x68>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_GPIO_Init+0x68>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_GPIO_Init+0x68>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <CAN_Filter_Init>:

/* USER CODE BEGIN 4 */
void CAN_Filter_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	canFilter1.FilterMaskIdHigh = 0x000 << 5; // Shift 5 bit
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <CAN_Filter_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	canFilter1.FilterIdHigh = 0x000 << 5;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <CAN_Filter_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
	canFilter1.FilterMaskIdLow = 0x000 << 5; // Shift 5 bit
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <CAN_Filter_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
	canFilter1.FilterIdLow = 0x000 << 5;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <CAN_Filter_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <CAN_Filter_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
	canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <CAN_Filter_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
	canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <CAN_Filter_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
	canFilter1.FilterBank = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <CAN_Filter_Init+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
	canFilter1.FilterActivation = ENABLE;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <CAN_Filter_Init+0x68>)
 800071a:	2201      	movs	r2, #1
 800071c:	621a      	str	r2, [r3, #32]

	/* Set options for messages; ID type(standard), Length(8 byte) */
	can1TxHeader.RTR = CAN_RTR_DATA;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <CAN_Filter_Init+0x6c>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
	can1TxHeader.IDE = CAN_ID_STD;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <CAN_Filter_Init+0x6c>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
	can1TxHeader.DLC = 8;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <CAN_Filter_Init+0x6c>)
 800072c:	2208      	movs	r2, #8
 800072e:	611a      	str	r2, [r3, #16]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <CAN_Filter_Init+0x68>)
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <CAN_Filter_Init+0x70>)
 8000734:	f000 fb8e 	bl	8000e54 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000738:	2102      	movs	r1, #2
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <CAN_Filter_Init+0x70>)
 800073c:	f000 fe9b 	bl	8001476 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <CAN_Filter_Init+0x70>)
 8000742:	f000 fc67 	bl	8001014 <HAL_CAN_Start>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000b4 	.word	0x200000b4
 8000750:	200000f8 	.word	0x200000f8
 8000754:	2000008c 	.word	0x2000008c

08000758 <CAN_Send>:

void CAN_Send(uint8_t ID, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4623      	mov	r3, r4
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	4603      	mov	r3, r0
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	460b      	mov	r3, r1
 8000770:	717b      	strb	r3, [r7, #5]
 8000772:	4613      	mov	r3, r2
 8000774:	713b      	strb	r3, [r7, #4]
	  /* Set options for messages; Address */
	  can1TxHeader.StdId = ID;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <CAN_Send+0x70>)
 800077a:	6013      	str	r3, [r2, #0]

	  can1Tx0Data[7] = data7;
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <CAN_Send+0x74>)
 800077e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000782:	71d3      	strb	r3, [r2, #7]
	  can1Tx0Data[6] = data6;
 8000784:	4a11      	ldr	r2, [pc, #68]	; (80007cc <CAN_Send+0x74>)
 8000786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800078a:	7193      	strb	r3, [r2, #6]
	  can1Tx0Data[5] = data5;
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <CAN_Send+0x74>)
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	7153      	strb	r3, [r2, #5]
	  can1Tx0Data[4] = data4;
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <CAN_Send+0x74>)
 8000796:	7f3b      	ldrb	r3, [r7, #28]
 8000798:	7113      	strb	r3, [r2, #4]
	  can1Tx0Data[3] = data3;
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <CAN_Send+0x74>)
 800079c:	7e3b      	ldrb	r3, [r7, #24]
 800079e:	70d3      	strb	r3, [r2, #3]
	  can1Tx0Data[2] = data2;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <CAN_Send+0x74>)
 80007a2:	793b      	ldrb	r3, [r7, #4]
 80007a4:	7093      	strb	r3, [r2, #2]
	  can1Tx0Data[1] = data1;
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <CAN_Send+0x74>)
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	7053      	strb	r3, [r2, #1]
	  can1Tx0Data[0] = data0;
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <CAN_Send+0x74>)
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	7013      	strb	r3, [r2, #0]

	  HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, &can1Tx0Data[0], &TxMailBox1);
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <CAN_Send+0x78>)
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <CAN_Send+0x74>)
 80007b6:	4904      	ldr	r1, [pc, #16]	; (80007c8 <CAN_Send+0x70>)
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <CAN_Send+0x7c>)
 80007ba:	f000 fc6f 	bl	800109c <HAL_CAN_AddTxMessage>
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	2000011c 	.word	0x2000011c
 80007d0:	20000118 	.word	0x20000118
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Receiving CAN Data */
/* Get CAN1 message Through FIFO0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1RxHeader, can1Rx0Data);
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007e8:	f000 fd33 	bl	8001252 <HAL_CAN_GetRxMessage>
	printf("yes\r\n");
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007ee:	f002 f991 	bl	8002b14 <puts>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000110 	.word	0x20000110
 8000800:	200000dc 	.word	0x200000dc
 8000804:	2000008c 	.word	0x2000008c
 8000808:	0800344c 	.word	0x0800344c

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000856:	2007      	movs	r0, #7
 8000858:	f001 f932 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <HAL_CAN_MspInit+0x94>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d134      	bne.n	80008f4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_CAN_MspInit+0x98>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_CAN_MspInit+0x98>)
 8000894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_CAN_MspInit+0x98>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_CAN_MspInit+0x98>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_CAN_MspInit+0x98>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_CAN_MspInit+0x98>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008d4:	2309      	movs	r3, #9
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <HAL_CAN_MspInit+0x9c>)
 80008e0:	f001 f930 	bl	8001b44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2014      	movs	r0, #20
 80008ea:	f001 f8f4 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008ee:	2014      	movs	r0, #20
 80008f0:	f001 f90d 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40006400 	.word	0x40006400
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f93e 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <CAN1_RX0_IRQHandler+0x10>)
 8000962:	f000 fdae 	bl	80014c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000008c 	.word	0x2000008c

08000970 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
	}

return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
	}
	return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f001 ffaa 	bl	80029d4 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000124 	.word	0x20000124
 8000ab4:	20000140 	.word	0x20000140

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f001 ff69 	bl	80029e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fcfb 	bl	8000508 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b20:	080034d8 	.word	0x080034d8
  ldr r2, =_sbss
 8000b24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b28:	2000013c 	.word	0x2000013c

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 ffb1 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe58 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 ffc9 	bl	8001b2a <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 ff91 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000128 	.word	0x20000128

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000128 	.word	0x20000128

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0ed      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fdf4 	bl	8000868 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0201 	orr.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c90:	f7ff ffb4 	bl	8000bfc <HAL_GetTick>
 8000c94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c96:	e012      	b.n	8000cbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c98:	f7ff ffb0 	bl	8000bfc <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b0a      	cmp	r3, #10
 8000ca4:	d90b      	bls.n	8000cbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0c5      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0e5      	beq.n	8000c98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0202 	bic.w	r2, r2, #2
 8000cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cdc:	f7ff ff8e 	bl	8000bfc <HAL_GetTick>
 8000ce0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ce2:	e012      	b.n	8000d0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce4:	f7ff ff8a 	bl	8000bfc <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d90b      	bls.n	8000d0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2205      	movs	r2, #5
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e09f      	b.n	8000e4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1e5      	bne.n	8000ce4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7e1b      	ldrb	r3, [r3, #24]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d108      	bne.n	8000d32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7e5b      	ldrb	r3, [r3, #25]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7e9b      	ldrb	r3, [r3, #26]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d108      	bne.n	8000d86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0220 	bic.w	r2, r2, #32
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7edb      	ldrb	r3, [r3, #27]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0210 	bic.w	r2, r2, #16
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0210 	orr.w	r2, r2, #16
 8000dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7f1b      	ldrb	r3, [r3, #28]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0208 	orr.w	r2, r2, #8
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0208 	bic.w	r2, r2, #8
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7f5b      	ldrb	r3, [r3, #29]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0204 	orr.w	r2, r2, #4
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0204 	bic.w	r2, r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	ea42 0103 	orr.w	r1, r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e6c:	7cfb      	ldrb	r3, [r7, #19]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d003      	beq.n	8000e7a <HAL_CAN_ConfigFilter+0x26>
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	f040 80be 	bne.w	8000ff6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e7a:	4b65      	ldr	r3, [pc, #404]	; (8001010 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e84:	f043 0201 	orr.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2201      	movs	r2, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d123      	bne.n	8000f24 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3248      	adds	r2, #72	; 0x48
 8000f04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f1a:	6979      	ldr	r1, [r7, #20]
 8000f1c:	3348      	adds	r3, #72	; 0x48
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d122      	bne.n	8000f72 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3248      	adds	r2, #72	; 0x48
 8000f52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f68:	6979      	ldr	r1, [r7, #20]
 8000f6a:	3348      	adds	r3, #72	; 0x48
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	401a      	ands	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d109      	bne.n	8000fba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fb8:	e007      	b.n	8000fca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fe8:	f023 0201 	bic.w	r2, r3, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e006      	b.n	8001004 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
  }
}
 8001004:	4618      	mov	r0, r3
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40006400 	.word	0x40006400

08001014 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d12e      	bne.n	8001086 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001040:	f7ff fddc 	bl	8000bfc <HAL_GetTick>
 8001044:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001046:	e012      	b.n	800106e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001048:	f7ff fdd8 	bl	8000bfc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b0a      	cmp	r3, #10
 8001054:	d90b      	bls.n	800106e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e012      	b.n	8001094 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e5      	bne.n	8001048 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e006      	b.n	8001094 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
  }
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ba:	7ffb      	ldrb	r3, [r7, #31]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d003      	beq.n	80010c8 <HAL_CAN_AddTxMessage+0x2c>
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	f040 80b8 	bne.w	8001238 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10a      	bne.n	80010e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80a0 	beq.w	8001228 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	0e1b      	lsrs	r3, r3, #24
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d907      	bls.n	8001108 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e09e      	b.n	8001246 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001108:	2201      	movs	r2, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	409a      	lsls	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	6809      	ldr	r1, [r1, #0]
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3318      	adds	r3, #24
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e00f      	b.n	8001156 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001140:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800114a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3318      	adds	r3, #24
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3318      	adds	r3, #24
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	7d1b      	ldrb	r3, [r3, #20]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d111      	bne.n	8001196 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3318      	adds	r3, #24
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	3304      	adds	r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3318      	adds	r3, #24
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	3304      	adds	r3, #4
 8001194:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3307      	adds	r3, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	061a      	lsls	r2, r3, #24
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3306      	adds	r3, #6
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3305      	adds	r3, #5
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4313      	orrs	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	3204      	adds	r2, #4
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	ea43 0200 	orr.w	r2, r3, r0
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3303      	adds	r3, #3
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	061a      	lsls	r2, r3, #24
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3302      	adds	r3, #2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4313      	orrs	r3, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	4610      	mov	r0, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	6811      	ldr	r1, [r2, #0]
 80011f4:	ea43 0200 	orr.w	r2, r3, r0
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001202:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3318      	adds	r3, #24
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	6811      	ldr	r1, [r2, #0]
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3318      	adds	r3, #24
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	440b      	add	r3, r1
 8001222:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e00e      	b.n	8001246 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e006      	b.n	8001246 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
  }
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001252:	b480      	push	{r7}
 8001254:	b087      	sub	sp, #28
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d003      	beq.n	8001276 <HAL_CAN_GetRxMessage+0x24>
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b02      	cmp	r3, #2
 8001272:	f040 80f3 	bne.w	800145c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10e      	bne.n	800129a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0e7      	b.n	800146a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0d8      	b.n	800146a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	331b      	adds	r3, #27
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0204 	and.w	r2, r3, #4
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10c      	bne.n	80012f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	331b      	adds	r3, #27
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	0d5b      	lsrs	r3, r3, #21
 80012e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	331b      	adds	r3, #27
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	331b      	adds	r3, #27
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4413      	add	r3, r2
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0202 	and.w	r2, r3, #2
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	331b      	adds	r3, #27
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 020f 	and.w	r2, r3, #15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	331b      	adds	r3, #27
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	3304      	adds	r3, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b2da      	uxtb	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	331b      	adds	r3, #27
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0a1a      	lsrs	r2, r3, #8
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0c1a      	lsrs	r2, r3, #16
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3302      	adds	r3, #2
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0e1a      	lsrs	r2, r3, #24
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3303      	adds	r3, #3
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0a1a      	lsrs	r2, r3, #8
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3305      	adds	r3, #5
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0c1a      	lsrs	r2, r3, #16
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3306      	adds	r3, #6
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	4413      	add	r3, r2
 8001420:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0e1a      	lsrs	r2, r3, #24
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3307      	adds	r3, #7
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0220 	orr.w	r2, r2, #32
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	e007      	b.n	8001458 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	e006      	b.n	800146a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
  }
}
 800146a:	4618      	mov	r0, r3
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d002      	beq.n	8001494 <HAL_CAN_ActivateNotification+0x1e>
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d109      	bne.n	80014a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e006      	b.n	80014b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b08a      	sub	sp, #40	; 0x28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d07c      	beq.n	8001602 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d023      	beq.n	800155a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f983 	bl	8001830 <HAL_CAN_TxMailbox0CompleteCallback>
 800152a:	e016      	b.n	800155a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
 800153e:	e00c      	b.n	800155a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	e002      	b.n	800155a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f989 	bl	800186c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d024      	beq.n	80015ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f963 	bl	8001844 <HAL_CAN_TxMailbox1CompleteCallback>
 800157e:	e016      	b.n	80015ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e00c      	b.n	80015ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	e002      	b.n	80015ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f969 	bl	8001880 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d024      	beq.n	8001602 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f943 	bl	8001858 <HAL_CAN_TxMailbox2CompleteCallback>
 80015d2:	e016      	b.n	8001602 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	e00c      	b.n	8001602 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	e002      	b.n	8001602 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f949 	bl	8001894 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2210      	movs	r2, #16
 8001624:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2208      	movs	r2, #8
 8001640:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f930 	bl	80018a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff f8b9 	bl	80007d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00c      	beq.n	800168a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001680:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2210      	movs	r2, #16
 8001688:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2208      	movs	r2, #8
 80016a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f912 	bl	80018d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f8f9 	bl	80018bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2210      	movs	r2, #16
 80016e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f8fc 	bl	80018e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2208      	movs	r2, #8
 8001706:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8f5 	bl	80018f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d07b      	beq.n	8001810 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d072      	beq.n	8001808 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177c:	2b00      	cmp	r3, #0
 800177e:	d043      	beq.n	8001808 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03e      	beq.n	8001808 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001790:	2b60      	cmp	r3, #96	; 0x60
 8001792:	d02b      	beq.n	80017ec <HAL_CAN_IRQHandler+0x32a>
 8001794:	2b60      	cmp	r3, #96	; 0x60
 8001796:	d82e      	bhi.n	80017f6 <HAL_CAN_IRQHandler+0x334>
 8001798:	2b50      	cmp	r3, #80	; 0x50
 800179a:	d022      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x320>
 800179c:	2b50      	cmp	r3, #80	; 0x50
 800179e:	d82a      	bhi.n	80017f6 <HAL_CAN_IRQHandler+0x334>
 80017a0:	2b40      	cmp	r3, #64	; 0x40
 80017a2:	d019      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x316>
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d826      	bhi.n	80017f6 <HAL_CAN_IRQHandler+0x334>
 80017a8:	2b30      	cmp	r3, #48	; 0x30
 80017aa:	d010      	beq.n	80017ce <HAL_CAN_IRQHandler+0x30c>
 80017ac:	2b30      	cmp	r3, #48	; 0x30
 80017ae:	d822      	bhi.n	80017f6 <HAL_CAN_IRQHandler+0x334>
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d002      	beq.n	80017ba <HAL_CAN_IRQHandler+0x2f8>
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d005      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017b8:	e01d      	b.n	80017f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c2:	e019      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017cc:	e014      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d6:	e00f      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e0:	e00a      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017ea:	e005      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f4:	e000      	b.n	80017f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80017f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001806:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2204      	movs	r2, #4
 800180e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f872 	bl	800190c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e165      	b.n	8001e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8154 	bne.w	8001e26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80ae 	beq.w	8001e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a5c      	ldr	r2, [pc, #368]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x308>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x314>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_GPIO_Init+0x318>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x206>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f ae96 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cc      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b65      	ldr	r3, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d044      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e067      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4934      	ldr	r1, [pc, #208]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fe4e 	bl	8000bfc <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe fe4a 	bl	8000bfc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fdae 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	08003454 	.word	0x08003454
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b0ae      	sub	sp, #184	; 0xb8
 800203e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205e:	4bcb      	ldr	r3, [pc, #812]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b0c      	cmp	r3, #12
 8002068:	f200 8206 	bhi.w	8002478 <HAL_RCC_GetSysClockFreq+0x440>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	080020a9 	.word	0x080020a9
 8002078:	08002479 	.word	0x08002479
 800207c:	08002479 	.word	0x08002479
 8002080:	08002479 	.word	0x08002479
 8002084:	080020b1 	.word	0x080020b1
 8002088:	08002479 	.word	0x08002479
 800208c:	08002479 	.word	0x08002479
 8002090:	08002479 	.word	0x08002479
 8002094:	080020b9 	.word	0x080020b9
 8002098:	08002479 	.word	0x08002479
 800209c:	08002479 	.word	0x08002479
 80020a0:	08002479 	.word	0x08002479
 80020a4:	080022a9 	.word	0x080022a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4bb9      	ldr	r3, [pc, #740]	; (8002390 <HAL_RCC_GetSysClockFreq+0x358>)
 80020aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80020ae:	e1e7      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4bb8      	ldr	r3, [pc, #736]	; (8002394 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020b6:	e1e3      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b8:	4bb4      	ldr	r3, [pc, #720]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c4:	4bb1      	ldr	r3, [pc, #708]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d071      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d0:	4bae      	ldr	r3, [pc, #696]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0159      	lsls	r1, r3, #5
 8002104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002108:	0150      	lsls	r0, r2, #5
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4621      	mov	r1, r4
 8002110:	1a51      	subs	r1, r2, r1
 8002112:	6439      	str	r1, [r7, #64]	; 0x40
 8002114:	4629      	mov	r1, r5
 8002116:	eb63 0301 	sbc.w	r3, r3, r1
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002128:	4649      	mov	r1, r9
 800212a:	018b      	lsls	r3, r1, #6
 800212c:	4641      	mov	r1, r8
 800212e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002132:	4641      	mov	r1, r8
 8002134:	018a      	lsls	r2, r1, #6
 8002136:	4641      	mov	r1, r8
 8002138:	1a51      	subs	r1, r2, r1
 800213a:	63b9      	str	r1, [r7, #56]	; 0x38
 800213c:	4649      	mov	r1, r9
 800213e:	eb63 0301 	sbc.w	r3, r3, r1
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002150:	4649      	mov	r1, r9
 8002152:	00cb      	lsls	r3, r1, #3
 8002154:	4641      	mov	r1, r8
 8002156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215a:	4641      	mov	r1, r8
 800215c:	00ca      	lsls	r2, r1, #3
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	4603      	mov	r3, r0
 8002164:	4622      	mov	r2, r4
 8002166:	189b      	adds	r3, r3, r2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	462b      	mov	r3, r5
 800216c:	460a      	mov	r2, r1
 800216e:	eb42 0303 	adc.w	r3, r2, r3
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002180:	4629      	mov	r1, r5
 8002182:	024b      	lsls	r3, r1, #9
 8002184:	4621      	mov	r1, r4
 8002186:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800218a:	4621      	mov	r1, r4
 800218c:	024a      	lsls	r2, r1, #9
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002196:	2200      	movs	r2, #0
 8002198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800219c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021a4:	f7fe f82e 	bl	8000204 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021b2:	e067      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b75      	ldr	r3, [pc, #468]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ce:	2300      	movs	r3, #0
 80021d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021d6:	4622      	mov	r2, r4
 80021d8:	462b      	mov	r3, r5
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	0159      	lsls	r1, r3, #5
 80021e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e8:	0150      	lsls	r0, r2, #5
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4621      	mov	r1, r4
 80021f0:	1a51      	subs	r1, r2, r1
 80021f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80021f4:	4629      	mov	r1, r5
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002208:	4649      	mov	r1, r9
 800220a:	018b      	lsls	r3, r1, #6
 800220c:	4641      	mov	r1, r8
 800220e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002212:	4641      	mov	r1, r8
 8002214:	018a      	lsls	r2, r1, #6
 8002216:	4641      	mov	r1, r8
 8002218:	ebb2 0a01 	subs.w	sl, r2, r1
 800221c:	4649      	mov	r1, r9
 800221e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800222e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002236:	4692      	mov	sl, r2
 8002238:	469b      	mov	fp, r3
 800223a:	4623      	mov	r3, r4
 800223c:	eb1a 0303 	adds.w	r3, sl, r3
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	462b      	mov	r3, r5
 8002244:	eb4b 0303 	adc.w	r3, fp, r3
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002256:	4629      	mov	r1, r5
 8002258:	028b      	lsls	r3, r1, #10
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002260:	4621      	mov	r1, r4
 8002262:	028a      	lsls	r2, r1, #10
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800226c:	2200      	movs	r2, #0
 800226e:	673b      	str	r3, [r7, #112]	; 0x70
 8002270:	677a      	str	r2, [r7, #116]	; 0x74
 8002272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002276:	f7fd ffc5 	bl	8000204 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4613      	mov	r3, r2
 8002280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800229a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022a6:	e0eb      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06b      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_GetSysClockFreq+0x354>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	2200      	movs	r2, #0
 80022c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80022ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	663b      	str	r3, [r7, #96]	; 0x60
 80022d4:	2300      	movs	r3, #0
 80022d6:	667b      	str	r3, [r7, #100]	; 0x64
 80022d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022dc:	4622      	mov	r2, r4
 80022de:	462b      	mov	r3, r5
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	0159      	lsls	r1, r3, #5
 80022ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ee:	0150      	lsls	r0, r2, #5
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4621      	mov	r1, r4
 80022f6:	1a51      	subs	r1, r2, r1
 80022f8:	61b9      	str	r1, [r7, #24]
 80022fa:	4629      	mov	r1, r5
 80022fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800230e:	4659      	mov	r1, fp
 8002310:	018b      	lsls	r3, r1, #6
 8002312:	4651      	mov	r1, sl
 8002314:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002318:	4651      	mov	r1, sl
 800231a:	018a      	lsls	r2, r1, #6
 800231c:	4651      	mov	r1, sl
 800231e:	ebb2 0801 	subs.w	r8, r2, r1
 8002322:	4659      	mov	r1, fp
 8002324:	eb63 0901 	sbc.w	r9, r3, r1
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800233c:	4690      	mov	r8, r2
 800233e:	4699      	mov	r9, r3
 8002340:	4623      	mov	r3, r4
 8002342:	eb18 0303 	adds.w	r3, r8, r3
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	462b      	mov	r3, r5
 800234a:	eb49 0303 	adc.w	r3, r9, r3
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800235c:	4629      	mov	r1, r5
 800235e:	024b      	lsls	r3, r1, #9
 8002360:	4621      	mov	r1, r4
 8002362:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002366:	4621      	mov	r1, r4
 8002368:	024a      	lsls	r2, r1, #9
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002372:	2200      	movs	r2, #0
 8002374:	65bb      	str	r3, [r7, #88]	; 0x58
 8002376:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800237c:	f7fd ff42 	bl	8000204 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800238a:	e065      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x420>
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_GetSysClockFreq+0x458>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	2200      	movs	r2, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	4611      	mov	r1, r2
 80023a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023a8:	653b      	str	r3, [r7, #80]	; 0x50
 80023aa:	2300      	movs	r3, #0
 80023ac:	657b      	str	r3, [r7, #84]	; 0x54
 80023ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80023b2:	4642      	mov	r2, r8
 80023b4:	464b      	mov	r3, r9
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4641      	mov	r1, r8
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	4649      	mov	r1, r9
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023e4:	4659      	mov	r1, fp
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4651      	mov	r1, sl
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4651      	mov	r1, sl
 80023f4:	1a54      	subs	r4, r2, r1
 80023f6:	4659      	mov	r1, fp
 80023f8:	eb63 0501 	sbc.w	r5, r3, r1
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	00eb      	lsls	r3, r5, #3
 8002406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240a:	00e2      	lsls	r2, r4, #3
 800240c:	4614      	mov	r4, r2
 800240e:	461d      	mov	r5, r3
 8002410:	4643      	mov	r3, r8
 8002412:	18e3      	adds	r3, r4, r3
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	464b      	mov	r3, r9
 8002418:	eb45 0303 	adc.w	r3, r5, r3
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242a:	4629      	mov	r1, r5
 800242c:	028b      	lsls	r3, r1, #10
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002434:	4621      	mov	r1, r4
 8002436:	028a      	lsls	r2, r1, #10
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002440:	2200      	movs	r2, #0
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
 8002444:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002446:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800244a:	f7fd fedb 	bl	8000204 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4613      	mov	r3, r2
 8002454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_GetSysClockFreq+0x458>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0f1b      	lsrs	r3, r3, #28
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800246a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002476:	e003      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetSysClockFreq+0x45c>)
 800247a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800247e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002484:	4618      	mov	r0, r3
 8002486:	37b8      	adds	r7, #184	; 0xb8
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	00f42400 	.word	0x00f42400

08002498 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e28d      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8083 	beq.w	80025be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b8:	4b94      	ldr	r3, [pc, #592]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d019      	beq.n	80024f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024c4:	4b91      	ldr	r3, [pc, #580]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024d0:	4b8e      	ldr	r3, [pc, #568]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024dc:	d00c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d10b      	bne.n	8002510 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b84      	ldr	r3, [pc, #528]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05b      	beq.n	80025bc <HAL_RCC_OscConfig+0x124>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d157      	bne.n	80025bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e25a      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x90>
 800251a:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7b      	ldr	r2, [pc, #492]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xcc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0xb4>
 8002532:	4b76      	ldr	r3, [pc, #472]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a75      	ldr	r2, [pc, #468]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b73      	ldr	r3, [pc, #460]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a72      	ldr	r2, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xcc>
 800254c:	4b6f      	ldr	r3, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6e      	ldr	r2, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b6c      	ldr	r3, [pc, #432]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fb46 	bl	8000bfc <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fb42 	bl	8000bfc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e21f      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xdc>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fb32 	bl	8000bfc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fb2e 	bl	8000bfc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e20b      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x104>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06f      	beq.n	80026aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ca:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d017      	beq.n	8002606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025d6:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b44      	ldr	r3, [pc, #272]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x186>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1d3      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_RCC_OscConfig+0x278>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fadb 	bl	8000bfc <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fad7 	bl	8000bfc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1b4      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_RCC_OscConfig+0x274>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4925      	ldr	r1, [pc, #148]	; (800270c <HAL_RCC_OscConfig+0x274>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x278>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe faba 	bl	8000bfc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fab6 	bl	8000bfc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e193      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d036      	beq.n	8002724 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x27c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fa9a 	bl	8000bfc <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fa96 	bl	8000bfc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e173      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x234>
 80026ea:	e01b      	b.n	8002724 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x27c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa83 	bl	8000bfc <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	e00e      	b.n	8002718 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fa:	f7fe fa7f 	bl	8000bfc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d907      	bls.n	8002718 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e15c      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
 800270c:	40023800 	.word	0x40023800
 8002710:	42470000 	.word	0x42470000
 8002714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	4b8a      	ldr	r3, [pc, #552]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ea      	bne.n	80026fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8097 	beq.w	8002860 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4b83      	ldr	r3, [pc, #524]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a7e      	ldr	r2, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b79      	ldr	r3, [pc, #484]	; (8002948 <HAL_RCC_OscConfig+0x4b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x4b0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a75      	ldr	r2, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x4b0>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277a:	f7fe fa3f 	bl	8000bfc <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002782:	f7fe fa3b 	bl	8000bfc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e118      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x4b0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x31e>
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	e01c      	b.n	80027f0 <HAL_RCC_OscConfig+0x358>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x340>
 80027be:	4b61      	ldr	r3, [pc, #388]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a60      	ldr	r2, [pc, #384]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0x358>
 80027d8:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a59      	ldr	r2, [pc, #356]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	f023 0304 	bic.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fa00 	bl	8000bfc <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe f9fc 	bl	8000bfc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0d7      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ee      	beq.n	8002800 <HAL_RCC_OscConfig+0x368>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe f9ea 	bl	8000bfc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe f9e6 	bl	8000bfc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0c1      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ee      	bne.n	800282c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80ad 	beq.w	80029c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d060      	beq.n	8002938 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d145      	bne.n	800290a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCC_OscConfig+0x4b4>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe f9ba 	bl	8000bfc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f9b6 	bl	8000bfc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e093      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	3b01      	subs	r3, #1
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	491b      	ldr	r1, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4b4>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe f98b 	bl	8000bfc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe f987 	bl	8000bfc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e064      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x452>
 8002908:	e05c      	b.n	80029c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x4b4>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe f974 	bl	8000bfc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe f970 	bl	8000bfc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04d      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x480>
 8002936:	e045      	b.n	80029c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e040      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x538>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d030      	beq.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d129      	bne.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d122      	bne.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d119      	bne.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d10f      	bne.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <__errno>:
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <__errno+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000000c 	.word	0x2000000c

080029e0 <__libc_init_array>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4d0d      	ldr	r5, [pc, #52]	; (8002a18 <__libc_init_array+0x38>)
 80029e4:	4c0d      	ldr	r4, [pc, #52]	; (8002a1c <__libc_init_array+0x3c>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	2600      	movs	r6, #0
 80029ec:	42a6      	cmp	r6, r4
 80029ee:	d109      	bne.n	8002a04 <__libc_init_array+0x24>
 80029f0:	4d0b      	ldr	r5, [pc, #44]	; (8002a20 <__libc_init_array+0x40>)
 80029f2:	4c0c      	ldr	r4, [pc, #48]	; (8002a24 <__libc_init_array+0x44>)
 80029f4:	f000 fd1e 	bl	8003434 <_init>
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	2600      	movs	r6, #0
 80029fe:	42a6      	cmp	r6, r4
 8002a00:	d105      	bne.n	8002a0e <__libc_init_array+0x2e>
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a08:	4798      	blx	r3
 8002a0a:	3601      	adds	r6, #1
 8002a0c:	e7ee      	b.n	80029ec <__libc_init_array+0xc>
 8002a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a12:	4798      	blx	r3
 8002a14:	3601      	adds	r6, #1
 8002a16:	e7f2      	b.n	80029fe <__libc_init_array+0x1e>
 8002a18:	080034d0 	.word	0x080034d0
 8002a1c:	080034d0 	.word	0x080034d0
 8002a20:	080034d0 	.word	0x080034d0
 8002a24:	080034d4 	.word	0x080034d4

08002a28 <memset>:
 8002a28:	4402      	add	r2, r0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <memset+0xa>
 8002a30:	4770      	bx	lr
 8002a32:	f803 1b01 	strb.w	r1, [r3], #1
 8002a36:	e7f9      	b.n	8002a2c <memset+0x4>

08002a38 <_puts_r>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	460e      	mov	r6, r1
 8002a3c:	4605      	mov	r5, r0
 8002a3e:	b118      	cbz	r0, 8002a48 <_puts_r+0x10>
 8002a40:	6983      	ldr	r3, [r0, #24]
 8002a42:	b90b      	cbnz	r3, 8002a48 <_puts_r+0x10>
 8002a44:	f000 fa48 	bl	8002ed8 <__sinit>
 8002a48:	69ab      	ldr	r3, [r5, #24]
 8002a4a:	68ac      	ldr	r4, [r5, #8]
 8002a4c:	b913      	cbnz	r3, 8002a54 <_puts_r+0x1c>
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f000 fa42 	bl	8002ed8 <__sinit>
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <_puts_r+0xd0>)
 8002a56:	429c      	cmp	r4, r3
 8002a58:	d120      	bne.n	8002a9c <_puts_r+0x64>
 8002a5a:	686c      	ldr	r4, [r5, #4]
 8002a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a5e:	07db      	lsls	r3, r3, #31
 8002a60:	d405      	bmi.n	8002a6e <_puts_r+0x36>
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	0598      	lsls	r0, r3, #22
 8002a66:	d402      	bmi.n	8002a6e <_puts_r+0x36>
 8002a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a6a:	f000 fad3 	bl	8003014 <__retarget_lock_acquire_recursive>
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	0719      	lsls	r1, r3, #28
 8002a72:	d51d      	bpl.n	8002ab0 <_puts_r+0x78>
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	b1db      	cbz	r3, 8002ab0 <_puts_r+0x78>
 8002a78:	3e01      	subs	r6, #1
 8002a7a:	68a3      	ldr	r3, [r4, #8]
 8002a7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60a3      	str	r3, [r4, #8]
 8002a84:	bb39      	cbnz	r1, 8002ad6 <_puts_r+0x9e>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da38      	bge.n	8002afc <_puts_r+0xc4>
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	210a      	movs	r1, #10
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f848 	bl	8002b24 <__swbuf_r>
 8002a94:	3001      	adds	r0, #1
 8002a96:	d011      	beq.n	8002abc <_puts_r+0x84>
 8002a98:	250a      	movs	r5, #10
 8002a9a:	e011      	b.n	8002ac0 <_puts_r+0x88>
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <_puts_r+0xd4>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	d101      	bne.n	8002aa6 <_puts_r+0x6e>
 8002aa2:	68ac      	ldr	r4, [r5, #8]
 8002aa4:	e7da      	b.n	8002a5c <_puts_r+0x24>
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <_puts_r+0xd8>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	bf08      	it	eq
 8002aac:	68ec      	ldreq	r4, [r5, #12]
 8002aae:	e7d5      	b.n	8002a5c <_puts_r+0x24>
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f000 f888 	bl	8002bc8 <__swsetup_r>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d0dd      	beq.n	8002a78 <_puts_r+0x40>
 8002abc:	f04f 35ff 	mov.w	r5, #4294967295
 8002ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ac2:	07da      	lsls	r2, r3, #31
 8002ac4:	d405      	bmi.n	8002ad2 <_puts_r+0x9a>
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	059b      	lsls	r3, r3, #22
 8002aca:	d402      	bmi.n	8002ad2 <_puts_r+0x9a>
 8002acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ace:	f000 faa2 	bl	8003016 <__retarget_lock_release_recursive>
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da04      	bge.n	8002ae4 <_puts_r+0xac>
 8002ada:	69a2      	ldr	r2, [r4, #24]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dc06      	bgt.n	8002aee <_puts_r+0xb6>
 8002ae0:	290a      	cmp	r1, #10
 8002ae2:	d004      	beq.n	8002aee <_puts_r+0xb6>
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	6022      	str	r2, [r4, #0]
 8002aea:	7019      	strb	r1, [r3, #0]
 8002aec:	e7c5      	b.n	8002a7a <_puts_r+0x42>
 8002aee:	4622      	mov	r2, r4
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 f817 	bl	8002b24 <__swbuf_r>
 8002af6:	3001      	adds	r0, #1
 8002af8:	d1bf      	bne.n	8002a7a <_puts_r+0x42>
 8002afa:	e7df      	b.n	8002abc <_puts_r+0x84>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	250a      	movs	r5, #10
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	6022      	str	r2, [r4, #0]
 8002b04:	701d      	strb	r5, [r3, #0]
 8002b06:	e7db      	b.n	8002ac0 <_puts_r+0x88>
 8002b08:	08003488 	.word	0x08003488
 8002b0c:	080034a8 	.word	0x080034a8
 8002b10:	08003468 	.word	0x08003468

08002b14 <puts>:
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <puts+0xc>)
 8002b16:	4601      	mov	r1, r0
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	f7ff bf8d 	b.w	8002a38 <_puts_r>
 8002b1e:	bf00      	nop
 8002b20:	2000000c 	.word	0x2000000c

08002b24 <__swbuf_r>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	460e      	mov	r6, r1
 8002b28:	4614      	mov	r4, r2
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	b118      	cbz	r0, 8002b36 <__swbuf_r+0x12>
 8002b2e:	6983      	ldr	r3, [r0, #24]
 8002b30:	b90b      	cbnz	r3, 8002b36 <__swbuf_r+0x12>
 8002b32:	f000 f9d1 	bl	8002ed8 <__sinit>
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <__swbuf_r+0x98>)
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	d12b      	bne.n	8002b94 <__swbuf_r+0x70>
 8002b3c:	686c      	ldr	r4, [r5, #4]
 8002b3e:	69a3      	ldr	r3, [r4, #24]
 8002b40:	60a3      	str	r3, [r4, #8]
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	071a      	lsls	r2, r3, #28
 8002b46:	d52f      	bpl.n	8002ba8 <__swbuf_r+0x84>
 8002b48:	6923      	ldr	r3, [r4, #16]
 8002b4a:	b36b      	cbz	r3, 8002ba8 <__swbuf_r+0x84>
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	6820      	ldr	r0, [r4, #0]
 8002b50:	1ac0      	subs	r0, r0, r3
 8002b52:	6963      	ldr	r3, [r4, #20]
 8002b54:	b2f6      	uxtb	r6, r6
 8002b56:	4283      	cmp	r3, r0
 8002b58:	4637      	mov	r7, r6
 8002b5a:	dc04      	bgt.n	8002b66 <__swbuf_r+0x42>
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 f926 	bl	8002db0 <_fflush_r>
 8002b64:	bb30      	cbnz	r0, 8002bb4 <__swbuf_r+0x90>
 8002b66:	68a3      	ldr	r3, [r4, #8]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60a3      	str	r3, [r4, #8]
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	6022      	str	r2, [r4, #0]
 8002b72:	701e      	strb	r6, [r3, #0]
 8002b74:	6963      	ldr	r3, [r4, #20]
 8002b76:	3001      	adds	r0, #1
 8002b78:	4283      	cmp	r3, r0
 8002b7a:	d004      	beq.n	8002b86 <__swbuf_r+0x62>
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	07db      	lsls	r3, r3, #31
 8002b80:	d506      	bpl.n	8002b90 <__swbuf_r+0x6c>
 8002b82:	2e0a      	cmp	r6, #10
 8002b84:	d104      	bne.n	8002b90 <__swbuf_r+0x6c>
 8002b86:	4621      	mov	r1, r4
 8002b88:	4628      	mov	r0, r5
 8002b8a:	f000 f911 	bl	8002db0 <_fflush_r>
 8002b8e:	b988      	cbnz	r0, 8002bb4 <__swbuf_r+0x90>
 8002b90:	4638      	mov	r0, r7
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <__swbuf_r+0x9c>)
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d101      	bne.n	8002b9e <__swbuf_r+0x7a>
 8002b9a:	68ac      	ldr	r4, [r5, #8]
 8002b9c:	e7cf      	b.n	8002b3e <__swbuf_r+0x1a>
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__swbuf_r+0xa0>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	bf08      	it	eq
 8002ba4:	68ec      	ldreq	r4, [r5, #12]
 8002ba6:	e7ca      	b.n	8002b3e <__swbuf_r+0x1a>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 f80c 	bl	8002bc8 <__swsetup_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0cb      	beq.n	8002b4c <__swbuf_r+0x28>
 8002bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8002bb8:	e7ea      	b.n	8002b90 <__swbuf_r+0x6c>
 8002bba:	bf00      	nop
 8002bbc:	08003488 	.word	0x08003488
 8002bc0:	080034a8 	.word	0x080034a8
 8002bc4:	08003468 	.word	0x08003468

08002bc8 <__swsetup_r>:
 8002bc8:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <__swsetup_r+0xcc>)
 8002bca:	b570      	push	{r4, r5, r6, lr}
 8002bcc:	681d      	ldr	r5, [r3, #0]
 8002bce:	4606      	mov	r6, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	b125      	cbz	r5, 8002bde <__swsetup_r+0x16>
 8002bd4:	69ab      	ldr	r3, [r5, #24]
 8002bd6:	b913      	cbnz	r3, 8002bde <__swsetup_r+0x16>
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 f97d 	bl	8002ed8 <__sinit>
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <__swsetup_r+0xd0>)
 8002be0:	429c      	cmp	r4, r3
 8002be2:	d10f      	bne.n	8002c04 <__swsetup_r+0x3c>
 8002be4:	686c      	ldr	r4, [r5, #4]
 8002be6:	89a3      	ldrh	r3, [r4, #12]
 8002be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bec:	0719      	lsls	r1, r3, #28
 8002bee:	d42c      	bmi.n	8002c4a <__swsetup_r+0x82>
 8002bf0:	06dd      	lsls	r5, r3, #27
 8002bf2:	d411      	bmi.n	8002c18 <__swsetup_r+0x50>
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	6033      	str	r3, [r6, #0]
 8002bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	e03e      	b.n	8002c82 <__swsetup_r+0xba>
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <__swsetup_r+0xd4>)
 8002c06:	429c      	cmp	r4, r3
 8002c08:	d101      	bne.n	8002c0e <__swsetup_r+0x46>
 8002c0a:	68ac      	ldr	r4, [r5, #8]
 8002c0c:	e7eb      	b.n	8002be6 <__swsetup_r+0x1e>
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <__swsetup_r+0xd8>)
 8002c10:	429c      	cmp	r4, r3
 8002c12:	bf08      	it	eq
 8002c14:	68ec      	ldreq	r4, [r5, #12]
 8002c16:	e7e6      	b.n	8002be6 <__swsetup_r+0x1e>
 8002c18:	0758      	lsls	r0, r3, #29
 8002c1a:	d512      	bpl.n	8002c42 <__swsetup_r+0x7a>
 8002c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c1e:	b141      	cbz	r1, 8002c32 <__swsetup_r+0x6a>
 8002c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c24:	4299      	cmp	r1, r3
 8002c26:	d002      	beq.n	8002c2e <__swsetup_r+0x66>
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f000 fa5b 	bl	80030e4 <_free_r>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	6363      	str	r3, [r4, #52]	; 0x34
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c38:	81a3      	strh	r3, [r4, #12]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6063      	str	r3, [r4, #4]
 8002c3e:	6923      	ldr	r3, [r4, #16]
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	b94b      	cbnz	r3, 8002c62 <__swsetup_r+0x9a>
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d003      	beq.n	8002c62 <__swsetup_r+0x9a>
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 fa01 	bl	8003064 <__smakebuf_r>
 8002c62:	89a0      	ldrh	r0, [r4, #12]
 8002c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c68:	f010 0301 	ands.w	r3, r0, #1
 8002c6c:	d00a      	beq.n	8002c84 <__swsetup_r+0xbc>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60a3      	str	r3, [r4, #8]
 8002c72:	6963      	ldr	r3, [r4, #20]
 8002c74:	425b      	negs	r3, r3
 8002c76:	61a3      	str	r3, [r4, #24]
 8002c78:	6923      	ldr	r3, [r4, #16]
 8002c7a:	b943      	cbnz	r3, 8002c8e <__swsetup_r+0xc6>
 8002c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c80:	d1ba      	bne.n	8002bf8 <__swsetup_r+0x30>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	0781      	lsls	r1, r0, #30
 8002c86:	bf58      	it	pl
 8002c88:	6963      	ldrpl	r3, [r4, #20]
 8002c8a:	60a3      	str	r3, [r4, #8]
 8002c8c:	e7f4      	b.n	8002c78 <__swsetup_r+0xb0>
 8002c8e:	2000      	movs	r0, #0
 8002c90:	e7f7      	b.n	8002c82 <__swsetup_r+0xba>
 8002c92:	bf00      	nop
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	08003488 	.word	0x08003488
 8002c9c:	080034a8 	.word	0x080034a8
 8002ca0:	08003468 	.word	0x08003468

08002ca4 <__sflush_r>:
 8002ca4:	898a      	ldrh	r2, [r1, #12]
 8002ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002caa:	4605      	mov	r5, r0
 8002cac:	0710      	lsls	r0, r2, #28
 8002cae:	460c      	mov	r4, r1
 8002cb0:	d458      	bmi.n	8002d64 <__sflush_r+0xc0>
 8002cb2:	684b      	ldr	r3, [r1, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	dc05      	bgt.n	8002cc4 <__sflush_r+0x20>
 8002cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	dc02      	bgt.n	8002cc4 <__sflush_r+0x20>
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cc6:	2e00      	cmp	r6, #0
 8002cc8:	d0f9      	beq.n	8002cbe <__sflush_r+0x1a>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cd0:	682f      	ldr	r7, [r5, #0]
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	d032      	beq.n	8002d3c <__sflush_r+0x98>
 8002cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	075a      	lsls	r2, r3, #29
 8002cdc:	d505      	bpl.n	8002cea <__sflush_r+0x46>
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	1ac0      	subs	r0, r0, r3
 8002ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ce4:	b10b      	cbz	r3, 8002cea <__sflush_r+0x46>
 8002ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ce8:	1ac0      	subs	r0, r0, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	4602      	mov	r2, r0
 8002cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cf0:	6a21      	ldr	r1, [r4, #32]
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	47b0      	blx	r6
 8002cf6:	1c43      	adds	r3, r0, #1
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	d106      	bne.n	8002d0a <__sflush_r+0x66>
 8002cfc:	6829      	ldr	r1, [r5, #0]
 8002cfe:	291d      	cmp	r1, #29
 8002d00:	d82c      	bhi.n	8002d5c <__sflush_r+0xb8>
 8002d02:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <__sflush_r+0x108>)
 8002d04:	40ca      	lsrs	r2, r1
 8002d06:	07d6      	lsls	r6, r2, #31
 8002d08:	d528      	bpl.n	8002d5c <__sflush_r+0xb8>
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	6062      	str	r2, [r4, #4]
 8002d0e:	04d9      	lsls	r1, r3, #19
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	6022      	str	r2, [r4, #0]
 8002d14:	d504      	bpl.n	8002d20 <__sflush_r+0x7c>
 8002d16:	1c42      	adds	r2, r0, #1
 8002d18:	d101      	bne.n	8002d1e <__sflush_r+0x7a>
 8002d1a:	682b      	ldr	r3, [r5, #0]
 8002d1c:	b903      	cbnz	r3, 8002d20 <__sflush_r+0x7c>
 8002d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8002d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d22:	602f      	str	r7, [r5, #0]
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d0ca      	beq.n	8002cbe <__sflush_r+0x1a>
 8002d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d2c:	4299      	cmp	r1, r3
 8002d2e:	d002      	beq.n	8002d36 <__sflush_r+0x92>
 8002d30:	4628      	mov	r0, r5
 8002d32:	f000 f9d7 	bl	80030e4 <_free_r>
 8002d36:	2000      	movs	r0, #0
 8002d38:	6360      	str	r0, [r4, #52]	; 0x34
 8002d3a:	e7c1      	b.n	8002cc0 <__sflush_r+0x1c>
 8002d3c:	6a21      	ldr	r1, [r4, #32]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4628      	mov	r0, r5
 8002d42:	47b0      	blx	r6
 8002d44:	1c41      	adds	r1, r0, #1
 8002d46:	d1c7      	bne.n	8002cd8 <__sflush_r+0x34>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0c4      	beq.n	8002cd8 <__sflush_r+0x34>
 8002d4e:	2b1d      	cmp	r3, #29
 8002d50:	d001      	beq.n	8002d56 <__sflush_r+0xb2>
 8002d52:	2b16      	cmp	r3, #22
 8002d54:	d101      	bne.n	8002d5a <__sflush_r+0xb6>
 8002d56:	602f      	str	r7, [r5, #0]
 8002d58:	e7b1      	b.n	8002cbe <__sflush_r+0x1a>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d60:	81a3      	strh	r3, [r4, #12]
 8002d62:	e7ad      	b.n	8002cc0 <__sflush_r+0x1c>
 8002d64:	690f      	ldr	r7, [r1, #16]
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	d0a9      	beq.n	8002cbe <__sflush_r+0x1a>
 8002d6a:	0793      	lsls	r3, r2, #30
 8002d6c:	680e      	ldr	r6, [r1, #0]
 8002d6e:	bf08      	it	eq
 8002d70:	694b      	ldreq	r3, [r1, #20]
 8002d72:	600f      	str	r7, [r1, #0]
 8002d74:	bf18      	it	ne
 8002d76:	2300      	movne	r3, #0
 8002d78:	eba6 0807 	sub.w	r8, r6, r7
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	f1b8 0f00 	cmp.w	r8, #0
 8002d82:	dd9c      	ble.n	8002cbe <__sflush_r+0x1a>
 8002d84:	6a21      	ldr	r1, [r4, #32]
 8002d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d88:	4643      	mov	r3, r8
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	47b0      	blx	r6
 8002d90:	2800      	cmp	r0, #0
 8002d92:	dc06      	bgt.n	8002da2 <__sflush_r+0xfe>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9a:	81a3      	strh	r3, [r4, #12]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	e78e      	b.n	8002cc0 <__sflush_r+0x1c>
 8002da2:	4407      	add	r7, r0
 8002da4:	eba8 0800 	sub.w	r8, r8, r0
 8002da8:	e7e9      	b.n	8002d7e <__sflush_r+0xda>
 8002daa:	bf00      	nop
 8002dac:	20400001 	.word	0x20400001

08002db0 <_fflush_r>:
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	690b      	ldr	r3, [r1, #16]
 8002db4:	4605      	mov	r5, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	b913      	cbnz	r3, 8002dc0 <_fflush_r+0x10>
 8002dba:	2500      	movs	r5, #0
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	b118      	cbz	r0, 8002dca <_fflush_r+0x1a>
 8002dc2:	6983      	ldr	r3, [r0, #24]
 8002dc4:	b90b      	cbnz	r3, 8002dca <_fflush_r+0x1a>
 8002dc6:	f000 f887 	bl	8002ed8 <__sinit>
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <_fflush_r+0x6c>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	d11b      	bne.n	8002e08 <_fflush_r+0x58>
 8002dd0:	686c      	ldr	r4, [r5, #4]
 8002dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ef      	beq.n	8002dba <_fflush_r+0xa>
 8002dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ddc:	07d0      	lsls	r0, r2, #31
 8002dde:	d404      	bmi.n	8002dea <_fflush_r+0x3a>
 8002de0:	0599      	lsls	r1, r3, #22
 8002de2:	d402      	bmi.n	8002dea <_fflush_r+0x3a>
 8002de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de6:	f000 f915 	bl	8003014 <__retarget_lock_acquire_recursive>
 8002dea:	4628      	mov	r0, r5
 8002dec:	4621      	mov	r1, r4
 8002dee:	f7ff ff59 	bl	8002ca4 <__sflush_r>
 8002df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002df4:	07da      	lsls	r2, r3, #31
 8002df6:	4605      	mov	r5, r0
 8002df8:	d4e0      	bmi.n	8002dbc <_fflush_r+0xc>
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	059b      	lsls	r3, r3, #22
 8002dfe:	d4dd      	bmi.n	8002dbc <_fflush_r+0xc>
 8002e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e02:	f000 f908 	bl	8003016 <__retarget_lock_release_recursive>
 8002e06:	e7d9      	b.n	8002dbc <_fflush_r+0xc>
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <_fflush_r+0x70>)
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	d101      	bne.n	8002e12 <_fflush_r+0x62>
 8002e0e:	68ac      	ldr	r4, [r5, #8]
 8002e10:	e7df      	b.n	8002dd2 <_fflush_r+0x22>
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <_fflush_r+0x74>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	bf08      	it	eq
 8002e18:	68ec      	ldreq	r4, [r5, #12]
 8002e1a:	e7da      	b.n	8002dd2 <_fflush_r+0x22>
 8002e1c:	08003488 	.word	0x08003488
 8002e20:	080034a8 	.word	0x080034a8
 8002e24:	08003468 	.word	0x08003468

08002e28 <std>:
 8002e28:	2300      	movs	r3, #0
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e36:	6083      	str	r3, [r0, #8]
 8002e38:	8181      	strh	r1, [r0, #12]
 8002e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e3c:	81c2      	strh	r2, [r0, #14]
 8002e3e:	6183      	str	r3, [r0, #24]
 8002e40:	4619      	mov	r1, r3
 8002e42:	2208      	movs	r2, #8
 8002e44:	305c      	adds	r0, #92	; 0x5c
 8002e46:	f7ff fdef 	bl	8002a28 <memset>
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <std+0x38>)
 8002e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <std+0x3c>)
 8002e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <std+0x40>)
 8002e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <std+0x44>)
 8002e58:	6224      	str	r4, [r4, #32]
 8002e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	bf00      	nop
 8002e60:	080032c5 	.word	0x080032c5
 8002e64:	080032e7 	.word	0x080032e7
 8002e68:	0800331f 	.word	0x0800331f
 8002e6c:	08003343 	.word	0x08003343

08002e70 <_cleanup_r>:
 8002e70:	4901      	ldr	r1, [pc, #4]	; (8002e78 <_cleanup_r+0x8>)
 8002e72:	f000 b8af 	b.w	8002fd4 <_fwalk_reent>
 8002e76:	bf00      	nop
 8002e78:	08002db1 	.word	0x08002db1

08002e7c <__sfmoreglue>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	2268      	movs	r2, #104	; 0x68
 8002e80:	1e4d      	subs	r5, r1, #1
 8002e82:	4355      	muls	r5, r2
 8002e84:	460e      	mov	r6, r1
 8002e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e8a:	f000 f997 	bl	80031bc <_malloc_r>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	b140      	cbz	r0, 8002ea4 <__sfmoreglue+0x28>
 8002e92:	2100      	movs	r1, #0
 8002e94:	e9c0 1600 	strd	r1, r6, [r0]
 8002e98:	300c      	adds	r0, #12
 8002e9a:	60a0      	str	r0, [r4, #8]
 8002e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ea0:	f7ff fdc2 	bl	8002a28 <memset>
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}

08002ea8 <__sfp_lock_acquire>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__sfp_lock_acquire+0x8>)
 8002eaa:	f000 b8b3 	b.w	8003014 <__retarget_lock_acquire_recursive>
 8002eae:	bf00      	nop
 8002eb0:	2000012d 	.word	0x2000012d

08002eb4 <__sfp_lock_release>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__sfp_lock_release+0x8>)
 8002eb6:	f000 b8ae 	b.w	8003016 <__retarget_lock_release_recursive>
 8002eba:	bf00      	nop
 8002ebc:	2000012d 	.word	0x2000012d

08002ec0 <__sinit_lock_acquire>:
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <__sinit_lock_acquire+0x8>)
 8002ec2:	f000 b8a7 	b.w	8003014 <__retarget_lock_acquire_recursive>
 8002ec6:	bf00      	nop
 8002ec8:	2000012e 	.word	0x2000012e

08002ecc <__sinit_lock_release>:
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <__sinit_lock_release+0x8>)
 8002ece:	f000 b8a2 	b.w	8003016 <__retarget_lock_release_recursive>
 8002ed2:	bf00      	nop
 8002ed4:	2000012e 	.word	0x2000012e

08002ed8 <__sinit>:
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
 8002edc:	f7ff fff0 	bl	8002ec0 <__sinit_lock_acquire>
 8002ee0:	69a3      	ldr	r3, [r4, #24]
 8002ee2:	b11b      	cbz	r3, 8002eec <__sinit+0x14>
 8002ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ee8:	f7ff bff0 	b.w	8002ecc <__sinit_lock_release>
 8002eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <__sinit+0x68>)
 8002ef4:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <__sinit+0x6c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	bf04      	itt	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	61a3      	streq	r3, [r4, #24]
 8002f02:	4620      	mov	r0, r4
 8002f04:	f000 f820 	bl	8002f48 <__sfp>
 8002f08:	6060      	str	r0, [r4, #4]
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f000 f81c 	bl	8002f48 <__sfp>
 8002f10:	60a0      	str	r0, [r4, #8]
 8002f12:	4620      	mov	r0, r4
 8002f14:	f000 f818 	bl	8002f48 <__sfp>
 8002f18:	2200      	movs	r2, #0
 8002f1a:	60e0      	str	r0, [r4, #12]
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	6860      	ldr	r0, [r4, #4]
 8002f20:	f7ff ff82 	bl	8002e28 <std>
 8002f24:	68a0      	ldr	r0, [r4, #8]
 8002f26:	2201      	movs	r2, #1
 8002f28:	2109      	movs	r1, #9
 8002f2a:	f7ff ff7d 	bl	8002e28 <std>
 8002f2e:	68e0      	ldr	r0, [r4, #12]
 8002f30:	2202      	movs	r2, #2
 8002f32:	2112      	movs	r1, #18
 8002f34:	f7ff ff78 	bl	8002e28 <std>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	61a3      	str	r3, [r4, #24]
 8002f3c:	e7d2      	b.n	8002ee4 <__sinit+0xc>
 8002f3e:	bf00      	nop
 8002f40:	08003464 	.word	0x08003464
 8002f44:	08002e71 	.word	0x08002e71

08002f48 <__sfp>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	4607      	mov	r7, r0
 8002f4c:	f7ff ffac 	bl	8002ea8 <__sfp_lock_acquire>
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <__sfp+0x84>)
 8002f52:	681e      	ldr	r6, [r3, #0]
 8002f54:	69b3      	ldr	r3, [r6, #24]
 8002f56:	b913      	cbnz	r3, 8002f5e <__sfp+0x16>
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7ff ffbd 	bl	8002ed8 <__sinit>
 8002f5e:	3648      	adds	r6, #72	; 0x48
 8002f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	d503      	bpl.n	8002f70 <__sfp+0x28>
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	b30b      	cbz	r3, 8002fb0 <__sfp+0x68>
 8002f6c:	6836      	ldr	r6, [r6, #0]
 8002f6e:	e7f7      	b.n	8002f60 <__sfp+0x18>
 8002f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f74:	b9d5      	cbnz	r5, 8002fac <__sfp+0x64>
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <__sfp+0x88>)
 8002f78:	60e3      	str	r3, [r4, #12]
 8002f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8002f80:	f000 f847 	bl	8003012 <__retarget_lock_init_recursive>
 8002f84:	f7ff ff96 	bl	8002eb4 <__sfp_lock_release>
 8002f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f90:	6025      	str	r5, [r4, #0]
 8002f92:	61a5      	str	r5, [r4, #24]
 8002f94:	2208      	movs	r2, #8
 8002f96:	4629      	mov	r1, r5
 8002f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f9c:	f7ff fd44 	bl	8002a28 <memset>
 8002fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fac:	3468      	adds	r4, #104	; 0x68
 8002fae:	e7d9      	b.n	8002f64 <__sfp+0x1c>
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f7ff ff62 	bl	8002e7c <__sfmoreglue>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	6030      	str	r0, [r6, #0]
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1d5      	bne.n	8002f6c <__sfp+0x24>
 8002fc0:	f7ff ff78 	bl	8002eb4 <__sfp_lock_release>
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	e7ee      	b.n	8002fa8 <__sfp+0x60>
 8002fca:	bf00      	nop
 8002fcc:	08003464 	.word	0x08003464
 8002fd0:	ffff0001 	.word	0xffff0001

08002fd4 <_fwalk_reent>:
 8002fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	4606      	mov	r6, r0
 8002fda:	4688      	mov	r8, r1
 8002fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fe0:	2700      	movs	r7, #0
 8002fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8002fea:	d505      	bpl.n	8002ff8 <_fwalk_reent+0x24>
 8002fec:	6824      	ldr	r4, [r4, #0]
 8002fee:	2c00      	cmp	r4, #0
 8002ff0:	d1f7      	bne.n	8002fe2 <_fwalk_reent+0xe>
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff8:	89ab      	ldrh	r3, [r5, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d907      	bls.n	800300e <_fwalk_reent+0x3a>
 8002ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003002:	3301      	adds	r3, #1
 8003004:	d003      	beq.n	800300e <_fwalk_reent+0x3a>
 8003006:	4629      	mov	r1, r5
 8003008:	4630      	mov	r0, r6
 800300a:	47c0      	blx	r8
 800300c:	4307      	orrs	r7, r0
 800300e:	3568      	adds	r5, #104	; 0x68
 8003010:	e7e9      	b.n	8002fe6 <_fwalk_reent+0x12>

08003012 <__retarget_lock_init_recursive>:
 8003012:	4770      	bx	lr

08003014 <__retarget_lock_acquire_recursive>:
 8003014:	4770      	bx	lr

08003016 <__retarget_lock_release_recursive>:
 8003016:	4770      	bx	lr

08003018 <__swhatbuf_r>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	460e      	mov	r6, r1
 800301c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003020:	2900      	cmp	r1, #0
 8003022:	b096      	sub	sp, #88	; 0x58
 8003024:	4614      	mov	r4, r2
 8003026:	461d      	mov	r5, r3
 8003028:	da08      	bge.n	800303c <__swhatbuf_r+0x24>
 800302a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	602a      	str	r2, [r5, #0]
 8003032:	061a      	lsls	r2, r3, #24
 8003034:	d410      	bmi.n	8003058 <__swhatbuf_r+0x40>
 8003036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303a:	e00e      	b.n	800305a <__swhatbuf_r+0x42>
 800303c:	466a      	mov	r2, sp
 800303e:	f000 f9a7 	bl	8003390 <_fstat_r>
 8003042:	2800      	cmp	r0, #0
 8003044:	dbf1      	blt.n	800302a <__swhatbuf_r+0x12>
 8003046:	9a01      	ldr	r2, [sp, #4]
 8003048:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800304c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003050:	425a      	negs	r2, r3
 8003052:	415a      	adcs	r2, r3
 8003054:	602a      	str	r2, [r5, #0]
 8003056:	e7ee      	b.n	8003036 <__swhatbuf_r+0x1e>
 8003058:	2340      	movs	r3, #64	; 0x40
 800305a:	2000      	movs	r0, #0
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	b016      	add	sp, #88	; 0x58
 8003060:	bd70      	pop	{r4, r5, r6, pc}
	...

08003064 <__smakebuf_r>:
 8003064:	898b      	ldrh	r3, [r1, #12]
 8003066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003068:	079d      	lsls	r5, r3, #30
 800306a:	4606      	mov	r6, r0
 800306c:	460c      	mov	r4, r1
 800306e:	d507      	bpl.n	8003080 <__smakebuf_r+0x1c>
 8003070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	6123      	str	r3, [r4, #16]
 8003078:	2301      	movs	r3, #1
 800307a:	6163      	str	r3, [r4, #20]
 800307c:	b002      	add	sp, #8
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	ab01      	add	r3, sp, #4
 8003082:	466a      	mov	r2, sp
 8003084:	f7ff ffc8 	bl	8003018 <__swhatbuf_r>
 8003088:	9900      	ldr	r1, [sp, #0]
 800308a:	4605      	mov	r5, r0
 800308c:	4630      	mov	r0, r6
 800308e:	f000 f895 	bl	80031bc <_malloc_r>
 8003092:	b948      	cbnz	r0, 80030a8 <__smakebuf_r+0x44>
 8003094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003098:	059a      	lsls	r2, r3, #22
 800309a:	d4ef      	bmi.n	800307c <__smakebuf_r+0x18>
 800309c:	f023 0303 	bic.w	r3, r3, #3
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	e7e3      	b.n	8003070 <__smakebuf_r+0xc>
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <__smakebuf_r+0x7c>)
 80030aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	6020      	str	r0, [r4, #0]
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	81a3      	strh	r3, [r4, #12]
 80030b6:	9b00      	ldr	r3, [sp, #0]
 80030b8:	6163      	str	r3, [r4, #20]
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	6120      	str	r0, [r4, #16]
 80030be:	b15b      	cbz	r3, 80030d8 <__smakebuf_r+0x74>
 80030c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f975 	bl	80033b4 <_isatty_r>
 80030ca:	b128      	cbz	r0, 80030d8 <__smakebuf_r+0x74>
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	81a3      	strh	r3, [r4, #12]
 80030d8:	89a0      	ldrh	r0, [r4, #12]
 80030da:	4305      	orrs	r5, r0
 80030dc:	81a5      	strh	r5, [r4, #12]
 80030de:	e7cd      	b.n	800307c <__smakebuf_r+0x18>
 80030e0:	08002e71 	.word	0x08002e71

080030e4 <_free_r>:
 80030e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030e6:	2900      	cmp	r1, #0
 80030e8:	d044      	beq.n	8003174 <_free_r+0x90>
 80030ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ee:	9001      	str	r0, [sp, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f1a1 0404 	sub.w	r4, r1, #4
 80030f6:	bfb8      	it	lt
 80030f8:	18e4      	addlt	r4, r4, r3
 80030fa:	f000 f97d 	bl	80033f8 <__malloc_lock>
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <_free_r+0x94>)
 8003100:	9801      	ldr	r0, [sp, #4]
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	b933      	cbnz	r3, 8003114 <_free_r+0x30>
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	6014      	str	r4, [r2, #0]
 800310a:	b003      	add	sp, #12
 800310c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003110:	f000 b978 	b.w	8003404 <__malloc_unlock>
 8003114:	42a3      	cmp	r3, r4
 8003116:	d908      	bls.n	800312a <_free_r+0x46>
 8003118:	6825      	ldr	r5, [r4, #0]
 800311a:	1961      	adds	r1, r4, r5
 800311c:	428b      	cmp	r3, r1
 800311e:	bf01      	itttt	eq
 8003120:	6819      	ldreq	r1, [r3, #0]
 8003122:	685b      	ldreq	r3, [r3, #4]
 8003124:	1949      	addeq	r1, r1, r5
 8003126:	6021      	streq	r1, [r4, #0]
 8003128:	e7ed      	b.n	8003106 <_free_r+0x22>
 800312a:	461a      	mov	r2, r3
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b10b      	cbz	r3, 8003134 <_free_r+0x50>
 8003130:	42a3      	cmp	r3, r4
 8003132:	d9fa      	bls.n	800312a <_free_r+0x46>
 8003134:	6811      	ldr	r1, [r2, #0]
 8003136:	1855      	adds	r5, r2, r1
 8003138:	42a5      	cmp	r5, r4
 800313a:	d10b      	bne.n	8003154 <_free_r+0x70>
 800313c:	6824      	ldr	r4, [r4, #0]
 800313e:	4421      	add	r1, r4
 8003140:	1854      	adds	r4, r2, r1
 8003142:	42a3      	cmp	r3, r4
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	d1e0      	bne.n	800310a <_free_r+0x26>
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	6053      	str	r3, [r2, #4]
 800314e:	4421      	add	r1, r4
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	e7da      	b.n	800310a <_free_r+0x26>
 8003154:	d902      	bls.n	800315c <_free_r+0x78>
 8003156:	230c      	movs	r3, #12
 8003158:	6003      	str	r3, [r0, #0]
 800315a:	e7d6      	b.n	800310a <_free_r+0x26>
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	1961      	adds	r1, r4, r5
 8003160:	428b      	cmp	r3, r1
 8003162:	bf04      	itt	eq
 8003164:	6819      	ldreq	r1, [r3, #0]
 8003166:	685b      	ldreq	r3, [r3, #4]
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	bf04      	itt	eq
 800316c:	1949      	addeq	r1, r1, r5
 800316e:	6021      	streq	r1, [r4, #0]
 8003170:	6054      	str	r4, [r2, #4]
 8003172:	e7ca      	b.n	800310a <_free_r+0x26>
 8003174:	b003      	add	sp, #12
 8003176:	bd30      	pop	{r4, r5, pc}
 8003178:	20000130 	.word	0x20000130

0800317c <sbrk_aligned>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4e0e      	ldr	r6, [pc, #56]	; (80031b8 <sbrk_aligned+0x3c>)
 8003180:	460c      	mov	r4, r1
 8003182:	6831      	ldr	r1, [r6, #0]
 8003184:	4605      	mov	r5, r0
 8003186:	b911      	cbnz	r1, 800318e <sbrk_aligned+0x12>
 8003188:	f000 f88c 	bl	80032a4 <_sbrk_r>
 800318c:	6030      	str	r0, [r6, #0]
 800318e:	4621      	mov	r1, r4
 8003190:	4628      	mov	r0, r5
 8003192:	f000 f887 	bl	80032a4 <_sbrk_r>
 8003196:	1c43      	adds	r3, r0, #1
 8003198:	d00a      	beq.n	80031b0 <sbrk_aligned+0x34>
 800319a:	1cc4      	adds	r4, r0, #3
 800319c:	f024 0403 	bic.w	r4, r4, #3
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	d007      	beq.n	80031b4 <sbrk_aligned+0x38>
 80031a4:	1a21      	subs	r1, r4, r0
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 f87c 	bl	80032a4 <_sbrk_r>
 80031ac:	3001      	adds	r0, #1
 80031ae:	d101      	bne.n	80031b4 <sbrk_aligned+0x38>
 80031b0:	f04f 34ff 	mov.w	r4, #4294967295
 80031b4:	4620      	mov	r0, r4
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	20000134 	.word	0x20000134

080031bc <_malloc_r>:
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	1ccd      	adds	r5, r1, #3
 80031c2:	f025 0503 	bic.w	r5, r5, #3
 80031c6:	3508      	adds	r5, #8
 80031c8:	2d0c      	cmp	r5, #12
 80031ca:	bf38      	it	cc
 80031cc:	250c      	movcc	r5, #12
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	4607      	mov	r7, r0
 80031d2:	db01      	blt.n	80031d8 <_malloc_r+0x1c>
 80031d4:	42a9      	cmp	r1, r5
 80031d6:	d905      	bls.n	80031e4 <_malloc_r+0x28>
 80031d8:	230c      	movs	r3, #12
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	2600      	movs	r6, #0
 80031de:	4630      	mov	r0, r6
 80031e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e4:	4e2e      	ldr	r6, [pc, #184]	; (80032a0 <_malloc_r+0xe4>)
 80031e6:	f000 f907 	bl	80033f8 <__malloc_lock>
 80031ea:	6833      	ldr	r3, [r6, #0]
 80031ec:	461c      	mov	r4, r3
 80031ee:	bb34      	cbnz	r4, 800323e <_malloc_r+0x82>
 80031f0:	4629      	mov	r1, r5
 80031f2:	4638      	mov	r0, r7
 80031f4:	f7ff ffc2 	bl	800317c <sbrk_aligned>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	4604      	mov	r4, r0
 80031fc:	d14d      	bne.n	800329a <_malloc_r+0xde>
 80031fe:	6834      	ldr	r4, [r6, #0]
 8003200:	4626      	mov	r6, r4
 8003202:	2e00      	cmp	r6, #0
 8003204:	d140      	bne.n	8003288 <_malloc_r+0xcc>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	4631      	mov	r1, r6
 800320a:	4638      	mov	r0, r7
 800320c:	eb04 0803 	add.w	r8, r4, r3
 8003210:	f000 f848 	bl	80032a4 <_sbrk_r>
 8003214:	4580      	cmp	r8, r0
 8003216:	d13a      	bne.n	800328e <_malloc_r+0xd2>
 8003218:	6821      	ldr	r1, [r4, #0]
 800321a:	3503      	adds	r5, #3
 800321c:	1a6d      	subs	r5, r5, r1
 800321e:	f025 0503 	bic.w	r5, r5, #3
 8003222:	3508      	adds	r5, #8
 8003224:	2d0c      	cmp	r5, #12
 8003226:	bf38      	it	cc
 8003228:	250c      	movcc	r5, #12
 800322a:	4629      	mov	r1, r5
 800322c:	4638      	mov	r0, r7
 800322e:	f7ff ffa5 	bl	800317c <sbrk_aligned>
 8003232:	3001      	adds	r0, #1
 8003234:	d02b      	beq.n	800328e <_malloc_r+0xd2>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	442b      	add	r3, r5
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	e00e      	b.n	800325c <_malloc_r+0xa0>
 800323e:	6822      	ldr	r2, [r4, #0]
 8003240:	1b52      	subs	r2, r2, r5
 8003242:	d41e      	bmi.n	8003282 <_malloc_r+0xc6>
 8003244:	2a0b      	cmp	r2, #11
 8003246:	d916      	bls.n	8003276 <_malloc_r+0xba>
 8003248:	1961      	adds	r1, r4, r5
 800324a:	42a3      	cmp	r3, r4
 800324c:	6025      	str	r5, [r4, #0]
 800324e:	bf18      	it	ne
 8003250:	6059      	strne	r1, [r3, #4]
 8003252:	6863      	ldr	r3, [r4, #4]
 8003254:	bf08      	it	eq
 8003256:	6031      	streq	r1, [r6, #0]
 8003258:	5162      	str	r2, [r4, r5]
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	4638      	mov	r0, r7
 800325e:	f104 060b 	add.w	r6, r4, #11
 8003262:	f000 f8cf 	bl	8003404 <__malloc_unlock>
 8003266:	f026 0607 	bic.w	r6, r6, #7
 800326a:	1d23      	adds	r3, r4, #4
 800326c:	1af2      	subs	r2, r6, r3
 800326e:	d0b6      	beq.n	80031de <_malloc_r+0x22>
 8003270:	1b9b      	subs	r3, r3, r6
 8003272:	50a3      	str	r3, [r4, r2]
 8003274:	e7b3      	b.n	80031de <_malloc_r+0x22>
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	42a3      	cmp	r3, r4
 800327a:	bf0c      	ite	eq
 800327c:	6032      	streq	r2, [r6, #0]
 800327e:	605a      	strne	r2, [r3, #4]
 8003280:	e7ec      	b.n	800325c <_malloc_r+0xa0>
 8003282:	4623      	mov	r3, r4
 8003284:	6864      	ldr	r4, [r4, #4]
 8003286:	e7b2      	b.n	80031ee <_malloc_r+0x32>
 8003288:	4634      	mov	r4, r6
 800328a:	6876      	ldr	r6, [r6, #4]
 800328c:	e7b9      	b.n	8003202 <_malloc_r+0x46>
 800328e:	230c      	movs	r3, #12
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4638      	mov	r0, r7
 8003294:	f000 f8b6 	bl	8003404 <__malloc_unlock>
 8003298:	e7a1      	b.n	80031de <_malloc_r+0x22>
 800329a:	6025      	str	r5, [r4, #0]
 800329c:	e7de      	b.n	800325c <_malloc_r+0xa0>
 800329e:	bf00      	nop
 80032a0:	20000130 	.word	0x20000130

080032a4 <_sbrk_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4d06      	ldr	r5, [pc, #24]	; (80032c0 <_sbrk_r+0x1c>)
 80032a8:	2300      	movs	r3, #0
 80032aa:	4604      	mov	r4, r0
 80032ac:	4608      	mov	r0, r1
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	f7fd fbcc 	bl	8000a4c <_sbrk>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_sbrk_r+0x1a>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b103      	cbz	r3, 80032be <_sbrk_r+0x1a>
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	20000138 	.word	0x20000138

080032c4 <__sread>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	460c      	mov	r4, r1
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	f000 f8a0 	bl	8003410 <_read_r>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	bfab      	itete	ge
 80032d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032d6:	89a3      	ldrhlt	r3, [r4, #12]
 80032d8:	181b      	addge	r3, r3, r0
 80032da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032de:	bfac      	ite	ge
 80032e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80032e2:	81a3      	strhlt	r3, [r4, #12]
 80032e4:	bd10      	pop	{r4, pc}

080032e6 <__swrite>:
 80032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	461f      	mov	r7, r3
 80032ec:	898b      	ldrh	r3, [r1, #12]
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	4605      	mov	r5, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4616      	mov	r6, r2
 80032f6:	d505      	bpl.n	8003304 <__swrite+0x1e>
 80032f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fc:	2302      	movs	r3, #2
 80032fe:	2200      	movs	r2, #0
 8003300:	f000 f868 	bl	80033d4 <_lseek_r>
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	4632      	mov	r2, r6
 8003312:	463b      	mov	r3, r7
 8003314:	4628      	mov	r0, r5
 8003316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800331a:	f000 b817 	b.w	800334c <_write_r>

0800331e <__sseek>:
 800331e:	b510      	push	{r4, lr}
 8003320:	460c      	mov	r4, r1
 8003322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003326:	f000 f855 	bl	80033d4 <_lseek_r>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	bf15      	itete	ne
 8003330:	6560      	strne	r0, [r4, #84]	; 0x54
 8003332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800333a:	81a3      	strheq	r3, [r4, #12]
 800333c:	bf18      	it	ne
 800333e:	81a3      	strhne	r3, [r4, #12]
 8003340:	bd10      	pop	{r4, pc}

08003342 <__sclose>:
 8003342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003346:	f000 b813 	b.w	8003370 <_close_r>
	...

0800334c <_write_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4d07      	ldr	r5, [pc, #28]	; (800336c <_write_r+0x20>)
 8003350:	4604      	mov	r4, r0
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	2200      	movs	r2, #0
 8003358:	602a      	str	r2, [r5, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f7fd fb25 	bl	80009aa <_write>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_write_r+0x1e>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_write_r+0x1e>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	20000138 	.word	0x20000138

08003370 <_close_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d06      	ldr	r5, [pc, #24]	; (800338c <_close_r+0x1c>)
 8003374:	2300      	movs	r3, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd fb31 	bl	80009e2 <_close>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_close_r+0x1a>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_close_r+0x1a>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000138 	.word	0x20000138

08003390 <_fstat_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4d07      	ldr	r5, [pc, #28]	; (80033b0 <_fstat_r+0x20>)
 8003394:	2300      	movs	r3, #0
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	602b      	str	r3, [r5, #0]
 800339e:	f7fd fb2c 	bl	80009fa <_fstat>
 80033a2:	1c43      	adds	r3, r0, #1
 80033a4:	d102      	bne.n	80033ac <_fstat_r+0x1c>
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	b103      	cbz	r3, 80033ac <_fstat_r+0x1c>
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	bd38      	pop	{r3, r4, r5, pc}
 80033ae:	bf00      	nop
 80033b0:	20000138 	.word	0x20000138

080033b4 <_isatty_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d06      	ldr	r5, [pc, #24]	; (80033d0 <_isatty_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	602b      	str	r3, [r5, #0]
 80033c0:	f7fd fb2b 	bl	8000a1a <_isatty>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_isatty_r+0x1a>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_isatty_r+0x1a>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000138 	.word	0x20000138

080033d4 <_lseek_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4d07      	ldr	r5, [pc, #28]	; (80033f4 <_lseek_r+0x20>)
 80033d8:	4604      	mov	r4, r0
 80033da:	4608      	mov	r0, r1
 80033dc:	4611      	mov	r1, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	602a      	str	r2, [r5, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7fd fb24 	bl	8000a30 <_lseek>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_lseek_r+0x1e>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_lseek_r+0x1e>
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	20000138 	.word	0x20000138

080033f8 <__malloc_lock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <__malloc_lock+0x8>)
 80033fa:	f7ff be0b 	b.w	8003014 <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	2000012c 	.word	0x2000012c

08003404 <__malloc_unlock>:
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <__malloc_unlock+0x8>)
 8003406:	f7ff be06 	b.w	8003016 <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	2000012c 	.word	0x2000012c

08003410 <_read_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4d07      	ldr	r5, [pc, #28]	; (8003430 <_read_r+0x20>)
 8003414:	4604      	mov	r4, r0
 8003416:	4608      	mov	r0, r1
 8003418:	4611      	mov	r1, r2
 800341a:	2200      	movs	r2, #0
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f7fd faa6 	bl	8000970 <_read>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_read_r+0x1e>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_read_r+0x1e>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	20000138 	.word	0x20000138

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
